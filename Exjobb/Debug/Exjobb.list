
Exjobb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ed4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b48  08011f90  08011f90  00021f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ad8  08012ad8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08012ad8  08012ad8  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012ad8  08012ad8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ad8  08012ad8  00022ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012adc  08012adc  00022adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012ae0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001e4  08012cc4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08012cc4  000305d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b115  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003026  00000000  00000000  0004b321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0004e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0004f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ff  00000000  00000000  00050990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019720  00000000  00000000  0006a18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b837  00000000  00000000  000838af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011f0e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fd0  00000000  00000000  0011f13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08011f74 	.word	0x08011f74

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	08011f74 	.word	0x08011f74

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	1c10      	adds	r0, r2, #0
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	1c19      	adds	r1, r3, #0
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe33 	bl	80020a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd7d 	bl	8001f44 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe25 	bl	80020a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe1b 	bl	80020a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fd9f 	bl	8001fbc <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fd95 	bl	8001fbc <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	1c08      	adds	r0, r1, #0
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb67 	bl	8000b7c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 faeb 	bl	8000a94 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb59 	bl	8000b7c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb4f 	bl	8000b7c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf9 	bl	8000ae4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 faef 	bl	8000ae4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	; 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fe55 	bl	80011d4 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fc87 	bl	8000e44 <__aeabi_fsub>
 8000536:	f000 fe4d 	bl	80011d4 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4646      	mov	r6, r8
 8000548:	46d6      	mov	lr, sl
 800054a:	464f      	mov	r7, r9
 800054c:	024d      	lsls	r5, r1, #9
 800054e:	0242      	lsls	r2, r0, #9
 8000550:	b5c0      	push	{r6, r7, lr}
 8000552:	0a52      	lsrs	r2, r2, #9
 8000554:	0a6e      	lsrs	r6, r5, #9
 8000556:	0047      	lsls	r7, r0, #1
 8000558:	46b0      	mov	r8, r6
 800055a:	0e3f      	lsrs	r7, r7, #24
 800055c:	004e      	lsls	r6, r1, #1
 800055e:	0fc4      	lsrs	r4, r0, #31
 8000560:	00d0      	lsls	r0, r2, #3
 8000562:	4694      	mov	ip, r2
 8000564:	003b      	movs	r3, r7
 8000566:	4682      	mov	sl, r0
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09ad      	lsrs	r5, r5, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d06d      	beq.n	800064e <__aeabi_fadd+0x10a>
 8000572:	1bb8      	subs	r0, r7, r6
 8000574:	4681      	mov	r9, r0
 8000576:	2800      	cmp	r0, #0
 8000578:	dd4d      	ble.n	8000616 <__aeabi_fadd+0xd2>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x3c>
 800057e:	e088      	b.n	8000692 <__aeabi_fadd+0x14e>
 8000580:	2fff      	cmp	r7, #255	; 0xff
 8000582:	d05a      	beq.n	800063a <__aeabi_fadd+0xf6>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	04db      	lsls	r3, r3, #19
 8000588:	431d      	orrs	r5, r3
 800058a:	464b      	mov	r3, r9
 800058c:	2201      	movs	r2, #1
 800058e:	2b1b      	cmp	r3, #27
 8000590:	dc0a      	bgt.n	80005a8 <__aeabi_fadd+0x64>
 8000592:	002b      	movs	r3, r5
 8000594:	464a      	mov	r2, r9
 8000596:	4649      	mov	r1, r9
 8000598:	40d3      	lsrs	r3, r2
 800059a:	2220      	movs	r2, #32
 800059c:	1a52      	subs	r2, r2, r1
 800059e:	4095      	lsls	r5, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	1e55      	subs	r5, r2, #1
 80005a4:	41aa      	sbcs	r2, r5
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4653      	mov	r3, sl
 80005aa:	1a9a      	subs	r2, r3, r2
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e0b9      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	0996      	lsrs	r6, r2, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fd5a 	bl	8003070 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4287      	cmp	r7, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x82>
 80005c4:	e0d4      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005c6:	0033      	movs	r3, r6
 80005c8:	1bc7      	subs	r7, r0, r7
 80005ca:	2020      	movs	r0, #32
 80005cc:	3701      	adds	r7, #1
 80005ce:	40fb      	lsrs	r3, r7
 80005d0:	1bc7      	subs	r7, r0, r7
 80005d2:	40be      	lsls	r6, r7
 80005d4:	0032      	movs	r2, r6
 80005d6:	1e56      	subs	r6, r2, #1
 80005d8:	41b2      	sbcs	r2, r6
 80005da:	2700      	movs	r7, #0
 80005dc:	431a      	orrs	r2, r3
 80005de:	0753      	lsls	r3, r2, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4013      	ands	r3, r2
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0xa8>
 80005ea:	3204      	adds	r2, #4
 80005ec:	0153      	lsls	r3, r2, #5
 80005ee:	d400      	bmi.n	80005f2 <__aeabi_fadd+0xae>
 80005f0:	e09c      	b.n	800072c <__aeabi_fadd+0x1e8>
 80005f2:	1c7b      	adds	r3, r7, #1
 80005f4:	2ffe      	cmp	r7, #254	; 0xfe
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xb6>
 80005f8:	e09a      	b.n	8000730 <__aeabi_fadd+0x1ec>
 80005fa:	0192      	lsls	r2, r2, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	4694      	mov	ip, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	05d8      	lsls	r0, r3, #23
 8000604:	4663      	mov	r3, ip
 8000606:	07e4      	lsls	r4, r4, #31
 8000608:	4318      	orrs	r0, r3
 800060a:	4320      	orrs	r0, r4
 800060c:	bce0      	pop	{r5, r6, r7}
 800060e:	46ba      	mov	sl, r7
 8000610:	46b1      	mov	r9, r6
 8000612:	46a8      	mov	r8, r5
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	2800      	cmp	r0, #0
 8000618:	d049      	beq.n	80006ae <__aeabi_fadd+0x16a>
 800061a:	1bf3      	subs	r3, r6, r7
 800061c:	2f00      	cmp	r7, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0xde>
 8000620:	e0b6      	b.n	8000790 <__aeabi_fadd+0x24c>
 8000622:	4652      	mov	r2, sl
 8000624:	2a00      	cmp	r2, #0
 8000626:	d060      	beq.n	80006ea <__aeabi_fadd+0x1a6>
 8000628:	3b01      	subs	r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_fadd+0xec>
 800062e:	e0fc      	b.n	800082a <__aeabi_fadd+0x2e6>
 8000630:	2eff      	cmp	r6, #255	; 0xff
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xf2>
 8000634:	e0b4      	b.n	80007a0 <__aeabi_fadd+0x25c>
 8000636:	000c      	movs	r4, r1
 8000638:	4642      	mov	r2, r8
 800063a:	2a00      	cmp	r2, #0
 800063c:	d078      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4310      	orrs	r0, r2
 8000644:	0242      	lsls	r2, r0, #9
 8000646:	0a53      	lsrs	r3, r2, #9
 8000648:	469c      	mov	ip, r3
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	e7d9      	b.n	8000602 <__aeabi_fadd+0xbe>
 800064e:	1bb9      	subs	r1, r7, r6
 8000650:	2900      	cmp	r1, #0
 8000652:	dd71      	ble.n	8000738 <__aeabi_fadd+0x1f4>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d03f      	beq.n	80006d8 <__aeabi_fadd+0x194>
 8000658:	2fff      	cmp	r7, #255	; 0xff
 800065a:	d0ee      	beq.n	800063a <__aeabi_fadd+0xf6>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	04db      	lsls	r3, r3, #19
 8000660:	431d      	orrs	r5, r3
 8000662:	2201      	movs	r2, #1
 8000664:	291b      	cmp	r1, #27
 8000666:	dc07      	bgt.n	8000678 <__aeabi_fadd+0x134>
 8000668:	002a      	movs	r2, r5
 800066a:	2320      	movs	r3, #32
 800066c:	40ca      	lsrs	r2, r1
 800066e:	1a59      	subs	r1, r3, r1
 8000670:	408d      	lsls	r5, r1
 8000672:	1e6b      	subs	r3, r5, #1
 8000674:	419d      	sbcs	r5, r3
 8000676:	432a      	orrs	r2, r5
 8000678:	4452      	add	r2, sl
 800067a:	0153      	lsls	r3, r2, #5
 800067c:	d553      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 800067e:	3701      	adds	r7, #1
 8000680:	2fff      	cmp	r7, #255	; 0xff
 8000682:	d055      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 8000684:	2301      	movs	r3, #1
 8000686:	497b      	ldr	r1, [pc, #492]	; (8000874 <__aeabi_fadd+0x330>)
 8000688:	4013      	ands	r3, r2
 800068a:	0852      	lsrs	r2, r2, #1
 800068c:	400a      	ands	r2, r1
 800068e:	431a      	orrs	r2, r3
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0x9a>
 8000692:	2d00      	cmp	r5, #0
 8000694:	d02c      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	469c      	mov	ip, r3
 800069c:	44e1      	add	r9, ip
 800069e:	464b      	mov	r3, r9
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x162>
 80006a4:	e0ad      	b.n	8000802 <__aeabi_fadd+0x2be>
 80006a6:	2fff      	cmp	r7, #255	; 0xff
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x168>
 80006aa:	e76e      	b.n	800058a <__aeabi_fadd+0x46>
 80006ac:	e7c5      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ae:	20fe      	movs	r0, #254	; 0xfe
 80006b0:	1c7e      	adds	r6, r7, #1
 80006b2:	4230      	tst	r0, r6
 80006b4:	d160      	bne.n	8000778 <__aeabi_fadd+0x234>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d000      	beq.n	80006bc <__aeabi_fadd+0x178>
 80006ba:	e093      	b.n	80007e4 <__aeabi_fadd+0x2a0>
 80006bc:	4652      	mov	r2, sl
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x180>
 80006c2:	e0b6      	b.n	8000832 <__aeabi_fadd+0x2ee>
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d09c      	beq.n	8000602 <__aeabi_fadd+0xbe>
 80006c8:	1b52      	subs	r2, r2, r5
 80006ca:	0150      	lsls	r0, r2, #5
 80006cc:	d400      	bmi.n	80006d0 <__aeabi_fadd+0x18c>
 80006ce:	e0c3      	b.n	8000858 <__aeabi_fadd+0x314>
 80006d0:	4653      	mov	r3, sl
 80006d2:	000c      	movs	r4, r1
 80006d4:	1aea      	subs	r2, r5, r3
 80006d6:	e782      	b.n	80005de <__aeabi_fadd+0x9a>
 80006d8:	2d00      	cmp	r5, #0
 80006da:	d009      	beq.n	80006f0 <__aeabi_fadd+0x1ac>
 80006dc:	3901      	subs	r1, #1
 80006de:	2900      	cmp	r1, #0
 80006e0:	d100      	bne.n	80006e4 <__aeabi_fadd+0x1a0>
 80006e2:	e08b      	b.n	80007fc <__aeabi_fadd+0x2b8>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d1bc      	bne.n	8000662 <__aeabi_fadd+0x11e>
 80006e8:	e7a7      	b.n	800063a <__aeabi_fadd+0xf6>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4642      	mov	r2, r8
 80006ee:	0037      	movs	r7, r6
 80006f0:	2fff      	cmp	r7, #255	; 0xff
 80006f2:	d0a2      	beq.n	800063a <__aeabi_fadd+0xf6>
 80006f4:	0252      	lsls	r2, r2, #9
 80006f6:	0a53      	lsrs	r3, r2, #9
 80006f8:	469c      	mov	ip, r3
 80006fa:	b2fb      	uxtb	r3, r7
 80006fc:	e781      	b.n	8000602 <__aeabi_fadd+0xbe>
 80006fe:	21fe      	movs	r1, #254	; 0xfe
 8000700:	3701      	adds	r7, #1
 8000702:	4239      	tst	r1, r7
 8000704:	d165      	bne.n	80007d2 <__aeabi_fadd+0x28e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d17e      	bne.n	8000808 <__aeabi_fadd+0x2c4>
 800070a:	2800      	cmp	r0, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e0aa      	b.n	8000866 <__aeabi_fadd+0x322>
 8000710:	2d00      	cmp	r5, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x1d2>
 8000714:	e775      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000716:	002a      	movs	r2, r5
 8000718:	4452      	add	r2, sl
 800071a:	2700      	movs	r7, #0
 800071c:	0153      	lsls	r3, r2, #5
 800071e:	d502      	bpl.n	8000726 <__aeabi_fadd+0x1e2>
 8000720:	4b55      	ldr	r3, [pc, #340]	; (8000878 <__aeabi_fadd+0x334>)
 8000722:	3701      	adds	r7, #1
 8000724:	401a      	ands	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d000      	beq.n	800072c <__aeabi_fadd+0x1e8>
 800072a:	e75a      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800072c:	08d2      	lsrs	r2, r2, #3
 800072e:	e7df      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 8000730:	2200      	movs	r2, #0
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	4694      	mov	ip, r2
 8000736:	e764      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000738:	2900      	cmp	r1, #0
 800073a:	d0e0      	beq.n	80006fe <__aeabi_fadd+0x1ba>
 800073c:	1bf3      	subs	r3, r6, r7
 800073e:	2f00      	cmp	r7, #0
 8000740:	d03e      	beq.n	80007c0 <__aeabi_fadd+0x27c>
 8000742:	2eff      	cmp	r6, #255	; 0xff
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x204>
 8000746:	e777      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0001      	movs	r1, r0
 800074c:	04d2      	lsls	r2, r2, #19
 800074e:	4311      	orrs	r1, r2
 8000750:	468a      	mov	sl, r1
 8000752:	2201      	movs	r2, #1
 8000754:	2b1b      	cmp	r3, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fadd+0x226>
 8000758:	4652      	mov	r2, sl
 800075a:	2120      	movs	r1, #32
 800075c:	4650      	mov	r0, sl
 800075e:	40da      	lsrs	r2, r3
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	4098      	lsls	r0, r3
 8000764:	1e43      	subs	r3, r0, #1
 8000766:	4198      	sbcs	r0, r3
 8000768:	4302      	orrs	r2, r0
 800076a:	0037      	movs	r7, r6
 800076c:	1952      	adds	r2, r2, r5
 800076e:	e784      	b.n	800067a <__aeabi_fadd+0x136>
 8000770:	4a41      	ldr	r2, [pc, #260]	; (8000878 <__aeabi_fadd+0x334>)
 8000772:	1a3f      	subs	r7, r7, r0
 8000774:	4032      	ands	r2, r6
 8000776:	e732      	b.n	80005de <__aeabi_fadd+0x9a>
 8000778:	4653      	mov	r3, sl
 800077a:	1b5e      	subs	r6, r3, r5
 800077c:	0173      	lsls	r3, r6, #5
 800077e:	d42d      	bmi.n	80007dc <__aeabi_fadd+0x298>
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0x242>
 8000784:	e717      	b.n	80005b6 <__aeabi_fadd+0x72>
 8000786:	2200      	movs	r2, #0
 8000788:	2400      	movs	r4, #0
 800078a:	2300      	movs	r3, #0
 800078c:	4694      	mov	ip, r2
 800078e:	e738      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000790:	2eff      	cmp	r6, #255	; 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x252>
 8000794:	e74f      	b.n	8000636 <__aeabi_fadd+0xf2>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	4650      	mov	r0, sl
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4310      	orrs	r0, r2
 800079e:	4682      	mov	sl, r0
 80007a0:	2201      	movs	r2, #1
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc08      	bgt.n	80007b8 <__aeabi_fadd+0x274>
 80007a6:	4652      	mov	r2, sl
 80007a8:	2420      	movs	r4, #32
 80007aa:	4650      	mov	r0, sl
 80007ac:	40da      	lsrs	r2, r3
 80007ae:	1ae3      	subs	r3, r4, r3
 80007b0:	4098      	lsls	r0, r3
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4302      	orrs	r2, r0
 80007b8:	000c      	movs	r4, r1
 80007ba:	0037      	movs	r7, r6
 80007bc:	1aaa      	subs	r2, r5, r2
 80007be:	e6f5      	b.n	80005ac <__aeabi_fadd+0x68>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d093      	beq.n	80006ec <__aeabi_fadd+0x1a8>
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d04f      	beq.n	800086a <__aeabi_fadd+0x326>
 80007ca:	2eff      	cmp	r6, #255	; 0xff
 80007cc:	d1c1      	bne.n	8000752 <__aeabi_fadd+0x20e>
 80007ce:	4642      	mov	r2, r8
 80007d0:	e733      	b.n	800063a <__aeabi_fadd+0xf6>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d0ac      	beq.n	8000730 <__aeabi_fadd+0x1ec>
 80007d6:	4455      	add	r5, sl
 80007d8:	086a      	lsrs	r2, r5, #1
 80007da:	e7a4      	b.n	8000726 <__aeabi_fadd+0x1e2>
 80007dc:	4653      	mov	r3, sl
 80007de:	000c      	movs	r4, r1
 80007e0:	1aee      	subs	r6, r5, r3
 80007e2:	e6e8      	b.n	80005b6 <__aeabi_fadd+0x72>
 80007e4:	4653      	mov	r3, sl
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d128      	bne.n	800083c <__aeabi_fadd+0x2f8>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x2ac>
 80007ee:	e722      	b.n	8000636 <__aeabi_fadd+0xf2>
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	469c      	mov	ip, r3
 80007f6:	2400      	movs	r4, #0
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	e702      	b.n	8000602 <__aeabi_fadd+0xbe>
 80007fc:	002a      	movs	r2, r5
 80007fe:	4452      	add	r2, sl
 8000800:	e73b      	b.n	800067a <__aeabi_fadd+0x136>
 8000802:	4653      	mov	r3, sl
 8000804:	1b5a      	subs	r2, r3, r5
 8000806:	e6d1      	b.n	80005ac <__aeabi_fadd+0x68>
 8000808:	2800      	cmp	r0, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x2ca>
 800080c:	e714      	b.n	8000638 <__aeabi_fadd+0xf4>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2d0>
 8000812:	e712      	b.n	800063a <__aeabi_fadd+0xf6>
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	03db      	lsls	r3, r3, #15
 8000818:	421a      	tst	r2, r3
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x2da>
 800081c:	e70d      	b.n	800063a <__aeabi_fadd+0xf6>
 800081e:	4641      	mov	r1, r8
 8000820:	4219      	tst	r1, r3
 8000822:	d000      	beq.n	8000826 <__aeabi_fadd+0x2e2>
 8000824:	e709      	b.n	800063a <__aeabi_fadd+0xf6>
 8000826:	4642      	mov	r2, r8
 8000828:	e707      	b.n	800063a <__aeabi_fadd+0xf6>
 800082a:	000c      	movs	r4, r1
 800082c:	0037      	movs	r7, r6
 800082e:	1aaa      	subs	r2, r5, r2
 8000830:	e6bc      	b.n	80005ac <__aeabi_fadd+0x68>
 8000832:	2d00      	cmp	r5, #0
 8000834:	d013      	beq.n	800085e <__aeabi_fadd+0x31a>
 8000836:	000c      	movs	r4, r1
 8000838:	46c4      	mov	ip, r8
 800083a:	e6e2      	b.n	8000602 <__aeabi_fadd+0xbe>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2fe>
 8000840:	e6fb      	b.n	800063a <__aeabi_fadd+0xf6>
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	03db      	lsls	r3, r3, #15
 8000846:	421a      	tst	r2, r3
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x308>
 800084a:	e6f6      	b.n	800063a <__aeabi_fadd+0xf6>
 800084c:	4640      	mov	r0, r8
 800084e:	4218      	tst	r0, r3
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000852:	e6f2      	b.n	800063a <__aeabi_fadd+0xf6>
 8000854:	000c      	movs	r4, r1
 8000856:	e6ef      	b.n	8000638 <__aeabi_fadd+0xf4>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fadd+0x31a>
 800085c:	e763      	b.n	8000726 <__aeabi_fadd+0x1e2>
 800085e:	2200      	movs	r2, #0
 8000860:	2400      	movs	r4, #0
 8000862:	4694      	mov	ip, r2
 8000864:	e6cd      	b.n	8000602 <__aeabi_fadd+0xbe>
 8000866:	46c4      	mov	ip, r8
 8000868:	e6cb      	b.n	8000602 <__aeabi_fadd+0xbe>
 800086a:	002a      	movs	r2, r5
 800086c:	0037      	movs	r7, r6
 800086e:	4452      	add	r2, sl
 8000870:	e703      	b.n	800067a <__aeabi_fadd+0x136>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	fbffffff 	.word	0xfbffffff

0800087c <__aeabi_fdiv>:
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	464f      	mov	r7, r9
 8000880:	4646      	mov	r6, r8
 8000882:	46d6      	mov	lr, sl
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	b5c0      	push	{r6, r7, lr}
 8000888:	0047      	lsls	r7, r0, #1
 800088a:	1c0c      	adds	r4, r1, #0
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e3f      	lsrs	r7, r7, #24
 8000890:	0fc6      	lsrs	r6, r0, #31
 8000892:	2f00      	cmp	r7, #0
 8000894:	d066      	beq.n	8000964 <__aeabi_fdiv+0xe8>
 8000896:	2fff      	cmp	r7, #255	; 0xff
 8000898:	d06c      	beq.n	8000974 <__aeabi_fdiv+0xf8>
 800089a:	2300      	movs	r3, #0
 800089c:	00ea      	lsls	r2, r5, #3
 800089e:	2580      	movs	r5, #128	; 0x80
 80008a0:	4699      	mov	r9, r3
 80008a2:	469a      	mov	sl, r3
 80008a4:	04ed      	lsls	r5, r5, #19
 80008a6:	4315      	orrs	r5, r2
 80008a8:	3f7f      	subs	r7, #127	; 0x7f
 80008aa:	0260      	lsls	r0, r4, #9
 80008ac:	0061      	lsls	r1, r4, #1
 80008ae:	0a43      	lsrs	r3, r0, #9
 80008b0:	4698      	mov	r8, r3
 80008b2:	0e09      	lsrs	r1, r1, #24
 80008b4:	0fe4      	lsrs	r4, r4, #31
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d048      	beq.n	800094c <__aeabi_fdiv+0xd0>
 80008ba:	29ff      	cmp	r1, #255	; 0xff
 80008bc:	d010      	beq.n	80008e0 <__aeabi_fdiv+0x64>
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	00d8      	lsls	r0, r3, #3
 80008c2:	04d2      	lsls	r2, r2, #19
 80008c4:	4302      	orrs	r2, r0
 80008c6:	4690      	mov	r8, r2
 80008c8:	2000      	movs	r0, #0
 80008ca:	397f      	subs	r1, #127	; 0x7f
 80008cc:	464a      	mov	r2, r9
 80008ce:	0033      	movs	r3, r6
 80008d0:	1a7f      	subs	r7, r7, r1
 80008d2:	4302      	orrs	r2, r0
 80008d4:	496c      	ldr	r1, [pc, #432]	; (8000a88 <__aeabi_fdiv+0x20c>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	588a      	ldr	r2, [r1, r2]
 80008da:	4063      	eors	r3, r4
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4697      	mov	pc, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d16d      	bne.n	80009c0 <__aeabi_fdiv+0x144>
 80008e4:	2002      	movs	r0, #2
 80008e6:	3fff      	subs	r7, #255	; 0xff
 80008e8:	e033      	b.n	8000952 <__aeabi_fdiv+0xd6>
 80008ea:	2300      	movs	r3, #0
 80008ec:	4698      	mov	r8, r3
 80008ee:	0026      	movs	r6, r4
 80008f0:	4645      	mov	r5, r8
 80008f2:	4682      	mov	sl, r0
 80008f4:	4653      	mov	r3, sl
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fdiv+0x80>
 80008fa:	e07f      	b.n	80009fc <__aeabi_fdiv+0x180>
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d100      	bne.n	8000902 <__aeabi_fdiv+0x86>
 8000900:	e094      	b.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d017      	beq.n	8000936 <__aeabi_fdiv+0xba>
 8000906:	0038      	movs	r0, r7
 8000908:	307f      	adds	r0, #127	; 0x7f
 800090a:	2800      	cmp	r0, #0
 800090c:	dd5f      	ble.n	80009ce <__aeabi_fdiv+0x152>
 800090e:	076b      	lsls	r3, r5, #29
 8000910:	d004      	beq.n	800091c <__aeabi_fdiv+0xa0>
 8000912:	230f      	movs	r3, #15
 8000914:	402b      	ands	r3, r5
 8000916:	2b04      	cmp	r3, #4
 8000918:	d000      	beq.n	800091c <__aeabi_fdiv+0xa0>
 800091a:	3504      	adds	r5, #4
 800091c:	012b      	lsls	r3, r5, #4
 800091e:	d503      	bpl.n	8000928 <__aeabi_fdiv+0xac>
 8000920:	0038      	movs	r0, r7
 8000922:	4b5a      	ldr	r3, [pc, #360]	; (8000a8c <__aeabi_fdiv+0x210>)
 8000924:	3080      	adds	r0, #128	; 0x80
 8000926:	401d      	ands	r5, r3
 8000928:	28fe      	cmp	r0, #254	; 0xfe
 800092a:	dc67      	bgt.n	80009fc <__aeabi_fdiv+0x180>
 800092c:	01ad      	lsls	r5, r5, #6
 800092e:	0a6d      	lsrs	r5, r5, #9
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	e002      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000934:	001e      	movs	r6, r3
 8000936:	2000      	movs	r0, #0
 8000938:	2500      	movs	r5, #0
 800093a:	05c0      	lsls	r0, r0, #23
 800093c:	4328      	orrs	r0, r5
 800093e:	07f6      	lsls	r6, r6, #31
 8000940:	4330      	orrs	r0, r6
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2b00      	cmp	r3, #0
 800094e:	d12b      	bne.n	80009a8 <__aeabi_fdiv+0x12c>
 8000950:	2001      	movs	r0, #1
 8000952:	464a      	mov	r2, r9
 8000954:	0033      	movs	r3, r6
 8000956:	494e      	ldr	r1, [pc, #312]	; (8000a90 <__aeabi_fdiv+0x214>)
 8000958:	4302      	orrs	r2, r0
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	588a      	ldr	r2, [r1, r2]
 800095e:	4063      	eors	r3, r4
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4697      	mov	pc, r2
 8000964:	2d00      	cmp	r5, #0
 8000966:	d113      	bne.n	8000990 <__aeabi_fdiv+0x114>
 8000968:	2304      	movs	r3, #4
 800096a:	4699      	mov	r9, r3
 800096c:	3b03      	subs	r3, #3
 800096e:	2700      	movs	r7, #0
 8000970:	469a      	mov	sl, r3
 8000972:	e79a      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000974:	2d00      	cmp	r5, #0
 8000976:	d105      	bne.n	8000984 <__aeabi_fdiv+0x108>
 8000978:	2308      	movs	r3, #8
 800097a:	4699      	mov	r9, r3
 800097c:	3b06      	subs	r3, #6
 800097e:	27ff      	movs	r7, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e792      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000984:	230c      	movs	r3, #12
 8000986:	4699      	mov	r9, r3
 8000988:	3b09      	subs	r3, #9
 800098a:	27ff      	movs	r7, #255	; 0xff
 800098c:	469a      	mov	sl, r3
 800098e:	e78c      	b.n	80008aa <__aeabi_fdiv+0x2e>
 8000990:	0028      	movs	r0, r5
 8000992:	f002 fb6d 	bl	8003070 <__clzsi2>
 8000996:	2776      	movs	r7, #118	; 0x76
 8000998:	1f43      	subs	r3, r0, #5
 800099a:	409d      	lsls	r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	427f      	negs	r7, r7
 80009a0:	4699      	mov	r9, r3
 80009a2:	469a      	mov	sl, r3
 80009a4:	1a3f      	subs	r7, r7, r0
 80009a6:	e780      	b.n	80008aa <__aeabi_fdiv+0x2e>
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fb61 	bl	8003070 <__clzsi2>
 80009ae:	4642      	mov	r2, r8
 80009b0:	1f43      	subs	r3, r0, #5
 80009b2:	2176      	movs	r1, #118	; 0x76
 80009b4:	409a      	lsls	r2, r3
 80009b6:	4249      	negs	r1, r1
 80009b8:	1a09      	subs	r1, r1, r0
 80009ba:	4690      	mov	r8, r2
 80009bc:	2000      	movs	r0, #0
 80009be:	e785      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	2003      	movs	r0, #3
 80009c4:	e782      	b.n	80008cc <__aeabi_fdiv+0x50>
 80009c6:	001e      	movs	r6, r3
 80009c8:	20ff      	movs	r0, #255	; 0xff
 80009ca:	2500      	movs	r5, #0
 80009cc:	e7b5      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009ce:	2301      	movs	r3, #1
 80009d0:	1a1b      	subs	r3, r3, r0
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dcaf      	bgt.n	8000936 <__aeabi_fdiv+0xba>
 80009d6:	379e      	adds	r7, #158	; 0x9e
 80009d8:	0029      	movs	r1, r5
 80009da:	40bd      	lsls	r5, r7
 80009dc:	40d9      	lsrs	r1, r3
 80009de:	1e6a      	subs	r2, r5, #1
 80009e0:	4195      	sbcs	r5, r2
 80009e2:	430d      	orrs	r5, r1
 80009e4:	076b      	lsls	r3, r5, #29
 80009e6:	d004      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009e8:	230f      	movs	r3, #15
 80009ea:	402b      	ands	r3, r5
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_fdiv+0x176>
 80009f0:	3504      	adds	r5, #4
 80009f2:	016b      	lsls	r3, r5, #5
 80009f4:	d544      	bpl.n	8000a80 <__aeabi_fdiv+0x204>
 80009f6:	2001      	movs	r0, #1
 80009f8:	2500      	movs	r5, #0
 80009fa:	e79e      	b.n	800093a <__aeabi_fdiv+0xbe>
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	2500      	movs	r5, #0
 8000a00:	e79b      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a02:	2580      	movs	r5, #128	; 0x80
 8000a04:	2600      	movs	r6, #0
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	03ed      	lsls	r5, r5, #15
 8000a0a:	e796      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4698      	mov	r8, r3
 8000a10:	2080      	movs	r0, #128	; 0x80
 8000a12:	03c0      	lsls	r0, r0, #15
 8000a14:	4205      	tst	r5, r0
 8000a16:	d009      	beq.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	4203      	tst	r3, r0
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_fdiv+0x1b0>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	4305      	orrs	r5, r0
 8000a22:	026d      	lsls	r5, r5, #9
 8000a24:	0026      	movs	r6, r4
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e786      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	03c0      	lsls	r0, r0, #15
 8000a30:	4305      	orrs	r5, r0
 8000a32:	026d      	lsls	r5, r5, #9
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	e77f      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	016a      	lsls	r2, r5, #5
 8000a3e:	0148      	lsls	r0, r1, #5
 8000a40:	4282      	cmp	r2, r0
 8000a42:	d219      	bcs.n	8000a78 <__aeabi_fdiv+0x1fc>
 8000a44:	211b      	movs	r1, #27
 8000a46:	2500      	movs	r5, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0014      	movs	r4, r2
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1de>
 8000a56:	4290      	cmp	r0, r2
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1e2>
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	4335      	orrs	r5, r6
 8000a5e:	3901      	subs	r1, #1
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1d0>
 8000a64:	1e50      	subs	r0, r2, #1
 8000a66:	4182      	sbcs	r2, r0
 8000a68:	0038      	movs	r0, r7
 8000a6a:	307f      	adds	r0, #127	; 0x7f
 8000a6c:	001e      	movs	r6, r3
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	2800      	cmp	r0, #0
 8000a72:	dd00      	ble.n	8000a76 <__aeabi_fdiv+0x1fa>
 8000a74:	e74b      	b.n	800090e <__aeabi_fdiv+0x92>
 8000a76:	e7aa      	b.n	80009ce <__aeabi_fdiv+0x152>
 8000a78:	211a      	movs	r1, #26
 8000a7a:	2501      	movs	r5, #1
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	e7e4      	b.n	8000a4a <__aeabi_fdiv+0x1ce>
 8000a80:	01ad      	lsls	r5, r5, #6
 8000a82:	2000      	movs	r0, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	e758      	b.n	800093a <__aeabi_fdiv+0xbe>
 8000a88:	080122a4 	.word	0x080122a4
 8000a8c:	f7ffffff 	.word	0xf7ffffff
 8000a90:	080122e4 	.word	0x080122e4

08000a94 <__eqsf2>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	0042      	lsls	r2, r0, #1
 8000a98:	024e      	lsls	r6, r1, #9
 8000a9a:	004c      	lsls	r4, r1, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	0e12      	lsrs	r2, r2, #24
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a76      	lsrs	r6, r6, #9
 8000aa6:	0e24      	lsrs	r4, r4, #24
 8000aa8:	0fc9      	lsrs	r1, r1, #31
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d00f      	beq.n	8000ace <__eqsf2+0x3a>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d011      	beq.n	8000ad6 <__eqsf2+0x42>
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	d000      	beq.n	8000aba <__eqsf2+0x26>
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	42b5      	cmp	r5, r6
 8000abc:	d1fc      	bne.n	8000ab8 <__eqsf2+0x24>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d00d      	beq.n	8000ade <__eqsf2+0x4a>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d1f8      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	1e45      	subs	r5, r0, #1
 8000aca:	41a8      	sbcs	r0, r5
 8000acc:	e7f4      	b.n	8000ab8 <__eqsf2+0x24>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <__eqsf2+0x24>
 8000ad4:	e7eb      	b.n	8000aae <__eqsf2+0x1a>
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d1ed      	bne.n	8000ab8 <__eqsf2+0x24>
 8000adc:	e7e9      	b.n	8000ab2 <__eqsf2+0x1e>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7ea      	b.n	8000ab8 <__eqsf2+0x24>
 8000ae2:	46c0      	nop			; (mov r8, r8)

08000ae4 <__gesf2>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	0042      	lsls	r2, r0, #1
 8000ae8:	0246      	lsls	r6, r0, #9
 8000aea:	024d      	lsls	r5, r1, #9
 8000aec:	004c      	lsls	r4, r1, #1
 8000aee:	0fc3      	lsrs	r3, r0, #31
 8000af0:	0a76      	lsrs	r6, r6, #9
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	0a6d      	lsrs	r5, r5, #9
 8000af6:	0e24      	lsrs	r4, r4, #24
 8000af8:	0fc8      	lsrs	r0, r1, #31
 8000afa:	2aff      	cmp	r2, #255	; 0xff
 8000afc:	d01f      	beq.n	8000b3e <__gesf2+0x5a>
 8000afe:	2cff      	cmp	r4, #255	; 0xff
 8000b00:	d010      	beq.n	8000b24 <__gesf2+0x40>
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d11f      	bne.n	8000b46 <__gesf2+0x62>
 8000b06:	4271      	negs	r1, r6
 8000b08:	4171      	adcs	r1, r6
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d101      	bne.n	8000b12 <__gesf2+0x2e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d01e      	beq.n	8000b50 <__gesf2+0x6c>
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d10e      	bne.n	8000b34 <__gesf2+0x50>
 8000b16:	4283      	cmp	r3, r0
 8000b18:	d01e      	beq.n	8000b58 <__gesf2+0x74>
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	1e58      	subs	r0, r3, #1
 8000b1e:	4008      	ands	r0, r1
 8000b20:	3801      	subs	r0, #1
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d126      	bne.n	8000b76 <__gesf2+0x92>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d1f4      	bne.n	8000b16 <__gesf2+0x32>
 8000b2c:	4271      	negs	r1, r6
 8000b2e:	4171      	adcs	r1, r6
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d0f0      	beq.n	8000b16 <__gesf2+0x32>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1f4      	bne.n	8000b22 <__gesf2+0x3e>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f1      	b.n	8000b22 <__gesf2+0x3e>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d119      	bne.n	8000b76 <__gesf2+0x92>
 8000b42:	2cff      	cmp	r4, #255	; 0xff
 8000b44:	d0ee      	beq.n	8000b24 <__gesf2+0x40>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1e5      	bne.n	8000b16 <__gesf2+0x32>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d1e3      	bne.n	8000b16 <__gesf2+0x32>
 8000b4e:	e7e4      	b.n	8000b1a <__gesf2+0x36>
 8000b50:	2000      	movs	r0, #0
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d0e5      	beq.n	8000b22 <__gesf2+0x3e>
 8000b56:	e7e0      	b.n	8000b1a <__gesf2+0x36>
 8000b58:	42a2      	cmp	r2, r4
 8000b5a:	dc05      	bgt.n	8000b68 <__gesf2+0x84>
 8000b5c:	dbea      	blt.n	8000b34 <__gesf2+0x50>
 8000b5e:	42ae      	cmp	r6, r5
 8000b60:	d802      	bhi.n	8000b68 <__gesf2+0x84>
 8000b62:	d3e7      	bcc.n	8000b34 <__gesf2+0x50>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7dc      	b.n	8000b22 <__gesf2+0x3e>
 8000b68:	4241      	negs	r1, r0
 8000b6a:	4141      	adcs	r1, r0
 8000b6c:	4248      	negs	r0, r1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4008      	ands	r0, r1
 8000b72:	3801      	subs	r0, #1
 8000b74:	e7d5      	b.n	8000b22 <__gesf2+0x3e>
 8000b76:	2002      	movs	r0, #2
 8000b78:	4240      	negs	r0, r0
 8000b7a:	e7d2      	b.n	8000b22 <__gesf2+0x3e>

08000b7c <__lesf2>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	0042      	lsls	r2, r0, #1
 8000b80:	0246      	lsls	r6, r0, #9
 8000b82:	024d      	lsls	r5, r1, #9
 8000b84:	004c      	lsls	r4, r1, #1
 8000b86:	0fc3      	lsrs	r3, r0, #31
 8000b88:	0a76      	lsrs	r6, r6, #9
 8000b8a:	0e12      	lsrs	r2, r2, #24
 8000b8c:	0a6d      	lsrs	r5, r5, #9
 8000b8e:	0e24      	lsrs	r4, r4, #24
 8000b90:	0fc8      	lsrs	r0, r1, #31
 8000b92:	2aff      	cmp	r2, #255	; 0xff
 8000b94:	d00d      	beq.n	8000bb2 <__lesf2+0x36>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <__lesf2+0x3e>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d123      	bne.n	8000be6 <__lesf2+0x6a>
 8000b9e:	4271      	negs	r1, r6
 8000ba0:	4171      	adcs	r1, r6
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d10f      	bne.n	8000bc6 <__lesf2+0x4a>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d10d      	bne.n	8000bc6 <__lesf2+0x4a>
 8000baa:	2000      	movs	r0, #0
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d014      	beq.n	8000bda <__lesf2+0x5e>
 8000bb0:	e00d      	b.n	8000bce <__lesf2+0x52>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d110      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bb6:	2cff      	cmp	r4, #255	; 0xff
 8000bb8:	d115      	bne.n	8000be6 <__lesf2+0x6a>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d10c      	bne.n	8000bd8 <__lesf2+0x5c>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d103      	bne.n	8000bca <__lesf2+0x4e>
 8000bc2:	4271      	negs	r1, r6
 8000bc4:	4171      	adcs	r1, r6
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d108      	bne.n	8000bdc <__lesf2+0x60>
 8000bca:	4283      	cmp	r3, r0
 8000bcc:	d010      	beq.n	8000bf0 <__lesf2+0x74>
 8000bce:	2102      	movs	r1, #2
 8000bd0:	1e58      	subs	r0, r3, #1
 8000bd2:	4008      	ands	r0, r1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e000      	b.n	8000bda <__lesf2+0x5e>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1fc      	bne.n	8000bda <__lesf2+0x5e>
 8000be0:	2001      	movs	r0, #1
 8000be2:	4240      	negs	r0, r0
 8000be4:	e7f9      	b.n	8000bda <__lesf2+0x5e>
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d1ef      	bne.n	8000bca <__lesf2+0x4e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d1ed      	bne.n	8000bca <__lesf2+0x4e>
 8000bee:	e7ee      	b.n	8000bce <__lesf2+0x52>
 8000bf0:	42a2      	cmp	r2, r4
 8000bf2:	dc05      	bgt.n	8000c00 <__lesf2+0x84>
 8000bf4:	dbf2      	blt.n	8000bdc <__lesf2+0x60>
 8000bf6:	42ae      	cmp	r6, r5
 8000bf8:	d802      	bhi.n	8000c00 <__lesf2+0x84>
 8000bfa:	d3ef      	bcc.n	8000bdc <__lesf2+0x60>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7ec      	b.n	8000bda <__lesf2+0x5e>
 8000c00:	4241      	negs	r1, r0
 8000c02:	4141      	adcs	r1, r0
 8000c04:	4248      	negs	r0, r1
 8000c06:	2102      	movs	r1, #2
 8000c08:	4008      	ands	r0, r1
 8000c0a:	3801      	subs	r0, #1
 8000c0c:	e7e5      	b.n	8000bda <__lesf2+0x5e>
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <__aeabi_fmul>:
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	4657      	mov	r7, sl
 8000c14:	464e      	mov	r6, r9
 8000c16:	4645      	mov	r5, r8
 8000c18:	46de      	mov	lr, fp
 8000c1a:	0244      	lsls	r4, r0, #9
 8000c1c:	b5e0      	push	{r5, r6, r7, lr}
 8000c1e:	0045      	lsls	r5, r0, #1
 8000c20:	1c0f      	adds	r7, r1, #0
 8000c22:	0a64      	lsrs	r4, r4, #9
 8000c24:	0e2d      	lsrs	r5, r5, #24
 8000c26:	0fc6      	lsrs	r6, r0, #31
 8000c28:	2d00      	cmp	r5, #0
 8000c2a:	d047      	beq.n	8000cbc <__aeabi_fmul+0xac>
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d04d      	beq.n	8000ccc <__aeabi_fmul+0xbc>
 8000c30:	2300      	movs	r3, #0
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	469a      	mov	sl, r3
 8000c36:	469b      	mov	fp, r3
 8000c38:	00e4      	lsls	r4, r4, #3
 8000c3a:	04c0      	lsls	r0, r0, #19
 8000c3c:	4304      	orrs	r4, r0
 8000c3e:	3d7f      	subs	r5, #127	; 0x7f
 8000c40:	0278      	lsls	r0, r7, #9
 8000c42:	0a43      	lsrs	r3, r0, #9
 8000c44:	4699      	mov	r9, r3
 8000c46:	007a      	lsls	r2, r7, #1
 8000c48:	0ffb      	lsrs	r3, r7, #31
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	0e12      	lsrs	r2, r2, #24
 8000c4e:	464b      	mov	r3, r9
 8000c50:	d044      	beq.n	8000cdc <__aeabi_fmul+0xcc>
 8000c52:	2aff      	cmp	r2, #255	; 0xff
 8000c54:	d011      	beq.n	8000c7a <__aeabi_fmul+0x6a>
 8000c56:	00d8      	lsls	r0, r3, #3
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	04db      	lsls	r3, r3, #19
 8000c5c:	4303      	orrs	r3, r0
 8000c5e:	4699      	mov	r9, r3
 8000c60:	2000      	movs	r0, #0
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	18ad      	adds	r5, r5, r2
 8000c66:	4647      	mov	r7, r8
 8000c68:	4653      	mov	r3, sl
 8000c6a:	4077      	eors	r7, r6
 8000c6c:	1c69      	adds	r1, r5, #1
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d83f      	bhi.n	8000cf2 <__aeabi_fmul+0xe2>
 8000c72:	4a72      	ldr	r2, [pc, #456]	; (8000e3c <__aeabi_fmul+0x22c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	469f      	mov	pc, r3
 8000c7a:	35ff      	adds	r5, #255	; 0xff
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d000      	beq.n	8000c82 <__aeabi_fmul+0x72>
 8000c80:	e079      	b.n	8000d76 <__aeabi_fmul+0x166>
 8000c82:	4652      	mov	r2, sl
 8000c84:	2302      	movs	r3, #2
 8000c86:	431a      	orrs	r2, r3
 8000c88:	4692      	mov	sl, r2
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	e7eb      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000c8e:	4647      	mov	r7, r8
 8000c90:	464c      	mov	r4, r9
 8000c92:	4683      	mov	fp, r0
 8000c94:	465b      	mov	r3, fp
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d028      	beq.n	8000cec <__aeabi_fmul+0xdc>
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fmul+0x90>
 8000c9e:	e0c6      	b.n	8000e2e <__aeabi_fmul+0x21e>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d14f      	bne.n	8000d44 <__aeabi_fmul+0x134>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	05c0      	lsls	r0, r0, #23
 8000caa:	07ff      	lsls	r7, r7, #31
 8000cac:	4320      	orrs	r0, r4
 8000cae:	4338      	orrs	r0, r7
 8000cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb2:	46bb      	mov	fp, r7
 8000cb4:	46b2      	mov	sl, r6
 8000cb6:	46a9      	mov	r9, r5
 8000cb8:	46a0      	mov	r8, r4
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d171      	bne.n	8000da4 <__aeabi_fmul+0x194>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	469a      	mov	sl, r3
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	469b      	mov	fp, r3
 8000cca:	e7b9      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d163      	bne.n	8000d98 <__aeabi_fmul+0x188>
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b06      	subs	r3, #6
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e7b1      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d150      	bne.n	8000d82 <__aeabi_fmul+0x172>
 8000ce0:	4652      	mov	r2, sl
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	4692      	mov	sl, r2
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7bc      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000cec:	20ff      	movs	r0, #255	; 0xff
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e7da      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	0c26      	lsrs	r6, r4, #16
 8000cf6:	0424      	lsls	r4, r4, #16
 8000cf8:	0c22      	lsrs	r2, r4, #16
 8000cfa:	0404      	lsls	r4, r0, #16
 8000cfc:	0c24      	lsrs	r4, r4, #16
 8000cfe:	464b      	mov	r3, r9
 8000d00:	0020      	movs	r0, r4
 8000d02:	0c1b      	lsrs	r3, r3, #16
 8000d04:	4350      	muls	r0, r2
 8000d06:	4374      	muls	r4, r6
 8000d08:	435a      	muls	r2, r3
 8000d0a:	435e      	muls	r6, r3
 8000d0c:	1912      	adds	r2, r2, r4
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d903      	bls.n	8000d1e <__aeabi_fmul+0x10e>
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	0252      	lsls	r2, r2, #9
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	4466      	add	r6, ip
 8000d1e:	0400      	lsls	r0, r0, #16
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	0c00      	lsrs	r0, r0, #16
 8000d24:	1812      	adds	r2, r2, r0
 8000d26:	0194      	lsls	r4, r2, #6
 8000d28:	1e60      	subs	r0, r4, #1
 8000d2a:	4184      	sbcs	r4, r0
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	0e92      	lsrs	r2, r2, #26
 8000d30:	199b      	adds	r3, r3, r6
 8000d32:	4314      	orrs	r4, r2
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	d572      	bpl.n	8000e22 <__aeabi_fmul+0x212>
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	0863      	lsrs	r3, r4, #1
 8000d40:	4004      	ands	r4, r0
 8000d42:	431c      	orrs	r4, r3
 8000d44:	0008      	movs	r0, r1
 8000d46:	307f      	adds	r0, #127	; 0x7f
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	dd3c      	ble.n	8000dc6 <__aeabi_fmul+0x1b6>
 8000d4c:	0763      	lsls	r3, r4, #29
 8000d4e:	d004      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d50:	230f      	movs	r3, #15
 8000d52:	4023      	ands	r3, r4
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fmul+0x14a>
 8000d58:	3404      	adds	r4, #4
 8000d5a:	0123      	lsls	r3, r4, #4
 8000d5c:	d503      	bpl.n	8000d66 <__aeabi_fmul+0x156>
 8000d5e:	3180      	adds	r1, #128	; 0x80
 8000d60:	0008      	movs	r0, r1
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <__aeabi_fmul+0x230>)
 8000d64:	401c      	ands	r4, r3
 8000d66:	28fe      	cmp	r0, #254	; 0xfe
 8000d68:	dcc0      	bgt.n	8000cec <__aeabi_fmul+0xdc>
 8000d6a:	01a4      	lsls	r4, r4, #6
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	b2c0      	uxtb	r0, r0
 8000d70:	e79a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000d72:	0037      	movs	r7, r6
 8000d74:	e78e      	b.n	8000c94 <__aeabi_fmul+0x84>
 8000d76:	4652      	mov	r2, sl
 8000d78:	2303      	movs	r3, #3
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e771      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d82:	4648      	mov	r0, r9
 8000d84:	f002 f974 	bl	8003070 <__clzsi2>
 8000d88:	464a      	mov	r2, r9
 8000d8a:	1f43      	subs	r3, r0, #5
 8000d8c:	409a      	lsls	r2, r3
 8000d8e:	1a2d      	subs	r5, r5, r0
 8000d90:	4691      	mov	r9, r2
 8000d92:	2000      	movs	r0, #0
 8000d94:	3d76      	subs	r5, #118	; 0x76
 8000d96:	e766      	b.n	8000c66 <__aeabi_fmul+0x56>
 8000d98:	230c      	movs	r3, #12
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	3b09      	subs	r3, #9
 8000d9e:	25ff      	movs	r5, #255	; 0xff
 8000da0:	469b      	mov	fp, r3
 8000da2:	e74d      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000da4:	0020      	movs	r0, r4
 8000da6:	f002 f963 	bl	8003070 <__clzsi2>
 8000daa:	2576      	movs	r5, #118	; 0x76
 8000dac:	1f43      	subs	r3, r0, #5
 8000dae:	409c      	lsls	r4, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	426d      	negs	r5, r5
 8000db4:	469a      	mov	sl, r3
 8000db6:	469b      	mov	fp, r3
 8000db8:	1a2d      	subs	r5, r5, r0
 8000dba:	e741      	b.n	8000c40 <__aeabi_fmul+0x30>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	2700      	movs	r7, #0
 8000dc0:	20ff      	movs	r0, #255	; 0xff
 8000dc2:	03e4      	lsls	r4, r4, #15
 8000dc4:	e770      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	1a1b      	subs	r3, r3, r0
 8000dca:	2b1b      	cmp	r3, #27
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x1c0>
 8000dce:	e769      	b.n	8000ca4 <__aeabi_fmul+0x94>
 8000dd0:	319e      	adds	r1, #158	; 0x9e
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	1e63      	subs	r3, r4, #1
 8000dda:	419c      	sbcs	r4, r3
 8000ddc:	4304      	orrs	r4, r0
 8000dde:	0763      	lsls	r3, r4, #29
 8000de0:	d004      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000de2:	230f      	movs	r3, #15
 8000de4:	4023      	ands	r3, r4
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d000      	beq.n	8000dec <__aeabi_fmul+0x1dc>
 8000dea:	3404      	adds	r4, #4
 8000dec:	0163      	lsls	r3, r4, #5
 8000dee:	d51a      	bpl.n	8000e26 <__aeabi_fmul+0x216>
 8000df0:	2001      	movs	r0, #1
 8000df2:	2400      	movs	r4, #0
 8000df4:	e758      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000df6:	2080      	movs	r0, #128	; 0x80
 8000df8:	03c0      	lsls	r0, r0, #15
 8000dfa:	4204      	tst	r4, r0
 8000dfc:	d009      	beq.n	8000e12 <__aeabi_fmul+0x202>
 8000dfe:	464b      	mov	r3, r9
 8000e00:	4203      	tst	r3, r0
 8000e02:	d106      	bne.n	8000e12 <__aeabi_fmul+0x202>
 8000e04:	464c      	mov	r4, r9
 8000e06:	4304      	orrs	r4, r0
 8000e08:	0264      	lsls	r4, r4, #9
 8000e0a:	4647      	mov	r7, r8
 8000e0c:	20ff      	movs	r0, #255	; 0xff
 8000e0e:	0a64      	lsrs	r4, r4, #9
 8000e10:	e74a      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e12:	2080      	movs	r0, #128	; 0x80
 8000e14:	03c0      	lsls	r0, r0, #15
 8000e16:	4304      	orrs	r4, r0
 8000e18:	0264      	lsls	r4, r4, #9
 8000e1a:	0037      	movs	r7, r6
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	0a64      	lsrs	r4, r4, #9
 8000e20:	e742      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e22:	0029      	movs	r1, r5
 8000e24:	e78e      	b.n	8000d44 <__aeabi_fmul+0x134>
 8000e26:	01a4      	lsls	r4, r4, #6
 8000e28:	2000      	movs	r0, #0
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e73c      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	03c0      	lsls	r0, r0, #15
 8000e32:	4304      	orrs	r4, r0
 8000e34:	0264      	lsls	r4, r4, #9
 8000e36:	20ff      	movs	r0, #255	; 0xff
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	e735      	b.n	8000ca8 <__aeabi_fmul+0x98>
 8000e3c:	08012324 	.word	0x08012324
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e46:	4646      	mov	r6, r8
 8000e48:	46d6      	mov	lr, sl
 8000e4a:	464f      	mov	r7, r9
 8000e4c:	0243      	lsls	r3, r0, #9
 8000e4e:	0a5b      	lsrs	r3, r3, #9
 8000e50:	00da      	lsls	r2, r3, #3
 8000e52:	4694      	mov	ip, r2
 8000e54:	024a      	lsls	r2, r1, #9
 8000e56:	b5c0      	push	{r6, r7, lr}
 8000e58:	0044      	lsls	r4, r0, #1
 8000e5a:	0a56      	lsrs	r6, r2, #9
 8000e5c:	1c05      	adds	r5, r0, #0
 8000e5e:	46b0      	mov	r8, r6
 8000e60:	0e24      	lsrs	r4, r4, #24
 8000e62:	004e      	lsls	r6, r1, #1
 8000e64:	0992      	lsrs	r2, r2, #6
 8000e66:	001f      	movs	r7, r3
 8000e68:	0020      	movs	r0, r4
 8000e6a:	4692      	mov	sl, r2
 8000e6c:	0fed      	lsrs	r5, r5, #31
 8000e6e:	0e36      	lsrs	r6, r6, #24
 8000e70:	0fc9      	lsrs	r1, r1, #31
 8000e72:	2eff      	cmp	r6, #255	; 0xff
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x34>
 8000e76:	e07f      	b.n	8000f78 <__aeabi_fsub+0x134>
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4051      	eors	r1, r2
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d051      	beq.n	8000f24 <__aeabi_fsub+0xe0>
 8000e80:	1ba2      	subs	r2, r4, r6
 8000e82:	4691      	mov	r9, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	dc00      	bgt.n	8000e8a <__aeabi_fsub+0x46>
 8000e88:	e07e      	b.n	8000f88 <__aeabi_fsub+0x144>
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x4c>
 8000e8e:	e099      	b.n	8000fc4 <__aeabi_fsub+0x180>
 8000e90:	2cff      	cmp	r4, #255	; 0xff
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x52>
 8000e94:	e08c      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	4652      	mov	r2, sl
 8000e9a:	04db      	lsls	r3, r3, #19
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	dc08      	bgt.n	8000eba <__aeabi_fsub+0x76>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2120      	movs	r1, #32
 8000eac:	40d3      	lsrs	r3, r2
 8000eae:	1a89      	subs	r1, r1, r2
 8000eb0:	4652      	mov	r2, sl
 8000eb2:	408a      	lsls	r2, r1
 8000eb4:	1e51      	subs	r1, r2, #1
 8000eb6:	418a      	sbcs	r2, r1
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d400      	bmi.n	8000ec4 <__aeabi_fsub+0x80>
 8000ec2:	e0f3      	b.n	80010ac <__aeabi_fsub+0x268>
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	099e      	lsrs	r6, r3, #6
 8000ec8:	0030      	movs	r0, r6
 8000eca:	f002 f8d1 	bl	8003070 <__clzsi2>
 8000ece:	3805      	subs	r0, #5
 8000ed0:	4086      	lsls	r6, r0
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_fsub+0x94>
 8000ed6:	e0f7      	b.n	80010c8 <__aeabi_fsub+0x284>
 8000ed8:	0032      	movs	r2, r6
 8000eda:	1b04      	subs	r4, r0, r4
 8000edc:	2020      	movs	r0, #32
 8000ede:	3401      	adds	r4, #1
 8000ee0:	40e2      	lsrs	r2, r4
 8000ee2:	1b04      	subs	r4, r0, r4
 8000ee4:	40a6      	lsls	r6, r4
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	1e5e      	subs	r6, r3, #1
 8000eea:	41b3      	sbcs	r3, r6
 8000eec:	2400      	movs	r4, #0
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	d004      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	2a04      	cmp	r2, #4
 8000efa:	d000      	beq.n	8000efe <__aeabi_fsub+0xba>
 8000efc:	3304      	adds	r3, #4
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	d400      	bmi.n	8000f04 <__aeabi_fsub+0xc0>
 8000f02:	e0d6      	b.n	80010b2 <__aeabi_fsub+0x26e>
 8000f04:	1c62      	adds	r2, r4, #1
 8000f06:	2cfe      	cmp	r4, #254	; 0xfe
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0xc8>
 8000f0a:	e0da      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	0a5f      	lsrs	r7, r3, #9
 8000f10:	b2d0      	uxtb	r0, r2
 8000f12:	05c0      	lsls	r0, r0, #23
 8000f14:	4338      	orrs	r0, r7
 8000f16:	07ed      	lsls	r5, r5, #31
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	bce0      	pop	{r5, r6, r7}
 8000f1c:	46ba      	mov	sl, r7
 8000f1e:	46b1      	mov	r9, r6
 8000f20:	46a8      	mov	r8, r5
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	1ba2      	subs	r2, r4, r6
 8000f26:	4691      	mov	r9, r2
 8000f28:	2a00      	cmp	r2, #0
 8000f2a:	dd63      	ble.n	8000ff4 <__aeabi_fsub+0x1b0>
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0xee>
 8000f30:	e099      	b.n	8001066 <__aeabi_fsub+0x222>
 8000f32:	2cff      	cmp	r4, #255	; 0xff
 8000f34:	d03c      	beq.n	8000fb0 <__aeabi_fsub+0x16c>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4652      	mov	r2, sl
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4692      	mov	sl, r2
 8000f40:	464a      	mov	r2, r9
 8000f42:	2301      	movs	r3, #1
 8000f44:	2a1b      	cmp	r2, #27
 8000f46:	dc08      	bgt.n	8000f5a <__aeabi_fsub+0x116>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	40d3      	lsrs	r3, r2
 8000f4e:	1a89      	subs	r1, r1, r2
 8000f50:	4652      	mov	r2, sl
 8000f52:	408a      	lsls	r2, r1
 8000f54:	1e51      	subs	r1, r2, #1
 8000f56:	418a      	sbcs	r2, r1
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_fsub+0x11e>
 8000f60:	e0a4      	b.n	80010ac <__aeabi_fsub+0x268>
 8000f62:	3401      	adds	r4, #1
 8000f64:	2cff      	cmp	r4, #255	; 0xff
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x126>
 8000f68:	e0ab      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4997      	ldr	r1, [pc, #604]	; (80011cc <__aeabi_fsub+0x388>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	400b      	ands	r3, r1
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e7bb      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d032      	beq.n	8000fe2 <__aeabi_fsub+0x19e>
 8000f7c:	428d      	cmp	r5, r1
 8000f7e:	d035      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000f80:	22ff      	movs	r2, #255	; 0xff
 8000f82:	4252      	negs	r2, r2
 8000f84:	4691      	mov	r9, r2
 8000f86:	44a1      	add	r9, r4
 8000f88:	464a      	mov	r2, r9
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d051      	beq.n	8001032 <__aeabi_fsub+0x1ee>
 8000f8e:	1b30      	subs	r0, r6, r4
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x152>
 8000f94:	e09c      	b.n	80010d0 <__aeabi_fsub+0x28c>
 8000f96:	4663      	mov	r3, ip
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_fsub+0x15a>
 8000f9c:	e0df      	b.n	800115e <__aeabi_fsub+0x31a>
 8000f9e:	3801      	subs	r0, #1
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x162>
 8000fa4:	e0f7      	b.n	8001196 <__aeabi_fsub+0x352>
 8000fa6:	2eff      	cmp	r6, #255	; 0xff
 8000fa8:	d000      	beq.n	8000fac <__aeabi_fsub+0x168>
 8000faa:	e099      	b.n	80010e0 <__aeabi_fsub+0x29c>
 8000fac:	000d      	movs	r5, r1
 8000fae:	4643      	mov	r3, r8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_fsub+0x172>
 8000fb4:	e085      	b.n	80010c2 <__aeabi_fsub+0x27e>
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	03ff      	lsls	r7, r7, #15
 8000fba:	431f      	orrs	r7, r3
 8000fbc:	027f      	lsls	r7, r7, #9
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a7f      	lsrs	r7, r7, #9
 8000fc2:	e7a6      	b.n	8000f12 <__aeabi_fsub+0xce>
 8000fc4:	4652      	mov	r2, sl
 8000fc6:	2a00      	cmp	r2, #0
 8000fc8:	d074      	beq.n	80010b4 <__aeabi_fsub+0x270>
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4252      	negs	r2, r2
 8000fce:	4690      	mov	r8, r2
 8000fd0:	44c1      	add	r9, r8
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	2a00      	cmp	r2, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x196>
 8000fd8:	e0c8      	b.n	800116c <__aeabi_fsub+0x328>
 8000fda:	2cff      	cmp	r4, #255	; 0xff
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x19c>
 8000fde:	e75f      	b.n	8000ea0 <__aeabi_fsub+0x5c>
 8000fe0:	e7e6      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4051      	eors	r1, r2
 8000fe6:	42a9      	cmp	r1, r5
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x1a8>
 8000fea:	e749      	b.n	8000e80 <__aeabi_fsub+0x3c>
 8000fec:	22ff      	movs	r2, #255	; 0xff
 8000fee:	4252      	negs	r2, r2
 8000ff0:	4691      	mov	r9, r2
 8000ff2:	44a1      	add	r9, r4
 8000ff4:	464a      	mov	r2, r9
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d043      	beq.n	8001082 <__aeabi_fsub+0x23e>
 8000ffa:	1b31      	subs	r1, r6, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x1be>
 8001000:	e08c      	b.n	800111c <__aeabi_fsub+0x2d8>
 8001002:	2eff      	cmp	r6, #255	; 0xff
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1c4>
 8001006:	e092      	b.n	800112e <__aeabi_fsub+0x2ea>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4662      	mov	r2, ip
 800100c:	04db      	lsls	r3, r3, #19
 800100e:	431a      	orrs	r2, r3
 8001010:	4694      	mov	ip, r2
 8001012:	2301      	movs	r3, #1
 8001014:	291b      	cmp	r1, #27
 8001016:	dc09      	bgt.n	800102c <__aeabi_fsub+0x1e8>
 8001018:	2020      	movs	r0, #32
 800101a:	4663      	mov	r3, ip
 800101c:	4662      	mov	r2, ip
 800101e:	40cb      	lsrs	r3, r1
 8001020:	1a41      	subs	r1, r0, r1
 8001022:	408a      	lsls	r2, r1
 8001024:	0011      	movs	r1, r2
 8001026:	1e48      	subs	r0, r1, #1
 8001028:	4181      	sbcs	r1, r0
 800102a:	430b      	orrs	r3, r1
 800102c:	0034      	movs	r4, r6
 800102e:	4453      	add	r3, sl
 8001030:	e794      	b.n	8000f5c <__aeabi_fsub+0x118>
 8001032:	22fe      	movs	r2, #254	; 0xfe
 8001034:	1c66      	adds	r6, r4, #1
 8001036:	4232      	tst	r2, r6
 8001038:	d164      	bne.n	8001104 <__aeabi_fsub+0x2c0>
 800103a:	2c00      	cmp	r4, #0
 800103c:	d000      	beq.n	8001040 <__aeabi_fsub+0x1fc>
 800103e:	e082      	b.n	8001146 <__aeabi_fsub+0x302>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_fsub+0x204>
 8001046:	e0ab      	b.n	80011a0 <__aeabi_fsub+0x35c>
 8001048:	4653      	mov	r3, sl
 800104a:	2b00      	cmp	r3, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x20c>
 800104e:	e760      	b.n	8000f12 <__aeabi_fsub+0xce>
 8001050:	4663      	mov	r3, ip
 8001052:	4652      	mov	r2, sl
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	015a      	lsls	r2, r3, #5
 8001058:	d400      	bmi.n	800105c <__aeabi_fsub+0x218>
 800105a:	e0aa      	b.n	80011b2 <__aeabi_fsub+0x36e>
 800105c:	4663      	mov	r3, ip
 800105e:	4652      	mov	r2, sl
 8001060:	000d      	movs	r5, r1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	e744      	b.n	8000ef0 <__aeabi_fsub+0xac>
 8001066:	4652      	mov	r2, sl
 8001068:	2a00      	cmp	r2, #0
 800106a:	d023      	beq.n	80010b4 <__aeabi_fsub+0x270>
 800106c:	2201      	movs	r2, #1
 800106e:	4252      	negs	r2, r2
 8001070:	4690      	mov	r8, r2
 8001072:	44c1      	add	r9, r8
 8001074:	464a      	mov	r2, r9
 8001076:	2a00      	cmp	r2, #0
 8001078:	d075      	beq.n	8001166 <__aeabi_fsub+0x322>
 800107a:	2cff      	cmp	r4, #255	; 0xff
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x23c>
 800107e:	e75f      	b.n	8000f40 <__aeabi_fsub+0xfc>
 8001080:	e796      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001082:	26fe      	movs	r6, #254	; 0xfe
 8001084:	3401      	adds	r4, #1
 8001086:	4226      	tst	r6, r4
 8001088:	d153      	bne.n	8001132 <__aeabi_fsub+0x2ee>
 800108a:	2800      	cmp	r0, #0
 800108c:	d172      	bne.n	8001174 <__aeabi_fsub+0x330>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x252>
 8001094:	e093      	b.n	80011be <__aeabi_fsub+0x37a>
 8001096:	4653      	mov	r3, sl
 8001098:	2b00      	cmp	r3, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x25a>
 800109c:	e739      	b.n	8000f12 <__aeabi_fsub+0xce>
 800109e:	4463      	add	r3, ip
 80010a0:	2400      	movs	r4, #0
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	d502      	bpl.n	80010ac <__aeabi_fsub+0x268>
 80010a6:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010a8:	3401      	adds	r4, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x26e>
 80010b0:	e720      	b.n	8000ef4 <__aeabi_fsub+0xb0>
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	2cff      	cmp	r4, #255	; 0xff
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x276>
 80010b8:	e77a      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 80010ba:	025b      	lsls	r3, r3, #9
 80010bc:	0a5f      	lsrs	r7, r3, #9
 80010be:	b2e0      	uxtb	r0, r4
 80010c0:	e727      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	2700      	movs	r7, #0
 80010c6:	e724      	b.n	8000f12 <__aeabi_fsub+0xce>
 80010c8:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <__aeabi_fsub+0x38c>)
 80010ca:	1a24      	subs	r4, r4, r0
 80010cc:	4033      	ands	r3, r6
 80010ce:	e70f      	b.n	8000ef0 <__aeabi_fsub+0xac>
 80010d0:	2eff      	cmp	r6, #255	; 0xff
 80010d2:	d100      	bne.n	80010d6 <__aeabi_fsub+0x292>
 80010d4:	e76a      	b.n	8000fac <__aeabi_fsub+0x168>
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	4662      	mov	r2, ip
 80010da:	04db      	lsls	r3, r3, #19
 80010dc:	431a      	orrs	r2, r3
 80010de:	4694      	mov	ip, r2
 80010e0:	2301      	movs	r3, #1
 80010e2:	281b      	cmp	r0, #27
 80010e4:	dc09      	bgt.n	80010fa <__aeabi_fsub+0x2b6>
 80010e6:	2420      	movs	r4, #32
 80010e8:	4663      	mov	r3, ip
 80010ea:	4662      	mov	r2, ip
 80010ec:	40c3      	lsrs	r3, r0
 80010ee:	1a20      	subs	r0, r4, r0
 80010f0:	4082      	lsls	r2, r0
 80010f2:	0010      	movs	r0, r2
 80010f4:	1e44      	subs	r4, r0, #1
 80010f6:	41a0      	sbcs	r0, r4
 80010f8:	4303      	orrs	r3, r0
 80010fa:	4652      	mov	r2, sl
 80010fc:	000d      	movs	r5, r1
 80010fe:	0034      	movs	r4, r6
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	e6dc      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001104:	4663      	mov	r3, ip
 8001106:	4652      	mov	r2, sl
 8001108:	1a9e      	subs	r6, r3, r2
 800110a:	0173      	lsls	r3, r6, #5
 800110c:	d417      	bmi.n	800113e <__aeabi_fsub+0x2fa>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x2d0>
 8001112:	e6d9      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001114:	2500      	movs	r5, #0
 8001116:	2000      	movs	r0, #0
 8001118:	2700      	movs	r7, #0
 800111a:	e6fa      	b.n	8000f12 <__aeabi_fsub+0xce>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d044      	beq.n	80011ac <__aeabi_fsub+0x368>
 8001122:	3901      	subs	r1, #1
 8001124:	2900      	cmp	r1, #0
 8001126:	d04c      	beq.n	80011c2 <__aeabi_fsub+0x37e>
 8001128:	2eff      	cmp	r6, #255	; 0xff
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800112c:	e771      	b.n	8001012 <__aeabi_fsub+0x1ce>
 800112e:	4643      	mov	r3, r8
 8001130:	e73e      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001132:	2cff      	cmp	r4, #255	; 0xff
 8001134:	d0c5      	beq.n	80010c2 <__aeabi_fsub+0x27e>
 8001136:	4652      	mov	r2, sl
 8001138:	4462      	add	r2, ip
 800113a:	0853      	lsrs	r3, r2, #1
 800113c:	e7b6      	b.n	80010ac <__aeabi_fsub+0x268>
 800113e:	4663      	mov	r3, ip
 8001140:	000d      	movs	r5, r1
 8001142:	1ad6      	subs	r6, r2, r3
 8001144:	e6c0      	b.n	8000ec8 <__aeabi_fsub+0x84>
 8001146:	4662      	mov	r2, ip
 8001148:	2a00      	cmp	r2, #0
 800114a:	d116      	bne.n	800117a <__aeabi_fsub+0x336>
 800114c:	4653      	mov	r3, sl
 800114e:	2b00      	cmp	r3, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_fsub+0x310>
 8001152:	e72b      	b.n	8000fac <__aeabi_fsub+0x168>
 8001154:	2780      	movs	r7, #128	; 0x80
 8001156:	2500      	movs	r5, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	03ff      	lsls	r7, r7, #15
 800115c:	e6d9      	b.n	8000f12 <__aeabi_fsub+0xce>
 800115e:	000d      	movs	r5, r1
 8001160:	4643      	mov	r3, r8
 8001162:	0034      	movs	r4, r6
 8001164:	e7a6      	b.n	80010b4 <__aeabi_fsub+0x270>
 8001166:	4653      	mov	r3, sl
 8001168:	4463      	add	r3, ip
 800116a:	e6f7      	b.n	8000f5c <__aeabi_fsub+0x118>
 800116c:	4663      	mov	r3, ip
 800116e:	4652      	mov	r2, sl
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	e6a4      	b.n	8000ebe <__aeabi_fsub+0x7a>
 8001174:	4662      	mov	r2, ip
 8001176:	2a00      	cmp	r2, #0
 8001178:	d0d9      	beq.n	800112e <__aeabi_fsub+0x2ea>
 800117a:	4652      	mov	r2, sl
 800117c:	2a00      	cmp	r2, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x33e>
 8001180:	e716      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	03d2      	lsls	r2, r2, #15
 8001186:	4213      	tst	r3, r2
 8001188:	d100      	bne.n	800118c <__aeabi_fsub+0x348>
 800118a:	e711      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 800118c:	4640      	mov	r0, r8
 800118e:	4210      	tst	r0, r2
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x350>
 8001192:	e70d      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 8001194:	e70a      	b.n	8000fac <__aeabi_fsub+0x168>
 8001196:	4652      	mov	r2, sl
 8001198:	000d      	movs	r5, r1
 800119a:	0034      	movs	r4, r6
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	e68e      	b.n	8000ebe <__aeabi_fsub+0x7a>
 80011a0:	4653      	mov	r3, sl
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011a6:	000d      	movs	r5, r1
 80011a8:	4647      	mov	r7, r8
 80011aa:	e6b2      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011ac:	4643      	mov	r3, r8
 80011ae:	0034      	movs	r4, r6
 80011b0:	e780      	b.n	80010b4 <__aeabi_fsub+0x270>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x374>
 80011b6:	e779      	b.n	80010ac <__aeabi_fsub+0x268>
 80011b8:	2500      	movs	r5, #0
 80011ba:	2700      	movs	r7, #0
 80011bc:	e6a9      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011be:	4647      	mov	r7, r8
 80011c0:	e6a7      	b.n	8000f12 <__aeabi_fsub+0xce>
 80011c2:	4653      	mov	r3, sl
 80011c4:	0034      	movs	r4, r6
 80011c6:	4463      	add	r3, ip
 80011c8:	e6c8      	b.n	8000f5c <__aeabi_fsub+0x118>
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	7dffffff 	.word	0x7dffffff
 80011d0:	fbffffff 	.word	0xfbffffff

080011d4 <__aeabi_f2iz>:
 80011d4:	0241      	lsls	r1, r0, #9
 80011d6:	0042      	lsls	r2, r0, #1
 80011d8:	0fc3      	lsrs	r3, r0, #31
 80011da:	0a49      	lsrs	r1, r1, #9
 80011dc:	2000      	movs	r0, #0
 80011de:	0e12      	lsrs	r2, r2, #24
 80011e0:	2a7e      	cmp	r2, #126	; 0x7e
 80011e2:	d903      	bls.n	80011ec <__aeabi_f2iz+0x18>
 80011e4:	2a9d      	cmp	r2, #157	; 0x9d
 80011e6:	d902      	bls.n	80011ee <__aeabi_f2iz+0x1a>
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <__aeabi_f2iz+0x3c>)
 80011ea:	1898      	adds	r0, r3, r2
 80011ec:	4770      	bx	lr
 80011ee:	2080      	movs	r0, #128	; 0x80
 80011f0:	0400      	lsls	r0, r0, #16
 80011f2:	4301      	orrs	r1, r0
 80011f4:	2a95      	cmp	r2, #149	; 0x95
 80011f6:	dc07      	bgt.n	8001208 <__aeabi_f2iz+0x34>
 80011f8:	2096      	movs	r0, #150	; 0x96
 80011fa:	1a82      	subs	r2, r0, r2
 80011fc:	40d1      	lsrs	r1, r2
 80011fe:	4248      	negs	r0, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f3      	bne.n	80011ec <__aeabi_f2iz+0x18>
 8001204:	0008      	movs	r0, r1
 8001206:	e7f1      	b.n	80011ec <__aeabi_f2iz+0x18>
 8001208:	3a96      	subs	r2, #150	; 0x96
 800120a:	4091      	lsls	r1, r2
 800120c:	e7f7      	b.n	80011fe <__aeabi_f2iz+0x2a>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	7fffffff 	.word	0x7fffffff

08001214 <__aeabi_i2f>:
 8001214:	b570      	push	{r4, r5, r6, lr}
 8001216:	2800      	cmp	r0, #0
 8001218:	d013      	beq.n	8001242 <__aeabi_i2f+0x2e>
 800121a:	17c3      	asrs	r3, r0, #31
 800121c:	18c5      	adds	r5, r0, r3
 800121e:	405d      	eors	r5, r3
 8001220:	0fc4      	lsrs	r4, r0, #31
 8001222:	0028      	movs	r0, r5
 8001224:	f001 ff24 	bl	8003070 <__clzsi2>
 8001228:	239e      	movs	r3, #158	; 0x9e
 800122a:	0001      	movs	r1, r0
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	2b96      	cmp	r3, #150	; 0x96
 8001230:	dc0f      	bgt.n	8001252 <__aeabi_i2f+0x3e>
 8001232:	2808      	cmp	r0, #8
 8001234:	dd01      	ble.n	800123a <__aeabi_i2f+0x26>
 8001236:	3908      	subs	r1, #8
 8001238:	408d      	lsls	r5, r1
 800123a:	026d      	lsls	r5, r5, #9
 800123c:	0a6d      	lsrs	r5, r5, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e002      	b.n	8001248 <__aeabi_i2f+0x34>
 8001242:	2400      	movs	r4, #0
 8001244:	2000      	movs	r0, #0
 8001246:	2500      	movs	r5, #0
 8001248:	05c0      	lsls	r0, r0, #23
 800124a:	4328      	orrs	r0, r5
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4320      	orrs	r0, r4
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b99      	cmp	r3, #153	; 0x99
 8001254:	dd0b      	ble.n	800126e <__aeabi_i2f+0x5a>
 8001256:	2205      	movs	r2, #5
 8001258:	002e      	movs	r6, r5
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	40d6      	lsrs	r6, r2
 800125e:	0002      	movs	r2, r0
 8001260:	321b      	adds	r2, #27
 8001262:	4095      	lsls	r5, r2
 8001264:	0028      	movs	r0, r5
 8001266:	1e45      	subs	r5, r0, #1
 8001268:	41a8      	sbcs	r0, r5
 800126a:	0035      	movs	r5, r6
 800126c:	4305      	orrs	r5, r0
 800126e:	2905      	cmp	r1, #5
 8001270:	dd01      	ble.n	8001276 <__aeabi_i2f+0x62>
 8001272:	1f4a      	subs	r2, r1, #5
 8001274:	4095      	lsls	r5, r2
 8001276:	002a      	movs	r2, r5
 8001278:	4e08      	ldr	r6, [pc, #32]	; (800129c <__aeabi_i2f+0x88>)
 800127a:	4032      	ands	r2, r6
 800127c:	0768      	lsls	r0, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_i2f+0x80>
 8001288:	3204      	adds	r2, #4
 800128a:	0150      	lsls	r0, r2, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_i2f+0x80>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4032      	ands	r2, r6
 8001292:	1a5b      	subs	r3, r3, r1
 8001294:	0192      	lsls	r2, r2, #6
 8001296:	0a55      	lsrs	r5, r2, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7d5      	b.n	8001248 <__aeabi_i2f+0x34>
 800129c:	fbffffff 	.word	0xfbffffff

080012a0 <__aeabi_dadd>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	464f      	mov	r7, r9
 80012a4:	46d6      	mov	lr, sl
 80012a6:	4646      	mov	r6, r8
 80012a8:	000d      	movs	r5, r1
 80012aa:	0001      	movs	r1, r0
 80012ac:	0018      	movs	r0, r3
 80012ae:	b5c0      	push	{r6, r7, lr}
 80012b0:	0017      	movs	r7, r2
 80012b2:	032b      	lsls	r3, r5, #12
 80012b4:	0a5a      	lsrs	r2, r3, #9
 80012b6:	0f4b      	lsrs	r3, r1, #29
 80012b8:	4313      	orrs	r3, r2
 80012ba:	00ca      	lsls	r2, r1, #3
 80012bc:	4691      	mov	r9, r2
 80012be:	0302      	lsls	r2, r0, #12
 80012c0:	006e      	lsls	r6, r5, #1
 80012c2:	0041      	lsls	r1, r0, #1
 80012c4:	0a52      	lsrs	r2, r2, #9
 80012c6:	0fec      	lsrs	r4, r5, #31
 80012c8:	0f7d      	lsrs	r5, r7, #29
 80012ca:	4315      	orrs	r5, r2
 80012cc:	0d76      	lsrs	r6, r6, #21
 80012ce:	0d49      	lsrs	r1, r1, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	4682      	mov	sl, r0
 80012d4:	46ac      	mov	ip, r5
 80012d6:	00ff      	lsls	r7, r7, #3
 80012d8:	1a72      	subs	r2, r6, r1
 80012da:	4284      	cmp	r4, r0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x40>
 80012de:	e098      	b.n	8001412 <__aeabi_dadd+0x172>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	dc00      	bgt.n	80012e6 <__aeabi_dadd+0x46>
 80012e4:	e081      	b.n	80013ea <__aeabi_dadd+0x14a>
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dadd+0x4c>
 80012ea:	e0b6      	b.n	800145a <__aeabi_dadd+0x1ba>
 80012ec:	49c9      	ldr	r1, [pc, #804]	; (8001614 <__aeabi_dadd+0x374>)
 80012ee:	428e      	cmp	r6, r1
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x54>
 80012f2:	e172      	b.n	80015da <__aeabi_dadd+0x33a>
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0028      	movs	r0, r5
 80012f8:	0409      	lsls	r1, r1, #16
 80012fa:	4308      	orrs	r0, r1
 80012fc:	4684      	mov	ip, r0
 80012fe:	2a38      	cmp	r2, #56	; 0x38
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x64>
 8001302:	e15e      	b.n	80015c2 <__aeabi_dadd+0x322>
 8001304:	2a1f      	cmp	r2, #31
 8001306:	dd00      	ble.n	800130a <__aeabi_dadd+0x6a>
 8001308:	e1ee      	b.n	80016e8 <__aeabi_dadd+0x448>
 800130a:	2020      	movs	r0, #32
 800130c:	0039      	movs	r1, r7
 800130e:	4665      	mov	r5, ip
 8001310:	1a80      	subs	r0, r0, r2
 8001312:	4087      	lsls	r7, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	4085      	lsls	r5, r0
 8001318:	430d      	orrs	r5, r1
 800131a:	0039      	movs	r1, r7
 800131c:	1e4f      	subs	r7, r1, #1
 800131e:	41b9      	sbcs	r1, r7
 8001320:	4667      	mov	r7, ip
 8001322:	40d7      	lsrs	r7, r2
 8001324:	4329      	orrs	r1, r5
 8001326:	1bdb      	subs	r3, r3, r7
 8001328:	464a      	mov	r2, r9
 800132a:	1a55      	subs	r5, r2, r1
 800132c:	45a9      	cmp	r9, r5
 800132e:	4189      	sbcs	r1, r1
 8001330:	4249      	negs	r1, r1
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	4698      	mov	r8, r3
 8001336:	4643      	mov	r3, r8
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	d400      	bmi.n	800133e <__aeabi_dadd+0x9e>
 800133c:	e0cc      	b.n	80014d8 <__aeabi_dadd+0x238>
 800133e:	4643      	mov	r3, r8
 8001340:	025b      	lsls	r3, r3, #9
 8001342:	0a5b      	lsrs	r3, r3, #9
 8001344:	4698      	mov	r8, r3
 8001346:	4643      	mov	r3, r8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0xae>
 800134c:	e12c      	b.n	80015a8 <__aeabi_dadd+0x308>
 800134e:	4640      	mov	r0, r8
 8001350:	f001 fe8e 	bl	8003070 <__clzsi2>
 8001354:	0001      	movs	r1, r0
 8001356:	3908      	subs	r1, #8
 8001358:	2220      	movs	r2, #32
 800135a:	0028      	movs	r0, r5
 800135c:	4643      	mov	r3, r8
 800135e:	1a52      	subs	r2, r2, r1
 8001360:	408b      	lsls	r3, r1
 8001362:	40d0      	lsrs	r0, r2
 8001364:	408d      	lsls	r5, r1
 8001366:	4303      	orrs	r3, r0
 8001368:	428e      	cmp	r6, r1
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0xce>
 800136c:	e117      	b.n	800159e <__aeabi_dadd+0x2fe>
 800136e:	1b8e      	subs	r6, r1, r6
 8001370:	1c72      	adds	r2, r6, #1
 8001372:	2a1f      	cmp	r2, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0xd8>
 8001376:	e1a7      	b.n	80016c8 <__aeabi_dadd+0x428>
 8001378:	2120      	movs	r1, #32
 800137a:	0018      	movs	r0, r3
 800137c:	002e      	movs	r6, r5
 800137e:	1a89      	subs	r1, r1, r2
 8001380:	408d      	lsls	r5, r1
 8001382:	4088      	lsls	r0, r1
 8001384:	40d6      	lsrs	r6, r2
 8001386:	40d3      	lsrs	r3, r2
 8001388:	1e69      	subs	r1, r5, #1
 800138a:	418d      	sbcs	r5, r1
 800138c:	4330      	orrs	r0, r6
 800138e:	4698      	mov	r8, r3
 8001390:	2600      	movs	r6, #0
 8001392:	4305      	orrs	r5, r0
 8001394:	076b      	lsls	r3, r5, #29
 8001396:	d009      	beq.n	80013ac <__aeabi_dadd+0x10c>
 8001398:	230f      	movs	r3, #15
 800139a:	402b      	ands	r3, r5
 800139c:	2b04      	cmp	r3, #4
 800139e:	d005      	beq.n	80013ac <__aeabi_dadd+0x10c>
 80013a0:	1d2b      	adds	r3, r5, #4
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	41ad      	sbcs	r5, r5
 80013a6:	426d      	negs	r5, r5
 80013a8:	44a8      	add	r8, r5
 80013aa:	001d      	movs	r5, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	d400      	bmi.n	80013b4 <__aeabi_dadd+0x114>
 80013b2:	e094      	b.n	80014de <__aeabi_dadd+0x23e>
 80013b4:	4b97      	ldr	r3, [pc, #604]	; (8001614 <__aeabi_dadd+0x374>)
 80013b6:	1c72      	adds	r2, r6, #1
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x11e>
 80013bc:	e09d      	b.n	80014fa <__aeabi_dadd+0x25a>
 80013be:	4641      	mov	r1, r8
 80013c0:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x378>)
 80013c2:	08ed      	lsrs	r5, r5, #3
 80013c4:	4019      	ands	r1, r3
 80013c6:	000b      	movs	r3, r1
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	0749      	lsls	r1, r1, #29
 80013cc:	025b      	lsls	r3, r3, #9
 80013ce:	4329      	orrs	r1, r5
 80013d0:	0b1b      	lsrs	r3, r3, #12
 80013d2:	0d52      	lsrs	r2, r2, #21
 80013d4:	0512      	lsls	r2, r2, #20
 80013d6:	4313      	orrs	r3, r2
 80013d8:	07e4      	lsls	r4, r4, #31
 80013da:	4323      	orrs	r3, r4
 80013dc:	0008      	movs	r0, r1
 80013de:	0019      	movs	r1, r3
 80013e0:	bce0      	pop	{r5, r6, r7}
 80013e2:	46ba      	mov	sl, r7
 80013e4:	46b1      	mov	r9, r6
 80013e6:	46a8      	mov	r8, r5
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d043      	beq.n	8001476 <__aeabi_dadd+0x1d6>
 80013ee:	1b8a      	subs	r2, r1, r6
 80013f0:	2e00      	cmp	r6, #0
 80013f2:	d000      	beq.n	80013f6 <__aeabi_dadd+0x156>
 80013f4:	e12a      	b.n	800164c <__aeabi_dadd+0x3ac>
 80013f6:	464c      	mov	r4, r9
 80013f8:	431c      	orrs	r4, r3
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x15e>
 80013fc:	e1d1      	b.n	80017a2 <__aeabi_dadd+0x502>
 80013fe:	1e54      	subs	r4, r2, #1
 8001400:	2a01      	cmp	r2, #1
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x166>
 8001404:	e21f      	b.n	8001846 <__aeabi_dadd+0x5a6>
 8001406:	4d83      	ldr	r5, [pc, #524]	; (8001614 <__aeabi_dadd+0x374>)
 8001408:	42aa      	cmp	r2, r5
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x16e>
 800140c:	e272      	b.n	80018f4 <__aeabi_dadd+0x654>
 800140e:	0022      	movs	r2, r4
 8001410:	e123      	b.n	800165a <__aeabi_dadd+0x3ba>
 8001412:	2a00      	cmp	r2, #0
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dadd+0x178>
 8001416:	e098      	b.n	800154a <__aeabi_dadd+0x2aa>
 8001418:	2900      	cmp	r1, #0
 800141a:	d042      	beq.n	80014a2 <__aeabi_dadd+0x202>
 800141c:	497d      	ldr	r1, [pc, #500]	; (8001614 <__aeabi_dadd+0x374>)
 800141e:	428e      	cmp	r6, r1
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x184>
 8001422:	e0da      	b.n	80015da <__aeabi_dadd+0x33a>
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0028      	movs	r0, r5
 8001428:	0409      	lsls	r1, r1, #16
 800142a:	4308      	orrs	r0, r1
 800142c:	4684      	mov	ip, r0
 800142e:	2a38      	cmp	r2, #56	; 0x38
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x194>
 8001432:	e129      	b.n	8001688 <__aeabi_dadd+0x3e8>
 8001434:	2a1f      	cmp	r2, #31
 8001436:	dc00      	bgt.n	800143a <__aeabi_dadd+0x19a>
 8001438:	e187      	b.n	800174a <__aeabi_dadd+0x4aa>
 800143a:	0011      	movs	r1, r2
 800143c:	4665      	mov	r5, ip
 800143e:	3920      	subs	r1, #32
 8001440:	40cd      	lsrs	r5, r1
 8001442:	2a20      	cmp	r2, #32
 8001444:	d004      	beq.n	8001450 <__aeabi_dadd+0x1b0>
 8001446:	2040      	movs	r0, #64	; 0x40
 8001448:	4661      	mov	r1, ip
 800144a:	1a82      	subs	r2, r0, r2
 800144c:	4091      	lsls	r1, r2
 800144e:	430f      	orrs	r7, r1
 8001450:	0039      	movs	r1, r7
 8001452:	1e4f      	subs	r7, r1, #1
 8001454:	41b9      	sbcs	r1, r7
 8001456:	430d      	orrs	r5, r1
 8001458:	e11b      	b.n	8001692 <__aeabi_dadd+0x3f2>
 800145a:	0029      	movs	r1, r5
 800145c:	4339      	orrs	r1, r7
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x1c2>
 8001460:	e0b5      	b.n	80015ce <__aeabi_dadd+0x32e>
 8001462:	1e51      	subs	r1, r2, #1
 8001464:	2a01      	cmp	r2, #1
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x1ca>
 8001468:	e1ab      	b.n	80017c2 <__aeabi_dadd+0x522>
 800146a:	486a      	ldr	r0, [pc, #424]	; (8001614 <__aeabi_dadd+0x374>)
 800146c:	4282      	cmp	r2, r0
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x1d2>
 8001470:	e1b2      	b.n	80017d8 <__aeabi_dadd+0x538>
 8001472:	000a      	movs	r2, r1
 8001474:	e743      	b.n	80012fe <__aeabi_dadd+0x5e>
 8001476:	4969      	ldr	r1, [pc, #420]	; (800161c <__aeabi_dadd+0x37c>)
 8001478:	1c75      	adds	r5, r6, #1
 800147a:	420d      	tst	r5, r1
 800147c:	d000      	beq.n	8001480 <__aeabi_dadd+0x1e0>
 800147e:	e0cf      	b.n	8001620 <__aeabi_dadd+0x380>
 8001480:	2e00      	cmp	r6, #0
 8001482:	d000      	beq.n	8001486 <__aeabi_dadd+0x1e6>
 8001484:	e193      	b.n	80017ae <__aeabi_dadd+0x50e>
 8001486:	4649      	mov	r1, r9
 8001488:	4319      	orrs	r1, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1ee>
 800148c:	e1d1      	b.n	8001832 <__aeabi_dadd+0x592>
 800148e:	4661      	mov	r1, ip
 8001490:	4339      	orrs	r1, r7
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x1f6>
 8001494:	e1e3      	b.n	800185e <__aeabi_dadd+0x5be>
 8001496:	4649      	mov	r1, r9
 8001498:	0758      	lsls	r0, r3, #29
 800149a:	08c9      	lsrs	r1, r1, #3
 800149c:	4301      	orrs	r1, r0
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	e026      	b.n	80014f0 <__aeabi_dadd+0x250>
 80014a2:	0029      	movs	r1, r5
 80014a4:	4339      	orrs	r1, r7
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x20a>
 80014a8:	e091      	b.n	80015ce <__aeabi_dadd+0x32e>
 80014aa:	1e51      	subs	r1, r2, #1
 80014ac:	2a01      	cmp	r2, #1
 80014ae:	d005      	beq.n	80014bc <__aeabi_dadd+0x21c>
 80014b0:	4858      	ldr	r0, [pc, #352]	; (8001614 <__aeabi_dadd+0x374>)
 80014b2:	4282      	cmp	r2, r0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dadd+0x218>
 80014b6:	e18f      	b.n	80017d8 <__aeabi_dadd+0x538>
 80014b8:	000a      	movs	r2, r1
 80014ba:	e7b8      	b.n	800142e <__aeabi_dadd+0x18e>
 80014bc:	003d      	movs	r5, r7
 80014be:	444d      	add	r5, r9
 80014c0:	454d      	cmp	r5, r9
 80014c2:	4189      	sbcs	r1, r1
 80014c4:	4463      	add	r3, ip
 80014c6:	4698      	mov	r8, r3
 80014c8:	4249      	negs	r1, r1
 80014ca:	4488      	add	r8, r1
 80014cc:	4643      	mov	r3, r8
 80014ce:	2602      	movs	r6, #2
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	d500      	bpl.n	80014d6 <__aeabi_dadd+0x236>
 80014d4:	e0eb      	b.n	80016ae <__aeabi_dadd+0x40e>
 80014d6:	3e01      	subs	r6, #1
 80014d8:	076b      	lsls	r3, r5, #29
 80014da:	d000      	beq.n	80014de <__aeabi_dadd+0x23e>
 80014dc:	e75c      	b.n	8001398 <__aeabi_dadd+0xf8>
 80014de:	4643      	mov	r3, r8
 80014e0:	08e9      	lsrs	r1, r5, #3
 80014e2:	075a      	lsls	r2, r3, #29
 80014e4:	4311      	orrs	r1, r2
 80014e6:	0032      	movs	r2, r6
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	484a      	ldr	r0, [pc, #296]	; (8001614 <__aeabi_dadd+0x374>)
 80014ec:	4282      	cmp	r2, r0
 80014ee:	d021      	beq.n	8001534 <__aeabi_dadd+0x294>
 80014f0:	031b      	lsls	r3, r3, #12
 80014f2:	0552      	lsls	r2, r2, #21
 80014f4:	0b1b      	lsrs	r3, r3, #12
 80014f6:	0d52      	lsrs	r2, r2, #21
 80014f8:	e76c      	b.n	80013d4 <__aeabi_dadd+0x134>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	e769      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001500:	002a      	movs	r2, r5
 8001502:	433a      	orrs	r2, r7
 8001504:	d069      	beq.n	80015da <__aeabi_dadd+0x33a>
 8001506:	464a      	mov	r2, r9
 8001508:	0758      	lsls	r0, r3, #29
 800150a:	08d1      	lsrs	r1, r2, #3
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	031b      	lsls	r3, r3, #12
 8001512:	4308      	orrs	r0, r1
 8001514:	421a      	tst	r2, r3
 8001516:	d007      	beq.n	8001528 <__aeabi_dadd+0x288>
 8001518:	0029      	movs	r1, r5
 800151a:	08ed      	lsrs	r5, r5, #3
 800151c:	421d      	tst	r5, r3
 800151e:	d103      	bne.n	8001528 <__aeabi_dadd+0x288>
 8001520:	002a      	movs	r2, r5
 8001522:	08ff      	lsrs	r7, r7, #3
 8001524:	0748      	lsls	r0, r1, #29
 8001526:	4338      	orrs	r0, r7
 8001528:	0f43      	lsrs	r3, r0, #29
 800152a:	00c1      	lsls	r1, r0, #3
 800152c:	075b      	lsls	r3, r3, #29
 800152e:	08c9      	lsrs	r1, r1, #3
 8001530:	4319      	orrs	r1, r3
 8001532:	0013      	movs	r3, r2
 8001534:	000a      	movs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x29c>
 800153a:	e213      	b.n	8001964 <__aeabi_dadd+0x6c4>
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	4313      	orrs	r3, r2
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <__aeabi_dadd+0x374>)
 8001546:	0b1b      	lsrs	r3, r3, #12
 8001548:	e744      	b.n	80013d4 <__aeabi_dadd+0x134>
 800154a:	2a00      	cmp	r2, #0
 800154c:	d04b      	beq.n	80015e6 <__aeabi_dadd+0x346>
 800154e:	1b8a      	subs	r2, r1, r6
 8001550:	2e00      	cmp	r6, #0
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x2b6>
 8001554:	e0e7      	b.n	8001726 <__aeabi_dadd+0x486>
 8001556:	482f      	ldr	r0, [pc, #188]	; (8001614 <__aeabi_dadd+0x374>)
 8001558:	4281      	cmp	r1, r0
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x2be>
 800155c:	e195      	b.n	800188a <__aeabi_dadd+0x5ea>
 800155e:	2080      	movs	r0, #128	; 0x80
 8001560:	0400      	lsls	r0, r0, #16
 8001562:	4303      	orrs	r3, r0
 8001564:	2a38      	cmp	r2, #56	; 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_dadd+0x2ca>
 8001568:	e143      	b.n	80017f2 <__aeabi_dadd+0x552>
 800156a:	2a1f      	cmp	r2, #31
 800156c:	dd00      	ble.n	8001570 <__aeabi_dadd+0x2d0>
 800156e:	e1db      	b.n	8001928 <__aeabi_dadd+0x688>
 8001570:	2020      	movs	r0, #32
 8001572:	001d      	movs	r5, r3
 8001574:	464e      	mov	r6, r9
 8001576:	1a80      	subs	r0, r0, r2
 8001578:	4085      	lsls	r5, r0
 800157a:	40d6      	lsrs	r6, r2
 800157c:	4335      	orrs	r5, r6
 800157e:	464e      	mov	r6, r9
 8001580:	4086      	lsls	r6, r0
 8001582:	0030      	movs	r0, r6
 8001584:	40d3      	lsrs	r3, r2
 8001586:	1e46      	subs	r6, r0, #1
 8001588:	41b0      	sbcs	r0, r6
 800158a:	449c      	add	ip, r3
 800158c:	4305      	orrs	r5, r0
 800158e:	19ed      	adds	r5, r5, r7
 8001590:	42bd      	cmp	r5, r7
 8001592:	419b      	sbcs	r3, r3
 8001594:	425b      	negs	r3, r3
 8001596:	4463      	add	r3, ip
 8001598:	4698      	mov	r8, r3
 800159a:	000e      	movs	r6, r1
 800159c:	e07f      	b.n	800169e <__aeabi_dadd+0x3fe>
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <__aeabi_dadd+0x378>)
 80015a0:	1a76      	subs	r6, r6, r1
 80015a2:	4013      	ands	r3, r2
 80015a4:	4698      	mov	r8, r3
 80015a6:	e6f5      	b.n	8001394 <__aeabi_dadd+0xf4>
 80015a8:	0028      	movs	r0, r5
 80015aa:	f001 fd61 	bl	8003070 <__clzsi2>
 80015ae:	0001      	movs	r1, r0
 80015b0:	3118      	adds	r1, #24
 80015b2:	291f      	cmp	r1, #31
 80015b4:	dc00      	bgt.n	80015b8 <__aeabi_dadd+0x318>
 80015b6:	e6cf      	b.n	8001358 <__aeabi_dadd+0xb8>
 80015b8:	002b      	movs	r3, r5
 80015ba:	3808      	subs	r0, #8
 80015bc:	4083      	lsls	r3, r0
 80015be:	2500      	movs	r5, #0
 80015c0:	e6d2      	b.n	8001368 <__aeabi_dadd+0xc8>
 80015c2:	4662      	mov	r2, ip
 80015c4:	433a      	orrs	r2, r7
 80015c6:	0011      	movs	r1, r2
 80015c8:	1e4f      	subs	r7, r1, #1
 80015ca:	41b9      	sbcs	r1, r7
 80015cc:	e6ac      	b.n	8001328 <__aeabi_dadd+0x88>
 80015ce:	4649      	mov	r1, r9
 80015d0:	0758      	lsls	r0, r3, #29
 80015d2:	08c9      	lsrs	r1, r1, #3
 80015d4:	4301      	orrs	r1, r0
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e787      	b.n	80014ea <__aeabi_dadd+0x24a>
 80015da:	4649      	mov	r1, r9
 80015dc:	075a      	lsls	r2, r3, #29
 80015de:	08c9      	lsrs	r1, r1, #3
 80015e0:	4311      	orrs	r1, r2
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	e7a6      	b.n	8001534 <__aeabi_dadd+0x294>
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <__aeabi_dadd+0x37c>)
 80015e8:	1c70      	adds	r0, r6, #1
 80015ea:	4208      	tst	r0, r1
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x350>
 80015ee:	e0bb      	b.n	8001768 <__aeabi_dadd+0x4c8>
 80015f0:	2e00      	cmp	r6, #0
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x356>
 80015f4:	e114      	b.n	8001820 <__aeabi_dadd+0x580>
 80015f6:	4649      	mov	r1, r9
 80015f8:	4319      	orrs	r1, r3
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x35e>
 80015fc:	e175      	b.n	80018ea <__aeabi_dadd+0x64a>
 80015fe:	0029      	movs	r1, r5
 8001600:	4339      	orrs	r1, r7
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x366>
 8001604:	e17e      	b.n	8001904 <__aeabi_dadd+0x664>
 8001606:	4649      	mov	r1, r9
 8001608:	0758      	lsls	r0, r3, #29
 800160a:	08c9      	lsrs	r1, r1, #3
 800160c:	4301      	orrs	r1, r0
 800160e:	08db      	lsrs	r3, r3, #3
 8001610:	e76e      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	000007ff 	.word	0x000007ff
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	000007fe 	.word	0x000007fe
 8001620:	4649      	mov	r1, r9
 8001622:	1bcd      	subs	r5, r1, r7
 8001624:	4661      	mov	r1, ip
 8001626:	1a58      	subs	r0, r3, r1
 8001628:	45a9      	cmp	r9, r5
 800162a:	4189      	sbcs	r1, r1
 800162c:	4249      	negs	r1, r1
 800162e:	4688      	mov	r8, r1
 8001630:	0001      	movs	r1, r0
 8001632:	4640      	mov	r0, r8
 8001634:	1a09      	subs	r1, r1, r0
 8001636:	4688      	mov	r8, r1
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x39e>
 800163c:	e0a6      	b.n	800178c <__aeabi_dadd+0x4ec>
 800163e:	4641      	mov	r1, r8
 8001640:	4329      	orrs	r1, r5
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x3a6>
 8001644:	e67f      	b.n	8001346 <__aeabi_dadd+0xa6>
 8001646:	2300      	movs	r3, #0
 8001648:	2400      	movs	r4, #0
 800164a:	e751      	b.n	80014f0 <__aeabi_dadd+0x250>
 800164c:	4cc7      	ldr	r4, [pc, #796]	; (800196c <__aeabi_dadd+0x6cc>)
 800164e:	42a1      	cmp	r1, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3b4>
 8001652:	e0c7      	b.n	80017e4 <__aeabi_dadd+0x544>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4323      	orrs	r3, r4
 800165a:	2a38      	cmp	r2, #56	; 0x38
 800165c:	dc54      	bgt.n	8001708 <__aeabi_dadd+0x468>
 800165e:	2a1f      	cmp	r2, #31
 8001660:	dd00      	ble.n	8001664 <__aeabi_dadd+0x3c4>
 8001662:	e0cc      	b.n	80017fe <__aeabi_dadd+0x55e>
 8001664:	2420      	movs	r4, #32
 8001666:	4648      	mov	r0, r9
 8001668:	1aa4      	subs	r4, r4, r2
 800166a:	001d      	movs	r5, r3
 800166c:	464e      	mov	r6, r9
 800166e:	40a0      	lsls	r0, r4
 8001670:	40d6      	lsrs	r6, r2
 8001672:	40a5      	lsls	r5, r4
 8001674:	0004      	movs	r4, r0
 8001676:	40d3      	lsrs	r3, r2
 8001678:	4662      	mov	r2, ip
 800167a:	4335      	orrs	r5, r6
 800167c:	1e66      	subs	r6, r4, #1
 800167e:	41b4      	sbcs	r4, r6
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	469c      	mov	ip, r3
 8001684:	4325      	orrs	r5, r4
 8001686:	e044      	b.n	8001712 <__aeabi_dadd+0x472>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	0015      	movs	r5, r2
 800168e:	1e6f      	subs	r7, r5, #1
 8001690:	41bd      	sbcs	r5, r7
 8001692:	444d      	add	r5, r9
 8001694:	454d      	cmp	r5, r9
 8001696:	4189      	sbcs	r1, r1
 8001698:	4249      	negs	r1, r1
 800169a:	4688      	mov	r8, r1
 800169c:	4498      	add	r8, r3
 800169e:	4643      	mov	r3, r8
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x406>
 80016a4:	e718      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016a6:	4bb1      	ldr	r3, [pc, #708]	; (800196c <__aeabi_dadd+0x6cc>)
 80016a8:	3601      	adds	r6, #1
 80016aa:	429e      	cmp	r6, r3
 80016ac:	d049      	beq.n	8001742 <__aeabi_dadd+0x4a2>
 80016ae:	4642      	mov	r2, r8
 80016b0:	4baf      	ldr	r3, [pc, #700]	; (8001970 <__aeabi_dadd+0x6d0>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	401a      	ands	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	086a      	lsrs	r2, r5, #1
 80016ba:	400d      	ands	r5, r1
 80016bc:	4315      	orrs	r5, r2
 80016be:	07d9      	lsls	r1, r3, #31
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	4698      	mov	r8, r3
 80016c4:	430d      	orrs	r5, r1
 80016c6:	e665      	b.n	8001394 <__aeabi_dadd+0xf4>
 80016c8:	0018      	movs	r0, r3
 80016ca:	3e1f      	subs	r6, #31
 80016cc:	40f0      	lsrs	r0, r6
 80016ce:	2a20      	cmp	r2, #32
 80016d0:	d003      	beq.n	80016da <__aeabi_dadd+0x43a>
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	1a8a      	subs	r2, r1, r2
 80016d6:	4093      	lsls	r3, r2
 80016d8:	431d      	orrs	r5, r3
 80016da:	1e69      	subs	r1, r5, #1
 80016dc:	418d      	sbcs	r5, r1
 80016de:	2300      	movs	r3, #0
 80016e0:	2600      	movs	r6, #0
 80016e2:	4698      	mov	r8, r3
 80016e4:	4305      	orrs	r5, r0
 80016e6:	e6f7      	b.n	80014d8 <__aeabi_dadd+0x238>
 80016e8:	0011      	movs	r1, r2
 80016ea:	4665      	mov	r5, ip
 80016ec:	3920      	subs	r1, #32
 80016ee:	40cd      	lsrs	r5, r1
 80016f0:	2a20      	cmp	r2, #32
 80016f2:	d004      	beq.n	80016fe <__aeabi_dadd+0x45e>
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	4661      	mov	r1, ip
 80016f8:	1a82      	subs	r2, r0, r2
 80016fa:	4091      	lsls	r1, r2
 80016fc:	430f      	orrs	r7, r1
 80016fe:	0039      	movs	r1, r7
 8001700:	1e4f      	subs	r7, r1, #1
 8001702:	41b9      	sbcs	r1, r7
 8001704:	4329      	orrs	r1, r5
 8001706:	e60f      	b.n	8001328 <__aeabi_dadd+0x88>
 8001708:	464a      	mov	r2, r9
 800170a:	4313      	orrs	r3, r2
 800170c:	001d      	movs	r5, r3
 800170e:	1e6b      	subs	r3, r5, #1
 8001710:	419d      	sbcs	r5, r3
 8001712:	1b7d      	subs	r5, r7, r5
 8001714:	42af      	cmp	r7, r5
 8001716:	419b      	sbcs	r3, r3
 8001718:	4662      	mov	r2, ip
 800171a:	425b      	negs	r3, r3
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4698      	mov	r8, r3
 8001720:	4654      	mov	r4, sl
 8001722:	000e      	movs	r6, r1
 8001724:	e607      	b.n	8001336 <__aeabi_dadd+0x96>
 8001726:	4648      	mov	r0, r9
 8001728:	4318      	orrs	r0, r3
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x48e>
 800172c:	e0b3      	b.n	8001896 <__aeabi_dadd+0x5f6>
 800172e:	1e50      	subs	r0, r2, #1
 8001730:	2a01      	cmp	r2, #1
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x496>
 8001734:	e10d      	b.n	8001952 <__aeabi_dadd+0x6b2>
 8001736:	4d8d      	ldr	r5, [pc, #564]	; (800196c <__aeabi_dadd+0x6cc>)
 8001738:	42aa      	cmp	r2, r5
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x49e>
 800173c:	e0a5      	b.n	800188a <__aeabi_dadd+0x5ea>
 800173e:	0002      	movs	r2, r0
 8001740:	e710      	b.n	8001564 <__aeabi_dadd+0x2c4>
 8001742:	0032      	movs	r2, r6
 8001744:	2300      	movs	r3, #0
 8001746:	2100      	movs	r1, #0
 8001748:	e644      	b.n	80013d4 <__aeabi_dadd+0x134>
 800174a:	2120      	movs	r1, #32
 800174c:	0038      	movs	r0, r7
 800174e:	1a89      	subs	r1, r1, r2
 8001750:	4665      	mov	r5, ip
 8001752:	408f      	lsls	r7, r1
 8001754:	408d      	lsls	r5, r1
 8001756:	40d0      	lsrs	r0, r2
 8001758:	1e79      	subs	r1, r7, #1
 800175a:	418f      	sbcs	r7, r1
 800175c:	4305      	orrs	r5, r0
 800175e:	433d      	orrs	r5, r7
 8001760:	4667      	mov	r7, ip
 8001762:	40d7      	lsrs	r7, r2
 8001764:	19db      	adds	r3, r3, r7
 8001766:	e794      	b.n	8001692 <__aeabi_dadd+0x3f2>
 8001768:	4a80      	ldr	r2, [pc, #512]	; (800196c <__aeabi_dadd+0x6cc>)
 800176a:	4290      	cmp	r0, r2
 800176c:	d100      	bne.n	8001770 <__aeabi_dadd+0x4d0>
 800176e:	e0ec      	b.n	800194a <__aeabi_dadd+0x6aa>
 8001770:	0039      	movs	r1, r7
 8001772:	4449      	add	r1, r9
 8001774:	4549      	cmp	r1, r9
 8001776:	4192      	sbcs	r2, r2
 8001778:	4463      	add	r3, ip
 800177a:	4252      	negs	r2, r2
 800177c:	189b      	adds	r3, r3, r2
 800177e:	07dd      	lsls	r5, r3, #31
 8001780:	0849      	lsrs	r1, r1, #1
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	4698      	mov	r8, r3
 8001786:	0006      	movs	r6, r0
 8001788:	430d      	orrs	r5, r1
 800178a:	e6a5      	b.n	80014d8 <__aeabi_dadd+0x238>
 800178c:	464a      	mov	r2, r9
 800178e:	1abd      	subs	r5, r7, r2
 8001790:	42af      	cmp	r7, r5
 8001792:	4189      	sbcs	r1, r1
 8001794:	4662      	mov	r2, ip
 8001796:	4249      	negs	r1, r1
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	1a5b      	subs	r3, r3, r1
 800179c:	4698      	mov	r8, r3
 800179e:	4654      	mov	r4, sl
 80017a0:	e5d1      	b.n	8001346 <__aeabi_dadd+0xa6>
 80017a2:	076c      	lsls	r4, r5, #29
 80017a4:	08f9      	lsrs	r1, r7, #3
 80017a6:	4321      	orrs	r1, r4
 80017a8:	08eb      	lsrs	r3, r5, #3
 80017aa:	0004      	movs	r4, r0
 80017ac:	e69d      	b.n	80014ea <__aeabi_dadd+0x24a>
 80017ae:	464a      	mov	r2, r9
 80017b0:	431a      	orrs	r2, r3
 80017b2:	d175      	bne.n	80018a0 <__aeabi_dadd+0x600>
 80017b4:	4661      	mov	r1, ip
 80017b6:	4339      	orrs	r1, r7
 80017b8:	d114      	bne.n	80017e4 <__aeabi_dadd+0x544>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	2400      	movs	r4, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	e6bc      	b.n	800153c <__aeabi_dadd+0x29c>
 80017c2:	464a      	mov	r2, r9
 80017c4:	1bd5      	subs	r5, r2, r7
 80017c6:	45a9      	cmp	r9, r5
 80017c8:	4189      	sbcs	r1, r1
 80017ca:	4662      	mov	r2, ip
 80017cc:	4249      	negs	r1, r1
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	1a5b      	subs	r3, r3, r1
 80017d2:	4698      	mov	r8, r3
 80017d4:	2601      	movs	r6, #1
 80017d6:	e5ae      	b.n	8001336 <__aeabi_dadd+0x96>
 80017d8:	464a      	mov	r2, r9
 80017da:	08d1      	lsrs	r1, r2, #3
 80017dc:	075a      	lsls	r2, r3, #29
 80017de:	4311      	orrs	r1, r2
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	e6a7      	b.n	8001534 <__aeabi_dadd+0x294>
 80017e4:	4663      	mov	r3, ip
 80017e6:	08f9      	lsrs	r1, r7, #3
 80017e8:	075a      	lsls	r2, r3, #29
 80017ea:	4654      	mov	r4, sl
 80017ec:	4311      	orrs	r1, r2
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	e6a0      	b.n	8001534 <__aeabi_dadd+0x294>
 80017f2:	464a      	mov	r2, r9
 80017f4:	4313      	orrs	r3, r2
 80017f6:	001d      	movs	r5, r3
 80017f8:	1e6b      	subs	r3, r5, #1
 80017fa:	419d      	sbcs	r5, r3
 80017fc:	e6c7      	b.n	800158e <__aeabi_dadd+0x2ee>
 80017fe:	0014      	movs	r4, r2
 8001800:	001e      	movs	r6, r3
 8001802:	3c20      	subs	r4, #32
 8001804:	40e6      	lsrs	r6, r4
 8001806:	2a20      	cmp	r2, #32
 8001808:	d005      	beq.n	8001816 <__aeabi_dadd+0x576>
 800180a:	2440      	movs	r4, #64	; 0x40
 800180c:	1aa2      	subs	r2, r4, r2
 800180e:	4093      	lsls	r3, r2
 8001810:	464a      	mov	r2, r9
 8001812:	431a      	orrs	r2, r3
 8001814:	4691      	mov	r9, r2
 8001816:	464d      	mov	r5, r9
 8001818:	1e6b      	subs	r3, r5, #1
 800181a:	419d      	sbcs	r5, r3
 800181c:	4335      	orrs	r5, r6
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0x472>
 8001820:	464a      	mov	r2, r9
 8001822:	431a      	orrs	r2, r3
 8001824:	d000      	beq.n	8001828 <__aeabi_dadd+0x588>
 8001826:	e66b      	b.n	8001500 <__aeabi_dadd+0x260>
 8001828:	076b      	lsls	r3, r5, #29
 800182a:	08f9      	lsrs	r1, r7, #3
 800182c:	4319      	orrs	r1, r3
 800182e:	08eb      	lsrs	r3, r5, #3
 8001830:	e680      	b.n	8001534 <__aeabi_dadd+0x294>
 8001832:	4661      	mov	r1, ip
 8001834:	4339      	orrs	r1, r7
 8001836:	d054      	beq.n	80018e2 <__aeabi_dadd+0x642>
 8001838:	4663      	mov	r3, ip
 800183a:	08f9      	lsrs	r1, r7, #3
 800183c:	075c      	lsls	r4, r3, #29
 800183e:	4321      	orrs	r1, r4
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	0004      	movs	r4, r0
 8001844:	e654      	b.n	80014f0 <__aeabi_dadd+0x250>
 8001846:	464a      	mov	r2, r9
 8001848:	1abd      	subs	r5, r7, r2
 800184a:	42af      	cmp	r7, r5
 800184c:	4189      	sbcs	r1, r1
 800184e:	4662      	mov	r2, ip
 8001850:	4249      	negs	r1, r1
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	1a5b      	subs	r3, r3, r1
 8001856:	4698      	mov	r8, r3
 8001858:	0004      	movs	r4, r0
 800185a:	2601      	movs	r6, #1
 800185c:	e56b      	b.n	8001336 <__aeabi_dadd+0x96>
 800185e:	464a      	mov	r2, r9
 8001860:	1bd5      	subs	r5, r2, r7
 8001862:	45a9      	cmp	r9, r5
 8001864:	4189      	sbcs	r1, r1
 8001866:	4662      	mov	r2, ip
 8001868:	4249      	negs	r1, r1
 800186a:	1a9a      	subs	r2, r3, r2
 800186c:	1a52      	subs	r2, r2, r1
 800186e:	4690      	mov	r8, r2
 8001870:	0212      	lsls	r2, r2, #8
 8001872:	d532      	bpl.n	80018da <__aeabi_dadd+0x63a>
 8001874:	464a      	mov	r2, r9
 8001876:	1abd      	subs	r5, r7, r2
 8001878:	42af      	cmp	r7, r5
 800187a:	4189      	sbcs	r1, r1
 800187c:	4662      	mov	r2, ip
 800187e:	4249      	negs	r1, r1
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	4698      	mov	r8, r3
 8001886:	0004      	movs	r4, r0
 8001888:	e584      	b.n	8001394 <__aeabi_dadd+0xf4>
 800188a:	4663      	mov	r3, ip
 800188c:	08f9      	lsrs	r1, r7, #3
 800188e:	075a      	lsls	r2, r3, #29
 8001890:	4311      	orrs	r1, r2
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	e64e      	b.n	8001534 <__aeabi_dadd+0x294>
 8001896:	08f9      	lsrs	r1, r7, #3
 8001898:	0768      	lsls	r0, r5, #29
 800189a:	4301      	orrs	r1, r0
 800189c:	08eb      	lsrs	r3, r5, #3
 800189e:	e624      	b.n	80014ea <__aeabi_dadd+0x24a>
 80018a0:	4662      	mov	r2, ip
 80018a2:	433a      	orrs	r2, r7
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dadd+0x608>
 80018a6:	e698      	b.n	80015da <__aeabi_dadd+0x33a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	08d1      	lsrs	r1, r2, #3
 80018ac:	075a      	lsls	r2, r3, #29
 80018ae:	4311      	orrs	r1, r2
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	421a      	tst	r2, r3
 80018b8:	d008      	beq.n	80018cc <__aeabi_dadd+0x62c>
 80018ba:	4660      	mov	r0, ip
 80018bc:	08c5      	lsrs	r5, r0, #3
 80018be:	421d      	tst	r5, r3
 80018c0:	d104      	bne.n	80018cc <__aeabi_dadd+0x62c>
 80018c2:	4654      	mov	r4, sl
 80018c4:	002a      	movs	r2, r5
 80018c6:	08f9      	lsrs	r1, r7, #3
 80018c8:	0743      	lsls	r3, r0, #29
 80018ca:	4319      	orrs	r1, r3
 80018cc:	0f4b      	lsrs	r3, r1, #29
 80018ce:	00c9      	lsls	r1, r1, #3
 80018d0:	075b      	lsls	r3, r3, #29
 80018d2:	08c9      	lsrs	r1, r1, #3
 80018d4:	4319      	orrs	r1, r3
 80018d6:	0013      	movs	r3, r2
 80018d8:	e62c      	b.n	8001534 <__aeabi_dadd+0x294>
 80018da:	4641      	mov	r1, r8
 80018dc:	4329      	orrs	r1, r5
 80018de:	d000      	beq.n	80018e2 <__aeabi_dadd+0x642>
 80018e0:	e5fa      	b.n	80014d8 <__aeabi_dadd+0x238>
 80018e2:	2300      	movs	r3, #0
 80018e4:	000a      	movs	r2, r1
 80018e6:	2400      	movs	r4, #0
 80018e8:	e602      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018ea:	076b      	lsls	r3, r5, #29
 80018ec:	08f9      	lsrs	r1, r7, #3
 80018ee:	4319      	orrs	r1, r3
 80018f0:	08eb      	lsrs	r3, r5, #3
 80018f2:	e5fd      	b.n	80014f0 <__aeabi_dadd+0x250>
 80018f4:	4663      	mov	r3, ip
 80018f6:	08f9      	lsrs	r1, r7, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4319      	orrs	r1, r3
 80018fc:	4663      	mov	r3, ip
 80018fe:	0004      	movs	r4, r0
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	e617      	b.n	8001534 <__aeabi_dadd+0x294>
 8001904:	003d      	movs	r5, r7
 8001906:	444d      	add	r5, r9
 8001908:	4463      	add	r3, ip
 800190a:	454d      	cmp	r5, r9
 800190c:	4189      	sbcs	r1, r1
 800190e:	4698      	mov	r8, r3
 8001910:	4249      	negs	r1, r1
 8001912:	4488      	add	r8, r1
 8001914:	4643      	mov	r3, r8
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dadd+0x67c>
 800191a:	e5dd      	b.n	80014d8 <__aeabi_dadd+0x238>
 800191c:	4642      	mov	r2, r8
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <__aeabi_dadd+0x6d0>)
 8001920:	2601      	movs	r6, #1
 8001922:	401a      	ands	r2, r3
 8001924:	4690      	mov	r8, r2
 8001926:	e5d7      	b.n	80014d8 <__aeabi_dadd+0x238>
 8001928:	0010      	movs	r0, r2
 800192a:	001e      	movs	r6, r3
 800192c:	3820      	subs	r0, #32
 800192e:	40c6      	lsrs	r6, r0
 8001930:	2a20      	cmp	r2, #32
 8001932:	d005      	beq.n	8001940 <__aeabi_dadd+0x6a0>
 8001934:	2040      	movs	r0, #64	; 0x40
 8001936:	1a82      	subs	r2, r0, r2
 8001938:	4093      	lsls	r3, r2
 800193a:	464a      	mov	r2, r9
 800193c:	431a      	orrs	r2, r3
 800193e:	4691      	mov	r9, r2
 8001940:	464d      	mov	r5, r9
 8001942:	1e6b      	subs	r3, r5, #1
 8001944:	419d      	sbcs	r5, r3
 8001946:	4335      	orrs	r5, r6
 8001948:	e621      	b.n	800158e <__aeabi_dadd+0x2ee>
 800194a:	0002      	movs	r2, r0
 800194c:	2300      	movs	r3, #0
 800194e:	2100      	movs	r1, #0
 8001950:	e540      	b.n	80013d4 <__aeabi_dadd+0x134>
 8001952:	464a      	mov	r2, r9
 8001954:	19d5      	adds	r5, r2, r7
 8001956:	42bd      	cmp	r5, r7
 8001958:	4189      	sbcs	r1, r1
 800195a:	4463      	add	r3, ip
 800195c:	4698      	mov	r8, r3
 800195e:	4249      	negs	r1, r1
 8001960:	4488      	add	r8, r1
 8001962:	e5b3      	b.n	80014cc <__aeabi_dadd+0x22c>
 8001964:	2100      	movs	r1, #0
 8001966:	4a01      	ldr	r2, [pc, #4]	; (800196c <__aeabi_dadd+0x6cc>)
 8001968:	000b      	movs	r3, r1
 800196a:	e533      	b.n	80013d4 <__aeabi_dadd+0x134>
 800196c:	000007ff 	.word	0x000007ff
 8001970:	ff7fffff 	.word	0xff7fffff

08001974 <__aeabi_ddiv>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	4681      	mov	r9, r0
 8001982:	0005      	movs	r5, r0
 8001984:	030c      	lsls	r4, r1, #12
 8001986:	0048      	lsls	r0, r1, #1
 8001988:	4692      	mov	sl, r2
 800198a:	001f      	movs	r7, r3
 800198c:	b085      	sub	sp, #20
 800198e:	0b24      	lsrs	r4, r4, #12
 8001990:	0d40      	lsrs	r0, r0, #21
 8001992:	0fce      	lsrs	r6, r1, #31
 8001994:	2800      	cmp	r0, #0
 8001996:	d059      	beq.n	8001a4c <__aeabi_ddiv+0xd8>
 8001998:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <__aeabi_ddiv+0x244>)
 800199a:	4298      	cmp	r0, r3
 800199c:	d100      	bne.n	80019a0 <__aeabi_ddiv+0x2c>
 800199e:	e098      	b.n	8001ad2 <__aeabi_ddiv+0x15e>
 80019a0:	0f6b      	lsrs	r3, r5, #29
 80019a2:	00e4      	lsls	r4, r4, #3
 80019a4:	431c      	orrs	r4, r3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	4323      	orrs	r3, r4
 80019ac:	4698      	mov	r8, r3
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019b0:	00ed      	lsls	r5, r5, #3
 80019b2:	469b      	mov	fp, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	4699      	mov	r9, r3
 80019b8:	4483      	add	fp, r0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	033c      	lsls	r4, r7, #12
 80019be:	007b      	lsls	r3, r7, #1
 80019c0:	4650      	mov	r0, sl
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	0fff      	lsrs	r7, r7, #31
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d067      	beq.n	8001a9c <__aeabi_ddiv+0x128>
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <__aeabi_ddiv+0x244>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <__aeabi_ddiv+0x90>
 80019d2:	497a      	ldr	r1, [pc, #488]	; (8001bbc <__aeabi_ddiv+0x248>)
 80019d4:	0f42      	lsrs	r2, r0, #29
 80019d6:	468c      	mov	ip, r1
 80019d8:	00e4      	lsls	r4, r4, #3
 80019da:	4659      	mov	r1, fp
 80019dc:	4314      	orrs	r4, r2
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	4463      	add	r3, ip
 80019e2:	0412      	lsls	r2, r2, #16
 80019e4:	1acb      	subs	r3, r1, r3
 80019e6:	4314      	orrs	r4, r2
 80019e8:	469b      	mov	fp, r3
 80019ea:	00c2      	lsls	r2, r0, #3
 80019ec:	2000      	movs	r0, #0
 80019ee:	0033      	movs	r3, r6
 80019f0:	407b      	eors	r3, r7
 80019f2:	469a      	mov	sl, r3
 80019f4:	464b      	mov	r3, r9
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	d900      	bls.n	80019fc <__aeabi_ddiv+0x88>
 80019fa:	e0ef      	b.n	8001bdc <__aeabi_ddiv+0x268>
 80019fc:	4970      	ldr	r1, [pc, #448]	; (8001bc0 <__aeabi_ddiv+0x24c>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	58cb      	ldr	r3, [r1, r3]
 8001a02:	469f      	mov	pc, r3
 8001a04:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <__aeabi_ddiv+0x250>)
 8001a06:	4652      	mov	r2, sl
 8001a08:	469c      	mov	ip, r3
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	44e3      	add	fp, ip
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0xa0>
 8001a12:	e095      	b.n	8001b40 <__aeabi_ddiv+0x1cc>
 8001a14:	4649      	mov	r1, r9
 8001a16:	2302      	movs	r3, #2
 8001a18:	4319      	orrs	r1, r3
 8001a1a:	4689      	mov	r9, r1
 8001a1c:	2400      	movs	r4, #0
 8001a1e:	2002      	movs	r0, #2
 8001a20:	e7e5      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001a22:	2300      	movs	r3, #0
 8001a24:	2400      	movs	r4, #0
 8001a26:	2500      	movs	r5, #0
 8001a28:	4652      	mov	r2, sl
 8001a2a:	051b      	lsls	r3, r3, #20
 8001a2c:	4323      	orrs	r3, r4
 8001a2e:	07d2      	lsls	r2, r2, #31
 8001a30:	4313      	orrs	r3, r2
 8001a32:	0028      	movs	r0, r5
 8001a34:	0019      	movs	r1, r3
 8001a36:	b005      	add	sp, #20
 8001a38:	bcf0      	pop	{r4, r5, r6, r7}
 8001a3a:	46bb      	mov	fp, r7
 8001a3c:	46b2      	mov	sl, r6
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	46a0      	mov	r8, r4
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a44:	2400      	movs	r4, #0
 8001a46:	2500      	movs	r5, #0
 8001a48:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001a4a:	e7ed      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001a4c:	464b      	mov	r3, r9
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	4698      	mov	r8, r3
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0xe2>
 8001a54:	e089      	b.n	8001b6a <__aeabi_ddiv+0x1f6>
 8001a56:	2c00      	cmp	r4, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0xe8>
 8001a5a:	e1e0      	b.n	8001e1e <__aeabi_ddiv+0x4aa>
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f001 fb07 	bl	8003070 <__clzsi2>
 8001a62:	0001      	movs	r1, r0
 8001a64:	0002      	movs	r2, r0
 8001a66:	390b      	subs	r1, #11
 8001a68:	231d      	movs	r3, #29
 8001a6a:	1a5b      	subs	r3, r3, r1
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	0010      	movs	r0, r2
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	3808      	subs	r0, #8
 8001a74:	4084      	lsls	r4, r0
 8001a76:	000b      	movs	r3, r1
 8001a78:	464d      	mov	r5, r9
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	4085      	lsls	r5, r0
 8001a80:	4851      	ldr	r0, [pc, #324]	; (8001bc8 <__aeabi_ddiv+0x254>)
 8001a82:	033c      	lsls	r4, r7, #12
 8001a84:	1a83      	subs	r3, r0, r2
 8001a86:	469b      	mov	fp, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	007b      	lsls	r3, r7, #1
 8001a90:	4650      	mov	r0, sl
 8001a92:	0b24      	lsrs	r4, r4, #12
 8001a94:	0d5b      	lsrs	r3, r3, #21
 8001a96:	0fff      	lsrs	r7, r7, #31
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d197      	bne.n	80019cc <__aeabi_ddiv+0x58>
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	4322      	orrs	r2, r4
 8001aa0:	d055      	beq.n	8001b4e <__aeabi_ddiv+0x1da>
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x134>
 8001aa6:	e1ca      	b.n	8001e3e <__aeabi_ddiv+0x4ca>
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f001 fae1 	bl	8003070 <__clzsi2>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	3a0b      	subs	r2, #11
 8001ab2:	231d      	movs	r3, #29
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	4652      	mov	r2, sl
 8001aba:	3908      	subs	r1, #8
 8001abc:	40da      	lsrs	r2, r3
 8001abe:	408c      	lsls	r4, r1
 8001ac0:	4314      	orrs	r4, r2
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	408a      	lsls	r2, r1
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <__aeabi_ddiv+0x258>)
 8001ac8:	4458      	add	r0, fp
 8001aca:	469b      	mov	fp, r3
 8001acc:	4483      	add	fp, r0
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e78d      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	4323      	orrs	r3, r4
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	d140      	bne.n	8001b5c <__aeabi_ddiv+0x1e8>
 8001ada:	2308      	movs	r3, #8
 8001adc:	4699      	mov	r9, r3
 8001ade:	3b06      	subs	r3, #6
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	4683      	mov	fp, r0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	e769      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001ae8:	46b2      	mov	sl, r6
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d0a9      	beq.n	8001a44 <__aeabi_ddiv+0xd0>
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d100      	bne.n	8001af6 <__aeabi_ddiv+0x182>
 8001af4:	e211      	b.n	8001f1a <__aeabi_ddiv+0x5a6>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d093      	beq.n	8001a22 <__aeabi_ddiv+0xae>
 8001afa:	4a35      	ldr	r2, [pc, #212]	; (8001bd0 <__aeabi_ddiv+0x25c>)
 8001afc:	445a      	add	r2, fp
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	dc00      	bgt.n	8001b04 <__aeabi_ddiv+0x190>
 8001b02:	e13c      	b.n	8001d7e <__aeabi_ddiv+0x40a>
 8001b04:	076b      	lsls	r3, r5, #29
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x196>
 8001b08:	e1a7      	b.n	8001e5a <__aeabi_ddiv+0x4e6>
 8001b0a:	08ed      	lsrs	r5, r5, #3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	d506      	bpl.n	8001b20 <__aeabi_ddiv+0x1ac>
 8001b12:	4642      	mov	r2, r8
 8001b14:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <__aeabi_ddiv+0x260>)
 8001b16:	401a      	ands	r2, r3
 8001b18:	4690      	mov	r8, r2
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	00d2      	lsls	r2, r2, #3
 8001b1e:	445a      	add	r2, fp
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <__aeabi_ddiv+0x264>)
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dc8e      	bgt.n	8001a44 <__aeabi_ddiv+0xd0>
 8001b26:	4643      	mov	r3, r8
 8001b28:	0552      	lsls	r2, r2, #21
 8001b2a:	0758      	lsls	r0, r3, #29
 8001b2c:	025c      	lsls	r4, r3, #9
 8001b2e:	4305      	orrs	r5, r0
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d53      	lsrs	r3, r2, #21
 8001b34:	e778      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b36:	46ba      	mov	sl, r7
 8001b38:	46a0      	mov	r8, r4
 8001b3a:	0015      	movs	r5, r2
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	e7d4      	b.n	8001aea <__aeabi_ddiv+0x176>
 8001b40:	464a      	mov	r2, r9
 8001b42:	2303      	movs	r3, #3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4691      	mov	r9, r2
 8001b48:	2003      	movs	r0, #3
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	e74f      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b4e:	4649      	mov	r1, r9
 8001b50:	2301      	movs	r3, #1
 8001b52:	4319      	orrs	r1, r3
 8001b54:	4689      	mov	r9, r1
 8001b56:	2400      	movs	r4, #0
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e748      	b.n	80019ee <__aeabi_ddiv+0x7a>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	4699      	mov	r9, r3
 8001b60:	3b09      	subs	r3, #9
 8001b62:	46a0      	mov	r8, r4
 8001b64:	4683      	mov	fp, r0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	e728      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	4699      	mov	r9, r3
 8001b6e:	2300      	movs	r3, #0
 8001b70:	469b      	mov	fp, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	2500      	movs	r5, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	e720      	b.n	80019bc <__aeabi_ddiv+0x48>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2480      	movs	r4, #128	; 0x80
 8001b7e:	469a      	mov	sl, r3
 8001b80:	2500      	movs	r5, #0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001b84:	0324      	lsls	r4, r4, #12
 8001b86:	e74f      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	031b      	lsls	r3, r3, #12
 8001b8e:	4219      	tst	r1, r3
 8001b90:	d008      	beq.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b92:	421c      	tst	r4, r3
 8001b94:	d106      	bne.n	8001ba4 <__aeabi_ddiv+0x230>
 8001b96:	431c      	orrs	r4, r3
 8001b98:	0324      	lsls	r4, r4, #12
 8001b9a:	46ba      	mov	sl, r7
 8001b9c:	0015      	movs	r5, r2
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001ba0:	0b24      	lsrs	r4, r4, #12
 8001ba2:	e741      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001ba4:	2480      	movs	r4, #128	; 0x80
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	0324      	lsls	r4, r4, #12
 8001baa:	431c      	orrs	r4, r3
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	46b2      	mov	sl, r6
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <__aeabi_ddiv+0x244>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e738      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	000007ff 	.word	0x000007ff
 8001bbc:	fffffc01 	.word	0xfffffc01
 8001bc0:	08012364 	.word	0x08012364
 8001bc4:	fffff801 	.word	0xfffff801
 8001bc8:	fffffc0d 	.word	0xfffffc0d
 8001bcc:	000003f3 	.word	0x000003f3
 8001bd0:	000003ff 	.word	0x000003ff
 8001bd4:	feffffff 	.word	0xfeffffff
 8001bd8:	000007fe 	.word	0x000007fe
 8001bdc:	4544      	cmp	r4, r8
 8001bde:	d200      	bcs.n	8001be2 <__aeabi_ddiv+0x26e>
 8001be0:	e116      	b.n	8001e10 <__aeabi_ddiv+0x49c>
 8001be2:	d100      	bne.n	8001be6 <__aeabi_ddiv+0x272>
 8001be4:	e111      	b.n	8001e0a <__aeabi_ddiv+0x496>
 8001be6:	2301      	movs	r3, #1
 8001be8:	425b      	negs	r3, r3
 8001bea:	469c      	mov	ip, r3
 8001bec:	002e      	movs	r6, r5
 8001bee:	4640      	mov	r0, r8
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	44e3      	add	fp, ip
 8001bf4:	0223      	lsls	r3, r4, #8
 8001bf6:	0e14      	lsrs	r4, r2, #24
 8001bf8:	431c      	orrs	r4, r3
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0423      	lsls	r3, r4, #16
 8001c00:	0c1f      	lsrs	r7, r3, #16
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	4649      	mov	r1, r9
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	9701      	str	r7, [sp, #4]
 8001c0a:	f7fe fb1b 	bl	8000244 <__aeabi_uidivmod>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	437a      	muls	r2, r7
 8001c12:	040b      	lsls	r3, r1, #16
 8001c14:	0c31      	lsrs	r1, r6, #16
 8001c16:	4680      	mov	r8, r0
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d90b      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	425b      	negs	r3, r3
 8001c22:	469c      	mov	ip, r3
 8001c24:	1909      	adds	r1, r1, r4
 8001c26:	44e0      	add	r8, ip
 8001c28:	428c      	cmp	r4, r1
 8001c2a:	d804      	bhi.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c2c:	428a      	cmp	r2, r1
 8001c2e:	d902      	bls.n	8001c36 <__aeabi_ddiv+0x2c2>
 8001c30:	1e83      	subs	r3, r0, #2
 8001c32:	4698      	mov	r8, r3
 8001c34:	1909      	adds	r1, r1, r4
 8001c36:	1a88      	subs	r0, r1, r2
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fb03 	bl	8000244 <__aeabi_uidivmod>
 8001c3e:	0409      	lsls	r1, r1, #16
 8001c40:	468c      	mov	ip, r1
 8001c42:	0431      	lsls	r1, r6, #16
 8001c44:	4666      	mov	r6, ip
 8001c46:	9a01      	ldr	r2, [sp, #4]
 8001c48:	0c09      	lsrs	r1, r1, #16
 8001c4a:	4342      	muls	r2, r0
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	4331      	orrs	r1, r6
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d904      	bls.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c54:	1909      	adds	r1, r1, r4
 8001c56:	3b01      	subs	r3, #1
 8001c58:	428c      	cmp	r4, r1
 8001c5a:	d800      	bhi.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001c5c:	e111      	b.n	8001e82 <__aeabi_ddiv+0x50e>
 8001c5e:	1a89      	subs	r1, r1, r2
 8001c60:	4642      	mov	r2, r8
 8001c62:	9e00      	ldr	r6, [sp, #0]
 8001c64:	0412      	lsls	r2, r2, #16
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0c33      	lsrs	r3, r6, #16
 8001c6a:	001f      	movs	r7, r3
 8001c6c:	0c10      	lsrs	r0, r2, #16
 8001c6e:	4690      	mov	r8, r2
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	0413      	lsls	r3, r2, #16
 8001c74:	0432      	lsls	r2, r6, #16
 8001c76:	0c16      	lsrs	r6, r2, #16
 8001c78:	0032      	movs	r2, r6
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	435a      	muls	r2, r3
 8001c7e:	9603      	str	r6, [sp, #12]
 8001c80:	437b      	muls	r3, r7
 8001c82:	4346      	muls	r6, r0
 8001c84:	4378      	muls	r0, r7
 8001c86:	0c17      	lsrs	r7, r2, #16
 8001c88:	46bc      	mov	ip, r7
 8001c8a:	199b      	adds	r3, r3, r6
 8001c8c:	4463      	add	r3, ip
 8001c8e:	429e      	cmp	r6, r3
 8001c90:	d903      	bls.n	8001c9a <__aeabi_ddiv+0x326>
 8001c92:	2680      	movs	r6, #128	; 0x80
 8001c94:	0276      	lsls	r6, r6, #9
 8001c96:	46b4      	mov	ip, r6
 8001c98:	4460      	add	r0, ip
 8001c9a:	0c1e      	lsrs	r6, r3, #16
 8001c9c:	1830      	adds	r0, r6, r0
 8001c9e:	0416      	lsls	r6, r2, #16
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	0c36      	lsrs	r6, r6, #16
 8001ca4:	199e      	adds	r6, r3, r6
 8001ca6:	4281      	cmp	r1, r0
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x338>
 8001caa:	e09c      	b.n	8001de6 <__aeabi_ddiv+0x472>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001cae:	e097      	b.n	8001de0 <__aeabi_ddiv+0x46c>
 8001cb0:	1bae      	subs	r6, r5, r6
 8001cb2:	1a09      	subs	r1, r1, r0
 8001cb4:	42b5      	cmp	r5, r6
 8001cb6:	4180      	sbcs	r0, r0
 8001cb8:	4240      	negs	r0, r0
 8001cba:	1a08      	subs	r0, r1, r0
 8001cbc:	4284      	cmp	r4, r0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_ddiv+0x34e>
 8001cc0:	e111      	b.n	8001ee6 <__aeabi_ddiv+0x572>
 8001cc2:	4649      	mov	r1, r9
 8001cc4:	f7fe fabe 	bl	8000244 <__aeabi_uidivmod>
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	040b      	lsls	r3, r1, #16
 8001ccc:	4342      	muls	r2, r0
 8001cce:	0c31      	lsrs	r1, r6, #16
 8001cd0:	0005      	movs	r5, r0
 8001cd2:	4319      	orrs	r1, r3
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d907      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001cd8:	1909      	adds	r1, r1, r4
 8001cda:	3d01      	subs	r5, #1
 8001cdc:	428c      	cmp	r4, r1
 8001cde:	d803      	bhi.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d901      	bls.n	8001ce8 <__aeabi_ddiv+0x374>
 8001ce4:	1e85      	subs	r5, r0, #2
 8001ce6:	1909      	adds	r1, r1, r4
 8001ce8:	1a88      	subs	r0, r1, r2
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe faaa 	bl	8000244 <__aeabi_uidivmod>
 8001cf0:	0409      	lsls	r1, r1, #16
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	0431      	lsls	r1, r6, #16
 8001cf6:	4666      	mov	r6, ip
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	0c09      	lsrs	r1, r1, #16
 8001cfc:	4342      	muls	r2, r0
 8001cfe:	0003      	movs	r3, r0
 8001d00:	4331      	orrs	r1, r6
 8001d02:	428a      	cmp	r2, r1
 8001d04:	d907      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d06:	1909      	adds	r1, r1, r4
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	428c      	cmp	r4, r1
 8001d0c:	d803      	bhi.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d901      	bls.n	8001d16 <__aeabi_ddiv+0x3a2>
 8001d12:	1e83      	subs	r3, r0, #2
 8001d14:	1909      	adds	r1, r1, r4
 8001d16:	9e03      	ldr	r6, [sp, #12]
 8001d18:	1a89      	subs	r1, r1, r2
 8001d1a:	0032      	movs	r2, r6
 8001d1c:	042d      	lsls	r5, r5, #16
 8001d1e:	431d      	orrs	r5, r3
 8001d20:	9f02      	ldr	r7, [sp, #8]
 8001d22:	042b      	lsls	r3, r5, #16
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	435a      	muls	r2, r3
 8001d28:	437b      	muls	r3, r7
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	0c28      	lsrs	r0, r5, #16
 8001d2e:	4346      	muls	r6, r0
 8001d30:	0c13      	lsrs	r3, r2, #16
 8001d32:	44b4      	add	ip, r6
 8001d34:	4463      	add	r3, ip
 8001d36:	4378      	muls	r0, r7
 8001d38:	429e      	cmp	r6, r3
 8001d3a:	d903      	bls.n	8001d44 <__aeabi_ddiv+0x3d0>
 8001d3c:	2680      	movs	r6, #128	; 0x80
 8001d3e:	0276      	lsls	r6, r6, #9
 8001d40:	46b4      	mov	ip, r6
 8001d42:	4460      	add	r0, ip
 8001d44:	0c1e      	lsrs	r6, r3, #16
 8001d46:	0412      	lsls	r2, r2, #16
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	0c12      	lsrs	r2, r2, #16
 8001d4c:	1830      	adds	r0, r6, r0
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	4281      	cmp	r1, r0
 8001d52:	d306      	bcc.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d54:	d002      	beq.n	8001d5c <__aeabi_ddiv+0x3e8>
 8001d56:	2301      	movs	r3, #1
 8001d58:	431d      	orrs	r5, r3
 8001d5a:	e6ce      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0x3ee>
 8001d60:	e6cb      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001d62:	1861      	adds	r1, r4, r1
 8001d64:	1e6e      	subs	r6, r5, #1
 8001d66:	42a1      	cmp	r1, r4
 8001d68:	d200      	bcs.n	8001d6c <__aeabi_ddiv+0x3f8>
 8001d6a:	e0a4      	b.n	8001eb6 <__aeabi_ddiv+0x542>
 8001d6c:	4281      	cmp	r1, r0
 8001d6e:	d200      	bcs.n	8001d72 <__aeabi_ddiv+0x3fe>
 8001d70:	e0c9      	b.n	8001f06 <__aeabi_ddiv+0x592>
 8001d72:	d100      	bne.n	8001d76 <__aeabi_ddiv+0x402>
 8001d74:	e0d9      	b.n	8001f2a <__aeabi_ddiv+0x5b6>
 8001d76:	0035      	movs	r5, r6
 8001d78:	e7ed      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001d7a:	2501      	movs	r5, #1
 8001d7c:	426d      	negs	r5, r5
 8001d7e:	2101      	movs	r1, #1
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	2938      	cmp	r1, #56	; 0x38
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_ddiv+0x414>
 8001d86:	e64c      	b.n	8001a22 <__aeabi_ddiv+0xae>
 8001d88:	291f      	cmp	r1, #31
 8001d8a:	dc00      	bgt.n	8001d8e <__aeabi_ddiv+0x41a>
 8001d8c:	e07f      	b.n	8001e8e <__aeabi_ddiv+0x51a>
 8001d8e:	231f      	movs	r3, #31
 8001d90:	425b      	negs	r3, r3
 8001d92:	1a9a      	subs	r2, r3, r2
 8001d94:	4643      	mov	r3, r8
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	2920      	cmp	r1, #32
 8001d9a:	d004      	beq.n	8001da6 <__aeabi_ddiv+0x432>
 8001d9c:	4644      	mov	r4, r8
 8001d9e:	4a65      	ldr	r2, [pc, #404]	; (8001f34 <__aeabi_ddiv+0x5c0>)
 8001da0:	445a      	add	r2, fp
 8001da2:	4094      	lsls	r4, r2
 8001da4:	4325      	orrs	r5, r4
 8001da6:	1e6a      	subs	r2, r5, #1
 8001da8:	4195      	sbcs	r5, r2
 8001daa:	2207      	movs	r2, #7
 8001dac:	432b      	orrs	r3, r5
 8001dae:	0015      	movs	r5, r2
 8001db0:	2400      	movs	r4, #0
 8001db2:	401d      	ands	r5, r3
 8001db4:	421a      	tst	r2, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x446>
 8001db8:	e0a1      	b.n	8001efe <__aeabi_ddiv+0x58a>
 8001dba:	220f      	movs	r2, #15
 8001dbc:	2400      	movs	r4, #0
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	2a04      	cmp	r2, #4
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001dc4:	e098      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	18e4      	adds	r4, r4, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	0222      	lsls	r2, r4, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_ddiv+0x464>
 8001dd6:	e08f      	b.n	8001ef8 <__aeabi_ddiv+0x584>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e623      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001de0:	42b5      	cmp	r5, r6
 8001de2:	d300      	bcc.n	8001de6 <__aeabi_ddiv+0x472>
 8001de4:	e764      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001de6:	4643      	mov	r3, r8
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	9b00      	ldr	r3, [sp, #0]
 8001dec:	469c      	mov	ip, r3
 8001dee:	4465      	add	r5, ip
 8001df0:	001f      	movs	r7, r3
 8001df2:	429d      	cmp	r5, r3
 8001df4:	419b      	sbcs	r3, r3
 8001df6:	425b      	negs	r3, r3
 8001df8:	191b      	adds	r3, r3, r4
 8001dfa:	18c9      	adds	r1, r1, r3
 8001dfc:	428c      	cmp	r4, r1
 8001dfe:	d23a      	bcs.n	8001e76 <__aeabi_ddiv+0x502>
 8001e00:	4288      	cmp	r0, r1
 8001e02:	d863      	bhi.n	8001ecc <__aeabi_ddiv+0x558>
 8001e04:	d060      	beq.n	8001ec8 <__aeabi_ddiv+0x554>
 8001e06:	4690      	mov	r8, r2
 8001e08:	e752      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e0a:	42aa      	cmp	r2, r5
 8001e0c:	d900      	bls.n	8001e10 <__aeabi_ddiv+0x49c>
 8001e0e:	e6ea      	b.n	8001be6 <__aeabi_ddiv+0x272>
 8001e10:	4643      	mov	r3, r8
 8001e12:	07de      	lsls	r6, r3, #31
 8001e14:	0858      	lsrs	r0, r3, #1
 8001e16:	086b      	lsrs	r3, r5, #1
 8001e18:	431e      	orrs	r6, r3
 8001e1a:	07ed      	lsls	r5, r5, #31
 8001e1c:	e6ea      	b.n	8001bf4 <__aeabi_ddiv+0x280>
 8001e1e:	4648      	mov	r0, r9
 8001e20:	f001 f926 	bl	8003070 <__clzsi2>
 8001e24:	0001      	movs	r1, r0
 8001e26:	0002      	movs	r2, r0
 8001e28:	3115      	adds	r1, #21
 8001e2a:	3220      	adds	r2, #32
 8001e2c:	291c      	cmp	r1, #28
 8001e2e:	dc00      	bgt.n	8001e32 <__aeabi_ddiv+0x4be>
 8001e30:	e61a      	b.n	8001a68 <__aeabi_ddiv+0xf4>
 8001e32:	464b      	mov	r3, r9
 8001e34:	3808      	subs	r0, #8
 8001e36:	4083      	lsls	r3, r0
 8001e38:	2500      	movs	r5, #0
 8001e3a:	4698      	mov	r8, r3
 8001e3c:	e620      	b.n	8001a80 <__aeabi_ddiv+0x10c>
 8001e3e:	f001 f917 	bl	8003070 <__clzsi2>
 8001e42:	0003      	movs	r3, r0
 8001e44:	001a      	movs	r2, r3
 8001e46:	3215      	adds	r2, #21
 8001e48:	3020      	adds	r0, #32
 8001e4a:	2a1c      	cmp	r2, #28
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_ddiv+0x4dc>
 8001e4e:	e630      	b.n	8001ab2 <__aeabi_ddiv+0x13e>
 8001e50:	4654      	mov	r4, sl
 8001e52:	3b08      	subs	r3, #8
 8001e54:	2200      	movs	r2, #0
 8001e56:	409c      	lsls	r4, r3
 8001e58:	e635      	b.n	8001ac6 <__aeabi_ddiv+0x152>
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	402b      	ands	r3, r5
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_ddiv+0x4f0>
 8001e62:	e652      	b.n	8001b0a <__aeabi_ddiv+0x196>
 8001e64:	2305      	movs	r3, #5
 8001e66:	425b      	negs	r3, r3
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	419b      	sbcs	r3, r3
 8001e6c:	3504      	adds	r5, #4
 8001e6e:	425b      	negs	r3, r3
 8001e70:	08ed      	lsrs	r5, r5, #3
 8001e72:	4498      	add	r8, r3
 8001e74:	e64a      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001e76:	428c      	cmp	r4, r1
 8001e78:	d1c5      	bne.n	8001e06 <__aeabi_ddiv+0x492>
 8001e7a:	42af      	cmp	r7, r5
 8001e7c:	d9c0      	bls.n	8001e00 <__aeabi_ddiv+0x48c>
 8001e7e:	4690      	mov	r8, r2
 8001e80:	e716      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001e82:	428a      	cmp	r2, r1
 8001e84:	d800      	bhi.n	8001e88 <__aeabi_ddiv+0x514>
 8001e86:	e6ea      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e88:	1e83      	subs	r3, r0, #2
 8001e8a:	1909      	adds	r1, r1, r4
 8001e8c:	e6e7      	b.n	8001c5e <__aeabi_ddiv+0x2ea>
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <__aeabi_ddiv+0x5c4>)
 8001e90:	0028      	movs	r0, r5
 8001e92:	445a      	add	r2, fp
 8001e94:	4643      	mov	r3, r8
 8001e96:	4095      	lsls	r5, r2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	40c8      	lsrs	r0, r1
 8001e9c:	1e6a      	subs	r2, r5, #1
 8001e9e:	4195      	sbcs	r5, r2
 8001ea0:	4644      	mov	r4, r8
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	40cc      	lsrs	r4, r1
 8001ea8:	075a      	lsls	r2, r3, #29
 8001eaa:	d092      	beq.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eac:	220f      	movs	r2, #15
 8001eae:	401a      	ands	r2, r3
 8001eb0:	2a04      	cmp	r2, #4
 8001eb2:	d188      	bne.n	8001dc6 <__aeabi_ddiv+0x452>
 8001eb4:	e78d      	b.n	8001dd2 <__aeabi_ddiv+0x45e>
 8001eb6:	0035      	movs	r5, r6
 8001eb8:	4281      	cmp	r1, r0
 8001eba:	d000      	beq.n	8001ebe <__aeabi_ddiv+0x54a>
 8001ebc:	e74b      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ebe:	9a00      	ldr	r2, [sp, #0]
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d000      	beq.n	8001ec6 <__aeabi_ddiv+0x552>
 8001ec4:	e747      	b.n	8001d56 <__aeabi_ddiv+0x3e2>
 8001ec6:	e618      	b.n	8001afa <__aeabi_ddiv+0x186>
 8001ec8:	42ae      	cmp	r6, r5
 8001eca:	d99c      	bls.n	8001e06 <__aeabi_ddiv+0x492>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	425b      	negs	r3, r3
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	44e0      	add	r8, ip
 8001ed6:	469c      	mov	ip, r3
 8001ed8:	4465      	add	r5, ip
 8001eda:	429d      	cmp	r5, r3
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	425b      	negs	r3, r3
 8001ee0:	191b      	adds	r3, r3, r4
 8001ee2:	18c9      	adds	r1, r1, r3
 8001ee4:	e6e4      	b.n	8001cb0 <__aeabi_ddiv+0x33c>
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <__aeabi_ddiv+0x5c8>)
 8001ee8:	445a      	add	r2, fp
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	dc00      	bgt.n	8001ef0 <__aeabi_ddiv+0x57c>
 8001eee:	e744      	b.n	8001d7a <__aeabi_ddiv+0x406>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4498      	add	r8, r3
 8001ef6:	e609      	b.n	8001b0c <__aeabi_ddiv+0x198>
 8001ef8:	0765      	lsls	r5, r4, #29
 8001efa:	0264      	lsls	r4, r4, #9
 8001efc:	0b24      	lsrs	r4, r4, #12
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	431d      	orrs	r5, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	e590      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f06:	9e00      	ldr	r6, [sp, #0]
 8001f08:	3d02      	subs	r5, #2
 8001f0a:	0072      	lsls	r2, r6, #1
 8001f0c:	42b2      	cmp	r2, r6
 8001f0e:	41bf      	sbcs	r7, r7
 8001f10:	427f      	negs	r7, r7
 8001f12:	193c      	adds	r4, r7, r4
 8001f14:	1909      	adds	r1, r1, r4
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	e7ce      	b.n	8001eb8 <__aeabi_ddiv+0x544>
 8001f1a:	2480      	movs	r4, #128	; 0x80
 8001f1c:	4643      	mov	r3, r8
 8001f1e:	0324      	lsls	r4, r4, #12
 8001f20:	431c      	orrs	r4, r3
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <__aeabi_ddiv+0x5cc>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	e57e      	b.n	8001a28 <__aeabi_ddiv+0xb4>
 8001f2a:	9a00      	ldr	r2, [sp, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3ea      	bcc.n	8001f06 <__aeabi_ddiv+0x592>
 8001f30:	0035      	movs	r5, r6
 8001f32:	e7c4      	b.n	8001ebe <__aeabi_ddiv+0x54a>
 8001f34:	0000043e 	.word	0x0000043e
 8001f38:	0000041e 	.word	0x0000041e
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__eqdf2>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	464f      	mov	r7, r9
 8001f48:	4646      	mov	r6, r8
 8001f4a:	46d6      	mov	lr, sl
 8001f4c:	4694      	mov	ip, r2
 8001f4e:	4691      	mov	r9, r2
 8001f50:	031a      	lsls	r2, r3, #12
 8001f52:	0b12      	lsrs	r2, r2, #12
 8001f54:	4d18      	ldr	r5, [pc, #96]	; (8001fb8 <__eqdf2+0x74>)
 8001f56:	b5c0      	push	{r6, r7, lr}
 8001f58:	004c      	lsls	r4, r1, #1
 8001f5a:	030f      	lsls	r7, r1, #12
 8001f5c:	4692      	mov	sl, r2
 8001f5e:	005a      	lsls	r2, r3, #1
 8001f60:	0006      	movs	r6, r0
 8001f62:	4680      	mov	r8, r0
 8001f64:	0b3f      	lsrs	r7, r7, #12
 8001f66:	2001      	movs	r0, #1
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	0d52      	lsrs	r2, r2, #21
 8001f6e:	0fdb      	lsrs	r3, r3, #31
 8001f70:	42ac      	cmp	r4, r5
 8001f72:	d00a      	beq.n	8001f8a <__eqdf2+0x46>
 8001f74:	42aa      	cmp	r2, r5
 8001f76:	d003      	beq.n	8001f80 <__eqdf2+0x3c>
 8001f78:	4294      	cmp	r4, r2
 8001f7a:	d101      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f7c:	4557      	cmp	r7, sl
 8001f7e:	d00d      	beq.n	8001f9c <__eqdf2+0x58>
 8001f80:	bce0      	pop	{r5, r6, r7}
 8001f82:	46ba      	mov	sl, r7
 8001f84:	46b1      	mov	r9, r6
 8001f86:	46a8      	mov	r8, r5
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	003d      	movs	r5, r7
 8001f8c:	4335      	orrs	r5, r6
 8001f8e:	d1f7      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	d1f5      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f94:	4652      	mov	r2, sl
 8001f96:	4665      	mov	r5, ip
 8001f98:	432a      	orrs	r2, r5
 8001f9a:	d1f1      	bne.n	8001f80 <__eqdf2+0x3c>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	45c8      	cmp	r8, r9
 8001fa0:	d1ee      	bne.n	8001f80 <__eqdf2+0x3c>
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d006      	beq.n	8001fb4 <__eqdf2+0x70>
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d1ea      	bne.n	8001f80 <__eqdf2+0x3c>
 8001faa:	433e      	orrs	r6, r7
 8001fac:	0030      	movs	r0, r6
 8001fae:	1e46      	subs	r6, r0, #1
 8001fb0:	41b0      	sbcs	r0, r6
 8001fb2:	e7e5      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e7e3      	b.n	8001f80 <__eqdf2+0x3c>
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__gedf2>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	464e      	mov	r6, r9
 8001fc0:	4645      	mov	r5, r8
 8001fc2:	4657      	mov	r7, sl
 8001fc4:	46de      	mov	lr, fp
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	b5e0      	push	{r5, r6, r7, lr}
 8001fcc:	0016      	movs	r6, r2
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	4d32      	ldr	r5, [pc, #200]	; (800209c <__gedf2+0xe0>)
 8001fd4:	030f      	lsls	r7, r1, #12
 8001fd6:	004a      	lsls	r2, r1, #1
 8001fd8:	4699      	mov	r9, r3
 8001fda:	0043      	lsls	r3, r0, #1
 8001fdc:	46a4      	mov	ip, r4
 8001fde:	46b0      	mov	r8, r6
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	0d52      	lsrs	r2, r2, #21
 8001fe4:	0fc9      	lsrs	r1, r1, #31
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	0fc0      	lsrs	r0, r0, #31
 8001fea:	42aa      	cmp	r2, r5
 8001fec:	d029      	beq.n	8002042 <__gedf2+0x86>
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d018      	beq.n	8002024 <__gedf2+0x68>
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d12a      	bne.n	800204c <__gedf2+0x90>
 8001ff6:	433c      	orrs	r4, r7
 8001ff8:	46a3      	mov	fp, r4
 8001ffa:	4265      	negs	r5, r4
 8001ffc:	4165      	adcs	r5, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <__gedf2+0x4c>
 8002002:	464c      	mov	r4, r9
 8002004:	4326      	orrs	r6, r4
 8002006:	d027      	beq.n	8002058 <__gedf2+0x9c>
 8002008:	2d00      	cmp	r5, #0
 800200a:	d115      	bne.n	8002038 <__gedf2+0x7c>
 800200c:	4281      	cmp	r1, r0
 800200e:	d028      	beq.n	8002062 <__gedf2+0xa6>
 8002010:	2002      	movs	r0, #2
 8002012:	3901      	subs	r1, #1
 8002014:	4008      	ands	r0, r1
 8002016:	3801      	subs	r0, #1
 8002018:	bcf0      	pop	{r4, r5, r6, r7}
 800201a:	46bb      	mov	fp, r7
 800201c:	46b2      	mov	sl, r6
 800201e:	46a9      	mov	r9, r5
 8002020:	46a0      	mov	r8, r4
 8002022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002024:	464d      	mov	r5, r9
 8002026:	432e      	orrs	r6, r5
 8002028:	d12f      	bne.n	800208a <__gedf2+0xce>
 800202a:	2a00      	cmp	r2, #0
 800202c:	d1ee      	bne.n	800200c <__gedf2+0x50>
 800202e:	433c      	orrs	r4, r7
 8002030:	4265      	negs	r5, r4
 8002032:	4165      	adcs	r5, r4
 8002034:	2d00      	cmp	r5, #0
 8002036:	d0e9      	beq.n	800200c <__gedf2+0x50>
 8002038:	2800      	cmp	r0, #0
 800203a:	d1ed      	bne.n	8002018 <__gedf2+0x5c>
 800203c:	2001      	movs	r0, #1
 800203e:	4240      	negs	r0, r0
 8002040:	e7ea      	b.n	8002018 <__gedf2+0x5c>
 8002042:	003d      	movs	r5, r7
 8002044:	4325      	orrs	r5, r4
 8002046:	d120      	bne.n	800208a <__gedf2+0xce>
 8002048:	4293      	cmp	r3, r2
 800204a:	d0eb      	beq.n	8002024 <__gedf2+0x68>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1dd      	bne.n	800200c <__gedf2+0x50>
 8002050:	464c      	mov	r4, r9
 8002052:	4326      	orrs	r6, r4
 8002054:	d1da      	bne.n	800200c <__gedf2+0x50>
 8002056:	e7db      	b.n	8002010 <__gedf2+0x54>
 8002058:	465b      	mov	r3, fp
 800205a:	2000      	movs	r0, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0db      	beq.n	8002018 <__gedf2+0x5c>
 8002060:	e7d6      	b.n	8002010 <__gedf2+0x54>
 8002062:	429a      	cmp	r2, r3
 8002064:	dc0a      	bgt.n	800207c <__gedf2+0xc0>
 8002066:	dbe7      	blt.n	8002038 <__gedf2+0x7c>
 8002068:	454f      	cmp	r7, r9
 800206a:	d8d1      	bhi.n	8002010 <__gedf2+0x54>
 800206c:	d010      	beq.n	8002090 <__gedf2+0xd4>
 800206e:	2000      	movs	r0, #0
 8002070:	454f      	cmp	r7, r9
 8002072:	d2d1      	bcs.n	8002018 <__gedf2+0x5c>
 8002074:	2900      	cmp	r1, #0
 8002076:	d0e1      	beq.n	800203c <__gedf2+0x80>
 8002078:	0008      	movs	r0, r1
 800207a:	e7cd      	b.n	8002018 <__gedf2+0x5c>
 800207c:	4243      	negs	r3, r0
 800207e:	4158      	adcs	r0, r3
 8002080:	2302      	movs	r3, #2
 8002082:	4240      	negs	r0, r0
 8002084:	4018      	ands	r0, r3
 8002086:	3801      	subs	r0, #1
 8002088:	e7c6      	b.n	8002018 <__gedf2+0x5c>
 800208a:	2002      	movs	r0, #2
 800208c:	4240      	negs	r0, r0
 800208e:	e7c3      	b.n	8002018 <__gedf2+0x5c>
 8002090:	45c4      	cmp	ip, r8
 8002092:	d8bd      	bhi.n	8002010 <__gedf2+0x54>
 8002094:	2000      	movs	r0, #0
 8002096:	45c4      	cmp	ip, r8
 8002098:	d2be      	bcs.n	8002018 <__gedf2+0x5c>
 800209a:	e7eb      	b.n	8002074 <__gedf2+0xb8>
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__ledf2>:
 80020a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a2:	464e      	mov	r6, r9
 80020a4:	4645      	mov	r5, r8
 80020a6:	4657      	mov	r7, sl
 80020a8:	46de      	mov	lr, fp
 80020aa:	0004      	movs	r4, r0
 80020ac:	0018      	movs	r0, r3
 80020ae:	b5e0      	push	{r5, r6, r7, lr}
 80020b0:	0016      	movs	r6, r2
 80020b2:	031b      	lsls	r3, r3, #12
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	4d31      	ldr	r5, [pc, #196]	; (800217c <__ledf2+0xdc>)
 80020b8:	030f      	lsls	r7, r1, #12
 80020ba:	004a      	lsls	r2, r1, #1
 80020bc:	4699      	mov	r9, r3
 80020be:	0043      	lsls	r3, r0, #1
 80020c0:	46a4      	mov	ip, r4
 80020c2:	46b0      	mov	r8, r6
 80020c4:	0b3f      	lsrs	r7, r7, #12
 80020c6:	0d52      	lsrs	r2, r2, #21
 80020c8:	0fc9      	lsrs	r1, r1, #31
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	0fc0      	lsrs	r0, r0, #31
 80020ce:	42aa      	cmp	r2, r5
 80020d0:	d011      	beq.n	80020f6 <__ledf2+0x56>
 80020d2:	42ab      	cmp	r3, r5
 80020d4:	d014      	beq.n	8002100 <__ledf2+0x60>
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d12f      	bne.n	800213a <__ledf2+0x9a>
 80020da:	433c      	orrs	r4, r7
 80020dc:	46a3      	mov	fp, r4
 80020de:	4265      	negs	r5, r4
 80020e0:	4165      	adcs	r5, r4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d114      	bne.n	8002110 <__ledf2+0x70>
 80020e6:	464c      	mov	r4, r9
 80020e8:	4326      	orrs	r6, r4
 80020ea:	d111      	bne.n	8002110 <__ledf2+0x70>
 80020ec:	465b      	mov	r3, fp
 80020ee:	2000      	movs	r0, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <__ledf2+0x84>
 80020f4:	e010      	b.n	8002118 <__ledf2+0x78>
 80020f6:	003d      	movs	r5, r7
 80020f8:	4325      	orrs	r5, r4
 80020fa:	d112      	bne.n	8002122 <__ledf2+0x82>
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d11c      	bne.n	800213a <__ledf2+0x9a>
 8002100:	464d      	mov	r5, r9
 8002102:	432e      	orrs	r6, r5
 8002104:	d10d      	bne.n	8002122 <__ledf2+0x82>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d104      	bne.n	8002114 <__ledf2+0x74>
 800210a:	433c      	orrs	r4, r7
 800210c:	4265      	negs	r5, r4
 800210e:	4165      	adcs	r5, r4
 8002110:	2d00      	cmp	r5, #0
 8002112:	d10d      	bne.n	8002130 <__ledf2+0x90>
 8002114:	4281      	cmp	r1, r0
 8002116:	d016      	beq.n	8002146 <__ledf2+0xa6>
 8002118:	2002      	movs	r0, #2
 800211a:	3901      	subs	r1, #1
 800211c:	4008      	ands	r0, r1
 800211e:	3801      	subs	r0, #1
 8002120:	e000      	b.n	8002124 <__ledf2+0x84>
 8002122:	2002      	movs	r0, #2
 8002124:	bcf0      	pop	{r4, r5, r6, r7}
 8002126:	46bb      	mov	fp, r7
 8002128:	46b2      	mov	sl, r6
 800212a:	46a9      	mov	r9, r5
 800212c:	46a0      	mov	r8, r4
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002130:	2800      	cmp	r0, #0
 8002132:	d1f7      	bne.n	8002124 <__ledf2+0x84>
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	e7f4      	b.n	8002124 <__ledf2+0x84>
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ea      	bne.n	8002114 <__ledf2+0x74>
 800213e:	464c      	mov	r4, r9
 8002140:	4326      	orrs	r6, r4
 8002142:	d1e7      	bne.n	8002114 <__ledf2+0x74>
 8002144:	e7e8      	b.n	8002118 <__ledf2+0x78>
 8002146:	429a      	cmp	r2, r3
 8002148:	dd06      	ble.n	8002158 <__ledf2+0xb8>
 800214a:	4243      	negs	r3, r0
 800214c:	4158      	adcs	r0, r3
 800214e:	2302      	movs	r3, #2
 8002150:	4240      	negs	r0, r0
 8002152:	4018      	ands	r0, r3
 8002154:	3801      	subs	r0, #1
 8002156:	e7e5      	b.n	8002124 <__ledf2+0x84>
 8002158:	429a      	cmp	r2, r3
 800215a:	dbe9      	blt.n	8002130 <__ledf2+0x90>
 800215c:	454f      	cmp	r7, r9
 800215e:	d8db      	bhi.n	8002118 <__ledf2+0x78>
 8002160:	d006      	beq.n	8002170 <__ledf2+0xd0>
 8002162:	2000      	movs	r0, #0
 8002164:	454f      	cmp	r7, r9
 8002166:	d2dd      	bcs.n	8002124 <__ledf2+0x84>
 8002168:	2900      	cmp	r1, #0
 800216a:	d0e3      	beq.n	8002134 <__ledf2+0x94>
 800216c:	0008      	movs	r0, r1
 800216e:	e7d9      	b.n	8002124 <__ledf2+0x84>
 8002170:	45c4      	cmp	ip, r8
 8002172:	d8d1      	bhi.n	8002118 <__ledf2+0x78>
 8002174:	2000      	movs	r0, #0
 8002176:	45c4      	cmp	ip, r8
 8002178:	d2d4      	bcs.n	8002124 <__ledf2+0x84>
 800217a:	e7f5      	b.n	8002168 <__ledf2+0xc8>
 800217c:	000007ff 	.word	0x000007ff

08002180 <__aeabi_dmul>:
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	4657      	mov	r7, sl
 8002184:	464e      	mov	r6, r9
 8002186:	4645      	mov	r5, r8
 8002188:	46de      	mov	lr, fp
 800218a:	b5e0      	push	{r5, r6, r7, lr}
 800218c:	4698      	mov	r8, r3
 800218e:	030c      	lsls	r4, r1, #12
 8002190:	004b      	lsls	r3, r1, #1
 8002192:	0006      	movs	r6, r0
 8002194:	4692      	mov	sl, r2
 8002196:	b087      	sub	sp, #28
 8002198:	0b24      	lsrs	r4, r4, #12
 800219a:	0d5b      	lsrs	r3, r3, #21
 800219c:	0fcf      	lsrs	r7, r1, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06c      	beq.n	800227c <__aeabi_dmul+0xfc>
 80021a2:	4add      	ldr	r2, [pc, #884]	; (8002518 <__aeabi_dmul+0x398>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x2a>
 80021a8:	e086      	b.n	80022b8 <__aeabi_dmul+0x138>
 80021aa:	0f42      	lsrs	r2, r0, #29
 80021ac:	00e4      	lsls	r4, r4, #3
 80021ae:	4314      	orrs	r4, r2
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0412      	lsls	r2, r2, #16
 80021b4:	4314      	orrs	r4, r2
 80021b6:	4ad9      	ldr	r2, [pc, #868]	; (800251c <__aeabi_dmul+0x39c>)
 80021b8:	00c5      	lsls	r5, r0, #3
 80021ba:	4694      	mov	ip, r2
 80021bc:	4463      	add	r3, ip
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	4699      	mov	r9, r3
 80021c4:	469b      	mov	fp, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	4642      	mov	r2, r8
 80021ca:	031e      	lsls	r6, r3, #12
 80021cc:	0fd2      	lsrs	r2, r2, #31
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4650      	mov	r0, sl
 80021d2:	4690      	mov	r8, r2
 80021d4:	0b36      	lsrs	r6, r6, #12
 80021d6:	0d5b      	lsrs	r3, r3, #21
 80021d8:	d100      	bne.n	80021dc <__aeabi_dmul+0x5c>
 80021da:	e078      	b.n	80022ce <__aeabi_dmul+0x14e>
 80021dc:	4ace      	ldr	r2, [pc, #824]	; (8002518 <__aeabi_dmul+0x398>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01d      	beq.n	800221e <__aeabi_dmul+0x9e>
 80021e2:	49ce      	ldr	r1, [pc, #824]	; (800251c <__aeabi_dmul+0x39c>)
 80021e4:	0f42      	lsrs	r2, r0, #29
 80021e6:	468c      	mov	ip, r1
 80021e8:	9900      	ldr	r1, [sp, #0]
 80021ea:	4463      	add	r3, ip
 80021ec:	00f6      	lsls	r6, r6, #3
 80021ee:	468c      	mov	ip, r1
 80021f0:	4316      	orrs	r6, r2
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	449c      	add	ip, r3
 80021f6:	0412      	lsls	r2, r2, #16
 80021f8:	4663      	mov	r3, ip
 80021fa:	4316      	orrs	r6, r2
 80021fc:	00c2      	lsls	r2, r0, #3
 80021fe:	2000      	movs	r0, #0
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	9900      	ldr	r1, [sp, #0]
 8002204:	4643      	mov	r3, r8
 8002206:	3101      	adds	r1, #1
 8002208:	468c      	mov	ip, r1
 800220a:	4649      	mov	r1, r9
 800220c:	407b      	eors	r3, r7
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	290f      	cmp	r1, #15
 8002212:	d900      	bls.n	8002216 <__aeabi_dmul+0x96>
 8002214:	e07e      	b.n	8002314 <__aeabi_dmul+0x194>
 8002216:	4bc2      	ldr	r3, [pc, #776]	; (8002520 <__aeabi_dmul+0x3a0>)
 8002218:	0089      	lsls	r1, r1, #2
 800221a:	5859      	ldr	r1, [r3, r1]
 800221c:	468f      	mov	pc, r1
 800221e:	4652      	mov	r2, sl
 8002220:	9b00      	ldr	r3, [sp, #0]
 8002222:	4332      	orrs	r2, r6
 8002224:	d000      	beq.n	8002228 <__aeabi_dmul+0xa8>
 8002226:	e156      	b.n	80024d6 <__aeabi_dmul+0x356>
 8002228:	49bb      	ldr	r1, [pc, #748]	; (8002518 <__aeabi_dmul+0x398>)
 800222a:	2600      	movs	r6, #0
 800222c:	468c      	mov	ip, r1
 800222e:	4463      	add	r3, ip
 8002230:	4649      	mov	r1, r9
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2302      	movs	r3, #2
 8002236:	4319      	orrs	r1, r3
 8002238:	4689      	mov	r9, r1
 800223a:	2002      	movs	r0, #2
 800223c:	e7e1      	b.n	8002202 <__aeabi_dmul+0x82>
 800223e:	4643      	mov	r3, r8
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	0034      	movs	r4, r6
 8002244:	0015      	movs	r5, r2
 8002246:	4683      	mov	fp, r0
 8002248:	465b      	mov	r3, fp
 800224a:	2b02      	cmp	r3, #2
 800224c:	d05e      	beq.n	800230c <__aeabi_dmul+0x18c>
 800224e:	2b03      	cmp	r3, #3
 8002250:	d100      	bne.n	8002254 <__aeabi_dmul+0xd4>
 8002252:	e1f3      	b.n	800263c <__aeabi_dmul+0x4bc>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d000      	beq.n	800225a <__aeabi_dmul+0xda>
 8002258:	e118      	b.n	800248c <__aeabi_dmul+0x30c>
 800225a:	2200      	movs	r2, #0
 800225c:	2400      	movs	r4, #0
 800225e:	2500      	movs	r5, #0
 8002260:	9b01      	ldr	r3, [sp, #4]
 8002262:	0512      	lsls	r2, r2, #20
 8002264:	4322      	orrs	r2, r4
 8002266:	07db      	lsls	r3, r3, #31
 8002268:	431a      	orrs	r2, r3
 800226a:	0028      	movs	r0, r5
 800226c:	0011      	movs	r1, r2
 800226e:	b007      	add	sp, #28
 8002270:	bcf0      	pop	{r4, r5, r6, r7}
 8002272:	46bb      	mov	fp, r7
 8002274:	46b2      	mov	sl, r6
 8002276:	46a9      	mov	r9, r5
 8002278:	46a0      	mov	r8, r4
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	0025      	movs	r5, r4
 800227e:	4305      	orrs	r5, r0
 8002280:	d100      	bne.n	8002284 <__aeabi_dmul+0x104>
 8002282:	e141      	b.n	8002508 <__aeabi_dmul+0x388>
 8002284:	2c00      	cmp	r4, #0
 8002286:	d100      	bne.n	800228a <__aeabi_dmul+0x10a>
 8002288:	e1ad      	b.n	80025e6 <__aeabi_dmul+0x466>
 800228a:	0020      	movs	r0, r4
 800228c:	f000 fef0 	bl	8003070 <__clzsi2>
 8002290:	0001      	movs	r1, r0
 8002292:	0002      	movs	r2, r0
 8002294:	390b      	subs	r1, #11
 8002296:	231d      	movs	r3, #29
 8002298:	0010      	movs	r0, r2
 800229a:	1a5b      	subs	r3, r3, r1
 800229c:	0031      	movs	r1, r6
 800229e:	0035      	movs	r5, r6
 80022a0:	3808      	subs	r0, #8
 80022a2:	4084      	lsls	r4, r0
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	4085      	lsls	r5, r0
 80022a8:	430c      	orrs	r4, r1
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022ac:	1a83      	subs	r3, r0, r2
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	4699      	mov	r9, r3
 80022b4:	469b      	mov	fp, r3
 80022b6:	e786      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022b8:	0005      	movs	r5, r0
 80022ba:	4325      	orrs	r5, r4
 80022bc:	d000      	beq.n	80022c0 <__aeabi_dmul+0x140>
 80022be:	e11c      	b.n	80024fa <__aeabi_dmul+0x37a>
 80022c0:	2208      	movs	r2, #8
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2302      	movs	r3, #2
 80022c6:	2400      	movs	r4, #0
 80022c8:	4691      	mov	r9, r2
 80022ca:	469b      	mov	fp, r3
 80022cc:	e77b      	b.n	80021c6 <__aeabi_dmul+0x46>
 80022ce:	4652      	mov	r2, sl
 80022d0:	4332      	orrs	r2, r6
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dmul+0x156>
 80022d4:	e10a      	b.n	80024ec <__aeabi_dmul+0x36c>
 80022d6:	2e00      	cmp	r6, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dmul+0x15c>
 80022da:	e176      	b.n	80025ca <__aeabi_dmul+0x44a>
 80022dc:	0030      	movs	r0, r6
 80022de:	f000 fec7 	bl	8003070 <__clzsi2>
 80022e2:	0002      	movs	r2, r0
 80022e4:	3a0b      	subs	r2, #11
 80022e6:	231d      	movs	r3, #29
 80022e8:	0001      	movs	r1, r0
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	4652      	mov	r2, sl
 80022ee:	3908      	subs	r1, #8
 80022f0:	40da      	lsrs	r2, r3
 80022f2:	408e      	lsls	r6, r1
 80022f4:	4316      	orrs	r6, r2
 80022f6:	4652      	mov	r2, sl
 80022f8:	408a      	lsls	r2, r1
 80022fa:	9b00      	ldr	r3, [sp, #0]
 80022fc:	4989      	ldr	r1, [pc, #548]	; (8002524 <__aeabi_dmul+0x3a4>)
 80022fe:	1a18      	subs	r0, r3, r0
 8002300:	0003      	movs	r3, r0
 8002302:	468c      	mov	ip, r1
 8002304:	4463      	add	r3, ip
 8002306:	2000      	movs	r0, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	e77a      	b.n	8002202 <__aeabi_dmul+0x82>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	4a81      	ldr	r2, [pc, #516]	; (8002518 <__aeabi_dmul+0x398>)
 8002312:	e7a5      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002314:	0c2f      	lsrs	r7, r5, #16
 8002316:	042d      	lsls	r5, r5, #16
 8002318:	0c2d      	lsrs	r5, r5, #16
 800231a:	002b      	movs	r3, r5
 800231c:	0c11      	lsrs	r1, r2, #16
 800231e:	0412      	lsls	r2, r2, #16
 8002320:	0c12      	lsrs	r2, r2, #16
 8002322:	4353      	muls	r3, r2
 8002324:	4698      	mov	r8, r3
 8002326:	0013      	movs	r3, r2
 8002328:	0028      	movs	r0, r5
 800232a:	437b      	muls	r3, r7
 800232c:	4699      	mov	r9, r3
 800232e:	4348      	muls	r0, r1
 8002330:	4448      	add	r0, r9
 8002332:	4683      	mov	fp, r0
 8002334:	4640      	mov	r0, r8
 8002336:	000b      	movs	r3, r1
 8002338:	0c00      	lsrs	r0, r0, #16
 800233a:	4682      	mov	sl, r0
 800233c:	4658      	mov	r0, fp
 800233e:	437b      	muls	r3, r7
 8002340:	4450      	add	r0, sl
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	4581      	cmp	r9, r0
 8002346:	d906      	bls.n	8002356 <__aeabi_dmul+0x1d6>
 8002348:	469a      	mov	sl, r3
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	025b      	lsls	r3, r3, #9
 800234e:	4699      	mov	r9, r3
 8002350:	44ca      	add	sl, r9
 8002352:	4653      	mov	r3, sl
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	0c03      	lsrs	r3, r0, #16
 8002358:	469b      	mov	fp, r3
 800235a:	4643      	mov	r3, r8
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	0400      	lsls	r0, r0, #16
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	4698      	mov	r8, r3
 8002364:	0003      	movs	r3, r0
 8002366:	4443      	add	r3, r8
 8002368:	9304      	str	r3, [sp, #16]
 800236a:	0c33      	lsrs	r3, r6, #16
 800236c:	4699      	mov	r9, r3
 800236e:	002b      	movs	r3, r5
 8002370:	0436      	lsls	r6, r6, #16
 8002372:	0c36      	lsrs	r6, r6, #16
 8002374:	4373      	muls	r3, r6
 8002376:	4698      	mov	r8, r3
 8002378:	0033      	movs	r3, r6
 800237a:	437b      	muls	r3, r7
 800237c:	469a      	mov	sl, r3
 800237e:	464b      	mov	r3, r9
 8002380:	435d      	muls	r5, r3
 8002382:	435f      	muls	r7, r3
 8002384:	4643      	mov	r3, r8
 8002386:	4455      	add	r5, sl
 8002388:	0c18      	lsrs	r0, r3, #16
 800238a:	1940      	adds	r0, r0, r5
 800238c:	4582      	cmp	sl, r0
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x218>
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	469a      	mov	sl, r3
 8002396:	4457      	add	r7, sl
 8002398:	0c05      	lsrs	r5, r0, #16
 800239a:	19eb      	adds	r3, r5, r7
 800239c:	9305      	str	r3, [sp, #20]
 800239e:	4643      	mov	r3, r8
 80023a0:	041d      	lsls	r5, r3, #16
 80023a2:	0c2d      	lsrs	r5, r5, #16
 80023a4:	0400      	lsls	r0, r0, #16
 80023a6:	1940      	adds	r0, r0, r5
 80023a8:	0c25      	lsrs	r5, r4, #16
 80023aa:	0424      	lsls	r4, r4, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
 80023ae:	0027      	movs	r7, r4
 80023b0:	4357      	muls	r7, r2
 80023b2:	436a      	muls	r2, r5
 80023b4:	4690      	mov	r8, r2
 80023b6:	002a      	movs	r2, r5
 80023b8:	0c3b      	lsrs	r3, r7, #16
 80023ba:	469a      	mov	sl, r3
 80023bc:	434a      	muls	r2, r1
 80023be:	4361      	muls	r1, r4
 80023c0:	4441      	add	r1, r8
 80023c2:	4451      	add	r1, sl
 80023c4:	4483      	add	fp, r0
 80023c6:	4588      	cmp	r8, r1
 80023c8:	d903      	bls.n	80023d2 <__aeabi_dmul+0x252>
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	4698      	mov	r8, r3
 80023d0:	4442      	add	r2, r8
 80023d2:	043f      	lsls	r7, r7, #16
 80023d4:	0c0b      	lsrs	r3, r1, #16
 80023d6:	0c3f      	lsrs	r7, r7, #16
 80023d8:	0409      	lsls	r1, r1, #16
 80023da:	19c9      	adds	r1, r1, r7
 80023dc:	0027      	movs	r7, r4
 80023de:	4698      	mov	r8, r3
 80023e0:	464b      	mov	r3, r9
 80023e2:	4377      	muls	r7, r6
 80023e4:	435c      	muls	r4, r3
 80023e6:	436e      	muls	r6, r5
 80023e8:	435d      	muls	r5, r3
 80023ea:	0c3b      	lsrs	r3, r7, #16
 80023ec:	4699      	mov	r9, r3
 80023ee:	19a4      	adds	r4, r4, r6
 80023f0:	444c      	add	r4, r9
 80023f2:	4442      	add	r2, r8
 80023f4:	9503      	str	r5, [sp, #12]
 80023f6:	42a6      	cmp	r6, r4
 80023f8:	d904      	bls.n	8002404 <__aeabi_dmul+0x284>
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	025b      	lsls	r3, r3, #9
 80023fe:	4698      	mov	r8, r3
 8002400:	4445      	add	r5, r8
 8002402:	9503      	str	r5, [sp, #12]
 8002404:	9b02      	ldr	r3, [sp, #8]
 8002406:	043f      	lsls	r7, r7, #16
 8002408:	445b      	add	r3, fp
 800240a:	001e      	movs	r6, r3
 800240c:	4283      	cmp	r3, r0
 800240e:	4180      	sbcs	r0, r0
 8002410:	0423      	lsls	r3, r4, #16
 8002412:	4698      	mov	r8, r3
 8002414:	9b05      	ldr	r3, [sp, #20]
 8002416:	0c3f      	lsrs	r7, r7, #16
 8002418:	4447      	add	r7, r8
 800241a:	4698      	mov	r8, r3
 800241c:	1876      	adds	r6, r6, r1
 800241e:	428e      	cmp	r6, r1
 8002420:	4189      	sbcs	r1, r1
 8002422:	4447      	add	r7, r8
 8002424:	4240      	negs	r0, r0
 8002426:	183d      	adds	r5, r7, r0
 8002428:	46a8      	mov	r8, r5
 800242a:	4693      	mov	fp, r2
 800242c:	4249      	negs	r1, r1
 800242e:	468a      	mov	sl, r1
 8002430:	44c3      	add	fp, r8
 8002432:	429f      	cmp	r7, r3
 8002434:	41bf      	sbcs	r7, r7
 8002436:	4580      	cmp	r8, r0
 8002438:	4180      	sbcs	r0, r0
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	44da      	add	sl, fp
 800243e:	4698      	mov	r8, r3
 8002440:	4653      	mov	r3, sl
 8002442:	4240      	negs	r0, r0
 8002444:	427f      	negs	r7, r7
 8002446:	4307      	orrs	r7, r0
 8002448:	0c24      	lsrs	r4, r4, #16
 800244a:	4593      	cmp	fp, r2
 800244c:	4192      	sbcs	r2, r2
 800244e:	458a      	cmp	sl, r1
 8002450:	4189      	sbcs	r1, r1
 8002452:	193f      	adds	r7, r7, r4
 8002454:	0ddc      	lsrs	r4, r3, #23
 8002456:	9b04      	ldr	r3, [sp, #16]
 8002458:	0275      	lsls	r5, r6, #9
 800245a:	431d      	orrs	r5, r3
 800245c:	1e68      	subs	r0, r5, #1
 800245e:	4185      	sbcs	r5, r0
 8002460:	4653      	mov	r3, sl
 8002462:	4252      	negs	r2, r2
 8002464:	4249      	negs	r1, r1
 8002466:	430a      	orrs	r2, r1
 8002468:	18bf      	adds	r7, r7, r2
 800246a:	4447      	add	r7, r8
 800246c:	0df6      	lsrs	r6, r6, #23
 800246e:	027f      	lsls	r7, r7, #9
 8002470:	4335      	orrs	r5, r6
 8002472:	025a      	lsls	r2, r3, #9
 8002474:	433c      	orrs	r4, r7
 8002476:	4315      	orrs	r5, r2
 8002478:	01fb      	lsls	r3, r7, #7
 800247a:	d400      	bmi.n	800247e <__aeabi_dmul+0x2fe>
 800247c:	e0c1      	b.n	8002602 <__aeabi_dmul+0x482>
 800247e:	2101      	movs	r1, #1
 8002480:	086a      	lsrs	r2, r5, #1
 8002482:	400d      	ands	r5, r1
 8002484:	4315      	orrs	r5, r2
 8002486:	07e2      	lsls	r2, r4, #31
 8002488:	4315      	orrs	r5, r2
 800248a:	0864      	lsrs	r4, r4, #1
 800248c:	4926      	ldr	r1, [pc, #152]	; (8002528 <__aeabi_dmul+0x3a8>)
 800248e:	4461      	add	r1, ip
 8002490:	2900      	cmp	r1, #0
 8002492:	dd56      	ble.n	8002542 <__aeabi_dmul+0x3c2>
 8002494:	076b      	lsls	r3, r5, #29
 8002496:	d009      	beq.n	80024ac <__aeabi_dmul+0x32c>
 8002498:	220f      	movs	r2, #15
 800249a:	402a      	ands	r2, r5
 800249c:	2a04      	cmp	r2, #4
 800249e:	d005      	beq.n	80024ac <__aeabi_dmul+0x32c>
 80024a0:	1d2a      	adds	r2, r5, #4
 80024a2:	42aa      	cmp	r2, r5
 80024a4:	41ad      	sbcs	r5, r5
 80024a6:	426d      	negs	r5, r5
 80024a8:	1964      	adds	r4, r4, r5
 80024aa:	0015      	movs	r5, r2
 80024ac:	01e3      	lsls	r3, r4, #7
 80024ae:	d504      	bpl.n	80024ba <__aeabi_dmul+0x33a>
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <__aeabi_dmul+0x3ac>)
 80024b4:	00c9      	lsls	r1, r1, #3
 80024b6:	4014      	ands	r4, r2
 80024b8:	4461      	add	r1, ip
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <__aeabi_dmul+0x3b0>)
 80024bc:	4291      	cmp	r1, r2
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dmul+0x342>
 80024c0:	e724      	b.n	800230c <__aeabi_dmul+0x18c>
 80024c2:	0762      	lsls	r2, r4, #29
 80024c4:	08ed      	lsrs	r5, r5, #3
 80024c6:	0264      	lsls	r4, r4, #9
 80024c8:	0549      	lsls	r1, r1, #21
 80024ca:	4315      	orrs	r5, r2
 80024cc:	0b24      	lsrs	r4, r4, #12
 80024ce:	0d4a      	lsrs	r2, r1, #21
 80024d0:	e6c6      	b.n	8002260 <__aeabi_dmul+0xe0>
 80024d2:	9701      	str	r7, [sp, #4]
 80024d4:	e6b8      	b.n	8002248 <__aeabi_dmul+0xc8>
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <__aeabi_dmul+0x398>)
 80024d8:	2003      	movs	r0, #3
 80024da:	4694      	mov	ip, r2
 80024dc:	4463      	add	r3, ip
 80024de:	464a      	mov	r2, r9
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2303      	movs	r3, #3
 80024e4:	431a      	orrs	r2, r3
 80024e6:	4691      	mov	r9, r2
 80024e8:	4652      	mov	r2, sl
 80024ea:	e68a      	b.n	8002202 <__aeabi_dmul+0x82>
 80024ec:	4649      	mov	r1, r9
 80024ee:	2301      	movs	r3, #1
 80024f0:	4319      	orrs	r1, r3
 80024f2:	4689      	mov	r9, r1
 80024f4:	2600      	movs	r6, #0
 80024f6:	2001      	movs	r0, #1
 80024f8:	e683      	b.n	8002202 <__aeabi_dmul+0x82>
 80024fa:	220c      	movs	r2, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	0005      	movs	r5, r0
 8002502:	4691      	mov	r9, r2
 8002504:	469b      	mov	fp, r3
 8002506:	e65e      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002508:	2304      	movs	r3, #4
 800250a:	4699      	mov	r9, r3
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	2400      	movs	r4, #0
 8002514:	469b      	mov	fp, r3
 8002516:	e656      	b.n	80021c6 <__aeabi_dmul+0x46>
 8002518:	000007ff 	.word	0x000007ff
 800251c:	fffffc01 	.word	0xfffffc01
 8002520:	080123a4 	.word	0x080123a4
 8002524:	fffffc0d 	.word	0xfffffc0d
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	2300      	movs	r3, #0
 8002536:	2480      	movs	r4, #128	; 0x80
 8002538:	2500      	movs	r5, #0
 800253a:	4a44      	ldr	r2, [pc, #272]	; (800264c <__aeabi_dmul+0x4cc>)
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	0324      	lsls	r4, r4, #12
 8002540:	e68e      	b.n	8002260 <__aeabi_dmul+0xe0>
 8002542:	2001      	movs	r0, #1
 8002544:	1a40      	subs	r0, r0, r1
 8002546:	2838      	cmp	r0, #56	; 0x38
 8002548:	dd00      	ble.n	800254c <__aeabi_dmul+0x3cc>
 800254a:	e686      	b.n	800225a <__aeabi_dmul+0xda>
 800254c:	281f      	cmp	r0, #31
 800254e:	dd5b      	ble.n	8002608 <__aeabi_dmul+0x488>
 8002550:	221f      	movs	r2, #31
 8002552:	0023      	movs	r3, r4
 8002554:	4252      	negs	r2, r2
 8002556:	1a51      	subs	r1, r2, r1
 8002558:	40cb      	lsrs	r3, r1
 800255a:	0019      	movs	r1, r3
 800255c:	2820      	cmp	r0, #32
 800255e:	d003      	beq.n	8002568 <__aeabi_dmul+0x3e8>
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <__aeabi_dmul+0x4d0>)
 8002562:	4462      	add	r2, ip
 8002564:	4094      	lsls	r4, r2
 8002566:	4325      	orrs	r5, r4
 8002568:	1e6a      	subs	r2, r5, #1
 800256a:	4195      	sbcs	r5, r2
 800256c:	002a      	movs	r2, r5
 800256e:	430a      	orrs	r2, r1
 8002570:	2107      	movs	r1, #7
 8002572:	000d      	movs	r5, r1
 8002574:	2400      	movs	r4, #0
 8002576:	4015      	ands	r5, r2
 8002578:	4211      	tst	r1, r2
 800257a:	d05b      	beq.n	8002634 <__aeabi_dmul+0x4b4>
 800257c:	210f      	movs	r1, #15
 800257e:	2400      	movs	r4, #0
 8002580:	4011      	ands	r1, r2
 8002582:	2904      	cmp	r1, #4
 8002584:	d053      	beq.n	800262e <__aeabi_dmul+0x4ae>
 8002586:	1d11      	adds	r1, r2, #4
 8002588:	4291      	cmp	r1, r2
 800258a:	4192      	sbcs	r2, r2
 800258c:	4252      	negs	r2, r2
 800258e:	18a4      	adds	r4, r4, r2
 8002590:	000a      	movs	r2, r1
 8002592:	0223      	lsls	r3, r4, #8
 8002594:	d54b      	bpl.n	800262e <__aeabi_dmul+0x4ae>
 8002596:	2201      	movs	r2, #1
 8002598:	2400      	movs	r4, #0
 800259a:	2500      	movs	r5, #0
 800259c:	e660      	b.n	8002260 <__aeabi_dmul+0xe0>
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	031b      	lsls	r3, r3, #12
 80025a2:	421c      	tst	r4, r3
 80025a4:	d009      	beq.n	80025ba <__aeabi_dmul+0x43a>
 80025a6:	421e      	tst	r6, r3
 80025a8:	d107      	bne.n	80025ba <__aeabi_dmul+0x43a>
 80025aa:	4333      	orrs	r3, r6
 80025ac:	031c      	lsls	r4, r3, #12
 80025ae:	4643      	mov	r3, r8
 80025b0:	0015      	movs	r5, r2
 80025b2:	0b24      	lsrs	r4, r4, #12
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <__aeabi_dmul+0x4cc>)
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	e652      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0312      	lsls	r2, r2, #12
 80025be:	4314      	orrs	r4, r2
 80025c0:	0324      	lsls	r4, r4, #12
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <__aeabi_dmul+0x4cc>)
 80025c4:	0b24      	lsrs	r4, r4, #12
 80025c6:	9701      	str	r7, [sp, #4]
 80025c8:	e64a      	b.n	8002260 <__aeabi_dmul+0xe0>
 80025ca:	f000 fd51 	bl	8003070 <__clzsi2>
 80025ce:	0003      	movs	r3, r0
 80025d0:	001a      	movs	r2, r3
 80025d2:	3215      	adds	r2, #21
 80025d4:	3020      	adds	r0, #32
 80025d6:	2a1c      	cmp	r2, #28
 80025d8:	dc00      	bgt.n	80025dc <__aeabi_dmul+0x45c>
 80025da:	e684      	b.n	80022e6 <__aeabi_dmul+0x166>
 80025dc:	4656      	mov	r6, sl
 80025de:	3b08      	subs	r3, #8
 80025e0:	2200      	movs	r2, #0
 80025e2:	409e      	lsls	r6, r3
 80025e4:	e689      	b.n	80022fa <__aeabi_dmul+0x17a>
 80025e6:	f000 fd43 	bl	8003070 <__clzsi2>
 80025ea:	0001      	movs	r1, r0
 80025ec:	0002      	movs	r2, r0
 80025ee:	3115      	adds	r1, #21
 80025f0:	3220      	adds	r2, #32
 80025f2:	291c      	cmp	r1, #28
 80025f4:	dc00      	bgt.n	80025f8 <__aeabi_dmul+0x478>
 80025f6:	e64e      	b.n	8002296 <__aeabi_dmul+0x116>
 80025f8:	0034      	movs	r4, r6
 80025fa:	3808      	subs	r0, #8
 80025fc:	2500      	movs	r5, #0
 80025fe:	4084      	lsls	r4, r0
 8002600:	e653      	b.n	80022aa <__aeabi_dmul+0x12a>
 8002602:	9b00      	ldr	r3, [sp, #0]
 8002604:	469c      	mov	ip, r3
 8002606:	e741      	b.n	800248c <__aeabi_dmul+0x30c>
 8002608:	4912      	ldr	r1, [pc, #72]	; (8002654 <__aeabi_dmul+0x4d4>)
 800260a:	0022      	movs	r2, r4
 800260c:	4461      	add	r1, ip
 800260e:	002e      	movs	r6, r5
 8002610:	408d      	lsls	r5, r1
 8002612:	408a      	lsls	r2, r1
 8002614:	40c6      	lsrs	r6, r0
 8002616:	1e69      	subs	r1, r5, #1
 8002618:	418d      	sbcs	r5, r1
 800261a:	4332      	orrs	r2, r6
 800261c:	432a      	orrs	r2, r5
 800261e:	40c4      	lsrs	r4, r0
 8002620:	0753      	lsls	r3, r2, #29
 8002622:	d0b6      	beq.n	8002592 <__aeabi_dmul+0x412>
 8002624:	210f      	movs	r1, #15
 8002626:	4011      	ands	r1, r2
 8002628:	2904      	cmp	r1, #4
 800262a:	d1ac      	bne.n	8002586 <__aeabi_dmul+0x406>
 800262c:	e7b1      	b.n	8002592 <__aeabi_dmul+0x412>
 800262e:	0765      	lsls	r5, r4, #29
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	0b24      	lsrs	r4, r4, #12
 8002634:	08d2      	lsrs	r2, r2, #3
 8002636:	4315      	orrs	r5, r2
 8002638:	2200      	movs	r2, #0
 800263a:	e611      	b.n	8002260 <__aeabi_dmul+0xe0>
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	0312      	lsls	r2, r2, #12
 8002640:	4314      	orrs	r4, r2
 8002642:	0324      	lsls	r4, r4, #12
 8002644:	4a01      	ldr	r2, [pc, #4]	; (800264c <__aeabi_dmul+0x4cc>)
 8002646:	0b24      	lsrs	r4, r4, #12
 8002648:	e60a      	b.n	8002260 <__aeabi_dmul+0xe0>
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	000007ff 	.word	0x000007ff
 8002650:	0000043e 	.word	0x0000043e
 8002654:	0000041e 	.word	0x0000041e

08002658 <__aeabi_dsub>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	4657      	mov	r7, sl
 800265c:	464e      	mov	r6, r9
 800265e:	4645      	mov	r5, r8
 8002660:	46de      	mov	lr, fp
 8002662:	0004      	movs	r4, r0
 8002664:	b5e0      	push	{r5, r6, r7, lr}
 8002666:	001f      	movs	r7, r3
 8002668:	0010      	movs	r0, r2
 800266a:	030b      	lsls	r3, r1, #12
 800266c:	0f62      	lsrs	r2, r4, #29
 800266e:	004e      	lsls	r6, r1, #1
 8002670:	0fcd      	lsrs	r5, r1, #31
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	0339      	lsls	r1, r7, #12
 8002676:	4313      	orrs	r3, r2
 8002678:	0a49      	lsrs	r1, r1, #9
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	0f44      	lsrs	r4, r0, #29
 800267e:	4321      	orrs	r1, r4
 8002680:	4cc2      	ldr	r4, [pc, #776]	; (800298c <__aeabi_dsub+0x334>)
 8002682:	4691      	mov	r9, r2
 8002684:	4692      	mov	sl, r2
 8002686:	00c0      	lsls	r0, r0, #3
 8002688:	007a      	lsls	r2, r7, #1
 800268a:	4680      	mov	r8, r0
 800268c:	0d76      	lsrs	r6, r6, #21
 800268e:	0d52      	lsrs	r2, r2, #21
 8002690:	0fff      	lsrs	r7, r7, #31
 8002692:	42a2      	cmp	r2, r4
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x40>
 8002696:	e0b4      	b.n	8002802 <__aeabi_dsub+0x1aa>
 8002698:	2401      	movs	r4, #1
 800269a:	4067      	eors	r7, r4
 800269c:	46bb      	mov	fp, r7
 800269e:	42bd      	cmp	r5, r7
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x4c>
 80026a2:	e088      	b.n	80027b6 <__aeabi_dsub+0x15e>
 80026a4:	1ab4      	subs	r4, r6, r2
 80026a6:	46a4      	mov	ip, r4
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	dc00      	bgt.n	80026ae <__aeabi_dsub+0x56>
 80026ac:	e0b2      	b.n	8002814 <__aeabi_dsub+0x1bc>
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x5c>
 80026b2:	e0c5      	b.n	8002840 <__aeabi_dsub+0x1e8>
 80026b4:	4ab5      	ldr	r2, [pc, #724]	; (800298c <__aeabi_dsub+0x334>)
 80026b6:	4296      	cmp	r6, r2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x64>
 80026ba:	e28b      	b.n	8002bd4 <__aeabi_dsub+0x57c>
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	0412      	lsls	r2, r2, #16
 80026c0:	4311      	orrs	r1, r2
 80026c2:	4662      	mov	r2, ip
 80026c4:	2a38      	cmp	r2, #56	; 0x38
 80026c6:	dd00      	ble.n	80026ca <__aeabi_dsub+0x72>
 80026c8:	e1a1      	b.n	8002a0e <__aeabi_dsub+0x3b6>
 80026ca:	2a1f      	cmp	r2, #31
 80026cc:	dd00      	ble.n	80026d0 <__aeabi_dsub+0x78>
 80026ce:	e216      	b.n	8002afe <__aeabi_dsub+0x4a6>
 80026d0:	2720      	movs	r7, #32
 80026d2:	000c      	movs	r4, r1
 80026d4:	1abf      	subs	r7, r7, r2
 80026d6:	40bc      	lsls	r4, r7
 80026d8:	0002      	movs	r2, r0
 80026da:	46a0      	mov	r8, r4
 80026dc:	4664      	mov	r4, ip
 80026de:	40b8      	lsls	r0, r7
 80026e0:	40e2      	lsrs	r2, r4
 80026e2:	4644      	mov	r4, r8
 80026e4:	4314      	orrs	r4, r2
 80026e6:	0002      	movs	r2, r0
 80026e8:	1e50      	subs	r0, r2, #1
 80026ea:	4182      	sbcs	r2, r0
 80026ec:	4660      	mov	r0, ip
 80026ee:	40c1      	lsrs	r1, r0
 80026f0:	4322      	orrs	r2, r4
 80026f2:	1a5b      	subs	r3, r3, r1
 80026f4:	4649      	mov	r1, r9
 80026f6:	1a8c      	subs	r4, r1, r2
 80026f8:	45a1      	cmp	r9, r4
 80026fa:	4192      	sbcs	r2, r2
 80026fc:	4252      	negs	r2, r2
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	4698      	mov	r8, r3
 8002702:	4643      	mov	r3, r8
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	d400      	bmi.n	800270a <__aeabi_dsub+0xb2>
 8002708:	e117      	b.n	800293a <__aeabi_dsub+0x2e2>
 800270a:	4643      	mov	r3, r8
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	4698      	mov	r8, r3
 8002712:	4643      	mov	r3, r8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dsub+0xc2>
 8002718:	e16c      	b.n	80029f4 <__aeabi_dsub+0x39c>
 800271a:	4640      	mov	r0, r8
 800271c:	f000 fca8 	bl	8003070 <__clzsi2>
 8002720:	0002      	movs	r2, r0
 8002722:	3a08      	subs	r2, #8
 8002724:	2120      	movs	r1, #32
 8002726:	0020      	movs	r0, r4
 8002728:	4643      	mov	r3, r8
 800272a:	1a89      	subs	r1, r1, r2
 800272c:	4093      	lsls	r3, r2
 800272e:	40c8      	lsrs	r0, r1
 8002730:	4094      	lsls	r4, r2
 8002732:	4303      	orrs	r3, r0
 8002734:	4296      	cmp	r6, r2
 8002736:	dd00      	ble.n	800273a <__aeabi_dsub+0xe2>
 8002738:	e157      	b.n	80029ea <__aeabi_dsub+0x392>
 800273a:	1b96      	subs	r6, r2, r6
 800273c:	1c71      	adds	r1, r6, #1
 800273e:	291f      	cmp	r1, #31
 8002740:	dd00      	ble.n	8002744 <__aeabi_dsub+0xec>
 8002742:	e1cb      	b.n	8002adc <__aeabi_dsub+0x484>
 8002744:	2220      	movs	r2, #32
 8002746:	0018      	movs	r0, r3
 8002748:	0026      	movs	r6, r4
 800274a:	1a52      	subs	r2, r2, r1
 800274c:	4094      	lsls	r4, r2
 800274e:	4090      	lsls	r0, r2
 8002750:	40ce      	lsrs	r6, r1
 8002752:	40cb      	lsrs	r3, r1
 8002754:	1e62      	subs	r2, r4, #1
 8002756:	4194      	sbcs	r4, r2
 8002758:	4330      	orrs	r0, r6
 800275a:	4698      	mov	r8, r3
 800275c:	2600      	movs	r6, #0
 800275e:	4304      	orrs	r4, r0
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d009      	beq.n	8002778 <__aeabi_dsub+0x120>
 8002764:	230f      	movs	r3, #15
 8002766:	4023      	ands	r3, r4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d005      	beq.n	8002778 <__aeabi_dsub+0x120>
 800276c:	1d23      	adds	r3, r4, #4
 800276e:	42a3      	cmp	r3, r4
 8002770:	41a4      	sbcs	r4, r4
 8002772:	4264      	negs	r4, r4
 8002774:	44a0      	add	r8, r4
 8002776:	001c      	movs	r4, r3
 8002778:	4643      	mov	r3, r8
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	d400      	bmi.n	8002780 <__aeabi_dsub+0x128>
 800277e:	e0df      	b.n	8002940 <__aeabi_dsub+0x2e8>
 8002780:	4b82      	ldr	r3, [pc, #520]	; (800298c <__aeabi_dsub+0x334>)
 8002782:	3601      	adds	r6, #1
 8002784:	429e      	cmp	r6, r3
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x132>
 8002788:	e0fb      	b.n	8002982 <__aeabi_dsub+0x32a>
 800278a:	4642      	mov	r2, r8
 800278c:	4b80      	ldr	r3, [pc, #512]	; (8002990 <__aeabi_dsub+0x338>)
 800278e:	08e4      	lsrs	r4, r4, #3
 8002790:	401a      	ands	r2, r3
 8002792:	0013      	movs	r3, r2
 8002794:	0571      	lsls	r1, r6, #21
 8002796:	0752      	lsls	r2, r2, #29
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	4322      	orrs	r2, r4
 800279c:	0b1b      	lsrs	r3, r3, #12
 800279e:	0d49      	lsrs	r1, r1, #21
 80027a0:	0509      	lsls	r1, r1, #20
 80027a2:	07ed      	lsls	r5, r5, #31
 80027a4:	4319      	orrs	r1, r3
 80027a6:	4329      	orrs	r1, r5
 80027a8:	0010      	movs	r0, r2
 80027aa:	bcf0      	pop	{r4, r5, r6, r7}
 80027ac:	46bb      	mov	fp, r7
 80027ae:	46b2      	mov	sl, r6
 80027b0:	46a9      	mov	r9, r5
 80027b2:	46a0      	mov	r8, r4
 80027b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027b6:	1ab4      	subs	r4, r6, r2
 80027b8:	46a4      	mov	ip, r4
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	dd58      	ble.n	8002870 <__aeabi_dsub+0x218>
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x16c>
 80027c2:	e09e      	b.n	8002902 <__aeabi_dsub+0x2aa>
 80027c4:	4a71      	ldr	r2, [pc, #452]	; (800298c <__aeabi_dsub+0x334>)
 80027c6:	4296      	cmp	r6, r2
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x174>
 80027ca:	e13b      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0412      	lsls	r2, r2, #16
 80027d0:	4311      	orrs	r1, r2
 80027d2:	4662      	mov	r2, ip
 80027d4:	2a38      	cmp	r2, #56	; 0x38
 80027d6:	dd00      	ble.n	80027da <__aeabi_dsub+0x182>
 80027d8:	e0c1      	b.n	800295e <__aeabi_dsub+0x306>
 80027da:	2a1f      	cmp	r2, #31
 80027dc:	dc00      	bgt.n	80027e0 <__aeabi_dsub+0x188>
 80027de:	e1bb      	b.n	8002b58 <__aeabi_dsub+0x500>
 80027e0:	000c      	movs	r4, r1
 80027e2:	3a20      	subs	r2, #32
 80027e4:	40d4      	lsrs	r4, r2
 80027e6:	0022      	movs	r2, r4
 80027e8:	4664      	mov	r4, ip
 80027ea:	2c20      	cmp	r4, #32
 80027ec:	d004      	beq.n	80027f8 <__aeabi_dsub+0x1a0>
 80027ee:	2740      	movs	r7, #64	; 0x40
 80027f0:	1b3f      	subs	r7, r7, r4
 80027f2:	40b9      	lsls	r1, r7
 80027f4:	4308      	orrs	r0, r1
 80027f6:	4680      	mov	r8, r0
 80027f8:	4644      	mov	r4, r8
 80027fa:	1e61      	subs	r1, r4, #1
 80027fc:	418c      	sbcs	r4, r1
 80027fe:	4314      	orrs	r4, r2
 8002800:	e0b1      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002802:	000c      	movs	r4, r1
 8002804:	4304      	orrs	r4, r0
 8002806:	d02a      	beq.n	800285e <__aeabi_dsub+0x206>
 8002808:	46bb      	mov	fp, r7
 800280a:	42bd      	cmp	r5, r7
 800280c:	d02d      	beq.n	800286a <__aeabi_dsub+0x212>
 800280e:	4c61      	ldr	r4, [pc, #388]	; (8002994 <__aeabi_dsub+0x33c>)
 8002810:	46a4      	mov	ip, r4
 8002812:	44b4      	add	ip, r6
 8002814:	4664      	mov	r4, ip
 8002816:	2c00      	cmp	r4, #0
 8002818:	d05c      	beq.n	80028d4 <__aeabi_dsub+0x27c>
 800281a:	1b94      	subs	r4, r2, r6
 800281c:	46a4      	mov	ip, r4
 800281e:	2e00      	cmp	r6, #0
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x1cc>
 8002822:	e115      	b.n	8002a50 <__aeabi_dsub+0x3f8>
 8002824:	464d      	mov	r5, r9
 8002826:	431d      	orrs	r5, r3
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1d4>
 800282a:	e1c3      	b.n	8002bb4 <__aeabi_dsub+0x55c>
 800282c:	1e65      	subs	r5, r4, #1
 800282e:	2c01      	cmp	r4, #1
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x1dc>
 8002832:	e20c      	b.n	8002c4e <__aeabi_dsub+0x5f6>
 8002834:	4e55      	ldr	r6, [pc, #340]	; (800298c <__aeabi_dsub+0x334>)
 8002836:	42b4      	cmp	r4, r6
 8002838:	d100      	bne.n	800283c <__aeabi_dsub+0x1e4>
 800283a:	e1f8      	b.n	8002c2e <__aeabi_dsub+0x5d6>
 800283c:	46ac      	mov	ip, r5
 800283e:	e10e      	b.n	8002a5e <__aeabi_dsub+0x406>
 8002840:	000a      	movs	r2, r1
 8002842:	4302      	orrs	r2, r0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x1f0>
 8002846:	e136      	b.n	8002ab6 <__aeabi_dsub+0x45e>
 8002848:	0022      	movs	r2, r4
 800284a:	3a01      	subs	r2, #1
 800284c:	2c01      	cmp	r4, #1
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x1fa>
 8002850:	e1c6      	b.n	8002be0 <__aeabi_dsub+0x588>
 8002852:	4c4e      	ldr	r4, [pc, #312]	; (800298c <__aeabi_dsub+0x334>)
 8002854:	45a4      	cmp	ip, r4
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x202>
 8002858:	e0f4      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800285a:	4694      	mov	ip, r2
 800285c:	e731      	b.n	80026c2 <__aeabi_dsub+0x6a>
 800285e:	2401      	movs	r4, #1
 8002860:	4067      	eors	r7, r4
 8002862:	46bb      	mov	fp, r7
 8002864:	42bd      	cmp	r5, r7
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x212>
 8002868:	e71c      	b.n	80026a4 <__aeabi_dsub+0x4c>
 800286a:	4c4a      	ldr	r4, [pc, #296]	; (8002994 <__aeabi_dsub+0x33c>)
 800286c:	46a4      	mov	ip, r4
 800286e:	44b4      	add	ip, r6
 8002870:	4664      	mov	r4, ip
 8002872:	2c00      	cmp	r4, #0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x220>
 8002876:	e0cf      	b.n	8002a18 <__aeabi_dsub+0x3c0>
 8002878:	1b94      	subs	r4, r2, r6
 800287a:	46a4      	mov	ip, r4
 800287c:	2e00      	cmp	r6, #0
 800287e:	d100      	bne.n	8002882 <__aeabi_dsub+0x22a>
 8002880:	e15c      	b.n	8002b3c <__aeabi_dsub+0x4e4>
 8002882:	4e42      	ldr	r6, [pc, #264]	; (800298c <__aeabi_dsub+0x334>)
 8002884:	42b2      	cmp	r2, r6
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x232>
 8002888:	e1ec      	b.n	8002c64 <__aeabi_dsub+0x60c>
 800288a:	2680      	movs	r6, #128	; 0x80
 800288c:	0436      	lsls	r6, r6, #16
 800288e:	4333      	orrs	r3, r6
 8002890:	4664      	mov	r4, ip
 8002892:	2c38      	cmp	r4, #56	; 0x38
 8002894:	dd00      	ble.n	8002898 <__aeabi_dsub+0x240>
 8002896:	e1b3      	b.n	8002c00 <__aeabi_dsub+0x5a8>
 8002898:	2c1f      	cmp	r4, #31
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0x246>
 800289c:	e238      	b.n	8002d10 <__aeabi_dsub+0x6b8>
 800289e:	2620      	movs	r6, #32
 80028a0:	1b36      	subs	r6, r6, r4
 80028a2:	001c      	movs	r4, r3
 80028a4:	40b4      	lsls	r4, r6
 80028a6:	464f      	mov	r7, r9
 80028a8:	46a0      	mov	r8, r4
 80028aa:	4664      	mov	r4, ip
 80028ac:	40e7      	lsrs	r7, r4
 80028ae:	4644      	mov	r4, r8
 80028b0:	433c      	orrs	r4, r7
 80028b2:	464f      	mov	r7, r9
 80028b4:	40b7      	lsls	r7, r6
 80028b6:	003e      	movs	r6, r7
 80028b8:	1e77      	subs	r7, r6, #1
 80028ba:	41be      	sbcs	r6, r7
 80028bc:	4334      	orrs	r4, r6
 80028be:	4666      	mov	r6, ip
 80028c0:	40f3      	lsrs	r3, r6
 80028c2:	18c9      	adds	r1, r1, r3
 80028c4:	1824      	adds	r4, r4, r0
 80028c6:	4284      	cmp	r4, r0
 80028c8:	419b      	sbcs	r3, r3
 80028ca:	425b      	negs	r3, r3
 80028cc:	4698      	mov	r8, r3
 80028ce:	0016      	movs	r6, r2
 80028d0:	4488      	add	r8, r1
 80028d2:	e04e      	b.n	8002972 <__aeabi_dsub+0x31a>
 80028d4:	4a30      	ldr	r2, [pc, #192]	; (8002998 <__aeabi_dsub+0x340>)
 80028d6:	1c74      	adds	r4, r6, #1
 80028d8:	4214      	tst	r4, r2
 80028da:	d000      	beq.n	80028de <__aeabi_dsub+0x286>
 80028dc:	e0d6      	b.n	8002a8c <__aeabi_dsub+0x434>
 80028de:	464a      	mov	r2, r9
 80028e0:	431a      	orrs	r2, r3
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x290>
 80028e6:	e15b      	b.n	8002ba0 <__aeabi_dsub+0x548>
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x296>
 80028ec:	e1a5      	b.n	8002c3a <__aeabi_dsub+0x5e2>
 80028ee:	000a      	movs	r2, r1
 80028f0:	4302      	orrs	r2, r0
 80028f2:	d000      	beq.n	80028f6 <__aeabi_dsub+0x29e>
 80028f4:	e1bb      	b.n	8002c6e <__aeabi_dsub+0x616>
 80028f6:	464a      	mov	r2, r9
 80028f8:	0759      	lsls	r1, r3, #29
 80028fa:	08d2      	lsrs	r2, r2, #3
 80028fc:	430a      	orrs	r2, r1
 80028fe:	08db      	lsrs	r3, r3, #3
 8002900:	e027      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002902:	000a      	movs	r2, r1
 8002904:	4302      	orrs	r2, r0
 8002906:	d100      	bne.n	800290a <__aeabi_dsub+0x2b2>
 8002908:	e174      	b.n	8002bf4 <__aeabi_dsub+0x59c>
 800290a:	0022      	movs	r2, r4
 800290c:	3a01      	subs	r2, #1
 800290e:	2c01      	cmp	r4, #1
 8002910:	d005      	beq.n	800291e <__aeabi_dsub+0x2c6>
 8002912:	4c1e      	ldr	r4, [pc, #120]	; (800298c <__aeabi_dsub+0x334>)
 8002914:	45a4      	cmp	ip, r4
 8002916:	d100      	bne.n	800291a <__aeabi_dsub+0x2c2>
 8002918:	e094      	b.n	8002a44 <__aeabi_dsub+0x3ec>
 800291a:	4694      	mov	ip, r2
 800291c:	e759      	b.n	80027d2 <__aeabi_dsub+0x17a>
 800291e:	4448      	add	r0, r9
 8002920:	4548      	cmp	r0, r9
 8002922:	4192      	sbcs	r2, r2
 8002924:	185b      	adds	r3, r3, r1
 8002926:	4698      	mov	r8, r3
 8002928:	0004      	movs	r4, r0
 800292a:	4252      	negs	r2, r2
 800292c:	4490      	add	r8, r2
 800292e:	4643      	mov	r3, r8
 8002930:	2602      	movs	r6, #2
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	d500      	bpl.n	8002938 <__aeabi_dsub+0x2e0>
 8002936:	e0c4      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002938:	3e01      	subs	r6, #1
 800293a:	0763      	lsls	r3, r4, #29
 800293c:	d000      	beq.n	8002940 <__aeabi_dsub+0x2e8>
 800293e:	e711      	b.n	8002764 <__aeabi_dsub+0x10c>
 8002940:	4643      	mov	r3, r8
 8002942:	46b4      	mov	ip, r6
 8002944:	0759      	lsls	r1, r3, #29
 8002946:	08e2      	lsrs	r2, r4, #3
 8002948:	430a      	orrs	r2, r1
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	490f      	ldr	r1, [pc, #60]	; (800298c <__aeabi_dsub+0x334>)
 800294e:	458c      	cmp	ip, r1
 8002950:	d040      	beq.n	80029d4 <__aeabi_dsub+0x37c>
 8002952:	4661      	mov	r1, ip
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	0549      	lsls	r1, r1, #21
 8002958:	0b1b      	lsrs	r3, r3, #12
 800295a:	0d49      	lsrs	r1, r1, #21
 800295c:	e720      	b.n	80027a0 <__aeabi_dsub+0x148>
 800295e:	4301      	orrs	r1, r0
 8002960:	000c      	movs	r4, r1
 8002962:	1e61      	subs	r1, r4, #1
 8002964:	418c      	sbcs	r4, r1
 8002966:	444c      	add	r4, r9
 8002968:	454c      	cmp	r4, r9
 800296a:	4192      	sbcs	r2, r2
 800296c:	4252      	negs	r2, r2
 800296e:	4690      	mov	r8, r2
 8002970:	4498      	add	r8, r3
 8002972:	4643      	mov	r3, r8
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	d5e0      	bpl.n	800293a <__aeabi_dsub+0x2e2>
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__aeabi_dsub+0x334>)
 800297a:	3601      	adds	r6, #1
 800297c:	429e      	cmp	r6, r3
 800297e:	d000      	beq.n	8002982 <__aeabi_dsub+0x32a>
 8002980:	e09f      	b.n	8002ac2 <__aeabi_dsub+0x46a>
 8002982:	0031      	movs	r1, r6
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	e70a      	b.n	80027a0 <__aeabi_dsub+0x148>
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	000007ff 	.word	0x000007ff
 8002990:	ff7fffff 	.word	0xff7fffff
 8002994:	fffff801 	.word	0xfffff801
 8002998:	000007fe 	.word	0x000007fe
 800299c:	2a00      	cmp	r2, #0
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x34a>
 80029a0:	e160      	b.n	8002c64 <__aeabi_dsub+0x60c>
 80029a2:	000a      	movs	r2, r1
 80029a4:	4302      	orrs	r2, r0
 80029a6:	d04d      	beq.n	8002a44 <__aeabi_dsub+0x3ec>
 80029a8:	464a      	mov	r2, r9
 80029aa:	075c      	lsls	r4, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	4322      	orrs	r2, r4
 80029b0:	2480      	movs	r4, #128	; 0x80
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	0324      	lsls	r4, r4, #12
 80029b6:	4223      	tst	r3, r4
 80029b8:	d007      	beq.n	80029ca <__aeabi_dsub+0x372>
 80029ba:	08ce      	lsrs	r6, r1, #3
 80029bc:	4226      	tst	r6, r4
 80029be:	d104      	bne.n	80029ca <__aeabi_dsub+0x372>
 80029c0:	465d      	mov	r5, fp
 80029c2:	0033      	movs	r3, r6
 80029c4:	08c2      	lsrs	r2, r0, #3
 80029c6:	0749      	lsls	r1, r1, #29
 80029c8:	430a      	orrs	r2, r1
 80029ca:	0f51      	lsrs	r1, r2, #29
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	08d2      	lsrs	r2, r2, #3
 80029d0:	0749      	lsls	r1, r1, #29
 80029d2:	430a      	orrs	r2, r1
 80029d4:	0011      	movs	r1, r2
 80029d6:	4319      	orrs	r1, r3
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x384>
 80029da:	e1c8      	b.n	8002d6e <__aeabi_dsub+0x716>
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0309      	lsls	r1, r1, #12
 80029e0:	430b      	orrs	r3, r1
 80029e2:	031b      	lsls	r3, r3, #12
 80029e4:	49d5      	ldr	r1, [pc, #852]	; (8002d3c <__aeabi_dsub+0x6e4>)
 80029e6:	0b1b      	lsrs	r3, r3, #12
 80029e8:	e6da      	b.n	80027a0 <__aeabi_dsub+0x148>
 80029ea:	49d5      	ldr	r1, [pc, #852]	; (8002d40 <__aeabi_dsub+0x6e8>)
 80029ec:	1ab6      	subs	r6, r6, r2
 80029ee:	400b      	ands	r3, r1
 80029f0:	4698      	mov	r8, r3
 80029f2:	e6b5      	b.n	8002760 <__aeabi_dsub+0x108>
 80029f4:	0020      	movs	r0, r4
 80029f6:	f000 fb3b 	bl	8003070 <__clzsi2>
 80029fa:	0002      	movs	r2, r0
 80029fc:	3218      	adds	r2, #24
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dc00      	bgt.n	8002a04 <__aeabi_dsub+0x3ac>
 8002a02:	e68f      	b.n	8002724 <__aeabi_dsub+0xcc>
 8002a04:	0023      	movs	r3, r4
 8002a06:	3808      	subs	r0, #8
 8002a08:	4083      	lsls	r3, r0
 8002a0a:	2400      	movs	r4, #0
 8002a0c:	e692      	b.n	8002734 <__aeabi_dsub+0xdc>
 8002a0e:	4308      	orrs	r0, r1
 8002a10:	0002      	movs	r2, r0
 8002a12:	1e50      	subs	r0, r2, #1
 8002a14:	4182      	sbcs	r2, r0
 8002a16:	e66d      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002a18:	4cca      	ldr	r4, [pc, #808]	; (8002d44 <__aeabi_dsub+0x6ec>)
 8002a1a:	1c72      	adds	r2, r6, #1
 8002a1c:	4222      	tst	r2, r4
 8002a1e:	d000      	beq.n	8002a22 <__aeabi_dsub+0x3ca>
 8002a20:	e0ad      	b.n	8002b7e <__aeabi_dsub+0x526>
 8002a22:	464a      	mov	r2, r9
 8002a24:	431a      	orrs	r2, r3
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d1b8      	bne.n	800299c <__aeabi_dsub+0x344>
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d100      	bne.n	8002a30 <__aeabi_dsub+0x3d8>
 8002a2e:	e158      	b.n	8002ce2 <__aeabi_dsub+0x68a>
 8002a30:	000a      	movs	r2, r1
 8002a32:	4302      	orrs	r2, r0
 8002a34:	d000      	beq.n	8002a38 <__aeabi_dsub+0x3e0>
 8002a36:	e159      	b.n	8002cec <__aeabi_dsub+0x694>
 8002a38:	464a      	mov	r2, r9
 8002a3a:	0759      	lsls	r1, r3, #29
 8002a3c:	08d2      	lsrs	r2, r2, #3
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	e786      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002a44:	464a      	mov	r2, r9
 8002a46:	0759      	lsls	r1, r3, #29
 8002a48:	08d2      	lsrs	r2, r2, #3
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	e7c1      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002a50:	4dba      	ldr	r5, [pc, #744]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002a52:	42aa      	cmp	r2, r5
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dsub+0x400>
 8002a56:	e11e      	b.n	8002c96 <__aeabi_dsub+0x63e>
 8002a58:	2580      	movs	r5, #128	; 0x80
 8002a5a:	042d      	lsls	r5, r5, #16
 8002a5c:	432b      	orrs	r3, r5
 8002a5e:	4664      	mov	r4, ip
 8002a60:	2c38      	cmp	r4, #56	; 0x38
 8002a62:	dc5d      	bgt.n	8002b20 <__aeabi_dsub+0x4c8>
 8002a64:	2c1f      	cmp	r4, #31
 8002a66:	dd00      	ble.n	8002a6a <__aeabi_dsub+0x412>
 8002a68:	e0d0      	b.n	8002c0c <__aeabi_dsub+0x5b4>
 8002a6a:	2520      	movs	r5, #32
 8002a6c:	4667      	mov	r7, ip
 8002a6e:	1b2d      	subs	r5, r5, r4
 8002a70:	464e      	mov	r6, r9
 8002a72:	001c      	movs	r4, r3
 8002a74:	40fe      	lsrs	r6, r7
 8002a76:	40ac      	lsls	r4, r5
 8002a78:	4334      	orrs	r4, r6
 8002a7a:	464e      	mov	r6, r9
 8002a7c:	40ae      	lsls	r6, r5
 8002a7e:	0035      	movs	r5, r6
 8002a80:	40fb      	lsrs	r3, r7
 8002a82:	1e6e      	subs	r6, r5, #1
 8002a84:	41b5      	sbcs	r5, r6
 8002a86:	1ac9      	subs	r1, r1, r3
 8002a88:	432c      	orrs	r4, r5
 8002a8a:	e04e      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002a8c:	464a      	mov	r2, r9
 8002a8e:	1a14      	subs	r4, r2, r0
 8002a90:	45a1      	cmp	r9, r4
 8002a92:	4192      	sbcs	r2, r2
 8002a94:	4252      	negs	r2, r2
 8002a96:	4690      	mov	r8, r2
 8002a98:	1a5f      	subs	r7, r3, r1
 8002a9a:	003a      	movs	r2, r7
 8002a9c:	4647      	mov	r7, r8
 8002a9e:	1bd2      	subs	r2, r2, r7
 8002aa0:	4690      	mov	r8, r2
 8002aa2:	0212      	lsls	r2, r2, #8
 8002aa4:	d500      	bpl.n	8002aa8 <__aeabi_dsub+0x450>
 8002aa6:	e08b      	b.n	8002bc0 <__aeabi_dsub+0x568>
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	4322      	orrs	r2, r4
 8002aac:	d000      	beq.n	8002ab0 <__aeabi_dsub+0x458>
 8002aae:	e630      	b.n	8002712 <__aeabi_dsub+0xba>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	e74d      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	0759      	lsls	r1, r3, #29
 8002aba:	08d2      	lsrs	r2, r2, #3
 8002abc:	430a      	orrs	r2, r1
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	e744      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002ac2:	4642      	mov	r2, r8
 8002ac4:	4b9e      	ldr	r3, [pc, #632]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002ac6:	0861      	lsrs	r1, r4, #1
 8002ac8:	401a      	ands	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	2201      	movs	r2, #1
 8002ace:	4014      	ands	r4, r2
 8002ad0:	430c      	orrs	r4, r1
 8002ad2:	07da      	lsls	r2, r3, #31
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	4698      	mov	r8, r3
 8002ad8:	4314      	orrs	r4, r2
 8002ada:	e641      	b.n	8002760 <__aeabi_dsub+0x108>
 8002adc:	001a      	movs	r2, r3
 8002ade:	3e1f      	subs	r6, #31
 8002ae0:	40f2      	lsrs	r2, r6
 8002ae2:	0016      	movs	r6, r2
 8002ae4:	2920      	cmp	r1, #32
 8002ae6:	d003      	beq.n	8002af0 <__aeabi_dsub+0x498>
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	408b      	lsls	r3, r1
 8002aee:	431c      	orrs	r4, r3
 8002af0:	1e62      	subs	r2, r4, #1
 8002af2:	4194      	sbcs	r4, r2
 8002af4:	2300      	movs	r3, #0
 8002af6:	4334      	orrs	r4, r6
 8002af8:	4698      	mov	r8, r3
 8002afa:	2600      	movs	r6, #0
 8002afc:	e71d      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002afe:	000c      	movs	r4, r1
 8002b00:	3a20      	subs	r2, #32
 8002b02:	40d4      	lsrs	r4, r2
 8002b04:	0022      	movs	r2, r4
 8002b06:	4664      	mov	r4, ip
 8002b08:	2c20      	cmp	r4, #32
 8002b0a:	d004      	beq.n	8002b16 <__aeabi_dsub+0x4be>
 8002b0c:	2740      	movs	r7, #64	; 0x40
 8002b0e:	1b3f      	subs	r7, r7, r4
 8002b10:	40b9      	lsls	r1, r7
 8002b12:	4308      	orrs	r0, r1
 8002b14:	4680      	mov	r8, r0
 8002b16:	4644      	mov	r4, r8
 8002b18:	1e61      	subs	r1, r4, #1
 8002b1a:	418c      	sbcs	r4, r1
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	e5e9      	b.n	80026f4 <__aeabi_dsub+0x9c>
 8002b20:	464c      	mov	r4, r9
 8002b22:	4323      	orrs	r3, r4
 8002b24:	001c      	movs	r4, r3
 8002b26:	1e63      	subs	r3, r4, #1
 8002b28:	419c      	sbcs	r4, r3
 8002b2a:	1b04      	subs	r4, r0, r4
 8002b2c:	42a0      	cmp	r0, r4
 8002b2e:	419b      	sbcs	r3, r3
 8002b30:	425b      	negs	r3, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	4698      	mov	r8, r3
 8002b36:	465d      	mov	r5, fp
 8002b38:	0016      	movs	r6, r2
 8002b3a:	e5e2      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002b3c:	464e      	mov	r6, r9
 8002b3e:	431e      	orrs	r6, r3
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x4ec>
 8002b42:	e0ae      	b.n	8002ca2 <__aeabi_dsub+0x64a>
 8002b44:	1e66      	subs	r6, r4, #1
 8002b46:	2c01      	cmp	r4, #1
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x4f4>
 8002b4a:	e0fd      	b.n	8002d48 <__aeabi_dsub+0x6f0>
 8002b4c:	4f7b      	ldr	r7, [pc, #492]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b4e:	42bc      	cmp	r4, r7
 8002b50:	d100      	bne.n	8002b54 <__aeabi_dsub+0x4fc>
 8002b52:	e107      	b.n	8002d64 <__aeabi_dsub+0x70c>
 8002b54:	46b4      	mov	ip, r6
 8002b56:	e69b      	b.n	8002890 <__aeabi_dsub+0x238>
 8002b58:	4664      	mov	r4, ip
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	1b12      	subs	r2, r2, r4
 8002b5e:	000c      	movs	r4, r1
 8002b60:	4094      	lsls	r4, r2
 8002b62:	0007      	movs	r7, r0
 8002b64:	4090      	lsls	r0, r2
 8002b66:	46a0      	mov	r8, r4
 8002b68:	4664      	mov	r4, ip
 8002b6a:	1e42      	subs	r2, r0, #1
 8002b6c:	4190      	sbcs	r0, r2
 8002b6e:	4662      	mov	r2, ip
 8002b70:	40e7      	lsrs	r7, r4
 8002b72:	4644      	mov	r4, r8
 8002b74:	40d1      	lsrs	r1, r2
 8002b76:	433c      	orrs	r4, r7
 8002b78:	4304      	orrs	r4, r0
 8002b7a:	185b      	adds	r3, r3, r1
 8002b7c:	e6f3      	b.n	8002966 <__aeabi_dsub+0x30e>
 8002b7e:	4c6f      	ldr	r4, [pc, #444]	; (8002d3c <__aeabi_dsub+0x6e4>)
 8002b80:	42a2      	cmp	r2, r4
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x52e>
 8002b84:	e0d5      	b.n	8002d32 <__aeabi_dsub+0x6da>
 8002b86:	4448      	add	r0, r9
 8002b88:	185b      	adds	r3, r3, r1
 8002b8a:	4548      	cmp	r0, r9
 8002b8c:	4189      	sbcs	r1, r1
 8002b8e:	4249      	negs	r1, r1
 8002b90:	185b      	adds	r3, r3, r1
 8002b92:	07dc      	lsls	r4, r3, #31
 8002b94:	0840      	lsrs	r0, r0, #1
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	4698      	mov	r8, r3
 8002b9a:	0016      	movs	r6, r2
 8002b9c:	4304      	orrs	r4, r0
 8002b9e:	e6cc      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d000      	beq.n	8002ba6 <__aeabi_dsub+0x54e>
 8002ba4:	e082      	b.n	8002cac <__aeabi_dsub+0x654>
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	4302      	orrs	r2, r0
 8002baa:	d140      	bne.n	8002c2e <__aeabi_dsub+0x5d6>
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	2500      	movs	r5, #0
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	e713      	b.n	80029dc <__aeabi_dsub+0x384>
 8002bb4:	074b      	lsls	r3, r1, #29
 8002bb6:	08c2      	lsrs	r2, r0, #3
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	465d      	mov	r5, fp
 8002bbc:	08cb      	lsrs	r3, r1, #3
 8002bbe:	e6c5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	1a84      	subs	r4, r0, r2
 8002bc4:	42a0      	cmp	r0, r4
 8002bc6:	4192      	sbcs	r2, r2
 8002bc8:	1acb      	subs	r3, r1, r3
 8002bca:	4252      	negs	r2, r2
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	4698      	mov	r8, r3
 8002bd0:	465d      	mov	r5, fp
 8002bd2:	e59e      	b.n	8002712 <__aeabi_dsub+0xba>
 8002bd4:	464a      	mov	r2, r9
 8002bd6:	0759      	lsls	r1, r3, #29
 8002bd8:	08d2      	lsrs	r2, r2, #3
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	e6f9      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002be0:	464a      	mov	r2, r9
 8002be2:	1a14      	subs	r4, r2, r0
 8002be4:	45a1      	cmp	r9, r4
 8002be6:	4192      	sbcs	r2, r2
 8002be8:	1a5b      	subs	r3, r3, r1
 8002bea:	4252      	negs	r2, r2
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	4698      	mov	r8, r3
 8002bf0:	2601      	movs	r6, #1
 8002bf2:	e586      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002bf4:	464a      	mov	r2, r9
 8002bf6:	0759      	lsls	r1, r3, #29
 8002bf8:	08d2      	lsrs	r2, r2, #3
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	08db      	lsrs	r3, r3, #3
 8002bfe:	e6a5      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002c00:	464c      	mov	r4, r9
 8002c02:	4323      	orrs	r3, r4
 8002c04:	001c      	movs	r4, r3
 8002c06:	1e63      	subs	r3, r4, #1
 8002c08:	419c      	sbcs	r4, r3
 8002c0a:	e65b      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002c0c:	4665      	mov	r5, ip
 8002c0e:	001e      	movs	r6, r3
 8002c10:	3d20      	subs	r5, #32
 8002c12:	40ee      	lsrs	r6, r5
 8002c14:	2c20      	cmp	r4, #32
 8002c16:	d005      	beq.n	8002c24 <__aeabi_dsub+0x5cc>
 8002c18:	2540      	movs	r5, #64	; 0x40
 8002c1a:	1b2d      	subs	r5, r5, r4
 8002c1c:	40ab      	lsls	r3, r5
 8002c1e:	464c      	mov	r4, r9
 8002c20:	431c      	orrs	r4, r3
 8002c22:	46a2      	mov	sl, r4
 8002c24:	4654      	mov	r4, sl
 8002c26:	1e63      	subs	r3, r4, #1
 8002c28:	419c      	sbcs	r4, r3
 8002c2a:	4334      	orrs	r4, r6
 8002c2c:	e77d      	b.n	8002b2a <__aeabi_dsub+0x4d2>
 8002c2e:	074b      	lsls	r3, r1, #29
 8002c30:	08c2      	lsrs	r2, r0, #3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	465d      	mov	r5, fp
 8002c36:	08cb      	lsrs	r3, r1, #3
 8002c38:	e6cc      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	4302      	orrs	r2, r0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0x5ea>
 8002c40:	e736      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002c42:	074b      	lsls	r3, r1, #29
 8002c44:	08c2      	lsrs	r2, r0, #3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	465d      	mov	r5, fp
 8002c4a:	08cb      	lsrs	r3, r1, #3
 8002c4c:	e681      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002c4e:	464a      	mov	r2, r9
 8002c50:	1a84      	subs	r4, r0, r2
 8002c52:	42a0      	cmp	r0, r4
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	4698      	mov	r8, r3
 8002c5e:	465d      	mov	r5, fp
 8002c60:	2601      	movs	r6, #1
 8002c62:	e54e      	b.n	8002702 <__aeabi_dsub+0xaa>
 8002c64:	074b      	lsls	r3, r1, #29
 8002c66:	08c2      	lsrs	r2, r0, #3
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	08cb      	lsrs	r3, r1, #3
 8002c6c:	e6b2      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002c6e:	464a      	mov	r2, r9
 8002c70:	1a14      	subs	r4, r2, r0
 8002c72:	45a1      	cmp	r9, r4
 8002c74:	4192      	sbcs	r2, r2
 8002c76:	1a5f      	subs	r7, r3, r1
 8002c78:	4252      	negs	r2, r2
 8002c7a:	1aba      	subs	r2, r7, r2
 8002c7c:	4690      	mov	r8, r2
 8002c7e:	0212      	lsls	r2, r2, #8
 8002c80:	d56b      	bpl.n	8002d5a <__aeabi_dsub+0x702>
 8002c82:	464a      	mov	r2, r9
 8002c84:	1a84      	subs	r4, r0, r2
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	4192      	sbcs	r2, r2
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	4252      	negs	r2, r2
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	4698      	mov	r8, r3
 8002c92:	465d      	mov	r5, fp
 8002c94:	e564      	b.n	8002760 <__aeabi_dsub+0x108>
 8002c96:	074b      	lsls	r3, r1, #29
 8002c98:	08c2      	lsrs	r2, r0, #3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	465d      	mov	r5, fp
 8002c9e:	08cb      	lsrs	r3, r1, #3
 8002ca0:	e698      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ca2:	074b      	lsls	r3, r1, #29
 8002ca4:	08c2      	lsrs	r2, r0, #3
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	08cb      	lsrs	r3, r1, #3
 8002caa:	e64f      	b.n	800294c <__aeabi_dsub+0x2f4>
 8002cac:	000a      	movs	r2, r1
 8002cae:	4302      	orrs	r2, r0
 8002cb0:	d090      	beq.n	8002bd4 <__aeabi_dsub+0x57c>
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	075c      	lsls	r4, r3, #29
 8002cb6:	08d2      	lsrs	r2, r2, #3
 8002cb8:	4314      	orrs	r4, r2
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	0312      	lsls	r2, r2, #12
 8002cc0:	4213      	tst	r3, r2
 8002cc2:	d008      	beq.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cc4:	08ce      	lsrs	r6, r1, #3
 8002cc6:	4216      	tst	r6, r2
 8002cc8:	d105      	bne.n	8002cd6 <__aeabi_dsub+0x67e>
 8002cca:	08c0      	lsrs	r0, r0, #3
 8002ccc:	0749      	lsls	r1, r1, #29
 8002cce:	4308      	orrs	r0, r1
 8002cd0:	0004      	movs	r4, r0
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	0033      	movs	r3, r6
 8002cd6:	0f61      	lsrs	r1, r4, #29
 8002cd8:	00e2      	lsls	r2, r4, #3
 8002cda:	0749      	lsls	r1, r1, #29
 8002cdc:	08d2      	lsrs	r2, r2, #3
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	e678      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	08c2      	lsrs	r2, r0, #3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	08cb      	lsrs	r3, r1, #3
 8002cea:	e632      	b.n	8002952 <__aeabi_dsub+0x2fa>
 8002cec:	4448      	add	r0, r9
 8002cee:	185b      	adds	r3, r3, r1
 8002cf0:	4548      	cmp	r0, r9
 8002cf2:	4192      	sbcs	r2, r2
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	4252      	negs	r2, r2
 8002cf8:	4490      	add	r8, r2
 8002cfa:	4643      	mov	r3, r8
 8002cfc:	0004      	movs	r4, r0
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	d400      	bmi.n	8002d04 <__aeabi_dsub+0x6ac>
 8002d02:	e61a      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d04:	4642      	mov	r2, r8
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <__aeabi_dsub+0x6e8>)
 8002d08:	2601      	movs	r6, #1
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	4690      	mov	r8, r2
 8002d0e:	e614      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d10:	4666      	mov	r6, ip
 8002d12:	001f      	movs	r7, r3
 8002d14:	3e20      	subs	r6, #32
 8002d16:	40f7      	lsrs	r7, r6
 8002d18:	2c20      	cmp	r4, #32
 8002d1a:	d005      	beq.n	8002d28 <__aeabi_dsub+0x6d0>
 8002d1c:	2640      	movs	r6, #64	; 0x40
 8002d1e:	1b36      	subs	r6, r6, r4
 8002d20:	40b3      	lsls	r3, r6
 8002d22:	464c      	mov	r4, r9
 8002d24:	431c      	orrs	r4, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	4654      	mov	r4, sl
 8002d2a:	1e63      	subs	r3, r4, #1
 8002d2c:	419c      	sbcs	r4, r3
 8002d2e:	433c      	orrs	r4, r7
 8002d30:	e5c8      	b.n	80028c4 <__aeabi_dsub+0x26c>
 8002d32:	0011      	movs	r1, r2
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	e532      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	000007ff 	.word	0x000007ff
 8002d40:	ff7fffff 	.word	0xff7fffff
 8002d44:	000007fe 	.word	0x000007fe
 8002d48:	464a      	mov	r2, r9
 8002d4a:	1814      	adds	r4, r2, r0
 8002d4c:	4284      	cmp	r4, r0
 8002d4e:	4192      	sbcs	r2, r2
 8002d50:	185b      	adds	r3, r3, r1
 8002d52:	4698      	mov	r8, r3
 8002d54:	4252      	negs	r2, r2
 8002d56:	4490      	add	r8, r2
 8002d58:	e5e9      	b.n	800292e <__aeabi_dsub+0x2d6>
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	4322      	orrs	r2, r4
 8002d5e:	d100      	bne.n	8002d62 <__aeabi_dsub+0x70a>
 8002d60:	e6a6      	b.n	8002ab0 <__aeabi_dsub+0x458>
 8002d62:	e5ea      	b.n	800293a <__aeabi_dsub+0x2e2>
 8002d64:	074b      	lsls	r3, r1, #29
 8002d66:	08c2      	lsrs	r2, r0, #3
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	08cb      	lsrs	r3, r1, #3
 8002d6c:	e632      	b.n	80029d4 <__aeabi_dsub+0x37c>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4901      	ldr	r1, [pc, #4]	; (8002d78 <__aeabi_dsub+0x720>)
 8002d72:	0013      	movs	r3, r2
 8002d74:	e514      	b.n	80027a0 <__aeabi_dsub+0x148>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_dcmpun>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	0005      	movs	r5, r0
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d82:	030c      	lsls	r4, r1, #12
 8002d84:	0016      	movs	r6, r2
 8002d86:	0049      	lsls	r1, r1, #1
 8002d88:	031a      	lsls	r2, r3, #12
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	0d49      	lsrs	r1, r1, #21
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	0d5b      	lsrs	r3, r3, #21
 8002d94:	4281      	cmp	r1, r0
 8002d96:	d008      	beq.n	8002daa <__aeabi_dcmpun+0x2e>
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <__aeabi_dcmpun+0x38>)
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	428b      	cmp	r3, r1
 8002d9e:	d103      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002da0:	4332      	orrs	r2, r6
 8002da2:	0010      	movs	r0, r2
 8002da4:	1e42      	subs	r2, r0, #1
 8002da6:	4190      	sbcs	r0, r2
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
 8002daa:	2001      	movs	r0, #1
 8002dac:	432c      	orrs	r4, r5
 8002dae:	d1fb      	bne.n	8002da8 <__aeabi_dcmpun+0x2c>
 8002db0:	e7f2      	b.n	8002d98 <__aeabi_dcmpun+0x1c>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000007ff 	.word	0x000007ff

08002db8 <__aeabi_d2iz>:
 8002db8:	000a      	movs	r2, r1
 8002dba:	b530      	push	{r4, r5, lr}
 8002dbc:	4c13      	ldr	r4, [pc, #76]	; (8002e0c <__aeabi_d2iz+0x54>)
 8002dbe:	0053      	lsls	r3, r2, #1
 8002dc0:	0309      	lsls	r1, r1, #12
 8002dc2:	0005      	movs	r5, r0
 8002dc4:	0b09      	lsrs	r1, r1, #12
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	0fd2      	lsrs	r2, r2, #31
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	dd04      	ble.n	8002dda <__aeabi_d2iz+0x22>
 8002dd0:	480f      	ldr	r0, [pc, #60]	; (8002e10 <__aeabi_d2iz+0x58>)
 8002dd2:	4283      	cmp	r3, r0
 8002dd4:	dd02      	ble.n	8002ddc <__aeabi_d2iz+0x24>
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <__aeabi_d2iz+0x5c>)
 8002dd8:	18d0      	adds	r0, r2, r3
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	2080      	movs	r0, #128	; 0x80
 8002dde:	0340      	lsls	r0, r0, #13
 8002de0:	4301      	orrs	r1, r0
 8002de2:	480d      	ldr	r0, [pc, #52]	; (8002e18 <__aeabi_d2iz+0x60>)
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	281f      	cmp	r0, #31
 8002de8:	dd08      	ble.n	8002dfc <__aeabi_d2iz+0x44>
 8002dea:	480c      	ldr	r0, [pc, #48]	; (8002e1c <__aeabi_d2iz+0x64>)
 8002dec:	1ac3      	subs	r3, r0, r3
 8002dee:	40d9      	lsrs	r1, r3
 8002df0:	000b      	movs	r3, r1
 8002df2:	4258      	negs	r0, r3
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d1f0      	bne.n	8002dda <__aeabi_d2iz+0x22>
 8002df8:	0018      	movs	r0, r3
 8002dfa:	e7ee      	b.n	8002dda <__aeabi_d2iz+0x22>
 8002dfc:	4c08      	ldr	r4, [pc, #32]	; (8002e20 <__aeabi_d2iz+0x68>)
 8002dfe:	40c5      	lsrs	r5, r0
 8002e00:	46a4      	mov	ip, r4
 8002e02:	4463      	add	r3, ip
 8002e04:	4099      	lsls	r1, r3
 8002e06:	000b      	movs	r3, r1
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	e7f2      	b.n	8002df2 <__aeabi_d2iz+0x3a>
 8002e0c:	000003fe 	.word	0x000003fe
 8002e10:	0000041d 	.word	0x0000041d
 8002e14:	7fffffff 	.word	0x7fffffff
 8002e18:	00000433 	.word	0x00000433
 8002e1c:	00000413 	.word	0x00000413
 8002e20:	fffffbed 	.word	0xfffffbed

08002e24 <__aeabi_i2d>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d016      	beq.n	8002e58 <__aeabi_i2d+0x34>
 8002e2a:	17c3      	asrs	r3, r0, #31
 8002e2c:	18c5      	adds	r5, r0, r3
 8002e2e:	405d      	eors	r5, r3
 8002e30:	0fc4      	lsrs	r4, r0, #31
 8002e32:	0028      	movs	r0, r5
 8002e34:	f000 f91c 	bl	8003070 <__clzsi2>
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <__aeabi_i2d+0x5c>)
 8002e3a:	1a12      	subs	r2, r2, r0
 8002e3c:	280a      	cmp	r0, #10
 8002e3e:	dc16      	bgt.n	8002e6e <__aeabi_i2d+0x4a>
 8002e40:	0003      	movs	r3, r0
 8002e42:	002e      	movs	r6, r5
 8002e44:	3315      	adds	r3, #21
 8002e46:	409e      	lsls	r6, r3
 8002e48:	230b      	movs	r3, #11
 8002e4a:	1a18      	subs	r0, r3, r0
 8002e4c:	40c5      	lsrs	r5, r0
 8002e4e:	0553      	lsls	r3, r2, #21
 8002e50:	032d      	lsls	r5, r5, #12
 8002e52:	0b2d      	lsrs	r5, r5, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e003      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e58:	2400      	movs	r4, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	2600      	movs	r6, #0
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	432b      	orrs	r3, r5
 8002e64:	07e4      	lsls	r4, r4, #31
 8002e66:	4323      	orrs	r3, r4
 8002e68:	0030      	movs	r0, r6
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	380b      	subs	r0, #11
 8002e70:	4085      	lsls	r5, r0
 8002e72:	0553      	lsls	r3, r2, #21
 8002e74:	032d      	lsls	r5, r5, #12
 8002e76:	2600      	movs	r6, #0
 8002e78:	0b2d      	lsrs	r5, r5, #12
 8002e7a:	0d5b      	lsrs	r3, r3, #21
 8002e7c:	e7f0      	b.n	8002e60 <__aeabi_i2d+0x3c>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	0000041e 	.word	0x0000041e

08002e84 <__aeabi_ui2d>:
 8002e84:	b510      	push	{r4, lr}
 8002e86:	1e04      	subs	r4, r0, #0
 8002e88:	d010      	beq.n	8002eac <__aeabi_ui2d+0x28>
 8002e8a:	f000 f8f1 	bl	8003070 <__clzsi2>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <__aeabi_ui2d+0x48>)
 8002e90:	1a1b      	subs	r3, r3, r0
 8002e92:	280a      	cmp	r0, #10
 8002e94:	dc11      	bgt.n	8002eba <__aeabi_ui2d+0x36>
 8002e96:	220b      	movs	r2, #11
 8002e98:	0021      	movs	r1, r4
 8002e9a:	1a12      	subs	r2, r2, r0
 8002e9c:	40d1      	lsrs	r1, r2
 8002e9e:	3015      	adds	r0, #21
 8002ea0:	030a      	lsls	r2, r1, #12
 8002ea2:	055b      	lsls	r3, r3, #21
 8002ea4:	4084      	lsls	r4, r0
 8002ea6:	0b12      	lsrs	r2, r2, #12
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	e001      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	051b      	lsls	r3, r3, #20
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	0020      	movs	r0, r4
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	bd10      	pop	{r4, pc}
 8002eba:	0022      	movs	r2, r4
 8002ebc:	380b      	subs	r0, #11
 8002ebe:	4082      	lsls	r2, r0
 8002ec0:	055b      	lsls	r3, r3, #21
 8002ec2:	0312      	lsls	r2, r2, #12
 8002ec4:	2400      	movs	r4, #0
 8002ec6:	0b12      	lsrs	r2, r2, #12
 8002ec8:	0d5b      	lsrs	r3, r3, #21
 8002eca:	e7f1      	b.n	8002eb0 <__aeabi_ui2d+0x2c>
 8002ecc:	0000041e 	.word	0x0000041e

08002ed0 <__aeabi_f2d>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	0043      	lsls	r3, r0, #1
 8002ed4:	0246      	lsls	r6, r0, #9
 8002ed6:	0fc4      	lsrs	r4, r0, #31
 8002ed8:	20fe      	movs	r0, #254	; 0xfe
 8002eda:	0e1b      	lsrs	r3, r3, #24
 8002edc:	1c59      	adds	r1, r3, #1
 8002ede:	0a75      	lsrs	r5, r6, #9
 8002ee0:	4208      	tst	r0, r1
 8002ee2:	d00c      	beq.n	8002efe <__aeabi_f2d+0x2e>
 8002ee4:	22e0      	movs	r2, #224	; 0xe0
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4694      	mov	ip, r2
 8002eea:	076d      	lsls	r5, r5, #29
 8002eec:	0b36      	lsrs	r6, r6, #12
 8002eee:	4463      	add	r3, ip
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	4333      	orrs	r3, r6
 8002ef4:	07e4      	lsls	r4, r4, #31
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	0028      	movs	r0, r5
 8002efa:	0019      	movs	r1, r3
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <__aeabi_f2d+0x5c>
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	d01b      	beq.n	8002f3e <__aeabi_f2d+0x6e>
 8002f06:	0028      	movs	r0, r5
 8002f08:	f000 f8b2 	bl	8003070 <__clzsi2>
 8002f0c:	280a      	cmp	r0, #10
 8002f0e:	dc1c      	bgt.n	8002f4a <__aeabi_f2d+0x7a>
 8002f10:	230b      	movs	r3, #11
 8002f12:	002a      	movs	r2, r5
 8002f14:	1a1b      	subs	r3, r3, r0
 8002f16:	40da      	lsrs	r2, r3
 8002f18:	0003      	movs	r3, r0
 8002f1a:	3315      	adds	r3, #21
 8002f1c:	409d      	lsls	r5, r3
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <__aeabi_f2d+0x88>)
 8002f20:	0312      	lsls	r2, r2, #12
 8002f22:	1a1b      	subs	r3, r3, r0
 8002f24:	055b      	lsls	r3, r3, #21
 8002f26:	0b16      	lsrs	r6, r2, #12
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	e7e1      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f2c:	2d00      	cmp	r5, #0
 8002f2e:	d009      	beq.n	8002f44 <__aeabi_f2d+0x74>
 8002f30:	0b32      	lsrs	r2, r6, #12
 8002f32:	2680      	movs	r6, #128	; 0x80
 8002f34:	0336      	lsls	r6, r6, #12
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f38:	076d      	lsls	r5, r5, #29
 8002f3a:	4316      	orrs	r6, r2
 8002f3c:	e7d8      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2600      	movs	r6, #0
 8002f42:	e7d5      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f44:	2600      	movs	r6, #0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <__aeabi_f2d+0x8c>)
 8002f48:	e7d2      	b.n	8002ef0 <__aeabi_f2d+0x20>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	002a      	movs	r2, r5
 8002f4e:	3b0b      	subs	r3, #11
 8002f50:	409a      	lsls	r2, r3
 8002f52:	2500      	movs	r5, #0
 8002f54:	e7e3      	b.n	8002f1e <__aeabi_f2d+0x4e>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	00000389 	.word	0x00000389
 8002f5c:	000007ff 	.word	0x000007ff

08002f60 <__aeabi_d2f>:
 8002f60:	0002      	movs	r2, r0
 8002f62:	004b      	lsls	r3, r1, #1
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	0308      	lsls	r0, r1, #12
 8002f68:	0d5b      	lsrs	r3, r3, #21
 8002f6a:	4e3d      	ldr	r6, [pc, #244]	; (8003060 <__aeabi_d2f+0x100>)
 8002f6c:	0fcc      	lsrs	r4, r1, #31
 8002f6e:	0a40      	lsrs	r0, r0, #9
 8002f70:	0f51      	lsrs	r1, r2, #29
 8002f72:	1c5f      	adds	r7, r3, #1
 8002f74:	4308      	orrs	r0, r1
 8002f76:	00d5      	lsls	r5, r2, #3
 8002f78:	4237      	tst	r7, r6
 8002f7a:	d00a      	beq.n	8002f92 <__aeabi_d2f+0x32>
 8002f7c:	4939      	ldr	r1, [pc, #228]	; (8003064 <__aeabi_d2f+0x104>)
 8002f7e:	185e      	adds	r6, r3, r1
 8002f80:	2efe      	cmp	r6, #254	; 0xfe
 8002f82:	dd16      	ble.n	8002fb2 <__aeabi_d2f+0x52>
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	2100      	movs	r1, #0
 8002f88:	05db      	lsls	r3, r3, #23
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	07e0      	lsls	r0, r4, #31
 8002f8e:	4318      	orrs	r0, r3
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <__aeabi_d2f+0x44>
 8002f96:	4328      	orrs	r0, r5
 8002f98:	d027      	beq.n	8002fea <__aeabi_d2f+0x8a>
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	0189      	lsls	r1, r1, #6
 8002f9e:	0a49      	lsrs	r1, r1, #9
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e7f1      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fa4:	4305      	orrs	r5, r0
 8002fa6:	d0ed      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	03c9      	lsls	r1, r1, #15
 8002fac:	23ff      	movs	r3, #255	; 0xff
 8002fae:	4301      	orrs	r1, r0
 8002fb0:	e7ea      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	dd1c      	ble.n	8002ff0 <__aeabi_d2f+0x90>
 8002fb6:	0192      	lsls	r2, r2, #6
 8002fb8:	0011      	movs	r1, r2
 8002fba:	1e4a      	subs	r2, r1, #1
 8002fbc:	4191      	sbcs	r1, r2
 8002fbe:	00c0      	lsls	r0, r0, #3
 8002fc0:	0f6d      	lsrs	r5, r5, #29
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	4329      	orrs	r1, r5
 8002fc6:	074b      	lsls	r3, r1, #29
 8002fc8:	d048      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fca:	230f      	movs	r3, #15
 8002fcc:	400b      	ands	r3, r1
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d000      	beq.n	8002fd4 <__aeabi_d2f+0x74>
 8002fd2:	3104      	adds	r1, #4
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	04db      	lsls	r3, r3, #19
 8002fd8:	400b      	ands	r3, r1
 8002fda:	d03f      	beq.n	800305c <__aeabi_d2f+0xfc>
 8002fdc:	1c72      	adds	r2, r6, #1
 8002fde:	2efe      	cmp	r6, #254	; 0xfe
 8002fe0:	d0d0      	beq.n	8002f84 <__aeabi_d2f+0x24>
 8002fe2:	0189      	lsls	r1, r1, #6
 8002fe4:	0a49      	lsrs	r1, r1, #9
 8002fe6:	b2d3      	uxtb	r3, r2
 8002fe8:	e7ce      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	e7cb      	b.n	8002f88 <__aeabi_d2f+0x28>
 8002ff0:	0032      	movs	r2, r6
 8002ff2:	3217      	adds	r2, #23
 8002ff4:	db22      	blt.n	800303c <__aeabi_d2f+0xdc>
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	221e      	movs	r2, #30
 8002ffa:	0409      	lsls	r1, r1, #16
 8002ffc:	4308      	orrs	r0, r1
 8002ffe:	1b92      	subs	r2, r2, r6
 8003000:	2a1f      	cmp	r2, #31
 8003002:	dd1d      	ble.n	8003040 <__aeabi_d2f+0xe0>
 8003004:	2102      	movs	r1, #2
 8003006:	4249      	negs	r1, r1
 8003008:	1b8e      	subs	r6, r1, r6
 800300a:	0001      	movs	r1, r0
 800300c:	40f1      	lsrs	r1, r6
 800300e:	000e      	movs	r6, r1
 8003010:	2a20      	cmp	r2, #32
 8003012:	d004      	beq.n	800301e <__aeabi_d2f+0xbe>
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <__aeabi_d2f+0x108>)
 8003016:	4694      	mov	ip, r2
 8003018:	4463      	add	r3, ip
 800301a:	4098      	lsls	r0, r3
 800301c:	4305      	orrs	r5, r0
 800301e:	0029      	movs	r1, r5
 8003020:	1e4d      	subs	r5, r1, #1
 8003022:	41a9      	sbcs	r1, r5
 8003024:	4331      	orrs	r1, r6
 8003026:	2600      	movs	r6, #0
 8003028:	074b      	lsls	r3, r1, #29
 800302a:	d1ce      	bne.n	8002fca <__aeabi_d2f+0x6a>
 800302c:	2080      	movs	r0, #128	; 0x80
 800302e:	000b      	movs	r3, r1
 8003030:	04c0      	lsls	r0, r0, #19
 8003032:	2201      	movs	r2, #1
 8003034:	4003      	ands	r3, r0
 8003036:	4201      	tst	r1, r0
 8003038:	d1d3      	bne.n	8002fe2 <__aeabi_d2f+0x82>
 800303a:	e7af      	b.n	8002f9c <__aeabi_d2f+0x3c>
 800303c:	2300      	movs	r3, #0
 800303e:	e7ac      	b.n	8002f9a <__aeabi_d2f+0x3a>
 8003040:	490a      	ldr	r1, [pc, #40]	; (800306c <__aeabi_d2f+0x10c>)
 8003042:	468c      	mov	ip, r1
 8003044:	0029      	movs	r1, r5
 8003046:	4463      	add	r3, ip
 8003048:	40d1      	lsrs	r1, r2
 800304a:	409d      	lsls	r5, r3
 800304c:	000a      	movs	r2, r1
 800304e:	0029      	movs	r1, r5
 8003050:	4098      	lsls	r0, r3
 8003052:	1e4d      	subs	r5, r1, #1
 8003054:	41a9      	sbcs	r1, r5
 8003056:	4301      	orrs	r1, r0
 8003058:	4311      	orrs	r1, r2
 800305a:	e7e4      	b.n	8003026 <__aeabi_d2f+0xc6>
 800305c:	0033      	movs	r3, r6
 800305e:	e79d      	b.n	8002f9c <__aeabi_d2f+0x3c>
 8003060:	000007fe 	.word	0x000007fe
 8003064:	fffffc80 	.word	0xfffffc80
 8003068:	fffffca2 	.word	0xfffffca2
 800306c:	fffffc82 	.word	0xfffffc82

08003070 <__clzsi2>:
 8003070:	211c      	movs	r1, #28
 8003072:	2301      	movs	r3, #1
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	4298      	cmp	r0, r3
 8003078:	d301      	bcc.n	800307e <__clzsi2+0xe>
 800307a:	0c00      	lsrs	r0, r0, #16
 800307c:	3910      	subs	r1, #16
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	4298      	cmp	r0, r3
 8003082:	d301      	bcc.n	8003088 <__clzsi2+0x18>
 8003084:	0a00      	lsrs	r0, r0, #8
 8003086:	3908      	subs	r1, #8
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	4298      	cmp	r0, r3
 800308c:	d301      	bcc.n	8003092 <__clzsi2+0x22>
 800308e:	0900      	lsrs	r0, r0, #4
 8003090:	3904      	subs	r1, #4
 8003092:	a202      	add	r2, pc, #8	; (adr r2, 800309c <__clzsi2+0x2c>)
 8003094:	5c10      	ldrb	r0, [r2, r0]
 8003096:	1840      	adds	r0, r0, r1
 8003098:	4770      	bx	lr
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	02020304 	.word	0x02020304
 80030a0:	01010101 	.word	0x01010101
	...

080030ac <ICM_CS_Low>:
	dst <<= 8; \
	dst |= (src_low); \
} while (0);

void ICM_CS_Low(uint8_t index)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	0002      	movs	r2, r0
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <ICM_CS_Low+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <ICM_CS_Low+0x44>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	0019      	movs	r1, r3
 80030ca:	f006 fd93 	bl	8009bf4 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
	}
}
 80030ce:	e00a      	b.n	80030e6 <ICM_CS_Low+0x3a>
	else if (index == 1)
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <ICM_CS_Low+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <ICM_CS_Low+0x48>)
 80030de:	2200      	movs	r2, #0
 80030e0:	0019      	movs	r1, r3
 80030e2:	f006 fd87 	bl	8009bf4 <HAL_GPIO_WritePin>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	50000800 	.word	0x50000800
 80030f4:	50000400 	.word	0x50000400

080030f8 <ICM_CS_High>:

void ICM_CS_High(uint8_t index)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	0002      	movs	r2, r0
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	701a      	strb	r2, [r3, #0]
	if (index == 0)
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <ICM_CS_High+0x24>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	480a      	ldr	r0, [pc, #40]	; (800313c <ICM_CS_High+0x44>)
 8003112:	2201      	movs	r2, #1
 8003114:	0019      	movs	r1, r3
 8003116:	f006 fd6d 	bl	8009bf4 <HAL_GPIO_WritePin>

	else if (index == 1)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	}
}
 800311a:	e00a      	b.n	8003132 <ICM_CS_High+0x3a>
	else if (index == 1)
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d106      	bne.n	8003132 <ICM_CS_High+0x3a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	4805      	ldr	r0, [pc, #20]	; (8003140 <ICM_CS_High+0x48>)
 800312a:	2201      	movs	r2, #1
 800312c:	0019      	movs	r1, r3
 800312e:	f006 fd61 	bl	8009bf4 <HAL_GPIO_WritePin>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	50000800 	.word	0x50000800
 8003140:	50000400 	.word	0x50000400

08003144 <ICM_ReadBytes>:

void ICM_ReadBytes(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t *pData, uint16_t Size, uint8_t index) // ***
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	0008      	movs	r0, r1
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	0019      	movs	r1, r3
 8003152:	240b      	movs	r4, #11
 8003154:	193b      	adds	r3, r7, r4
 8003156:	1c02      	adds	r2, r0, #0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	2508      	movs	r5, #8
 800315c:	197b      	adds	r3, r7, r5
 800315e:	1c0a      	adds	r2, r1, #0
 8003160:	801a      	strh	r2, [r3, #0]
	reg = reg | READ_FLAG;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4252      	negs	r2, r2
 800316a:	4313      	orrs	r3, r2
 800316c:	b2da      	uxtb	r2, r3
 800316e:	193b      	adds	r3, r7, r4
 8003170:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 8003172:	2620      	movs	r6, #32
 8003174:	2308      	movs	r3, #8
 8003176:	18fa      	adds	r2, r7, r3
 8003178:	1993      	adds	r3, r2, r6
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff ff95 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003182:	2301      	movs	r3, #1
 8003184:	425b      	negs	r3, r3
 8003186:	1939      	adds	r1, r7, r4
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f007 feba 	bl	800af04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, pData, Size,HAL_MAX_DELAY);
 8003190:	2301      	movs	r3, #1
 8003192:	425c      	negs	r4, r3
 8003194:	197b      	adds	r3, r7, r5
 8003196:	881a      	ldrh	r2, [r3, #0]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	0023      	movs	r3, r4
 800319e:	f008 f809 	bl	800b1b4 <HAL_SPI_Receive>
	ICM_CS_High(index);
 80031a2:	2308      	movs	r3, #8
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	199b      	adds	r3, r3, r6
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff ffa4 	bl	80030f8 <ICM_CS_High>
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b005      	add	sp, #20
 80031b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b8 <ICM_ReadOneByte>:
	ICM_CS_High(index);

}

void ICM_ReadOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t* pData, uint8_t index) // ***
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	0008      	movs	r0, r1
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	0019      	movs	r1, r3
 80031c6:	240b      	movs	r4, #11
 80031c8:	193b      	adds	r3, r7, r4
 80031ca:	1c02      	adds	r2, r0, #0
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	200a      	movs	r0, #10
 80031d0:	183b      	adds	r3, r7, r0
 80031d2:	1c0a      	adds	r2, r1, #0
 80031d4:	701a      	strb	r2, [r3, #0]
	reg = reg | READ_FLAG;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	4252      	negs	r2, r2
 80031de:	4313      	orrs	r3, r2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 80031e6:	183b      	adds	r3, r7, r0
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff5e 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 80031f0:	2301      	movs	r3, #1
 80031f2:	425b      	negs	r3, r3
 80031f4:	1939      	adds	r1, r7, r4
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f007 fe83 	bl	800af04 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	0018      	movs	r0, r3
 8003204:	f008 faf4 	bl	800b7f0 <HAL_SPI_GetState>
 8003208:	0003      	movs	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d1f8      	bne.n	8003200 <ICM_ReadOneByte+0x48>
		;
	HAL_SPI_Receive(hspi, pData, 1,HAL_MAX_DELAY);
 800320e:	2301      	movs	r3, #1
 8003210:	425b      	negs	r3, r3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f007 ffcc 	bl	800b1b4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(hspi) != HAL_SPI_STATE_READY)
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0018      	movs	r0, r3
 8003222:	f008 fae5 	bl	800b7f0 <HAL_SPI_GetState>
 8003226:	0003      	movs	r3, r0
 8003228:	2b01      	cmp	r3, #1
 800322a:	d1f8      	bne.n	800321e <ICM_ReadOneByte+0x66>
		;
	ICM_CS_High(index);
 800322c:	230a      	movs	r3, #10
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ff60 	bl	80030f8 <ICM_CS_High>
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b005      	add	sp, #20
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <ICM_WriteOneByte>:

void ICM_WriteOneByte(SPI_HandleTypeDef* hspi, uint8_t reg, uint8_t Data, uint8_t index) // ***
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	000c      	movs	r4, r1
 800324a:	0010      	movs	r0, r2
 800324c:	0019      	movs	r1, r3
 800324e:	1cfb      	adds	r3, r7, #3
 8003250:	1c22      	adds	r2, r4, #0
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	1cbb      	adds	r3, r7, #2
 8003256:	1c02      	adds	r2, r0, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	1c7b      	adds	r3, r7, #1
 800325c:	1c0a      	adds	r2, r1, #0
 800325e:	701a      	strb	r2, [r3, #0]
	reg = reg & WRITE_FLAG;
 8003260:	1cfb      	adds	r3, r7, #3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	227f      	movs	r2, #127	; 0x7f
 8003266:	4013      	ands	r3, r2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	1cfb      	adds	r3, r7, #3
 800326c:	701a      	strb	r2, [r3, #0]
	ICM_CS_Low(index);
 800326e:	1c7b      	adds	r3, r7, #1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff1a 	bl	80030ac <ICM_CS_Low>
	HAL_SPI_Transmit(hspi, &reg, 1,HAL_MAX_DELAY);
 8003278:	2301      	movs	r3, #1
 800327a:	425b      	negs	r3, r3
 800327c:	1cf9      	adds	r1, r7, #3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f007 fe3f 	bl	800af04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &Data, 1,HAL_MAX_DELAY);
 8003286:	2301      	movs	r3, #1
 8003288:	425b      	negs	r3, r3
 800328a:	1cb9      	adds	r1, r7, #2
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f007 fe38 	bl	800af04 <HAL_SPI_Transmit>
	ICM_CS_High(index);
 8003294:	1c7b      	adds	r3, r7, #1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff2d 	bl	80030f8 <ICM_CS_High>
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b003      	add	sp, #12
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <ICM_SelectBank>:

void ICM_SelectBank(SPI_HandleTypeDef* hspi,uint8_t reg, uint8_t index){
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	0008      	movs	r0, r1
 80032b0:	0011      	movs	r1, r2
 80032b2:	1cfb      	adds	r3, r7, #3
 80032b4:	1c02      	adds	r2, r0, #0
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	1cbb      	adds	r3, r7, #2
 80032ba:	1c0a      	adds	r2, r1, #0
 80032bc:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,USER_BANK_SEL,reg, index);
 80032be:	1cbb      	adds	r3, r7, #2
 80032c0:	7819      	ldrb	r1, [r3, #0]
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	000b      	movs	r3, r1
 80032ca:	217f      	movs	r1, #127	; 0x7f
 80032cc:	f7ff ffb8 	bl	8003240 <ICM_WriteOneByte>
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <ICM_Initialize>:

/*Initializing the ICM20602*/
void ICM_Initialize(SPI_HandleTypeDef *hspi, UART_HandleTypeDef *huart, uint8_t index)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b0a0      	sub	sp, #128	; 0x80
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	701a      	strb	r2, [r3, #0]

	uint8_t temp;

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2100      	movs	r1, #0
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff ffd9 	bl	80032a6 <ICM_SelectBank>
	temp = PWR_MGT_RESET;
 80032f4:	207f      	movs	r0, #127	; 0x7f
 80032f6:	183b      	adds	r3, r7, r0
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_1,temp, index);
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	7819      	ldrb	r1, [r3, #0]
 8003300:	183b      	adds	r3, r7, r0
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	000b      	movs	r3, r1
 8003308:	2106      	movs	r1, #6
 800330a:	f7ff ff99 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 800330e:	2014      	movs	r0, #20
 8003310:	f006 fa1e 	bl	8009750 <HAL_Delay>

	char uart_buffer[100];
	sprintf((char*) uart_buffer, "SLAVE %i: Initializing IMU \r\n", index);
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	499f      	ldr	r1, [pc, #636]	; (8003598 <ICM_Initialize+0x2c0>)
 800331a:	2414      	movs	r4, #20
 800331c:	193b      	adds	r3, r7, r4
 800331e:	0018      	movs	r0, r3
 8003320:	f009 ff96 	bl	800d250 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003324:	193b      	adds	r3, r7, r4
 8003326:	0018      	movs	r0, r3
 8003328:	f7fc feea 	bl	8000100 <strlen>
 800332c:	0003      	movs	r3, r0
 800332e:	b29a      	uxth	r2, r3
 8003330:	23fa      	movs	r3, #250	; 0xfa
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	1939      	adds	r1, r7, r4
 8003336:	68b8      	ldr	r0, [r7, #8]
 8003338:	f008 fdac 	bl	800be94 <HAL_UART_Transmit>
	HAL_Delay(100);
 800333c:	2064      	movs	r0, #100	; 0x64
 800333e:	f006 fa07 	bl	8009750 <HAL_Delay>

	/* Who am i test
	 WhoAmI is in register bank 0* */
	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2100      	movs	r1, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff ffab 	bl	80032a6 <ICM_SelectBank>
	if (ICM_WHOAMI(hspi, index))
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	0011      	movs	r1, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fe11 	bl	8003f80 <ICM_WHOAMI>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d013      	beq.n	800338a <ICM_Initialize+0xb2>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Success \r\n", index);
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	498d      	ldr	r1, [pc, #564]	; (800359c <ICM_Initialize+0x2c4>)
 8003368:	193b      	adds	r3, r7, r4
 800336a:	0018      	movs	r0, r3
 800336c:	f009 ff70 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003370:	193b      	adds	r3, r7, r4
 8003372:	0018      	movs	r0, r3
 8003374:	f7fc fec4 	bl	8000100 <strlen>
 8003378:	0003      	movs	r3, r0
 800337a:	b29a      	uxth	r2, r3
 800337c:	23fa      	movs	r3, #250	; 0xfa
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	1939      	adds	r1, r7, r4
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f008 fd86 	bl	800be94 <HAL_UART_Transmit>
 8003388:	e013      	b.n	80033b2 <ICM_Initialize+0xda>
	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: WHO AM I Failed \r\n", index);
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	4984      	ldr	r1, [pc, #528]	; (80035a0 <ICM_Initialize+0x2c8>)
 8003390:	2414      	movs	r4, #20
 8003392:	193b      	adds	r3, r7, r4
 8003394:	0018      	movs	r0, r3
 8003396:	f009 ff5b 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 800339a:	193b      	adds	r3, r7, r4
 800339c:	0018      	movs	r0, r3
 800339e:	f7fc feaf 	bl	8000100 <strlen>
 80033a2:	0003      	movs	r3, r0
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	23fa      	movs	r3, #250	; 0xfa
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	1939      	adds	r1, r7, r4
 80033ac:	68b8      	ldr	r0, [r7, #8]
 80033ae:	f008 fd71 	bl	800be94 <HAL_UART_Transmit>
	}

	HAL_Delay(50);
 80033b2:	2032      	movs	r0, #50	; 0x32
 80033b4:	f006 f9cc 	bl	8009750 <HAL_Delay>

	uint8_t pwr_config = PWR_MGMT_1_CONFIG;
 80033b8:	247e      	movs	r4, #126	; 0x7e
 80033ba:	193b      	adds	r3, r7, r4
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
	uint8_t pwr_config2 = PWR_MGMT_2_CONFIG;
 80033c0:	257d      	movs	r5, #125	; 0x7d
 80033c2:	197b      	adds	r3, r7, r5
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

	ICM_WriteOneByte(hspi, REG_PWR_MGMT_1, pwr_config, index);
 80033c8:	1dfb      	adds	r3, r7, #7
 80033ca:	7819      	ldrb	r1, [r3, #0]
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	000b      	movs	r3, r1
 80033d4:	2106      	movs	r1, #6
 80033d6:	f7ff ff33 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 80033da:	2014      	movs	r0, #20
 80033dc:	f006 f9b8 	bl	8009750 <HAL_Delay>
	ICM_WriteOneByte(hspi,REG_PWR_MGMT_2,pwr_config2, index);
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	197b      	adds	r3, r7, r5
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	000b      	movs	r3, r1
 80033ec:	2107      	movs	r1, #7
 80033ee:	f7ff ff27 	bl	8003240 <ICM_WriteOneByte>


	/*Turn Acceleration and Gyro OFF*/
	HAL_Delay(20);
 80033f2:	2014      	movs	r0, #20
 80033f4:	f006 f9ac 	bl	8009750 <HAL_Delay>
	pwr_config = ACC_GYRO_OFF;
 80033f8:	193b      	adds	r3, r7, r4
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 80033fe:	1dfb      	adds	r3, r7, #7
 8003400:	7819      	ldrb	r1, [r3, #0]
 8003402:	193b      	adds	r3, r7, r4
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	000b      	movs	r3, r1
 800340a:	2107      	movs	r1, #7
 800340c:	f7ff ff18 	bl	8003240 <ICM_WriteOneByte>

	/* Disable Fifo and I2C slave*/
	temp = 0b00010000;
 8003410:	247f      	movs	r4, #127	; 0x7f
 8003412:	193b      	adds	r3, r7, r4
 8003414:	2210      	movs	r2, #16
 8003416:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_USER_CTRL, temp, index);
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	7819      	ldrb	r1, [r3, #0]
 800341c:	193b      	adds	r3, r7, r4
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	000b      	movs	r3, r1
 8003424:	2103      	movs	r1, #3
 8003426:	f7ff ff0b 	bl	8003240 <ICM_WriteOneByte>


	/* Configure Gyro */
	ICM_SelectBank(hspi, USER_BANK_2, index);
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2120      	movs	r1, #32
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff ff37 	bl	80032a6 <ICM_SelectBank>
	temp = 0;
 8003438:	0020      	movs	r0, r4
 800343a:	183b      	adds	r3, r7, r0
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_2, temp, index);
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	7819      	ldrb	r1, [r3, #0]
 8003444:	183b      	adds	r3, r7, r0
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	000b      	movs	r3, r1
 800344c:	2102      	movs	r1, #2
 800344e:	f7ff fef7 	bl	8003240 <ICM_WriteOneByte>

	uint16_t dps = GYRO_DPS;
 8003452:	247a      	movs	r4, #122	; 0x7a
 8003454:	193b      	adds	r3, r7, r4
 8003456:	22fa      	movs	r2, #250	; 0xfa
 8003458:	0092      	lsls	r2, r2, #2
 800345a:	801a      	strh	r2, [r3, #0]
	if (ICM_GyroConfig(hspi, dps, index))
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	193b      	adds	r3, r7, r4
 8003462:	8819      	ldrh	r1, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f8a4 	bl	80035b4 <ICM_GyroConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d015      	beq.n	800349c <ICM_Initialize+0x1c4>
	{
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration success DPS: %d \r\n", index, dps);
 8003470:	1dfb      	adds	r3, r7, #7
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	193b      	adds	r3, r7, r4
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	494a      	ldr	r1, [pc, #296]	; (80035a4 <ICM_Initialize+0x2cc>)
 800347a:	2414      	movs	r4, #20
 800347c:	1938      	adds	r0, r7, r4
 800347e:	f009 fee7 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003482:	193b      	adds	r3, r7, r4
 8003484:	0018      	movs	r0, r3
 8003486:	f7fc fe3b 	bl	8000100 <strlen>
 800348a:	0003      	movs	r3, r0
 800348c:	b29a      	uxth	r2, r3
 800348e:	23fa      	movs	r3, #250	; 0xfa
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	1939      	adds	r1, r7, r4
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f008 fcfd 	bl	800be94 <HAL_UART_Transmit>
 800349a:	e013      	b.n	80034c4 <ICM_Initialize+0x1ec>

	} else {
		sprintf((char*) uart_buffer, "SLAVE %i: Gyro Configuration failed \r\n", index);
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	4941      	ldr	r1, [pc, #260]	; (80035a8 <ICM_Initialize+0x2d0>)
 80034a2:	2414      	movs	r4, #20
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	0018      	movs	r0, r3
 80034a8:	f009 fed2 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fc fe26 	bl	8000100 <strlen>
 80034b4:	0003      	movs	r3, r0
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	23fa      	movs	r3, #250	; 0xfa
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	1939      	adds	r1, r7, r4
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f008 fce8 	bl	800be94 <HAL_UART_Transmit>

	}

	temp = 0;
 80034c4:	207f      	movs	r0, #127	; 0x7f
 80034c6:	183b      	adds	r3, r7, r0
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG_2,temp, index);
 80034cc:	1dfb      	adds	r3, r7, #7
 80034ce:	7819      	ldrb	r1, [r3, #0]
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	000b      	movs	r3, r1
 80034d8:	2115      	movs	r1, #21
 80034da:	f7ff feb1 	bl	8003240 <ICM_WriteOneByte>
	/*Turn Acceleartion and Gyro ON*/
	HAL_Delay(20);
 80034de:	2014      	movs	r0, #20
 80034e0:	f006 f936 	bl	8009750 <HAL_Delay>
	pwr_config = ACC_GYRO_ON;
 80034e4:	247e      	movs	r4, #126	; 0x7e
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
	ICM_SelectBank(hspi,USER_BANK_0, index);
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2100      	movs	r1, #0
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff fed6 	bl	80032a6 <ICM_SelectBank>
	HAL_Delay(20);
 80034fa:	2014      	movs	r0, #20
 80034fc:	f006 f928 	bl	8009750 <HAL_Delay>
	ICM_WriteOneByte(hspi, REG_PWR_MGMT_2, pwr_config, index);
 8003500:	1dfb      	adds	r3, r7, #7
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	193b      	adds	r3, r7, r4
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	000b      	movs	r3, r1
 800350c:	2107      	movs	r1, #7
 800350e:	f7ff fe97 	bl	8003240 <ICM_WriteOneByte>
	HAL_Delay(20);
 8003512:	2014      	movs	r0, #20
 8003514:	f006 f91c 	bl	8009750 <HAL_Delay>
	/* Configure Accelerometer */
	uint8_t acc_scale = ACCEL_SCALE_SELECT;
 8003518:	2479      	movs	r4, #121	; 0x79
 800351a:	193b      	adds	r3, r7, r4
 800351c:	2202      	movs	r2, #2
 800351e:	701a      	strb	r2, [r3, #0]

	if(ICM_AccConfig(hspi,acc_scale, index)){
 8003520:	1dfb      	adds	r3, r7, #7
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	193b      	adds	r3, r7, r4
 8003526:	7819      	ldrb	r1, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0018      	movs	r0, r3
 800352c:	f000 fc70 	bl	8003e10 <ICM_AccConfig>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d015      	beq.n	8003560 <ICM_Initialize+0x288>
		sprintf((char*) uart_buffer,"SLAVE %i: Accelerometer Configuration success SELECT +-G: %d \r\n",index, acc_scale);
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	193b      	adds	r3, r7, r4
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	491b      	ldr	r1, [pc, #108]	; (80035ac <ICM_Initialize+0x2d4>)
 800353e:	2414      	movs	r4, #20
 8003540:	1938      	adds	r0, r7, r4
 8003542:	f009 fe85 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003546:	193b      	adds	r3, r7, r4
 8003548:	0018      	movs	r0, r3
 800354a:	f7fc fdd9 	bl	8000100 <strlen>
 800354e:	0003      	movs	r3, r0
 8003550:	b29a      	uxth	r2, r3
 8003552:	23fa      	movs	r3, #250	; 0xfa
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	1939      	adds	r1, r7, r4
 8003558:	68b8      	ldr	r0, [r7, #8]
 800355a:	f008 fc9b 	bl	800be94 <HAL_UART_Transmit>
 800355e:	e013      	b.n	8003588 <ICM_Initialize+0x2b0>
	}else{
		sprintf((char*) uart_buffer, "SLAVE %i: Accelerometer Configuration failed \r\n", index);
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	4912      	ldr	r1, [pc, #72]	; (80035b0 <ICM_Initialize+0x2d8>)
 8003566:	2414      	movs	r4, #20
 8003568:	193b      	adds	r3, r7, r4
 800356a:	0018      	movs	r0, r3
 800356c:	f009 fe70 	bl	800d250 <siprintf>
		HAL_UART_Transmit(huart, (uint8_t*) uart_buffer, strlen((char*) uart_buffer), 1000);
 8003570:	193b      	adds	r3, r7, r4
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc fdc4 	bl	8000100 <strlen>
 8003578:	0003      	movs	r3, r0
 800357a:	b29a      	uxth	r2, r3
 800357c:	23fa      	movs	r3, #250	; 0xfa
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	1939      	adds	r1, r7, r4
 8003582:	68b8      	ldr	r0, [r7, #8]
 8003584:	f008 fc86 	bl	800be94 <HAL_UART_Transmit>
	}


	HAL_Delay(20);
 8003588:	2014      	movs	r0, #20
 800358a:	f006 f8e1 	bl	8009750 <HAL_Delay>

	/*Configure*/


}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b020      	add	sp, #128	; 0x80
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	08011f90 	.word	0x08011f90
 800359c:	08011fb0 	.word	0x08011fb0
 80035a0:	08011fd0 	.word	0x08011fd0
 80035a4:	08011ff0 	.word	0x08011ff0
 80035a8:	08012020 	.word	0x08012020
 80035ac:	08012048 	.word	0x08012048
 80035b0:	08012088 	.word	0x08012088

080035b4 <ICM_GyroConfig>:


/*Configuring Gyro DPS settings in Gyro Config Register */
uint8_t ICM_GyroConfig(SPI_HandleTypeDef *hspi, uint16_t dps, uint8_t index)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	0008      	movs	r0, r1
 80035be:	0011      	movs	r1, r2
 80035c0:	1cbb      	adds	r3, r7, #2
 80035c2:	1c02      	adds	r2, r0, #0
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	1c7b      	adds	r3, r7, #1
 80035c8:	1c0a      	adds	r2, r1, #0
 80035ca:	701a      	strb	r2, [r3, #0]
	uint8_t config_byte;
	switch(dps)
 80035cc:	1cbb      	adds	r3, r7, #2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	22fa      	movs	r2, #250	; 0xfa
 80035d2:	00d2      	lsls	r2, r2, #3
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d045      	beq.n	8003664 <ICM_GyroConfig+0xb0>
 80035d8:	22fa      	movs	r2, #250	; 0xfa
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	4293      	cmp	r3, r2
 80035de:	dc52      	bgt.n	8003686 <ICM_GyroConfig+0xd2>
 80035e0:	22fa      	movs	r2, #250	; 0xfa
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <ICM_GyroConfig+0x8e>
 80035e8:	22fa      	movs	r2, #250	; 0xfa
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4293      	cmp	r3, r2
 80035ee:	dc4a      	bgt.n	8003686 <ICM_GyroConfig+0xd2>
 80035f0:	2bfa      	cmp	r3, #250	; 0xfa
 80035f2:	d004      	beq.n	80035fe <ICM_GyroConfig+0x4a>
 80035f4:	22fa      	movs	r2, #250	; 0xfa
 80035f6:	0052      	lsls	r2, r2, #1
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d011      	beq.n	8003620 <ICM_GyroConfig+0x6c>
 80035fc:	e043      	b.n	8003686 <ICM_GyroConfig+0xd2>
	{
		case 250:
			config_byte = GYRO_250_DPS | GYRO_FILTER;
 80035fe:	200f      	movs	r0, #15
 8003600:	183b      	adds	r3, r7, r0
 8003602:	2229      	movs	r2, #41	; 0x29
 8003604:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_250DPS;
 8003606:	4b35      	ldr	r3, [pc, #212]	; (80036dc <ICM_GyroConfig+0x128>)
 8003608:	4a35      	ldr	r2, [pc, #212]	; (80036e0 <ICM_GyroConfig+0x12c>)
 800360a:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800360c:	1c7b      	adds	r3, r7, #1
 800360e:	7819      	ldrb	r1, [r3, #0]
 8003610:	183b      	adds	r3, r7, r0
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	000b      	movs	r3, r1
 8003618:	2101      	movs	r1, #1
 800361a:	f7ff fe11 	bl	8003240 <ICM_WriteOneByte>
			break;
 800361e:	e040      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 500:
			config_byte = GYRO_500_DPS | GYRO_FILTER;
 8003620:	200f      	movs	r0, #15
 8003622:	183b      	adds	r3, r7, r0
 8003624:	222b      	movs	r2, #43	; 0x2b
 8003626:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_500DPS;
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <ICM_GyroConfig+0x128>)
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <ICM_GyroConfig+0x130>)
 800362c:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800362e:	1c7b      	adds	r3, r7, #1
 8003630:	7819      	ldrb	r1, [r3, #0]
 8003632:	183b      	adds	r3, r7, r0
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	000b      	movs	r3, r1
 800363a:	2101      	movs	r1, #1
 800363c:	f7ff fe00 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003640:	e02f      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 1000:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 8003642:	200f      	movs	r0, #15
 8003644:	183b      	adds	r3, r7, r0
 8003646:	222d      	movs	r2, #45	; 0x2d
 8003648:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_1000DPS;
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <ICM_GyroConfig+0x128>)
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <ICM_GyroConfig+0x134>)
 800364e:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1,(uint8_t)config_byte, index);
 8003650:	1c7b      	adds	r3, r7, #1
 8003652:	7819      	ldrb	r1, [r3, #0]
 8003654:	183b      	adds	r3, r7, r0
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	000b      	movs	r3, r1
 800365c:	2101      	movs	r1, #1
 800365e:	f7ff fdef 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003662:	e01e      	b.n	80036a2 <ICM_GyroConfig+0xee>
		case 2000:
			config_byte = GYRO_2000_DPS | GYRO_FILTER;
 8003664:	200f      	movs	r0, #15
 8003666:	183b      	adds	r3, r7, r0
 8003668:	222f      	movs	r2, #47	; 0x2f
 800366a:	701a      	strb	r2, [r3, #0]
			g_gyro_scale_factor = GYRO_SCALE_2000DPS;
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <ICM_GyroConfig+0x128>)
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <ICM_GyroConfig+0x138>)
 8003670:	601a      	str	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 8003672:	1c7b      	adds	r3, r7, #1
 8003674:	7819      	ldrb	r1, [r3, #0]
 8003676:	183b      	adds	r3, r7, r0
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	000b      	movs	r3, r1
 800367e:	2101      	movs	r1, #1
 8003680:	f7ff fdde 	bl	8003240 <ICM_WriteOneByte>
			break;
 8003684:	e00d      	b.n	80036a2 <ICM_GyroConfig+0xee>
		default:
			config_byte = GYRO_1000_DPS | GYRO_FILTER;
 8003686:	200f      	movs	r0, #15
 8003688:	183b      	adds	r3, r7, r0
 800368a:	222d      	movs	r2, #45	; 0x2d
 800368c:	701a      	strb	r2, [r3, #0]
			ICM_WriteOneByte(hspi, REG_GYRO_CONFIG_1, (uint8_t)config_byte, index);
 800368e:	1c7b      	adds	r3, r7, #1
 8003690:	7819      	ldrb	r1, [r3, #0]
 8003692:	183b      	adds	r3, r7, r0
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	000b      	movs	r3, r1
 800369a:	2101      	movs	r1, #1
 800369c:	f7ff fdd0 	bl	8003240 <ICM_WriteOneByte>
			break;
 80036a0:	46c0      	nop			; (mov r8, r8)
	}

	HAL_Delay(10);
 80036a2:	200a      	movs	r0, #10
 80036a4:	f006 f854 	bl	8009750 <HAL_Delay>

	uint8_t test = 0;
 80036a8:	210e      	movs	r1, #14
 80036aa:	187b      	adds	r3, r7, r1
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_GYRO_CONFIG_1, &test, index);
 80036b0:	1c7b      	adds	r3, r7, #1
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	000c      	movs	r4, r1
 80036b6:	187a      	adds	r2, r7, r1
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	2101      	movs	r1, #1
 80036bc:	f7ff fd7c 	bl	80031b8 <ICM_ReadOneByte>

	if (test != config_byte)
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	220f      	movs	r2, #15
 80036c6:	18ba      	adds	r2, r7, r2
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <ICM_GyroConfig+0x11e>
	{

		return 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <ICM_GyroConfig+0x120>
	}
	return 1;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b005      	add	sp, #20
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	200003a0 	.word	0x200003a0
 80036e0:	43030000 	.word	0x43030000
 80036e4:	42830000 	.word	0x42830000
 80036e8:	42033333 	.word	0x42033333
 80036ec:	41833333 	.word	0x41833333

080036f0 <ICM_GyroCalibration>:


void ICM_GyroCalibration(SPI_HandleTypeDef *hspi,UART_HandleTypeDef* huart, float *gyro_bias, uint8_t index)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	46c6      	mov	lr, r8
 80036f4:	b500      	push	{lr}
 80036f6:	b0ca      	sub	sp, #296	; 0x128
 80036f8:	af06      	add	r7, sp, #24
 80036fa:	61f8      	str	r0, [r7, #28]
 80036fc:	61b9      	str	r1, [r7, #24]
 80036fe:	617a      	str	r2, [r7, #20]
 8003700:	001a      	movs	r2, r3
 8003702:	240b      	movs	r4, #11
 8003704:	2308      	movs	r3, #8
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	191b      	adds	r3, r3, r4
 800370a:	701a      	strb	r2, [r3, #0]
	char uart_buffer[200];
	float gyro_data[3] = {0,0,0};
 800370c:	2128      	movs	r1, #40	; 0x28
 800370e:	2008      	movs	r0, #8
 8003710:	2308      	movs	r3, #8
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	181b      	adds	r3, r3, r0
 8003716:	185b      	adds	r3, r3, r1
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	2308      	movs	r3, #8
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	181b      	adds	r3, r3, r0
 8003722:	185b      	adds	r3, r3, r1
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	2308      	movs	r3, #8
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	181b      	adds	r3, r3, r0
 800372e:	185b      	adds	r3, r3, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
	float zero_bias[3] = {0,0,0};
 8003734:	211c      	movs	r1, #28
 8003736:	2308      	movs	r3, #8
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	181b      	adds	r3, r3, r0
 800373c:	185b      	adds	r3, r3, r1
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	181b      	adds	r3, r3, r0
 8003748:	185b      	adds	r3, r3, r1
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	2308      	movs	r3, #8
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	181b      	adds	r3, r3, r0
 8003754:	185b      	adds	r3, r3, r1
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
	float gyro_accumulated[3] = {0,0,0};
 800375a:	2110      	movs	r1, #16
 800375c:	2308      	movs	r3, #8
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	181b      	adds	r3, r3, r0
 8003762:	185b      	adds	r3, r3, r1
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	2308      	movs	r3, #8
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	181b      	adds	r3, r3, r0
 800376e:	185b      	adds	r3, r3, r1
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	2308      	movs	r3, #8
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	181b      	adds	r3, r3, r0
 800377a:	185b      	adds	r3, r3, r1
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 8003780:	2308      	movs	r3, #8
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	191b      	adds	r3, r3, r4
 8003786:	781a      	ldrb	r2, [r3, #0]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2100      	movs	r1, #0
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff fd8a 	bl	80032a6 <ICM_SelectBank>
	HAL_Delay(10);
 8003792:	200a      	movs	r0, #10
 8003794:	f005 ffdc 	bl	8009750 <HAL_Delay>

	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003798:	23fe      	movs	r3, #254	; 0xfe
 800379a:	2208      	movs	r2, #8
 800379c:	4694      	mov	ip, r2
 800379e:	2208      	movs	r2, #8
 80037a0:	4690      	mov	r8, r2
 80037a2:	44b8      	add	r8, r7
 80037a4:	44c4      	add	ip, r8
 80037a6:	4463      	add	r3, ip
 80037a8:	2200      	movs	r2, #0
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e069      	b.n	8003882 <ICM_GyroCalibration+0x192>
	{
		ICM_ReadGyroData(hspi, gyro_data, zero_bias, index);
 80037ae:	230b      	movs	r3, #11
 80037b0:	2208      	movs	r2, #8
 80037b2:	4694      	mov	ip, r2
 80037b4:	44bc      	add	ip, r7
 80037b6:	4463      	add	r3, ip
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	221c      	movs	r2, #28
 80037bc:	2108      	movs	r1, #8
 80037be:	468c      	mov	ip, r1
 80037c0:	2108      	movs	r1, #8
 80037c2:	4688      	mov	r8, r1
 80037c4:	44b8      	add	r8, r7
 80037c6:	44c4      	add	ip, r8
 80037c8:	4462      	add	r2, ip
 80037ca:	2528      	movs	r5, #40	; 0x28
 80037cc:	2608      	movs	r6, #8
 80037ce:	2108      	movs	r1, #8
 80037d0:	1879      	adds	r1, r7, r1
 80037d2:	1989      	adds	r1, r1, r6
 80037d4:	1949      	adds	r1, r1, r5
 80037d6:	69f8      	ldr	r0, [r7, #28]
 80037d8:	f000 f9bc 	bl	8003b54 <ICM_ReadGyroData>
		gyro_accumulated[0] += gyro_data[0];
 80037dc:	2410      	movs	r4, #16
 80037de:	2308      	movs	r3, #8
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	199b      	adds	r3, r3, r6
 80037e4:	191b      	adds	r3, r3, r4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2308      	movs	r3, #8
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	199b      	adds	r3, r3, r6
 80037ee:	195b      	adds	r3, r3, r5
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	1c19      	adds	r1, r3, #0
 80037f4:	1c10      	adds	r0, r2, #0
 80037f6:	f7fc fea5 	bl	8000544 <__aeabi_fadd>
 80037fa:	1c03      	adds	r3, r0, #0
 80037fc:	1c1a      	adds	r2, r3, #0
 80037fe:	2308      	movs	r3, #8
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	199b      	adds	r3, r3, r6
 8003804:	191b      	adds	r3, r3, r4
 8003806:	601a      	str	r2, [r3, #0]
		gyro_accumulated[1] += gyro_data[1];
 8003808:	2308      	movs	r3, #8
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	199b      	adds	r3, r3, r6
 800380e:	191b      	adds	r3, r3, r4
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	2308      	movs	r3, #8
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	199b      	adds	r3, r3, r6
 8003818:	195b      	adds	r3, r3, r5
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	1c19      	adds	r1, r3, #0
 800381e:	1c10      	adds	r0, r2, #0
 8003820:	f7fc fe90 	bl	8000544 <__aeabi_fadd>
 8003824:	1c03      	adds	r3, r0, #0
 8003826:	1c1a      	adds	r2, r3, #0
 8003828:	2308      	movs	r3, #8
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	199b      	adds	r3, r3, r6
 800382e:	191b      	adds	r3, r3, r4
 8003830:	605a      	str	r2, [r3, #4]
		gyro_accumulated[2] += gyro_data[2];
 8003832:	2308      	movs	r3, #8
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	199b      	adds	r3, r3, r6
 8003838:	191b      	adds	r3, r3, r4
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	2308      	movs	r3, #8
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	199b      	adds	r3, r3, r6
 8003842:	195b      	adds	r3, r3, r5
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	1c19      	adds	r1, r3, #0
 8003848:	1c10      	adds	r0, r2, #0
 800384a:	f7fc fe7b 	bl	8000544 <__aeabi_fadd>
 800384e:	1c03      	adds	r3, r0, #0
 8003850:	1c1a      	adds	r2, r3, #0
 8003852:	2308      	movs	r3, #8
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	199b      	adds	r3, r3, r6
 8003858:	191b      	adds	r3, r3, r4
 800385a:	609a      	str	r2, [r3, #8]
		HAL_Delay(20);
 800385c:	2014      	movs	r0, #20
 800385e:	f005 ff77 	bl	8009750 <HAL_Delay>
	for (int16_t i = 0; i < GYRO_CALIBRATION_SAMPLES; i++)
 8003862:	21fe      	movs	r1, #254	; 0xfe
 8003864:	0030      	movs	r0, r6
 8003866:	2308      	movs	r3, #8
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	199b      	adds	r3, r3, r6
 800386c:	185b      	adds	r3, r3, r1
 800386e:	2200      	movs	r2, #0
 8003870:	5e9b      	ldrsh	r3, [r3, r2]
 8003872:	b29b      	uxth	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	2308      	movs	r3, #8
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	181b      	adds	r3, r3, r0
 800387e:	185b      	adds	r3, r3, r1
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	23fe      	movs	r3, #254	; 0xfe
 8003884:	2208      	movs	r2, #8
 8003886:	4694      	mov	ip, r2
 8003888:	2208      	movs	r2, #8
 800388a:	4690      	mov	r8, r2
 800388c:	44b8      	add	r8, r7
 800388e:	44c4      	add	ip, r8
 8003890:	4463      	add	r3, ip
 8003892:	2200      	movs	r2, #0
 8003894:	5e9a      	ldrsh	r2, [r3, r2]
 8003896:	23fa      	movs	r3, #250	; 0xfa
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	429a      	cmp	r2, r3
 800389c:	db87      	blt.n	80037ae <ICM_GyroCalibration+0xbe>
	}

	gyro_bias[0] =  -1*gyro_accumulated[0] / GYRO_CALIBRATION_SAMPLES;
 800389e:	2510      	movs	r5, #16
 80038a0:	2608      	movs	r6, #8
 80038a2:	2308      	movs	r3, #8
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	199b      	adds	r3, r3, r6
 80038a8:	195b      	adds	r3, r3, r5
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	0612      	lsls	r2, r2, #24
 80038b0:	4053      	eors	r3, r2
 80038b2:	493b      	ldr	r1, [pc, #236]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038b4:	1c18      	adds	r0, r3, #0
 80038b6:	f7fc ffe1 	bl	800087c <__aeabi_fdiv>
 80038ba:	1c03      	adds	r3, r0, #0
 80038bc:	1c1a      	adds	r2, r3, #0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	601a      	str	r2, [r3, #0]
	gyro_bias[1] =  -1*gyro_accumulated[1] / GYRO_CALIBRATION_SAMPLES;
 80038c2:	2308      	movs	r3, #8
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	199b      	adds	r3, r3, r6
 80038c8:	195b      	adds	r3, r3, r5
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0612      	lsls	r2, r2, #24
 80038d0:	405a      	eors	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1d1c      	adds	r4, r3, #4
 80038d6:	4932      	ldr	r1, [pc, #200]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038d8:	1c10      	adds	r0, r2, #0
 80038da:	f7fc ffcf 	bl	800087c <__aeabi_fdiv>
 80038de:	1c03      	adds	r3, r0, #0
 80038e0:	6023      	str	r3, [r4, #0]
	gyro_bias[2] =  -1*gyro_accumulated[2] / GYRO_CALIBRATION_SAMPLES;
 80038e2:	2308      	movs	r3, #8
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	199b      	adds	r3, r3, r6
 80038e8:	195b      	adds	r3, r3, r5
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	0612      	lsls	r2, r2, #24
 80038f0:	405a      	eors	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3308      	adds	r3, #8
 80038f6:	001c      	movs	r4, r3
 80038f8:	4929      	ldr	r1, [pc, #164]	; (80039a0 <ICM_GyroCalibration+0x2b0>)
 80038fa:	1c10      	adds	r0, r2, #0
 80038fc:	f7fc ffbe 	bl	800087c <__aeabi_fdiv>
 8003900:	1c03      	adds	r3, r0, #0
 8003902:	6023      	str	r3, [r4, #0]

	sprintf(uart_buffer,
 8003904:	230b      	movs	r3, #11
 8003906:	2208      	movs	r2, #8
 8003908:	4694      	mov	ip, r2
 800390a:	44bc      	add	ip, r7
 800390c:	4463      	add	r3, ip
 800390e:	781e      	ldrb	r6, [r3, #0]
					"SLAVE %i: Calibrating Gyroscope:"
					"Gyro x-offset: %.5f | Gyro y-offset: %.5f | Gyro z-offset: %.5f"
					"\r\n",
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003914:	1c18      	adds	r0, r3, #0
 8003916:	f7ff fadb 	bl	8002ed0 <__aeabi_f2d>
 800391a:	0004      	movs	r4, r0
 800391c:	000d      	movs	r5, r1
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003924:	1c18      	adds	r0, r3, #0
 8003926:	f7ff fad3 	bl	8002ed0 <__aeabi_f2d>
 800392a:	60b8      	str	r0, [r7, #8]
 800392c:	60f9      	str	r1, [r7, #12]
					index, gyro_bias[0], gyro_bias[1], gyro_bias[2]);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3308      	adds	r3, #8
 8003932:	681b      	ldr	r3, [r3, #0]
	sprintf(uart_buffer,
 8003934:	1c18      	adds	r0, r3, #0
 8003936:	f7ff facb 	bl	8002ed0 <__aeabi_f2d>
 800393a:	6038      	str	r0, [r7, #0]
 800393c:	6079      	str	r1, [r7, #4]
 800393e:	4919      	ldr	r1, [pc, #100]	; (80039a4 <ICM_GyroCalibration+0x2b4>)
 8003940:	2034      	movs	r0, #52	; 0x34
 8003942:	2308      	movs	r3, #8
 8003944:	469c      	mov	ip, r3
 8003946:	2308      	movs	r3, #8
 8003948:	4698      	mov	r8, r3
 800394a:	44b8      	add	r8, r7
 800394c:	44c4      	add	ip, r8
 800394e:	4460      	add	r0, ip
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	9204      	str	r2, [sp, #16]
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	9202      	str	r2, [sp, #8]
 800395e:	9303      	str	r3, [sp, #12]
 8003960:	9400      	str	r4, [sp, #0]
 8003962:	9501      	str	r5, [sp, #4]
 8003964:	0032      	movs	r2, r6
 8003966:	f009 fc73 	bl	800d250 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t*) uart_buffer ,strlen(uart_buffer),1000);
 800396a:	2434      	movs	r4, #52	; 0x34
 800396c:	2608      	movs	r6, #8
 800396e:	2308      	movs	r3, #8
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	199b      	adds	r3, r3, r6
 8003974:	191b      	adds	r3, r3, r4
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fbc2 	bl	8000100 <strlen>
 800397c:	0003      	movs	r3, r0
 800397e:	b29a      	uxth	r2, r3
 8003980:	23fa      	movs	r3, #250	; 0xfa
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	2108      	movs	r1, #8
 8003986:	1879      	adds	r1, r7, r1
 8003988:	1989      	adds	r1, r1, r6
 800398a:	1909      	adds	r1, r1, r4
 800398c:	69b8      	ldr	r0, [r7, #24]
 800398e:	f008 fa81 	bl	800be94 <HAL_UART_Transmit>
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b044      	add	sp, #272	; 0x110
 8003998:	bc80      	pop	{r7}
 800399a:	46b8      	mov	r8, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	43fa0000 	.word	0x43fa0000
 80039a4:	080120b8 	.word	0x080120b8

080039a8 <ICM_AccCalibration>:
					acc_bias[0], acc_bias[1], acc_bias[2]);
	HAL_UART_Transmit(huart, (uint8_t*)uart_buffer ,strlen(uart_buffer),1000);
}
**/

void ICM_AccCalibration(SPI_HandleTypeDef *hspi, UART_HandleTypeDef* huart, float *acc_bias, uint8_t index){
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b0c7      	sub	sp, #284	; 0x11c
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	001a      	movs	r2, r3
 80039b6:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 80039b8:	2184      	movs	r1, #132	; 0x84
 80039ba:	0049      	lsls	r1, r1, #1
 80039bc:	468c      	mov	ip, r1
 80039be:	44bc      	add	ip, r7
 80039c0:	4463      	add	r3, ip
 80039c2:	701a      	strb	r2, [r3, #0]

	char uart_buffer[200];
	float acc_data[3] = {0,0,0};
 80039c4:	2128      	movs	r1, #40	; 0x28
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
	float acc_angle[2] = {0,0};
 80039d8:	2120      	movs	r1, #32
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	605a      	str	r2, [r3, #4]
	struct euler_angles temp = {0,0,0};
 80039e6:	2114      	movs	r1, #20
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]

	ICM_SelectBank(hspi,USER_BANK_0, index);
 80039fa:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 80039fc:	2284      	movs	r2, #132	; 0x84
 80039fe:	0052      	lsls	r2, r2, #1
 8003a00:	4694      	mov	ip, r2
 8003a02:	44bc      	add	ip, r7
 8003a04:	4463      	add	r3, ip
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff fc4a 	bl	80032a6 <ICM_SelectBank>
	for (int16_t i = 0; i < 500; i++)
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	33ff      	adds	r3, #255	; 0xff
 8003a16:	2200      	movs	r2, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	e039      	b.n	8003a90 <ICM_AccCalibration+0xe8>
	{
		ICM_ReadAccData(hspi, acc_data, index);
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	0052      	lsls	r2, r2, #1
 8003a22:	4694      	mov	ip, r2
 8003a24:	44bc      	add	ip, r7
 8003a26:	4463      	add	r3, ip
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	2428      	movs	r4, #40	; 0x28
 8003a2c:	1939      	adds	r1, r7, r4
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f94d 	bl	8003cd0 <ICM_ReadAccData>
		CalcAccLinearToEuler(acc_data, &temp);
 8003a36:	2514      	movs	r5, #20
 8003a38:	197a      	adds	r2, r7, r5
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	0011      	movs	r1, r2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fbb2 	bl	80041a8 <CalcAccLinearToEuler>
		acc_angle[0] += temp.roll;
 8003a44:	2420      	movs	r4, #32
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c19      	adds	r1, r3, #0
 8003a50:	1c10      	adds	r0, r2, #0
 8003a52:	f7fc fd77 	bl	8000544 <__aeabi_fadd>
 8003a56:	1c03      	adds	r3, r0, #0
 8003a58:	1c1a      	adds	r2, r3, #0
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	601a      	str	r2, [r3, #0]
		acc_angle[1] += temp.pitch;
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	197b      	adds	r3, r7, r5
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	1c19      	adds	r1, r3, #0
 8003a68:	1c10      	adds	r0, r2, #0
 8003a6a:	f7fc fd6b 	bl	8000544 <__aeabi_fadd>
 8003a6e:	1c03      	adds	r3, r0, #0
 8003a70:	1c1a      	adds	r2, r3, #0
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	605a      	str	r2, [r3, #4]
		HAL_Delay(10);
 8003a76:	200a      	movs	r0, #10
 8003a78:	f005 fe6a 	bl	8009750 <HAL_Delay>
	for (int16_t i = 0; i < 500; i++)
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	33ff      	adds	r3, #255	; 0xff
 8003a80:	2200      	movs	r2, #0
 8003a82:	5e9b      	ldrsh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	33ff      	adds	r3, #255	; 0xff
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	33ff      	adds	r3, #255	; 0xff
 8003a94:	2200      	movs	r2, #0
 8003a96:	5e9a      	ldrsh	r2, [r3, r2]
 8003a98:	23fa      	movs	r3, #250	; 0xfa
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbbd      	blt.n	8003a1c <ICM_AccCalibration+0x74>
	}

	float temp1 =  (acc_angle[0] / 500.0);
 8003aa0:	2420      	movs	r4, #32
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4929      	ldr	r1, [pc, #164]	; (8003b4c <ICM_AccCalibration+0x1a4>)
 8003aa8:	1c18      	adds	r0, r3, #0
 8003aaa:	f7fc fee7 	bl	800087c <__aeabi_fdiv>
 8003aae:	1c03      	adds	r3, r0, #0
 8003ab0:	1c7a      	adds	r2, r7, #1
 8003ab2:	32ff      	adds	r2, #255	; 0xff
 8003ab4:	6013      	str	r3, [r2, #0]
	float temp2 =  -(acc_angle[1] / 500.0);
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4924      	ldr	r1, [pc, #144]	; (8003b4c <ICM_AccCalibration+0x1a4>)
 8003abc:	1c18      	adds	r0, r3, #0
 8003abe:	f7fc fedd 	bl	800087c <__aeabi_fdiv>
 8003ac2:	1c03      	adds	r3, r0, #0
 8003ac4:	1c1a      	adds	r2, r3, #0
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	4053      	eors	r3, r2
 8003acc:	21fc      	movs	r1, #252	; 0xfc
 8003ace:	187a      	adds	r2, r7, r1
 8003ad0:	6013      	str	r3, [r2, #0]

	acc_bias[0] = temp1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1c7a      	adds	r2, r7, #1
 8003ad6:	32ff      	adds	r2, #255	; 0xff
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	601a      	str	r2, [r3, #0]
	acc_bias[1] = temp2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	187a      	adds	r2, r7, r1
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	601a      	str	r2, [r3, #0]

	sprintf(uart_buffer,
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <ICM_AccCalibration+0x1a0>)
 8003ae8:	2284      	movs	r2, #132	; 0x84
 8003aea:	0052      	lsls	r2, r2, #1
 8003aec:	4694      	mov	ip, r2
 8003aee:	44bc      	add	ip, r7
 8003af0:	4463      	add	r3, ip
 8003af2:	781e      	ldrb	r6, [r3, #0]
 8003af4:	1c7b      	adds	r3, r7, #1
 8003af6:	33ff      	adds	r3, #255	; 0xff
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f7ff f9e9 	bl	8002ed0 <__aeabi_f2d>
 8003afe:	0004      	movs	r4, r0
 8003b00:	000d      	movs	r5, r1
 8003b02:	21fc      	movs	r1, #252	; 0xfc
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	f7ff f9e2 	bl	8002ed0 <__aeabi_f2d>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	000b      	movs	r3, r1
 8003b10:	490f      	ldr	r1, [pc, #60]	; (8003b50 <ICM_AccCalibration+0x1a8>)
 8003b12:	2034      	movs	r0, #52	; 0x34
 8003b14:	1838      	adds	r0, r7, r0
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9400      	str	r4, [sp, #0]
 8003b1c:	9501      	str	r5, [sp, #4]
 8003b1e:	0032      	movs	r2, r6
 8003b20:	f009 fb96 	bl	800d250 <siprintf>
		  "SLAVE %i: Accelerometer Calibration Succes: "
		  "Pitch: %.3f, Roll: %.3f \r\n",
		  index, temp1, temp2);
	HAL_UART_Transmit(huart,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8003b24:	2434      	movs	r4, #52	; 0x34
 8003b26:	193b      	adds	r3, r7, r4
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fc fae9 	bl	8000100 <strlen>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	23fa      	movs	r3, #250	; 0xfa
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	1939      	adds	r1, r7, r4
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f008 f9ab 	bl	800be94 <HAL_UART_Transmit>
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b043      	add	sp, #268	; 0x10c
 8003b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	fffffefb 	.word	0xfffffefb
 8003b4c:	43fa0000 	.word	0x43fa0000
 8003b50:	0801211c 	.word	0x0801211c

08003b54 <ICM_ReadGyroData>:


void ICM_ReadGyroData(SPI_HandleTypeDef *hspi, float* gyro_data, float *gyro_bias, uint8_t index)
{
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	001a      	movs	r2, r3
 8003b62:	1cfb      	adds	r3, r7, #3
 8003b64:	701a      	strb	r2, [r3, #0]
	uint8_t gyro_raw[6] = {0,0,0,0,0,0};
 8003b66:	2018      	movs	r0, #24
 8003b68:	183b      	adds	r3, r7, r0
 8003b6a:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <ICM_ReadGyroData+0x174>)
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	8892      	ldrh	r2, [r2, #4]
 8003b72:	809a      	strh	r2, [r3, #4]
	int16_t gyro_int[3] = {0,0,0};
 8003b74:	2410      	movs	r4, #16
 8003b76:	193b      	adds	r3, r7, r4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	2200      	movs	r2, #0
 8003b80:	805a      	strh	r2, [r3, #2]
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2200      	movs	r2, #0
 8003b86:	809a      	strh	r2, [r3, #4]

	ICM_ReadBytes(hspi, REG_GYRO_XOUT_H, gyro_raw, 6, index);
 8003b88:	0005      	movs	r5, r0
 8003b8a:	183a      	adds	r2, r7, r0
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	1cfb      	adds	r3, r7, #3
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2306      	movs	r3, #6
 8003b96:	2133      	movs	r1, #51	; 0x33
 8003b98:	f7ff fad4 	bl	8003144 <ICM_ReadBytes>
	UINT8_TO_INT16(gyro_int[0], gyro_raw[0], gyro_raw[1]);
 8003b9c:	0028      	movs	r0, r5
 8003b9e:	183b      	adds	r3, r7, r0
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b21a      	sxth	r2, r3
 8003ba4:	0021      	movs	r1, r4
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	2200      	movs	r2, #0
 8003bae:	5e9b      	ldrsh	r3, [r3, r2]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	b21a      	sxth	r2, r3
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	801a      	strh	r2, [r3, #0]
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	2200      	movs	r2, #0
 8003bbc:	5e9a      	ldrsh	r2, [r3, r2]
 8003bbe:	183b      	adds	r3, r7, r0
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	b21a      	sxth	r2, r3
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro_int[1], gyro_raw[2], gyro_raw[3]);
 8003bcc:	183b      	adds	r3, r7, r0
 8003bce:	789b      	ldrb	r3, [r3, #2]
 8003bd0:	b21a      	sxth	r2, r3
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	805a      	strh	r2, [r3, #2]
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2202      	movs	r2, #2
 8003bda:	5e9b      	ldrsh	r3, [r3, r2]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	805a      	strh	r2, [r3, #2]
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2202      	movs	r2, #2
 8003be8:	5e9a      	ldrsh	r2, [r3, r2]
 8003bea:	183b      	adds	r3, r7, r0
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	b21b      	sxth	r3, r3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(gyro_int[2], gyro_raw[4], gyro_raw[5]);
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	791b      	ldrb	r3, [r3, #4]
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	809a      	strh	r2, [r3, #4]
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	2204      	movs	r2, #4
 8003c06:	5e9b      	ldrsh	r3, [r3, r2]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	809a      	strh	r2, [r3, #4]
 8003c10:	000d      	movs	r5, r1
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2204      	movs	r2, #4
 8003c16:	5e9a      	ldrsh	r2, [r3, r2]
 8003c18:	183b      	adds	r3, r7, r0
 8003c1a:	795b      	ldrb	r3, [r3, #5]
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (((float) gyro_int[0]  / g_gyro_scale_factor) + gyro_bias[0]);
 8003c26:	197b      	adds	r3, r7, r5
 8003c28:	2200      	movs	r2, #0
 8003c2a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fd faf1 	bl	8001214 <__aeabi_i2f>
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	1c19      	adds	r1, r3, #0
 8003c3a:	1c10      	adds	r0, r2, #0
 8003c3c:	f7fc fe1e 	bl	800087c <__aeabi_fdiv>
 8003c40:	1c03      	adds	r3, r0, #0
 8003c42:	1c1a      	adds	r2, r3, #0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c19      	adds	r1, r3, #0
 8003c4a:	1c10      	adds	r0, r2, #0
 8003c4c:	f7fc fc7a 	bl	8000544 <__aeabi_fadd>
 8003c50:	1c03      	adds	r3, r0, #0
 8003c52:	1c1a      	adds	r2, r3, #0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	601a      	str	r2, [r3, #0]
	gyro_data[1] = (((float) gyro_int[1]  / g_gyro_scale_factor) + gyro_bias[1]);
 8003c58:	197b      	adds	r3, r7, r5
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fd fad8 	bl	8001214 <__aeabi_i2f>
 8003c64:	1c02      	adds	r2, r0, #0
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1c19      	adds	r1, r3, #0
 8003c6c:	1c10      	adds	r0, r2, #0
 8003c6e:	f7fc fe05 	bl	800087c <__aeabi_fdiv>
 8003c72:	1c03      	adds	r3, r0, #0
 8003c74:	1c18      	adds	r0, r3, #0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1d1c      	adds	r4, r3, #4
 8003c80:	1c11      	adds	r1, r2, #0
 8003c82:	f7fc fc5f 	bl	8000544 <__aeabi_fadd>
 8003c86:	1c03      	adds	r3, r0, #0
 8003c88:	6023      	str	r3, [r4, #0]
	gyro_data[2] = (((float) gyro_int[2]  / g_gyro_scale_factor) + gyro_bias[2]);
 8003c8a:	197b      	adds	r3, r7, r5
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	5e9b      	ldrsh	r3, [r3, r2]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fd fabf 	bl	8001214 <__aeabi_i2f>
 8003c96:	1c02      	adds	r2, r0, #0
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <ICM_ReadGyroData+0x178>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	1c19      	adds	r1, r3, #0
 8003c9e:	1c10      	adds	r0, r2, #0
 8003ca0:	f7fc fdec 	bl	800087c <__aeabi_fdiv>
 8003ca4:	1c03      	adds	r3, r0, #0
 8003ca6:	1c18      	adds	r0, r3, #0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3308      	adds	r3, #8
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	001c      	movs	r4, r3
 8003cb4:	1c11      	adds	r1, r2, #0
 8003cb6:	f7fc fc45 	bl	8000544 <__aeabi_fadd>
 8003cba:	1c03      	adds	r3, r0, #0
 8003cbc:	6023      	str	r3, [r4, #0]
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b008      	add	sp, #32
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	08012164 	.word	0x08012164
 8003ccc:	200003a0 	.word	0x200003a0

08003cd0 <ICM_ReadAccData>:


void ICM_ReadAccData(SPI_HandleTypeDef *hspi, float* accel_data, uint8_t index){
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	1dfb      	adds	r3, r7, #7
 8003cdc:	701a      	strb	r2, [r3, #0]

	uint8_t acc_data[6] = {0,0,0,0,0,0};
 8003cde:	2018      	movs	r0, #24
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <ICM_ReadAccData+0x138>)
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	6019      	str	r1, [r3, #0]
 8003ce8:	8892      	ldrh	r2, [r2, #4]
 8003cea:	809a      	strh	r2, [r3, #4]
	int16_t acc_int[3] = {0,0,0};
 8003cec:	2410      	movs	r4, #16
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	193b      	adds	r3, r7, r4
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	805a      	strh	r2, [r3, #2]
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	809a      	strh	r2, [r3, #4]
	ICM_ReadBytes(hspi, REG_ACCEL_XOUT_H, acc_data, 6, index);
 8003d00:	0005      	movs	r5, r0
 8003d02:	183a      	adds	r2, r7, r0
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	212d      	movs	r1, #45	; 0x2d
 8003d10:	f7ff fa18 	bl	8003144 <ICM_ReadBytes>

	UINT8_TO_INT16(acc_int[0],acc_data[0], acc_data[1]);
 8003d14:	0028      	movs	r0, r5
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	0021      	movs	r1, r4
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	5e9b      	ldrsh	r3, [r3, r2]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	2200      	movs	r2, #0
 8003d34:	5e9a      	ldrsh	r2, [r3, r2]
 8003d36:	183b      	adds	r3, r7, r0
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b21a      	sxth	r2, r3
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(acc_int[1],acc_data[2], acc_data[3]);
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	805a      	strh	r2, [r3, #2]
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2202      	movs	r2, #2
 8003d52:	5e9b      	ldrsh	r3, [r3, r2]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	b21a      	sxth	r2, r3
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	805a      	strh	r2, [r3, #2]
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2202      	movs	r2, #2
 8003d60:	5e9a      	ldrsh	r2, [r3, r2]
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	78db      	ldrb	r3, [r3, #3]
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	805a      	strh	r2, [r3, #2]
	UINT8_TO_INT16(acc_int[2],acc_data[4], acc_data[5]);
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	809a      	strh	r2, [r3, #4]
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	b21a      	sxth	r2, r3
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	809a      	strh	r2, [r3, #4]
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	5e9a      	ldrsh	r2, [r3, r2]
 8003d8e:	183b      	adds	r3, r7, r0
 8003d90:	795b      	ldrb	r3, [r3, #5]
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b21a      	sxth	r2, r3
 8003d98:	000d      	movs	r5, r1
 8003d9a:	197b      	adds	r3, r7, r5
 8003d9c:	809a      	strh	r2, [r3, #4]

	accel_data[0] = (float)acc_int[0] / acc_scale_factor;
 8003d9e:	197b      	adds	r3, r7, r5
 8003da0:	2200      	movs	r2, #0
 8003da2:	5e9b      	ldrsh	r3, [r3, r2]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fd fa35 	bl	8001214 <__aeabi_i2f>
 8003daa:	1c02      	adds	r2, r0, #0
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c19      	adds	r1, r3, #0
 8003db2:	1c10      	adds	r0, r2, #0
 8003db4:	f7fc fd62 	bl	800087c <__aeabi_fdiv>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c1a      	adds	r2, r3, #0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	601a      	str	r2, [r3, #0]
	accel_data[1] = (float)acc_int[1] / acc_scale_factor;
 8003dc0:	197b      	adds	r3, r7, r5
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7fd fa24 	bl	8001214 <__aeabi_i2f>
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1d1c      	adds	r4, r3, #4
 8003dd4:	1c11      	adds	r1, r2, #0
 8003dd6:	f7fc fd51 	bl	800087c <__aeabi_fdiv>
 8003dda:	1c03      	adds	r3, r0, #0
 8003ddc:	6023      	str	r3, [r4, #0]
	accel_data[2] = (float)acc_int[2] / acc_scale_factor;
 8003dde:	197b      	adds	r3, r7, r5
 8003de0:	2204      	movs	r2, #4
 8003de2:	5e9b      	ldrsh	r3, [r3, r2]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7fd fa15 	bl	8001214 <__aeabi_i2f>
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <ICM_ReadAccData+0x13c>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3308      	adds	r3, #8
 8003df2:	001c      	movs	r4, r3
 8003df4:	1c11      	adds	r1, r2, #0
 8003df6:	f7fc fd41 	bl	800087c <__aeabi_fdiv>
 8003dfa:	1c03      	adds	r3, r0, #0
 8003dfc:	6023      	str	r3, [r4, #0]
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b008      	add	sp, #32
 8003e04:	bdb0      	pop	{r4, r5, r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	08012164 	.word	0x08012164
 8003e0c:	20000338 	.word	0x20000338

08003e10 <ICM_AccConfig>:

/*configure accelerometer sensitivity and scaler**/
uint8_t ICM_AccConfig(SPI_HandleTypeDef *hspi, uint8_t sensitivity, uint8_t index){
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	0008      	movs	r0, r1
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	1cfb      	adds	r3, r7, #3
 8003e1e:	1c02      	adds	r2, r0, #0
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	1cbb      	adds	r3, r7, #2
 8003e24:	1c0a      	adds	r2, r1, #0
 8003e26:	701a      	strb	r2, [r3, #0]

	ICM_SelectBank(hspi,USER_BANK_2, index);
 8003e28:	1cbb      	adds	r3, r7, #2
 8003e2a:	781a      	ldrb	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2120      	movs	r1, #32
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fa38 	bl	80032a6 <ICM_SelectBank>
	uint8_t config_byte_acc;
	uint8_t config2 = 0;
 8003e36:	200e      	movs	r0, #14
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
	ICM_WriteOneByte(hspi, REG_ACCEL_CONFIG_2, (uint8_t)config2, index);
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	7819      	ldrb	r1, [r3, #0]
 8003e42:	183b      	adds	r3, r7, r0
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	000b      	movs	r3, r1
 8003e4a:	2115      	movs	r1, #21
 8003e4c:	f7ff f9f8 	bl	8003240 <ICM_WriteOneByte>

	switch(sensitivity){
 8003e50:	1cfb      	adds	r3, r7, #3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d03e      	beq.n	8003ed6 <ICM_AccConfig+0xc6>
 8003e58:	dc4f      	bgt.n	8003efa <ICM_AccConfig+0xea>
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d029      	beq.n	8003eb2 <ICM_AccConfig+0xa2>
 8003e5e:	dc4c      	bgt.n	8003efa <ICM_AccConfig+0xea>
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d002      	beq.n	8003e6a <ICM_AccConfig+0x5a>
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d012      	beq.n	8003e8e <ICM_AccConfig+0x7e>
 8003e68:	e047      	b.n	8003efa <ICM_AccConfig+0xea>
	case 2:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003e6a:	200f      	movs	r0, #15
 8003e6c:	183b      	adds	r3, r7, r0
 8003e6e:	2231      	movs	r2, #49	; 0x31
 8003e70:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003e72:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003e74:	228d      	movs	r2, #141	; 0x8d
 8003e76:	05d2      	lsls	r2, r2, #23
 8003e78:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e7a:	1cbb      	adds	r3, r7, #2
 8003e7c:	7819      	ldrb	r1, [r3, #0]
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	000b      	movs	r3, r1
 8003e86:	2114      	movs	r1, #20
 8003e88:	f7ff f9da 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003e8c:	e046      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 4:
		config_byte_acc = ACCEL_CONFIG_4G | ACC_FILTER;
 8003e8e:	200f      	movs	r0, #15
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	2233      	movs	r2, #51	; 0x33
 8003e94:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_4G;
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003e98:	228c      	movs	r2, #140	; 0x8c
 8003e9a:	05d2      	lsls	r2, r2, #23
 8003e9c:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003e9e:	1cbb      	adds	r3, r7, #2
 8003ea0:	7819      	ldrb	r1, [r3, #0]
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	000b      	movs	r3, r1
 8003eaa:	2114      	movs	r1, #20
 8003eac:	f7ff f9c8 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003eb0:	e034      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 8:
		config_byte_acc = ACCEL_CONFIG_8G | ACC_FILTER;
 8003eb2:	200f      	movs	r0, #15
 8003eb4:	183b      	adds	r3, r7, r0
 8003eb6:	2235      	movs	r2, #53	; 0x35
 8003eb8:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_8G;
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003ebc:	228b      	movs	r2, #139	; 0x8b
 8003ebe:	05d2      	lsls	r2, r2, #23
 8003ec0:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ec2:	1cbb      	adds	r3, r7, #2
 8003ec4:	7819      	ldrb	r1, [r3, #0]
 8003ec6:	183b      	adds	r3, r7, r0
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	000b      	movs	r3, r1
 8003ece:	2114      	movs	r1, #20
 8003ed0:	f7ff f9b6 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003ed4:	e022      	b.n	8003f1c <ICM_AccConfig+0x10c>
	case 16:
		config_byte_acc = ACCEL_CONFIG_16G | ACC_FILTER;
 8003ed6:	200f      	movs	r0, #15
 8003ed8:	183b      	adds	r3, r7, r0
 8003eda:	2237      	movs	r2, #55	; 0x37
 8003edc:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_16G;
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003ee0:	228a      	movs	r2, #138	; 0x8a
 8003ee2:	05d2      	lsls	r2, r2, #23
 8003ee4:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003ee6:	1cbb      	adds	r3, r7, #2
 8003ee8:	7819      	ldrb	r1, [r3, #0]
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	2114      	movs	r1, #20
 8003ef4:	f7ff f9a4 	bl	8003240 <ICM_WriteOneByte>
	break;
 8003ef8:	e010      	b.n	8003f1c <ICM_AccConfig+0x10c>
	default:
		config_byte_acc = ACCEL_CONFIG_2G | ACC_FILTER;
 8003efa:	200f      	movs	r0, #15
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	2231      	movs	r2, #49	; 0x31
 8003f00:	701a      	strb	r2, [r3, #0]
		acc_scale_factor = ACCEL_SCALE_2G;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <ICM_AccConfig+0x16c>)
 8003f04:	228d      	movs	r2, #141	; 0x8d
 8003f06:	05d2      	lsls	r2, r2, #23
 8003f08:	601a      	str	r2, [r3, #0]
		ICM_WriteOneByte(hspi,REG_ACCEL_CONFIG,(uint8_t)config_byte_acc, index);
 8003f0a:	1cbb      	adds	r3, r7, #2
 8003f0c:	7819      	ldrb	r1, [r3, #0]
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	000b      	movs	r3, r1
 8003f16:	2114      	movs	r1, #20
 8003f18:	f7ff f992 	bl	8003240 <ICM_WriteOneByte>
	}

	HAL_Delay(20);
 8003f1c:	2014      	movs	r0, #20
 8003f1e:	f005 fc17 	bl	8009750 <HAL_Delay>

	uint8_t test1 = 0;
 8003f22:	210d      	movs	r1, #13
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
	uint8_t test2 = 0;
 8003f2a:	250c      	movs	r5, #12
 8003f2c:	197b      	adds	r3, r7, r5
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]

	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG, &test1, index);
 8003f32:	1cbb      	adds	r3, r7, #2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	000c      	movs	r4, r1
 8003f38:	187a      	adds	r2, r7, r1
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	2114      	movs	r1, #20
 8003f3e:	f7ff f93b 	bl	80031b8 <ICM_ReadOneByte>
	ICM_ReadOneByte(hspi, REG_ACCEL_CONFIG_2, &test2, index);
 8003f42:	1cbb      	adds	r3, r7, #2
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	197a      	adds	r2, r7, r5
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	2115      	movs	r1, #21
 8003f4c:	f7ff f934 	bl	80031b8 <ICM_ReadOneByte>

	if((test1 != config_byte_acc) || (test2 != config2)){
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	220f      	movs	r2, #15
 8003f56:	18ba      	adds	r2, r7, r2
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d106      	bne.n	8003f6c <ICM_AccConfig+0x15c>
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	220e      	movs	r2, #14
 8003f64:	18ba      	adds	r2, r7, r2
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <ICM_AccConfig+0x160>
		return 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <ICM_AccConfig+0x162>
	}else{
		return 1;
 8003f70:	2301      	movs	r3, #1
	}

}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	20000338 	.word	0x20000338

08003f80 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(SPI_HandleTypeDef *hspi, uint8_t index) {
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	000a      	movs	r2, r1
 8003f8a:	1cfb      	adds	r3, r7, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
	uint8_t test = 0x00;
 8003f8e:	210f      	movs	r1, #15
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
	ICM_ReadOneByte(hspi, REG_WHO_AM_I , &test, index);
 8003f96:	1cfb      	adds	r3, r7, #3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	000c      	movs	r4, r1
 8003f9c:	187a      	adds	r2, r7, r1
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f7ff f909 	bl	80031b8 <ICM_ReadOneByte>
	if (test != REG_WHO_AM_I_CONST)
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2bea      	cmp	r3, #234	; 0xea
 8003fac:	d001      	beq.n	8003fb2 <ICM_WHOAMI+0x32>
	{
		return 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <ICM_WHOAMI+0x34>
	} else {
		return 1;
 8003fb2:	2301      	movs	r3, #1
	}
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b005      	add	sp, #20
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <CalcQuaternionToEuler>:

/*Madgwick Filter Parameters */
static float Beta = 0.1;

void CalcQuaternionToEuler(struct quaternion quat, struct euler_angles* eu)
{
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	2608      	movs	r6, #8
 8003fc4:	19bc      	adds	r4, r7, r6
 8003fc6:	6020      	str	r0, [r4, #0]
 8003fc8:	6061      	str	r1, [r4, #4]
 8003fca:	60a2      	str	r2, [r4, #8]
 8003fcc:	60e3      	str	r3, [r4, #12]
	eu->roll = atan2((quat.q1*quat.q2 + quat.q3*quat.q4),0.5 - (quat.q2*quat.q2 + quat.q3*quat.q3))*RAD_2_DEG;
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	19bb      	adds	r3, r7, r6
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	1c19      	adds	r1, r3, #0
 8003fd8:	1c10      	adds	r0, r2, #0
 8003fda:	f7fc fe19 	bl	8000c10 <__aeabi_fmul>
 8003fde:	1c03      	adds	r3, r0, #0
 8003fe0:	1c1c      	adds	r4, r3, #0
 8003fe2:	19bb      	adds	r3, r7, r6
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	19bb      	adds	r3, r7, r6
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	1c19      	adds	r1, r3, #0
 8003fec:	1c10      	adds	r0, r2, #0
 8003fee:	f7fc fe0f 	bl	8000c10 <__aeabi_fmul>
 8003ff2:	1c03      	adds	r3, r0, #0
 8003ff4:	1c19      	adds	r1, r3, #0
 8003ff6:	1c20      	adds	r0, r4, #0
 8003ff8:	f7fc faa4 	bl	8000544 <__aeabi_fadd>
 8003ffc:	1c03      	adds	r3, r0, #0
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fe ff66 	bl	8002ed0 <__aeabi_f2d>
 8004004:	0004      	movs	r4, r0
 8004006:	000d      	movs	r5, r1
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	19bb      	adds	r3, r7, r6
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	1c19      	adds	r1, r3, #0
 8004012:	1c10      	adds	r0, r2, #0
 8004014:	f7fc fdfc 	bl	8000c10 <__aeabi_fmul>
 8004018:	1c03      	adds	r3, r0, #0
 800401a:	1c1e      	adds	r6, r3, #0
 800401c:	2108      	movs	r1, #8
 800401e:	187b      	adds	r3, r7, r1
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	187b      	adds	r3, r7, r1
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	1c19      	adds	r1, r3, #0
 8004028:	1c10      	adds	r0, r2, #0
 800402a:	f7fc fdf1 	bl	8000c10 <__aeabi_fmul>
 800402e:	1c03      	adds	r3, r0, #0
 8004030:	1c19      	adds	r1, r3, #0
 8004032:	1c30      	adds	r0, r6, #0
 8004034:	f7fc fa86 	bl	8000544 <__aeabi_fadd>
 8004038:	1c03      	adds	r3, r0, #0
 800403a:	1c18      	adds	r0, r3, #0
 800403c:	f7fe ff48 	bl	8002ed0 <__aeabi_f2d>
 8004040:	0002      	movs	r2, r0
 8004042:	000b      	movs	r3, r1
 8004044:	2000      	movs	r0, #0
 8004046:	4955      	ldr	r1, [pc, #340]	; (800419c <CalcQuaternionToEuler+0x1e0>)
 8004048:	f7fe fb06 	bl	8002658 <__aeabi_dsub>
 800404c:	0002      	movs	r2, r0
 800404e:	000b      	movs	r3, r1
 8004050:	0020      	movs	r0, r4
 8004052:	0029      	movs	r1, r5
 8004054:	f00b fe0a 	bl	800fc6c <atan2>
 8004058:	4a51      	ldr	r2, [pc, #324]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 800405a:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 800405c:	f7fe f890 	bl	8002180 <__aeabi_dmul>
 8004060:	0002      	movs	r2, r0
 8004062:	000b      	movs	r3, r1
 8004064:	0010      	movs	r0, r2
 8004066:	0019      	movs	r1, r3
 8004068:	f7fe ff7a 	bl	8002f60 <__aeabi_d2f>
 800406c:	1c02      	adds	r2, r0, #0
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	601a      	str	r2, [r3, #0]
	eu->pitch = asin(2.0*(quat.q1*quat.q3 - quat.q2*quat.q4))*RAD_2_DEG;
 8004072:	2508      	movs	r5, #8
 8004074:	197b      	adds	r3, r7, r5
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	197b      	adds	r3, r7, r5
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	1c19      	adds	r1, r3, #0
 800407e:	1c10      	adds	r0, r2, #0
 8004080:	f7fc fdc6 	bl	8000c10 <__aeabi_fmul>
 8004084:	1c03      	adds	r3, r0, #0
 8004086:	1c1c      	adds	r4, r3, #0
 8004088:	197b      	adds	r3, r7, r5
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	197b      	adds	r3, r7, r5
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	1c19      	adds	r1, r3, #0
 8004092:	1c10      	adds	r0, r2, #0
 8004094:	f7fc fdbc 	bl	8000c10 <__aeabi_fmul>
 8004098:	1c03      	adds	r3, r0, #0
 800409a:	1c19      	adds	r1, r3, #0
 800409c:	1c20      	adds	r0, r4, #0
 800409e:	f7fc fed1 	bl	8000e44 <__aeabi_fsub>
 80040a2:	1c03      	adds	r3, r0, #0
 80040a4:	1c18      	adds	r0, r3, #0
 80040a6:	f7fe ff13 	bl	8002ed0 <__aeabi_f2d>
 80040aa:	0002      	movs	r2, r0
 80040ac:	000b      	movs	r3, r1
 80040ae:	f7fd f8f7 	bl	80012a0 <__aeabi_dadd>
 80040b2:	0002      	movs	r2, r0
 80040b4:	000b      	movs	r3, r1
 80040b6:	0010      	movs	r0, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	f00b fda7 	bl	800fc0c <asin>
 80040be:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 80040c0:	4b38      	ldr	r3, [pc, #224]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 80040c2:	f7fe f85d 	bl	8002180 <__aeabi_dmul>
 80040c6:	0002      	movs	r2, r0
 80040c8:	000b      	movs	r3, r1
 80040ca:	0010      	movs	r0, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	f7fe ff47 	bl	8002f60 <__aeabi_d2f>
 80040d2:	1c02      	adds	r2, r0, #0
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	605a      	str	r2, [r3, #4]
	eu->yaw = -atan2((quat.q2*quat.q3 + quat.q1*quat.q4), 0.5 - (quat.q3*quat.q3 + quat.q4*quat.q4))*RAD_2_DEG;
 80040d8:	197b      	adds	r3, r7, r5
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	197b      	adds	r3, r7, r5
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	1c19      	adds	r1, r3, #0
 80040e2:	1c10      	adds	r0, r2, #0
 80040e4:	f7fc fd94 	bl	8000c10 <__aeabi_fmul>
 80040e8:	1c03      	adds	r3, r0, #0
 80040ea:	1c1c      	adds	r4, r3, #0
 80040ec:	197b      	adds	r3, r7, r5
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	002e      	movs	r6, r5
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	1c19      	adds	r1, r3, #0
 80040f8:	1c10      	adds	r0, r2, #0
 80040fa:	f7fc fd89 	bl	8000c10 <__aeabi_fmul>
 80040fe:	1c03      	adds	r3, r0, #0
 8004100:	1c19      	adds	r1, r3, #0
 8004102:	1c20      	adds	r0, r4, #0
 8004104:	f7fc fa1e 	bl	8000544 <__aeabi_fadd>
 8004108:	1c03      	adds	r3, r0, #0
 800410a:	1c18      	adds	r0, r3, #0
 800410c:	f7fe fee0 	bl	8002ed0 <__aeabi_f2d>
 8004110:	0004      	movs	r4, r0
 8004112:	000d      	movs	r5, r1
 8004114:	19bb      	adds	r3, r7, r6
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	19bb      	adds	r3, r7, r6
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	1c19      	adds	r1, r3, #0
 800411e:	1c10      	adds	r0, r2, #0
 8004120:	f7fc fd76 	bl	8000c10 <__aeabi_fmul>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c1e      	adds	r6, r3, #0
 8004128:	2108      	movs	r1, #8
 800412a:	187b      	adds	r3, r7, r1
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	187b      	adds	r3, r7, r1
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	1c19      	adds	r1, r3, #0
 8004134:	1c10      	adds	r0, r2, #0
 8004136:	f7fc fd6b 	bl	8000c10 <__aeabi_fmul>
 800413a:	1c03      	adds	r3, r0, #0
 800413c:	1c19      	adds	r1, r3, #0
 800413e:	1c30      	adds	r0, r6, #0
 8004140:	f7fc fa00 	bl	8000544 <__aeabi_fadd>
 8004144:	1c03      	adds	r3, r0, #0
 8004146:	1c18      	adds	r0, r3, #0
 8004148:	f7fe fec2 	bl	8002ed0 <__aeabi_f2d>
 800414c:	0002      	movs	r2, r0
 800414e:	000b      	movs	r3, r1
 8004150:	2000      	movs	r0, #0
 8004152:	4912      	ldr	r1, [pc, #72]	; (800419c <CalcQuaternionToEuler+0x1e0>)
 8004154:	f7fe fa80 	bl	8002658 <__aeabi_dsub>
 8004158:	0002      	movs	r2, r0
 800415a:	000b      	movs	r3, r1
 800415c:	0020      	movs	r0, r4
 800415e:	0029      	movs	r1, r5
 8004160:	f00b fd84 	bl	800fc6c <atan2>
 8004164:	0002      	movs	r2, r0
 8004166:	000b      	movs	r3, r1
 8004168:	0011      	movs	r1, r2
 800416a:	6039      	str	r1, [r7, #0]
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	0609      	lsls	r1, r1, #24
 8004170:	4059      	eors	r1, r3
 8004172:	6079      	str	r1, [r7, #4]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <CalcQuaternionToEuler+0x1e4>)
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <CalcQuaternionToEuler+0x1e8>)
 8004178:	6838      	ldr	r0, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	f7fe f800 	bl	8002180 <__aeabi_dmul>
 8004180:	0002      	movs	r2, r0
 8004182:	000b      	movs	r3, r1
 8004184:	0010      	movs	r0, r2
 8004186:	0019      	movs	r1, r3
 8004188:	f7fe feea 	bl	8002f60 <__aeabi_d2f>
 800418c:	1c02      	adds	r2, r0, #0
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	609a      	str	r2, [r3, #8]
}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b007      	add	sp, #28
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	3fe00000 	.word	0x3fe00000
 80041a0:	1a63c1f8 	.word	0x1a63c1f8
 80041a4:	404ca5dc 	.word	0x404ca5dc

080041a8 <CalcAccLinearToEuler>:
	eu_gyro_est->pitch += gyro_data[1]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
	eu_gyro_est->roll += gyro_data[0]*SAMPLE_TIME_ICM/1000.0*RAD_2_DEG;
}

void CalcAccLinearToEuler(float* accel_data, struct euler_angles* eu_acc_est)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
		float pitch = atan(accel_data[0]/accel_data[2])* RAD_2_DEG;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3308      	adds	r3, #8
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c19      	adds	r1, r3, #0
 80041be:	1c10      	adds	r0, r2, #0
 80041c0:	f7fc fb5c 	bl	800087c <__aeabi_fdiv>
 80041c4:	1c03      	adds	r3, r0, #0
 80041c6:	1c18      	adds	r0, r3, #0
 80041c8:	f7fe fe82 	bl	8002ed0 <__aeabi_f2d>
 80041cc:	0002      	movs	r2, r0
 80041ce:	000b      	movs	r3, r1
 80041d0:	0010      	movs	r0, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	f00b fb0e 	bl	800f7f4 <atan>
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <CalcAccLinearToEuler+0xe4>)
 80041da:	4b2d      	ldr	r3, [pc, #180]	; (8004290 <CalcAccLinearToEuler+0xe8>)
 80041dc:	f7fd ffd0 	bl	8002180 <__aeabi_dmul>
 80041e0:	0002      	movs	r2, r0
 80041e2:	000b      	movs	r3, r1
 80041e4:	0010      	movs	r0, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	f7fe feba 	bl	8002f60 <__aeabi_d2f>
 80041ec:	1c03      	adds	r3, r0, #0
 80041ee:	617b      	str	r3, [r7, #20]
		float roll = atan(accel_data[1]/sqrt(pow(accel_data[0],2) + pow(accel_data[2],2))) * RAD_2_DEG;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3304      	adds	r3, #4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fe fe6a 	bl	8002ed0 <__aeabi_f2d>
 80041fc:	0004      	movs	r4, r0
 80041fe:	000d      	movs	r5, r1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	1c18      	adds	r0, r3, #0
 8004206:	f7fe fe63 	bl	8002ed0 <__aeabi_f2d>
 800420a:	2200      	movs	r2, #0
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	05db      	lsls	r3, r3, #23
 8004210:	f00b fd30 	bl	800fc74 <pow>
 8004214:	6038      	str	r0, [r7, #0]
 8004216:	6079      	str	r1, [r7, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3308      	adds	r3, #8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	1c18      	adds	r0, r3, #0
 8004220:	f7fe fe56 	bl	8002ed0 <__aeabi_f2d>
 8004224:	2200      	movs	r2, #0
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	05db      	lsls	r3, r3, #23
 800422a:	f00b fd23 	bl	800fc74 <pow>
 800422e:	0002      	movs	r2, r0
 8004230:	000b      	movs	r3, r1
 8004232:	6838      	ldr	r0, [r7, #0]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	f7fd f833 	bl	80012a0 <__aeabi_dadd>
 800423a:	0002      	movs	r2, r0
 800423c:	000b      	movs	r3, r1
 800423e:	0010      	movs	r0, r2
 8004240:	0019      	movs	r1, r3
 8004242:	f00b fdcf 	bl	800fde4 <sqrt>
 8004246:	0002      	movs	r2, r0
 8004248:	000b      	movs	r3, r1
 800424a:	0020      	movs	r0, r4
 800424c:	0029      	movs	r1, r5
 800424e:	f7fd fb91 	bl	8001974 <__aeabi_ddiv>
 8004252:	0002      	movs	r2, r0
 8004254:	000b      	movs	r3, r1
 8004256:	0010      	movs	r0, r2
 8004258:	0019      	movs	r1, r3
 800425a:	f00b facb 	bl	800f7f4 <atan>
 800425e:	4a0b      	ldr	r2, [pc, #44]	; (800428c <CalcAccLinearToEuler+0xe4>)
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <CalcAccLinearToEuler+0xe8>)
 8004262:	f7fd ff8d 	bl	8002180 <__aeabi_dmul>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fe fe77 	bl	8002f60 <__aeabi_d2f>
 8004272:	1c03      	adds	r3, r0, #0
 8004274:	613b      	str	r3, [r7, #16]

	eu_acc_est->roll = roll;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	601a      	str	r2, [r3, #0]
	eu_acc_est->pitch = pitch;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bdb0      	pop	{r4, r5, r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	1a63c1f8 	.word	0x1a63c1f8
 8004290:	404ca5dc 	.word	0x404ca5dc

08004294 <MadgwickFilterXIO>:
	q->q4 = q4 * norm;
}

/* Credit to xio-technologies for open-source implementation https://github.com/xioTechnologies/Open-Source-AHRS-With-x-IMU*/
void MadgwickFilterXIO(float *gyro_data, float *accel_data, struct quaternion *q)
{
 8004294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004296:	b0a7      	sub	sp, #156	; 0x9c
 8004298:	af00      	add	r7, sp, #0
 800429a:	6178      	str	r0, [r7, #20]
 800429c:	6139      	str	r1, [r7, #16]
 800429e:	60fa      	str	r2, [r7, #12]
	float q1 = q->q1, q2 = q->q2, q3 = q->q3, q4 = q->q4;   // short name local variable for readability
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	268c      	movs	r6, #140	; 0x8c
 80042a6:	2108      	movs	r1, #8
 80042a8:	187a      	adds	r2, r7, r1
 80042aa:	1992      	adds	r2, r2, r6
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2488      	movs	r4, #136	; 0x88
 80042b4:	187a      	adds	r2, r7, r1
 80042b6:	1912      	adds	r2, r2, r4
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2584      	movs	r5, #132	; 0x84
 80042c0:	187a      	adds	r2, r7, r1
 80042c2:	1952      	adds	r2, r2, r5
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2680      	movs	r6, #128	; 0x80
 80042cc:	1878      	adds	r0, r7, r1
 80042ce:	1982      	adds	r2, r0, r6
 80042d0:	6013      	str	r3, [r2, #0]
	float ax = accel_data[0], ay = accel_data[1], az = accel_data[2];
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2084      	movs	r0, #132	; 0x84
 80042d8:	1838      	adds	r0, r7, r0
 80042da:	6003      	str	r3, [r0, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2080      	movs	r0, #128	; 0x80
 80042e2:	183a      	adds	r2, r7, r0
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	67fb      	str	r3, [r7, #124]	; 0x7c
	float gx = gyro_data[0]*DEG_2_RAD, gy = gyro_data[1]*DEG_2_RAD, gz = gyro_data[2]*DEG_2_RAD;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1c18      	adds	r0, r3, #0
 80042f2:	f7fe fded 	bl	8002ed0 <__aeabi_f2d>
 80042f6:	4afd      	ldr	r2, [pc, #1012]	; (80046ec <MadgwickFilterXIO+0x458>)
 80042f8:	4bfd      	ldr	r3, [pc, #1012]	; (80046f0 <MadgwickFilterXIO+0x45c>)
 80042fa:	f7fd ff41 	bl	8002180 <__aeabi_dmul>
 80042fe:	0002      	movs	r2, r0
 8004300:	000b      	movs	r3, r1
 8004302:	0010      	movs	r0, r2
 8004304:	0019      	movs	r1, r3
 8004306:	f7fe fe2b 	bl	8002f60 <__aeabi_d2f>
 800430a:	1c03      	adds	r3, r0, #0
 800430c:	67bb      	str	r3, [r7, #120]	; 0x78
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3304      	adds	r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1c18      	adds	r0, r3, #0
 8004316:	f7fe fddb 	bl	8002ed0 <__aeabi_f2d>
 800431a:	4af4      	ldr	r2, [pc, #976]	; (80046ec <MadgwickFilterXIO+0x458>)
 800431c:	4bf4      	ldr	r3, [pc, #976]	; (80046f0 <MadgwickFilterXIO+0x45c>)
 800431e:	f7fd ff2f 	bl	8002180 <__aeabi_dmul>
 8004322:	0002      	movs	r2, r0
 8004324:	000b      	movs	r3, r1
 8004326:	0010      	movs	r0, r2
 8004328:	0019      	movs	r1, r3
 800432a:	f7fe fe19 	bl	8002f60 <__aeabi_d2f>
 800432e:	1c03      	adds	r3, r0, #0
 8004330:	677b      	str	r3, [r7, #116]	; 0x74
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3308      	adds	r3, #8
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c18      	adds	r0, r3, #0
 800433a:	f7fe fdc9 	bl	8002ed0 <__aeabi_f2d>
 800433e:	4aeb      	ldr	r2, [pc, #940]	; (80046ec <MadgwickFilterXIO+0x458>)
 8004340:	4beb      	ldr	r3, [pc, #940]	; (80046f0 <MadgwickFilterXIO+0x45c>)
 8004342:	f7fd ff1d 	bl	8002180 <__aeabi_dmul>
 8004346:	0002      	movs	r2, r0
 8004348:	000b      	movs	r3, r1
 800434a:	0010      	movs	r0, r2
 800434c:	0019      	movs	r1, r3
 800434e:	f7fe fe07 	bl	8002f60 <__aeabi_d2f>
 8004352:	1c03      	adds	r3, r0, #0
 8004354:	673b      	str	r3, [r7, #112]	; 0x70
	float norm;
	float s1, s2, s3, s4;
	float qDot1, qDot2, qDot3, qDot4;

	// Auxiliary variables to avoid repeated arithmetic
	float _2q1 = 2.0 * q1;
 8004356:	238c      	movs	r3, #140	; 0x8c
 8004358:	2208      	movs	r2, #8
 800435a:	18b9      	adds	r1, r7, r2
 800435c:	18ca      	adds	r2, r1, r3
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	1c19      	adds	r1, r3, #0
 8004362:	1c18      	adds	r0, r3, #0
 8004364:	f7fc f8ee 	bl	8000544 <__aeabi_fadd>
 8004368:	1c03      	adds	r3, r0, #0
 800436a:	66fb      	str	r3, [r7, #108]	; 0x6c
	float _2q2 = 2.0 * q2;
 800436c:	2208      	movs	r2, #8
 800436e:	18bb      	adds	r3, r7, r2
 8004370:	191a      	adds	r2, r3, r4
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	1c19      	adds	r1, r3, #0
 8004376:	1c18      	adds	r0, r3, #0
 8004378:	f7fc f8e4 	bl	8000544 <__aeabi_fadd>
 800437c:	1c03      	adds	r3, r0, #0
 800437e:	66bb      	str	r3, [r7, #104]	; 0x68
	float _2q3 = 2.0 * q3;
 8004380:	2208      	movs	r2, #8
 8004382:	18bb      	adds	r3, r7, r2
 8004384:	195a      	adds	r2, r3, r5
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	1c19      	adds	r1, r3, #0
 800438a:	1c18      	adds	r0, r3, #0
 800438c:	f7fc f8da 	bl	8000544 <__aeabi_fadd>
 8004390:	1c03      	adds	r3, r0, #0
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
	float _2q4 = 2.0 * q4;
 8004394:	2208      	movs	r2, #8
 8004396:	18bb      	adds	r3, r7, r2
 8004398:	1999      	adds	r1, r3, r6
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	1c19      	adds	r1, r3, #0
 800439e:	1c18      	adds	r0, r3, #0
 80043a0:	f7fc f8d0 	bl	8000544 <__aeabi_fadd>
 80043a4:	1c03      	adds	r3, r0, #0
 80043a6:	663b      	str	r3, [r7, #96]	; 0x60
	float _4q1 = 4.0 * q1;
 80043a8:	2181      	movs	r1, #129	; 0x81
 80043aa:	05c9      	lsls	r1, r1, #23
 80043ac:	238c      	movs	r3, #140	; 0x8c
 80043ae:	001e      	movs	r6, r3
 80043b0:	2008      	movs	r0, #8
 80043b2:	4684      	mov	ip, r0
 80043b4:	44bc      	add	ip, r7
 80043b6:	4463      	add	r3, ip
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f7fc fc29 	bl	8000c10 <__aeabi_fmul>
 80043be:	1c03      	adds	r3, r0, #0
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
	float _4q2 = 4.0 * q2;
 80043c2:	2181      	movs	r1, #129	; 0x81
 80043c4:	05c9      	lsls	r1, r1, #23
 80043c6:	2208      	movs	r2, #8
 80043c8:	18bb      	adds	r3, r7, r2
 80043ca:	191b      	adds	r3, r3, r4
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f7fc fc1f 	bl	8000c10 <__aeabi_fmul>
 80043d2:	1c03      	adds	r3, r0, #0
 80043d4:	65bb      	str	r3, [r7, #88]	; 0x58
	float _4q3 = 4.0 * q3;
 80043d6:	2181      	movs	r1, #129	; 0x81
 80043d8:	05c9      	lsls	r1, r1, #23
 80043da:	2208      	movs	r2, #8
 80043dc:	18bb      	adds	r3, r7, r2
 80043de:	195b      	adds	r3, r3, r5
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	f7fc fc15 	bl	8000c10 <__aeabi_fmul>
 80043e6:	1c03      	adds	r3, r0, #0
 80043e8:	657b      	str	r3, [r7, #84]	; 0x54
	float _8q2 = 8.0 * q2;
 80043ea:	2182      	movs	r1, #130	; 0x82
 80043ec:	05c9      	lsls	r1, r1, #23
 80043ee:	2208      	movs	r2, #8
 80043f0:	18bb      	adds	r3, r7, r2
 80043f2:	191b      	adds	r3, r3, r4
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	f7fc fc0b 	bl	8000c10 <__aeabi_fmul>
 80043fa:	1c03      	adds	r3, r0, #0
 80043fc:	653b      	str	r3, [r7, #80]	; 0x50
	float _8q3 = 8.0 * q3;
 80043fe:	2182      	movs	r1, #130	; 0x82
 8004400:	05c9      	lsls	r1, r1, #23
 8004402:	2208      	movs	r2, #8
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	195b      	adds	r3, r3, r5
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f7fc fc01 	bl	8000c10 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c
	float q1q1 = q1 * q1;
 8004412:	0033      	movs	r3, r6
 8004414:	2208      	movs	r2, #8
 8004416:	18b9      	adds	r1, r7, r2
 8004418:	18c9      	adds	r1, r1, r3
 800441a:	6809      	ldr	r1, [r1, #0]
 800441c:	18be      	adds	r6, r7, r2
 800441e:	18f0      	adds	r0, r6, r3
 8004420:	6800      	ldr	r0, [r0, #0]
 8004422:	f7fc fbf5 	bl	8000c10 <__aeabi_fmul>
 8004426:	1c03      	adds	r3, r0, #0
 8004428:	64bb      	str	r3, [r7, #72]	; 0x48
	float q2q2 = q2 * q2;
 800442a:	0026      	movs	r6, r4
 800442c:	2308      	movs	r3, #8
 800442e:	18fa      	adds	r2, r7, r3
 8004430:	1991      	adds	r1, r2, r6
 8004432:	6809      	ldr	r1, [r1, #0]
 8004434:	18fa      	adds	r2, r7, r3
 8004436:	1994      	adds	r4, r2, r6
 8004438:	6820      	ldr	r0, [r4, #0]
 800443a:	f7fc fbe9 	bl	8000c10 <__aeabi_fmul>
 800443e:	1c03      	adds	r3, r0, #0
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
	float q3q3 = q3 * q3;
 8004442:	2308      	movs	r3, #8
 8004444:	18fa      	adds	r2, r7, r3
 8004446:	1951      	adds	r1, r2, r5
 8004448:	6809      	ldr	r1, [r1, #0]
 800444a:	18fa      	adds	r2, r7, r3
 800444c:	1954      	adds	r4, r2, r5
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	f7fc fbde 	bl	8000c10 <__aeabi_fmul>
 8004454:	1c03      	adds	r3, r0, #0
 8004456:	643b      	str	r3, [r7, #64]	; 0x40
	float q4q4 = q4 * q4;
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	2308      	movs	r3, #8
 800445c:	18f9      	adds	r1, r7, r3
 800445e:	1889      	adds	r1, r1, r2
 8004460:	6809      	ldr	r1, [r1, #0]
 8004462:	18fc      	adds	r4, r7, r3
 8004464:	18a4      	adds	r4, r4, r2
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	f7fc fbd2 	bl	8000c10 <__aeabi_fmul>
 800446c:	1c03      	adds	r3, r0, #0
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8004470:	2484      	movs	r4, #132	; 0x84
 8004472:	1939      	adds	r1, r7, r4
 8004474:	6809      	ldr	r1, [r1, #0]
 8004476:	1938      	adds	r0, r7, r4
 8004478:	6800      	ldr	r0, [r0, #0]
 800447a:	f7fc fbc9 	bl	8000c10 <__aeabi_fmul>
 800447e:	1c03      	adds	r3, r0, #0
 8004480:	1c1c      	adds	r4, r3, #0
 8004482:	2580      	movs	r5, #128	; 0x80
 8004484:	1979      	adds	r1, r7, r5
 8004486:	6809      	ldr	r1, [r1, #0]
 8004488:	1978      	adds	r0, r7, r5
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	f7fc fbc0 	bl	8000c10 <__aeabi_fmul>
 8004490:	1c03      	adds	r3, r0, #0
 8004492:	1c19      	adds	r1, r3, #0
 8004494:	1c20      	adds	r0, r4, #0
 8004496:	f7fc f855 	bl	8000544 <__aeabi_fadd>
 800449a:	1c03      	adds	r3, r0, #0
 800449c:	1c1c      	adds	r4, r3, #0
 800449e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044a0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80044a2:	f7fc fbb5 	bl	8000c10 <__aeabi_fmul>
 80044a6:	1c03      	adds	r3, r0, #0
 80044a8:	1c19      	adds	r1, r3, #0
 80044aa:	1c20      	adds	r0, r4, #0
 80044ac:	f7fc f84a 	bl	8000544 <__aeabi_fadd>
 80044b0:	1c03      	adds	r3, r0, #0
 80044b2:	1c18      	adds	r0, r3, #0
 80044b4:	f7fe fd0c 	bl	8002ed0 <__aeabi_f2d>
 80044b8:	0002      	movs	r2, r0
 80044ba:	000b      	movs	r3, r1
 80044bc:	0010      	movs	r0, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	f00b fc90 	bl	800fde4 <sqrt>
 80044c4:	0002      	movs	r2, r0
 80044c6:	000b      	movs	r3, r1
 80044c8:	0010      	movs	r0, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	f7fe fd48 	bl	8002f60 <__aeabi_d2f>
 80044d0:	1c03      	adds	r3, r0, #0
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (norm == 0) return; // handle NaN
 80044d4:	2100      	movs	r1, #0
 80044d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044d8:	f7fb ffee 	bl	80004b8 <__aeabi_fcmpeq>
 80044dc:	1e03      	subs	r3, r0, #0
 80044de:	d001      	beq.n	80044e4 <MadgwickFilterXIO+0x250>
 80044e0:	f000 fc8a 	bl	8004df8 <MadgwickFilterXIO+0xb64>
	norm = 1.0 / norm;        // use reciprocal for division
 80044e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044e6:	20fe      	movs	r0, #254	; 0xfe
 80044e8:	0580      	lsls	r0, r0, #22
 80044ea:	f7fc f9c7 	bl	800087c <__aeabi_fdiv>
 80044ee:	1c03      	adds	r3, r0, #0
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
	ax *= norm;
 80044f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f4:	2484      	movs	r4, #132	; 0x84
 80044f6:	1938      	adds	r0, r7, r4
 80044f8:	6800      	ldr	r0, [r0, #0]
 80044fa:	f7fc fb89 	bl	8000c10 <__aeabi_fmul>
 80044fe:	1c03      	adds	r3, r0, #0
 8004500:	1939      	adds	r1, r7, r4
 8004502:	600b      	str	r3, [r1, #0]
	ay *= norm;
 8004504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004506:	197a      	adds	r2, r7, r5
 8004508:	6810      	ldr	r0, [r2, #0]
 800450a:	f7fc fb81 	bl	8000c10 <__aeabi_fmul>
 800450e:	1c03      	adds	r3, r0, #0
 8004510:	1979      	adds	r1, r7, r5
 8004512:	600b      	str	r3, [r1, #0]
	az *= norm;
 8004514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004516:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004518:	f7fc fb7a 	bl	8000c10 <__aeabi_fmul>
 800451c:	1c03      	adds	r3, r0, #0
 800451e:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Gradient decent algorithm corrective step
	s1 = _4q1 * q3q3 + _2q3 * ax + _4q1 * q2q2 - _2q2 * ay;
 8004520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004522:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004524:	f7fc fb74 	bl	8000c10 <__aeabi_fmul>
 8004528:	1c03      	adds	r3, r0, #0
 800452a:	1c1c      	adds	r4, r3, #0
 800452c:	2084      	movs	r0, #132	; 0x84
 800452e:	1839      	adds	r1, r7, r0
 8004530:	6809      	ldr	r1, [r1, #0]
 8004532:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004534:	f7fc fb6c 	bl	8000c10 <__aeabi_fmul>
 8004538:	1c03      	adds	r3, r0, #0
 800453a:	1c19      	adds	r1, r3, #0
 800453c:	1c20      	adds	r0, r4, #0
 800453e:	f7fc f801 	bl	8000544 <__aeabi_fadd>
 8004542:	1c03      	adds	r3, r0, #0
 8004544:	1c1c      	adds	r4, r3, #0
 8004546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004548:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800454a:	f7fc fb61 	bl	8000c10 <__aeabi_fmul>
 800454e:	1c03      	adds	r3, r0, #0
 8004550:	1c19      	adds	r1, r3, #0
 8004552:	1c20      	adds	r0, r4, #0
 8004554:	f7fb fff6 	bl	8000544 <__aeabi_fadd>
 8004558:	1c03      	adds	r3, r0, #0
 800455a:	1c1c      	adds	r4, r3, #0
 800455c:	197a      	adds	r2, r7, r5
 800455e:	6811      	ldr	r1, [r2, #0]
 8004560:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004562:	f7fc fb55 	bl	8000c10 <__aeabi_fmul>
 8004566:	1c03      	adds	r3, r0, #0
 8004568:	1c19      	adds	r1, r3, #0
 800456a:	1c20      	adds	r0, r4, #0
 800456c:	f7fc fc6a 	bl	8000e44 <__aeabi_fsub>
 8004570:	1c03      	adds	r3, r0, #0
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
	s2 = _4q2 * q4q4 - _2q4 * ax + 4.0 * q1q1 * q2 - _2q1 * ay - _4q2 + _8q2 * q2q2 + _8q2 * q3q3 + _4q2 * az;
 8004574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004576:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004578:	f7fc fb4a 	bl	8000c10 <__aeabi_fmul>
 800457c:	1c03      	adds	r3, r0, #0
 800457e:	1c1c      	adds	r4, r3, #0
 8004580:	2084      	movs	r0, #132	; 0x84
 8004582:	183a      	adds	r2, r7, r0
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004588:	f7fc fb42 	bl	8000c10 <__aeabi_fmul>
 800458c:	1c03      	adds	r3, r0, #0
 800458e:	1c19      	adds	r1, r3, #0
 8004590:	1c20      	adds	r0, r4, #0
 8004592:	f7fc fc57 	bl	8000e44 <__aeabi_fsub>
 8004596:	1c03      	adds	r3, r0, #0
 8004598:	1c18      	adds	r0, r3, #0
 800459a:	f7fe fc99 	bl	8002ed0 <__aeabi_f2d>
 800459e:	0004      	movs	r4, r0
 80045a0:	000d      	movs	r5, r1
 80045a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80045a4:	f7fe fc94 	bl	8002ed0 <__aeabi_f2d>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <MadgwickFilterXIO+0x460>)
 80045ac:	f7fd fde8 	bl	8002180 <__aeabi_dmul>
 80045b0:	0002      	movs	r2, r0
 80045b2:	000b      	movs	r3, r1
 80045b4:	603a      	str	r2, [r7, #0]
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	2208      	movs	r2, #8
 80045ba:	18bb      	adds	r3, r7, r2
 80045bc:	1999      	adds	r1, r3, r6
 80045be:	6808      	ldr	r0, [r1, #0]
 80045c0:	f7fe fc86 	bl	8002ed0 <__aeabi_f2d>
 80045c4:	0002      	movs	r2, r0
 80045c6:	000b      	movs	r3, r1
 80045c8:	6838      	ldr	r0, [r7, #0]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	f7fd fdd8 	bl	8002180 <__aeabi_dmul>
 80045d0:	0002      	movs	r2, r0
 80045d2:	000b      	movs	r3, r1
 80045d4:	0020      	movs	r0, r4
 80045d6:	0029      	movs	r1, r5
 80045d8:	f7fc fe62 	bl	80012a0 <__aeabi_dadd>
 80045dc:	0002      	movs	r2, r0
 80045de:	000b      	movs	r3, r1
 80045e0:	0014      	movs	r4, r2
 80045e2:	001d      	movs	r5, r3
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	187b      	adds	r3, r7, r1
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045ec:	f7fc fb10 	bl	8000c10 <__aeabi_fmul>
 80045f0:	1c03      	adds	r3, r0, #0
 80045f2:	1c18      	adds	r0, r3, #0
 80045f4:	f7fe fc6c 	bl	8002ed0 <__aeabi_f2d>
 80045f8:	0002      	movs	r2, r0
 80045fa:	000b      	movs	r3, r1
 80045fc:	0020      	movs	r0, r4
 80045fe:	0029      	movs	r1, r5
 8004600:	f7fe f82a 	bl	8002658 <__aeabi_dsub>
 8004604:	0002      	movs	r2, r0
 8004606:	000b      	movs	r3, r1
 8004608:	0014      	movs	r4, r2
 800460a:	001d      	movs	r5, r3
 800460c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800460e:	f7fe fc5f 	bl	8002ed0 <__aeabi_f2d>
 8004612:	0002      	movs	r2, r0
 8004614:	000b      	movs	r3, r1
 8004616:	0020      	movs	r0, r4
 8004618:	0029      	movs	r1, r5
 800461a:	f7fe f81d 	bl	8002658 <__aeabi_dsub>
 800461e:	0002      	movs	r2, r0
 8004620:	000b      	movs	r3, r1
 8004622:	0014      	movs	r4, r2
 8004624:	001d      	movs	r5, r3
 8004626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004628:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800462a:	f7fc faf1 	bl	8000c10 <__aeabi_fmul>
 800462e:	1c03      	adds	r3, r0, #0
 8004630:	1c18      	adds	r0, r3, #0
 8004632:	f7fe fc4d 	bl	8002ed0 <__aeabi_f2d>
 8004636:	0002      	movs	r2, r0
 8004638:	000b      	movs	r3, r1
 800463a:	0020      	movs	r0, r4
 800463c:	0029      	movs	r1, r5
 800463e:	f7fc fe2f 	bl	80012a0 <__aeabi_dadd>
 8004642:	0002      	movs	r2, r0
 8004644:	000b      	movs	r3, r1
 8004646:	0014      	movs	r4, r2
 8004648:	001d      	movs	r5, r3
 800464a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800464e:	f7fc fadf 	bl	8000c10 <__aeabi_fmul>
 8004652:	1c03      	adds	r3, r0, #0
 8004654:	1c18      	adds	r0, r3, #0
 8004656:	f7fe fc3b 	bl	8002ed0 <__aeabi_f2d>
 800465a:	0002      	movs	r2, r0
 800465c:	000b      	movs	r3, r1
 800465e:	0020      	movs	r0, r4
 8004660:	0029      	movs	r1, r5
 8004662:	f7fc fe1d 	bl	80012a0 <__aeabi_dadd>
 8004666:	0002      	movs	r2, r0
 8004668:	000b      	movs	r3, r1
 800466a:	0014      	movs	r4, r2
 800466c:	001d      	movs	r5, r3
 800466e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004670:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004672:	f7fc facd 	bl	8000c10 <__aeabi_fmul>
 8004676:	1c03      	adds	r3, r0, #0
 8004678:	1c18      	adds	r0, r3, #0
 800467a:	f7fe fc29 	bl	8002ed0 <__aeabi_f2d>
 800467e:	0002      	movs	r2, r0
 8004680:	000b      	movs	r3, r1
 8004682:	0020      	movs	r0, r4
 8004684:	0029      	movs	r1, r5
 8004686:	f7fc fe0b 	bl	80012a0 <__aeabi_dadd>
 800468a:	0002      	movs	r2, r0
 800468c:	000b      	movs	r3, r1
 800468e:	0010      	movs	r0, r2
 8004690:	0019      	movs	r1, r3
 8004692:	f7fe fc65 	bl	8002f60 <__aeabi_d2f>
 8004696:	1c03      	adds	r3, r0, #0
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
	s3 = 4.0 * q1q1 * q3 + _2q1 * ax + _4q3 * q4q4 - _2q4 * ay - _4q3 + _8q3 * q2q2 + _8q3 * q3q3 + _4q3 * az;
 800469a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800469c:	f7fe fc18 	bl	8002ed0 <__aeabi_f2d>
 80046a0:	2200      	movs	r2, #0
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <MadgwickFilterXIO+0x460>)
 80046a4:	f7fd fd6c 	bl	8002180 <__aeabi_dmul>
 80046a8:	0002      	movs	r2, r0
 80046aa:	000b      	movs	r3, r1
 80046ac:	0014      	movs	r4, r2
 80046ae:	001d      	movs	r5, r3
 80046b0:	2384      	movs	r3, #132	; 0x84
 80046b2:	2208      	movs	r2, #8
 80046b4:	18ba      	adds	r2, r7, r2
 80046b6:	18d1      	adds	r1, r2, r3
 80046b8:	6808      	ldr	r0, [r1, #0]
 80046ba:	f7fe fc09 	bl	8002ed0 <__aeabi_f2d>
 80046be:	0002      	movs	r2, r0
 80046c0:	000b      	movs	r3, r1
 80046c2:	0020      	movs	r0, r4
 80046c4:	0029      	movs	r1, r5
 80046c6:	f7fd fd5b 	bl	8002180 <__aeabi_dmul>
 80046ca:	0002      	movs	r2, r0
 80046cc:	000b      	movs	r3, r1
 80046ce:	0014      	movs	r4, r2
 80046d0:	001d      	movs	r5, r3
 80046d2:	2084      	movs	r0, #132	; 0x84
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046da:	f7fc fa99 	bl	8000c10 <__aeabi_fmul>
 80046de:	1c03      	adds	r3, r0, #0
 80046e0:	1c18      	adds	r0, r3, #0
 80046e2:	f7fe fbf5 	bl	8002ed0 <__aeabi_f2d>
 80046e6:	0002      	movs	r2, r0
 80046e8:	e006      	b.n	80046f8 <MadgwickFilterXIO+0x464>
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	a2529d39 	.word	0xa2529d39
 80046f0:	3f91df46 	.word	0x3f91df46
 80046f4:	40100000 	.word	0x40100000
 80046f8:	000b      	movs	r3, r1
 80046fa:	0020      	movs	r0, r4
 80046fc:	0029      	movs	r1, r5
 80046fe:	f7fc fdcf 	bl	80012a0 <__aeabi_dadd>
 8004702:	0002      	movs	r2, r0
 8004704:	000b      	movs	r3, r1
 8004706:	0014      	movs	r4, r2
 8004708:	001d      	movs	r5, r3
 800470a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800470c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800470e:	f7fc fa7f 	bl	8000c10 <__aeabi_fmul>
 8004712:	1c03      	adds	r3, r0, #0
 8004714:	1c18      	adds	r0, r3, #0
 8004716:	f7fe fbdb 	bl	8002ed0 <__aeabi_f2d>
 800471a:	0002      	movs	r2, r0
 800471c:	000b      	movs	r3, r1
 800471e:	0020      	movs	r0, r4
 8004720:	0029      	movs	r1, r5
 8004722:	f7fc fdbd 	bl	80012a0 <__aeabi_dadd>
 8004726:	0002      	movs	r2, r0
 8004728:	000b      	movs	r3, r1
 800472a:	0014      	movs	r4, r2
 800472c:	001d      	movs	r5, r3
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	1879      	adds	r1, r7, r1
 8004732:	6809      	ldr	r1, [r1, #0]
 8004734:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004736:	f7fc fa6b 	bl	8000c10 <__aeabi_fmul>
 800473a:	1c03      	adds	r3, r0, #0
 800473c:	1c18      	adds	r0, r3, #0
 800473e:	f7fe fbc7 	bl	8002ed0 <__aeabi_f2d>
 8004742:	0002      	movs	r2, r0
 8004744:	000b      	movs	r3, r1
 8004746:	0020      	movs	r0, r4
 8004748:	0029      	movs	r1, r5
 800474a:	f7fd ff85 	bl	8002658 <__aeabi_dsub>
 800474e:	0002      	movs	r2, r0
 8004750:	000b      	movs	r3, r1
 8004752:	0014      	movs	r4, r2
 8004754:	001d      	movs	r5, r3
 8004756:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004758:	f7fe fbba 	bl	8002ed0 <__aeabi_f2d>
 800475c:	0002      	movs	r2, r0
 800475e:	000b      	movs	r3, r1
 8004760:	0020      	movs	r0, r4
 8004762:	0029      	movs	r1, r5
 8004764:	f7fd ff78 	bl	8002658 <__aeabi_dsub>
 8004768:	0002      	movs	r2, r0
 800476a:	000b      	movs	r3, r1
 800476c:	0014      	movs	r4, r2
 800476e:	001d      	movs	r5, r3
 8004770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004772:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004774:	f7fc fa4c 	bl	8000c10 <__aeabi_fmul>
 8004778:	1c03      	adds	r3, r0, #0
 800477a:	1c18      	adds	r0, r3, #0
 800477c:	f7fe fba8 	bl	8002ed0 <__aeabi_f2d>
 8004780:	0002      	movs	r2, r0
 8004782:	000b      	movs	r3, r1
 8004784:	0020      	movs	r0, r4
 8004786:	0029      	movs	r1, r5
 8004788:	f7fc fd8a 	bl	80012a0 <__aeabi_dadd>
 800478c:	0002      	movs	r2, r0
 800478e:	000b      	movs	r3, r1
 8004790:	0014      	movs	r4, r2
 8004792:	001d      	movs	r5, r3
 8004794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004796:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004798:	f7fc fa3a 	bl	8000c10 <__aeabi_fmul>
 800479c:	1c03      	adds	r3, r0, #0
 800479e:	1c18      	adds	r0, r3, #0
 80047a0:	f7fe fb96 	bl	8002ed0 <__aeabi_f2d>
 80047a4:	0002      	movs	r2, r0
 80047a6:	000b      	movs	r3, r1
 80047a8:	0020      	movs	r0, r4
 80047aa:	0029      	movs	r1, r5
 80047ac:	f7fc fd78 	bl	80012a0 <__aeabi_dadd>
 80047b0:	0002      	movs	r2, r0
 80047b2:	000b      	movs	r3, r1
 80047b4:	0014      	movs	r4, r2
 80047b6:	001d      	movs	r5, r3
 80047b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80047bc:	f7fc fa28 	bl	8000c10 <__aeabi_fmul>
 80047c0:	1c03      	adds	r3, r0, #0
 80047c2:	1c18      	adds	r0, r3, #0
 80047c4:	f7fe fb84 	bl	8002ed0 <__aeabi_f2d>
 80047c8:	0002      	movs	r2, r0
 80047ca:	000b      	movs	r3, r1
 80047cc:	0020      	movs	r0, r4
 80047ce:	0029      	movs	r1, r5
 80047d0:	f7fc fd66 	bl	80012a0 <__aeabi_dadd>
 80047d4:	0002      	movs	r2, r0
 80047d6:	000b      	movs	r3, r1
 80047d8:	0010      	movs	r0, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	f7fe fbc0 	bl	8002f60 <__aeabi_d2f>
 80047e0:	1c03      	adds	r3, r0, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 = 4.0 * q2q2 * q4 - _2q2 * ax + 4.0 * q3q3 * q4 - _2q3 * ay;
 80047e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80047e6:	f7fe fb73 	bl	8002ed0 <__aeabi_f2d>
 80047ea:	2200      	movs	r2, #0
 80047ec:	4bfd      	ldr	r3, [pc, #1012]	; (8004be4 <MadgwickFilterXIO+0x950>)
 80047ee:	f7fd fcc7 	bl	8002180 <__aeabi_dmul>
 80047f2:	0002      	movs	r2, r0
 80047f4:	000b      	movs	r3, r1
 80047f6:	0014      	movs	r4, r2
 80047f8:	001d      	movs	r5, r3
 80047fa:	2280      	movs	r2, #128	; 0x80
 80047fc:	2308      	movs	r3, #8
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	1899      	adds	r1, r3, r2
 8004802:	6808      	ldr	r0, [r1, #0]
 8004804:	f7fe fb64 	bl	8002ed0 <__aeabi_f2d>
 8004808:	0002      	movs	r2, r0
 800480a:	000b      	movs	r3, r1
 800480c:	0020      	movs	r0, r4
 800480e:	0029      	movs	r1, r5
 8004810:	f7fd fcb6 	bl	8002180 <__aeabi_dmul>
 8004814:	0002      	movs	r2, r0
 8004816:	000b      	movs	r3, r1
 8004818:	0014      	movs	r4, r2
 800481a:	001d      	movs	r5, r3
 800481c:	2084      	movs	r0, #132	; 0x84
 800481e:	1838      	adds	r0, r7, r0
 8004820:	6801      	ldr	r1, [r0, #0]
 8004822:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004824:	f7fc f9f4 	bl	8000c10 <__aeabi_fmul>
 8004828:	1c03      	adds	r3, r0, #0
 800482a:	1c18      	adds	r0, r3, #0
 800482c:	f7fe fb50 	bl	8002ed0 <__aeabi_f2d>
 8004830:	0002      	movs	r2, r0
 8004832:	000b      	movs	r3, r1
 8004834:	0020      	movs	r0, r4
 8004836:	0029      	movs	r1, r5
 8004838:	f7fd ff0e 	bl	8002658 <__aeabi_dsub>
 800483c:	0002      	movs	r2, r0
 800483e:	000b      	movs	r3, r1
 8004840:	0014      	movs	r4, r2
 8004842:	001d      	movs	r5, r3
 8004844:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004846:	f7fe fb43 	bl	8002ed0 <__aeabi_f2d>
 800484a:	2200      	movs	r2, #0
 800484c:	4be5      	ldr	r3, [pc, #916]	; (8004be4 <MadgwickFilterXIO+0x950>)
 800484e:	f7fd fc97 	bl	8002180 <__aeabi_dmul>
 8004852:	0002      	movs	r2, r0
 8004854:	000b      	movs	r3, r1
 8004856:	603a      	str	r2, [r7, #0]
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	2008      	movs	r0, #8
 800485e:	4684      	mov	ip, r0
 8004860:	44bc      	add	ip, r7
 8004862:	4461      	add	r1, ip
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	f7fe fb33 	bl	8002ed0 <__aeabi_f2d>
 800486a:	0002      	movs	r2, r0
 800486c:	000b      	movs	r3, r1
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	f7fd fc85 	bl	8002180 <__aeabi_dmul>
 8004876:	0002      	movs	r2, r0
 8004878:	000b      	movs	r3, r1
 800487a:	0020      	movs	r0, r4
 800487c:	0029      	movs	r1, r5
 800487e:	f7fc fd0f 	bl	80012a0 <__aeabi_dadd>
 8004882:	0002      	movs	r2, r0
 8004884:	000b      	movs	r3, r1
 8004886:	0014      	movs	r4, r2
 8004888:	001d      	movs	r5, r3
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	18ba      	adds	r2, r7, r2
 800488e:	6811      	ldr	r1, [r2, #0]
 8004890:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004892:	f7fc f9bd 	bl	8000c10 <__aeabi_fmul>
 8004896:	1c03      	adds	r3, r0, #0
 8004898:	1c18      	adds	r0, r3, #0
 800489a:	f7fe fb19 	bl	8002ed0 <__aeabi_f2d>
 800489e:	0002      	movs	r2, r0
 80048a0:	000b      	movs	r3, r1
 80048a2:	0020      	movs	r0, r4
 80048a4:	0029      	movs	r1, r5
 80048a6:	f7fd fed7 	bl	8002658 <__aeabi_dsub>
 80048aa:	0002      	movs	r2, r0
 80048ac:	000b      	movs	r3, r1
 80048ae:	0010      	movs	r0, r2
 80048b0:	0019      	movs	r1, r3
 80048b2:	f7fe fb55 	bl	8002f60 <__aeabi_d2f>
 80048b6:	1c03      	adds	r3, r0, #0
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
	norm = 1.0 / sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80048ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048be:	f7fc f9a7 	bl	8000c10 <__aeabi_fmul>
 80048c2:	1c03      	adds	r3, r0, #0
 80048c4:	1c1c      	adds	r4, r3, #0
 80048c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048ca:	f7fc f9a1 	bl	8000c10 <__aeabi_fmul>
 80048ce:	1c03      	adds	r3, r0, #0
 80048d0:	1c19      	adds	r1, r3, #0
 80048d2:	1c20      	adds	r0, r4, #0
 80048d4:	f7fb fe36 	bl	8000544 <__aeabi_fadd>
 80048d8:	1c03      	adds	r3, r0, #0
 80048da:	1c1c      	adds	r4, r3, #0
 80048dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048e0:	f7fc f996 	bl	8000c10 <__aeabi_fmul>
 80048e4:	1c03      	adds	r3, r0, #0
 80048e6:	1c19      	adds	r1, r3, #0
 80048e8:	1c20      	adds	r0, r4, #0
 80048ea:	f7fb fe2b 	bl	8000544 <__aeabi_fadd>
 80048ee:	1c03      	adds	r3, r0, #0
 80048f0:	1c1c      	adds	r4, r3, #0
 80048f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f6:	f7fc f98b 	bl	8000c10 <__aeabi_fmul>
 80048fa:	1c03      	adds	r3, r0, #0
 80048fc:	1c19      	adds	r1, r3, #0
 80048fe:	1c20      	adds	r0, r4, #0
 8004900:	f7fb fe20 	bl	8000544 <__aeabi_fadd>
 8004904:	1c03      	adds	r3, r0, #0
 8004906:	1c18      	adds	r0, r3, #0
 8004908:	f7fe fae2 	bl	8002ed0 <__aeabi_f2d>
 800490c:	0002      	movs	r2, r0
 800490e:	000b      	movs	r3, r1
 8004910:	0010      	movs	r0, r2
 8004912:	0019      	movs	r1, r3
 8004914:	f00b fa66 	bl	800fde4 <sqrt>
 8004918:	0002      	movs	r2, r0
 800491a:	000b      	movs	r3, r1
 800491c:	2000      	movs	r0, #0
 800491e:	49b2      	ldr	r1, [pc, #712]	; (8004be8 <MadgwickFilterXIO+0x954>)
 8004920:	f7fd f828 	bl	8001974 <__aeabi_ddiv>
 8004924:	0002      	movs	r2, r0
 8004926:	000b      	movs	r3, r1
 8004928:	0010      	movs	r0, r2
 800492a:	0019      	movs	r1, r3
 800492c:	f7fe fb18 	bl	8002f60 <__aeabi_d2f>
 8004930:	1c03      	adds	r3, r0, #0
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
	s1 *= norm;
 8004934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004938:	f7fc f96a 	bl	8000c10 <__aeabi_fmul>
 800493c:	1c03      	adds	r3, r0, #0
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
	s2 *= norm;
 8004940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004944:	f7fc f964 	bl	8000c10 <__aeabi_fmul>
 8004948:	1c03      	adds	r3, r0, #0
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
	s3 *= norm;
 800494c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800494e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004950:	f7fc f95e 	bl	8000c10 <__aeabi_fmul>
 8004954:	1c03      	adds	r3, r0, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
	s4 *= norm;
 8004958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495c:	f7fc f958 	bl	8000c10 <__aeabi_fmul>
 8004960:	1c03      	adds	r3, r0, #0
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28

	// Compute rate of change of quaternion
	qDot1 = 0.5 * (-q2 * gx - q3 * gy - q4 * gz) - Beta * s1;
 8004964:	2508      	movs	r5, #8
 8004966:	197b      	adds	r3, r7, r5
 8004968:	199c      	adds	r4, r3, r6
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	0612      	lsls	r2, r2, #24
 8004970:	4053      	eors	r3, r2
 8004972:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004974:	1c18      	adds	r0, r3, #0
 8004976:	f7fc f94b 	bl	8000c10 <__aeabi_fmul>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	1c1c      	adds	r4, r3, #0
 800497e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004980:	2384      	movs	r3, #132	; 0x84
 8004982:	197a      	adds	r2, r7, r5
 8004984:	18d5      	adds	r5, r2, r3
 8004986:	6828      	ldr	r0, [r5, #0]
 8004988:	f7fc f942 	bl	8000c10 <__aeabi_fmul>
 800498c:	1c03      	adds	r3, r0, #0
 800498e:	1c19      	adds	r1, r3, #0
 8004990:	1c20      	adds	r0, r4, #0
 8004992:	f7fc fa57 	bl	8000e44 <__aeabi_fsub>
 8004996:	1c03      	adds	r3, r0, #0
 8004998:	1c1c      	adds	r4, r3, #0
 800499a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800499c:	2280      	movs	r2, #128	; 0x80
 800499e:	2508      	movs	r5, #8
 80049a0:	197b      	adds	r3, r7, r5
 80049a2:	189d      	adds	r5, r3, r2
 80049a4:	6828      	ldr	r0, [r5, #0]
 80049a6:	f7fc f933 	bl	8000c10 <__aeabi_fmul>
 80049aa:	1c03      	adds	r3, r0, #0
 80049ac:	1c19      	adds	r1, r3, #0
 80049ae:	1c20      	adds	r0, r4, #0
 80049b0:	f7fc fa48 	bl	8000e44 <__aeabi_fsub>
 80049b4:	1c03      	adds	r3, r0, #0
 80049b6:	1c18      	adds	r0, r3, #0
 80049b8:	f7fe fa8a 	bl	8002ed0 <__aeabi_f2d>
 80049bc:	2200      	movs	r2, #0
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <MadgwickFilterXIO+0x958>)
 80049c0:	f7fd fbde 	bl	8002180 <__aeabi_dmul>
 80049c4:	0002      	movs	r2, r0
 80049c6:	000b      	movs	r3, r1
 80049c8:	0014      	movs	r4, r2
 80049ca:	001d      	movs	r5, r3
 80049cc:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <MadgwickFilterXIO+0x95c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80049d2:	1c18      	adds	r0, r3, #0
 80049d4:	f7fc f91c 	bl	8000c10 <__aeabi_fmul>
 80049d8:	1c03      	adds	r3, r0, #0
 80049da:	1c18      	adds	r0, r3, #0
 80049dc:	f7fe fa78 	bl	8002ed0 <__aeabi_f2d>
 80049e0:	0002      	movs	r2, r0
 80049e2:	000b      	movs	r3, r1
 80049e4:	0020      	movs	r0, r4
 80049e6:	0029      	movs	r1, r5
 80049e8:	f7fd fe36 	bl	8002658 <__aeabi_dsub>
 80049ec:	0002      	movs	r2, r0
 80049ee:	000b      	movs	r3, r1
 80049f0:	0010      	movs	r0, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	f7fe fab4 	bl	8002f60 <__aeabi_d2f>
 80049f8:	1c03      	adds	r3, r0, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
	qDot2 = 0.5 * (q1 * gx + q3 * gz - q4 * gy) - Beta * s2;
 80049fc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049fe:	208c      	movs	r0, #140	; 0x8c
 8004a00:	2508      	movs	r5, #8
 8004a02:	197b      	adds	r3, r7, r5
 8004a04:	181c      	adds	r4, r3, r0
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	f7fc f902 	bl	8000c10 <__aeabi_fmul>
 8004a0c:	1c03      	adds	r3, r0, #0
 8004a0e:	1c1c      	adds	r4, r3, #0
 8004a10:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004a12:	2384      	movs	r3, #132	; 0x84
 8004a14:	197a      	adds	r2, r7, r5
 8004a16:	18d5      	adds	r5, r2, r3
 8004a18:	6828      	ldr	r0, [r5, #0]
 8004a1a:	f7fc f8f9 	bl	8000c10 <__aeabi_fmul>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	1c19      	adds	r1, r3, #0
 8004a22:	1c20      	adds	r0, r4, #0
 8004a24:	f7fb fd8e 	bl	8000544 <__aeabi_fadd>
 8004a28:	1c03      	adds	r3, r0, #0
 8004a2a:	1c1c      	adds	r4, r3, #0
 8004a2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	2508      	movs	r5, #8
 8004a32:	197b      	adds	r3, r7, r5
 8004a34:	189d      	adds	r5, r3, r2
 8004a36:	6828      	ldr	r0, [r5, #0]
 8004a38:	f7fc f8ea 	bl	8000c10 <__aeabi_fmul>
 8004a3c:	1c03      	adds	r3, r0, #0
 8004a3e:	1c19      	adds	r1, r3, #0
 8004a40:	1c20      	adds	r0, r4, #0
 8004a42:	f7fc f9ff 	bl	8000e44 <__aeabi_fsub>
 8004a46:	1c03      	adds	r3, r0, #0
 8004a48:	1c18      	adds	r0, r3, #0
 8004a4a:	f7fe fa41 	bl	8002ed0 <__aeabi_f2d>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4b66      	ldr	r3, [pc, #408]	; (8004bec <MadgwickFilterXIO+0x958>)
 8004a52:	f7fd fb95 	bl	8002180 <__aeabi_dmul>
 8004a56:	0002      	movs	r2, r0
 8004a58:	000b      	movs	r3, r1
 8004a5a:	0014      	movs	r4, r2
 8004a5c:	001d      	movs	r5, r3
 8004a5e:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <MadgwickFilterXIO+0x95c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a64:	1c18      	adds	r0, r3, #0
 8004a66:	f7fc f8d3 	bl	8000c10 <__aeabi_fmul>
 8004a6a:	1c03      	adds	r3, r0, #0
 8004a6c:	1c18      	adds	r0, r3, #0
 8004a6e:	f7fe fa2f 	bl	8002ed0 <__aeabi_f2d>
 8004a72:	0002      	movs	r2, r0
 8004a74:	000b      	movs	r3, r1
 8004a76:	0020      	movs	r0, r4
 8004a78:	0029      	movs	r1, r5
 8004a7a:	f7fd fded 	bl	8002658 <__aeabi_dsub>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	000b      	movs	r3, r1
 8004a82:	0010      	movs	r0, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	f7fe fa6b 	bl	8002f60 <__aeabi_d2f>
 8004a8a:	1c03      	adds	r3, r0, #0
 8004a8c:	623b      	str	r3, [r7, #32]
	qDot3 = 0.5 * (q1 * gy - q2 * gz + q4 * gx) - Beta * s3;
 8004a8e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a90:	208c      	movs	r0, #140	; 0x8c
 8004a92:	2508      	movs	r5, #8
 8004a94:	197b      	adds	r3, r7, r5
 8004a96:	181c      	adds	r4, r3, r0
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	f7fc f8b9 	bl	8000c10 <__aeabi_fmul>
 8004a9e:	1c03      	adds	r3, r0, #0
 8004aa0:	1c1c      	adds	r4, r3, #0
 8004aa2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004aa4:	197b      	adds	r3, r7, r5
 8004aa6:	199d      	adds	r5, r3, r6
 8004aa8:	6828      	ldr	r0, [r5, #0]
 8004aaa:	f7fc f8b1 	bl	8000c10 <__aeabi_fmul>
 8004aae:	1c03      	adds	r3, r0, #0
 8004ab0:	1c19      	adds	r1, r3, #0
 8004ab2:	1c20      	adds	r0, r4, #0
 8004ab4:	f7fc f9c6 	bl	8000e44 <__aeabi_fsub>
 8004ab8:	1c03      	adds	r3, r0, #0
 8004aba:	1c1c      	adds	r4, r3, #0
 8004abc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	2508      	movs	r5, #8
 8004ac2:	197b      	adds	r3, r7, r5
 8004ac4:	189d      	adds	r5, r3, r2
 8004ac6:	6828      	ldr	r0, [r5, #0]
 8004ac8:	f7fc f8a2 	bl	8000c10 <__aeabi_fmul>
 8004acc:	1c03      	adds	r3, r0, #0
 8004ace:	1c19      	adds	r1, r3, #0
 8004ad0:	1c20      	adds	r0, r4, #0
 8004ad2:	f7fb fd37 	bl	8000544 <__aeabi_fadd>
 8004ad6:	1c03      	adds	r3, r0, #0
 8004ad8:	1c18      	adds	r0, r3, #0
 8004ada:	f7fe f9f9 	bl	8002ed0 <__aeabi_f2d>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4b42      	ldr	r3, [pc, #264]	; (8004bec <MadgwickFilterXIO+0x958>)
 8004ae2:	f7fd fb4d 	bl	8002180 <__aeabi_dmul>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	000b      	movs	r3, r1
 8004aea:	0014      	movs	r4, r2
 8004aec:	001d      	movs	r5, r3
 8004aee:	4b40      	ldr	r3, [pc, #256]	; (8004bf0 <MadgwickFilterXIO+0x95c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004af4:	1c18      	adds	r0, r3, #0
 8004af6:	f7fc f88b 	bl	8000c10 <__aeabi_fmul>
 8004afa:	1c03      	adds	r3, r0, #0
 8004afc:	1c18      	adds	r0, r3, #0
 8004afe:	f7fe f9e7 	bl	8002ed0 <__aeabi_f2d>
 8004b02:	0002      	movs	r2, r0
 8004b04:	000b      	movs	r3, r1
 8004b06:	0020      	movs	r0, r4
 8004b08:	0029      	movs	r1, r5
 8004b0a:	f7fd fda5 	bl	8002658 <__aeabi_dsub>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	000b      	movs	r3, r1
 8004b12:	0010      	movs	r0, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	f7fe fa23 	bl	8002f60 <__aeabi_d2f>
 8004b1a:	1c03      	adds	r3, r0, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
	qDot4 = 0.5 * (q1 * gz + q2 * gy - q3 * gx) - Beta * s4;
 8004b1e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004b20:	208c      	movs	r0, #140	; 0x8c
 8004b22:	2508      	movs	r5, #8
 8004b24:	197b      	adds	r3, r7, r5
 8004b26:	181c      	adds	r4, r3, r0
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	f7fc f871 	bl	8000c10 <__aeabi_fmul>
 8004b2e:	1c03      	adds	r3, r0, #0
 8004b30:	1c1c      	adds	r4, r3, #0
 8004b32:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004b34:	197b      	adds	r3, r7, r5
 8004b36:	199d      	adds	r5, r3, r6
 8004b38:	6828      	ldr	r0, [r5, #0]
 8004b3a:	f7fc f869 	bl	8000c10 <__aeabi_fmul>
 8004b3e:	1c03      	adds	r3, r0, #0
 8004b40:	1c19      	adds	r1, r3, #0
 8004b42:	1c20      	adds	r0, r4, #0
 8004b44:	f7fb fcfe 	bl	8000544 <__aeabi_fadd>
 8004b48:	1c03      	adds	r3, r0, #0
 8004b4a:	1c1c      	adds	r4, r3, #0
 8004b4c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004b4e:	2384      	movs	r3, #132	; 0x84
 8004b50:	2208      	movs	r2, #8
 8004b52:	18b8      	adds	r0, r7, r2
 8004b54:	18c5      	adds	r5, r0, r3
 8004b56:	6828      	ldr	r0, [r5, #0]
 8004b58:	f7fc f85a 	bl	8000c10 <__aeabi_fmul>
 8004b5c:	1c03      	adds	r3, r0, #0
 8004b5e:	1c19      	adds	r1, r3, #0
 8004b60:	1c20      	adds	r0, r4, #0
 8004b62:	f7fc f96f 	bl	8000e44 <__aeabi_fsub>
 8004b66:	1c03      	adds	r3, r0, #0
 8004b68:	1c18      	adds	r0, r3, #0
 8004b6a:	f7fe f9b1 	bl	8002ed0 <__aeabi_f2d>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <MadgwickFilterXIO+0x958>)
 8004b72:	f7fd fb05 	bl	8002180 <__aeabi_dmul>
 8004b76:	0002      	movs	r2, r0
 8004b78:	000b      	movs	r3, r1
 8004b7a:	0014      	movs	r4, r2
 8004b7c:	001d      	movs	r5, r3
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <MadgwickFilterXIO+0x95c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b84:	1c18      	adds	r0, r3, #0
 8004b86:	f7fc f843 	bl	8000c10 <__aeabi_fmul>
 8004b8a:	1c03      	adds	r3, r0, #0
 8004b8c:	1c18      	adds	r0, r3, #0
 8004b8e:	f7fe f99f 	bl	8002ed0 <__aeabi_f2d>
 8004b92:	0002      	movs	r2, r0
 8004b94:	000b      	movs	r3, r1
 8004b96:	0020      	movs	r0, r4
 8004b98:	0029      	movs	r1, r5
 8004b9a:	f7fd fd5d 	bl	8002658 <__aeabi_dsub>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	000b      	movs	r3, r1
 8004ba2:	0010      	movs	r0, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	f7fe f9db 	bl	8002f60 <__aeabi_d2f>
 8004baa:	1c03      	adds	r3, r0, #0
 8004bac:	61bb      	str	r3, [r7, #24]

	// Integrate to yield quaternion
	q1 += qDot1 * SAMPLE_TIME_ICM/1000.0;
 8004bae:	208c      	movs	r0, #140	; 0x8c
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	18bb      	adds	r3, r7, r2
 8004bb4:	1819      	adds	r1, r3, r0
 8004bb6:	6808      	ldr	r0, [r1, #0]
 8004bb8:	f7fe f98a 	bl	8002ed0 <__aeabi_f2d>
 8004bbc:	0004      	movs	r4, r0
 8004bbe:	000d      	movs	r5, r1
 8004bc0:	490c      	ldr	r1, [pc, #48]	; (8004bf4 <MadgwickFilterXIO+0x960>)
 8004bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc4:	f7fc f824 	bl	8000c10 <__aeabi_fmul>
 8004bc8:	1c03      	adds	r3, r0, #0
 8004bca:	1c18      	adds	r0, r3, #0
 8004bcc:	f7fe f980 	bl	8002ed0 <__aeabi_f2d>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MadgwickFilterXIO+0x964>)
 8004bd4:	f7fc fece 	bl	8001974 <__aeabi_ddiv>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	000b      	movs	r3, r1
 8004bdc:	0020      	movs	r0, r4
 8004bde:	0029      	movs	r1, r5
 8004be0:	e00c      	b.n	8004bfc <MadgwickFilterXIO+0x968>
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	40100000 	.word	0x40100000
 8004be8:	3ff00000 	.word	0x3ff00000
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	41f00000 	.word	0x41f00000
 8004bf8:	408f4000 	.word	0x408f4000
 8004bfc:	f7fc fb50 	bl	80012a0 <__aeabi_dadd>
 8004c00:	0002      	movs	r2, r0
 8004c02:	000b      	movs	r3, r1
 8004c04:	0010      	movs	r0, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	f7fe f9aa 	bl	8002f60 <__aeabi_d2f>
 8004c0c:	1c03      	adds	r3, r0, #0
 8004c0e:	208c      	movs	r0, #140	; 0x8c
 8004c10:	2208      	movs	r2, #8
 8004c12:	18b9      	adds	r1, r7, r2
 8004c14:	1809      	adds	r1, r1, r0
 8004c16:	600b      	str	r3, [r1, #0]
	q2 += qDot2 * SAMPLE_TIME_ICM/1000.0;
 8004c18:	18bb      	adds	r3, r7, r2
 8004c1a:	1999      	adds	r1, r3, r6
 8004c1c:	6808      	ldr	r0, [r1, #0]
 8004c1e:	f7fe f957 	bl	8002ed0 <__aeabi_f2d>
 8004c22:	0004      	movs	r4, r0
 8004c24:	000d      	movs	r5, r1
 8004c26:	4976      	ldr	r1, [pc, #472]	; (8004e00 <MadgwickFilterXIO+0xb6c>)
 8004c28:	6a38      	ldr	r0, [r7, #32]
 8004c2a:	f7fb fff1 	bl	8000c10 <__aeabi_fmul>
 8004c2e:	1c03      	adds	r3, r0, #0
 8004c30:	1c18      	adds	r0, r3, #0
 8004c32:	f7fe f94d 	bl	8002ed0 <__aeabi_f2d>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4b72      	ldr	r3, [pc, #456]	; (8004e04 <MadgwickFilterXIO+0xb70>)
 8004c3a:	f7fc fe9b 	bl	8001974 <__aeabi_ddiv>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	000b      	movs	r3, r1
 8004c42:	0020      	movs	r0, r4
 8004c44:	0029      	movs	r1, r5
 8004c46:	f7fc fb2b 	bl	80012a0 <__aeabi_dadd>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	000b      	movs	r3, r1
 8004c4e:	0010      	movs	r0, r2
 8004c50:	0019      	movs	r1, r3
 8004c52:	f7fe f985 	bl	8002f60 <__aeabi_d2f>
 8004c56:	1c03      	adds	r3, r0, #0
 8004c58:	2008      	movs	r0, #8
 8004c5a:	183a      	adds	r2, r7, r0
 8004c5c:	1991      	adds	r1, r2, r6
 8004c5e:	600b      	str	r3, [r1, #0]
	q3 += qDot3 * SAMPLE_TIME_ICM/1000.0;
 8004c60:	2384      	movs	r3, #132	; 0x84
 8004c62:	183a      	adds	r2, r7, r0
 8004c64:	18d1      	adds	r1, r2, r3
 8004c66:	6808      	ldr	r0, [r1, #0]
 8004c68:	f7fe f932 	bl	8002ed0 <__aeabi_f2d>
 8004c6c:	0004      	movs	r4, r0
 8004c6e:	000d      	movs	r5, r1
 8004c70:	4963      	ldr	r1, [pc, #396]	; (8004e00 <MadgwickFilterXIO+0xb6c>)
 8004c72:	69f8      	ldr	r0, [r7, #28]
 8004c74:	f7fb ffcc 	bl	8000c10 <__aeabi_fmul>
 8004c78:	1c03      	adds	r3, r0, #0
 8004c7a:	1c18      	adds	r0, r3, #0
 8004c7c:	f7fe f928 	bl	8002ed0 <__aeabi_f2d>
 8004c80:	2200      	movs	r2, #0
 8004c82:	4b60      	ldr	r3, [pc, #384]	; (8004e04 <MadgwickFilterXIO+0xb70>)
 8004c84:	f7fc fe76 	bl	8001974 <__aeabi_ddiv>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	000b      	movs	r3, r1
 8004c8c:	0020      	movs	r0, r4
 8004c8e:	0029      	movs	r1, r5
 8004c90:	f7fc fb06 	bl	80012a0 <__aeabi_dadd>
 8004c94:	0002      	movs	r2, r0
 8004c96:	000b      	movs	r3, r1
 8004c98:	0010      	movs	r0, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	f7fe f960 	bl	8002f60 <__aeabi_d2f>
 8004ca0:	1c03      	adds	r3, r0, #0
 8004ca2:	2584      	movs	r5, #132	; 0x84
 8004ca4:	2008      	movs	r0, #8
 8004ca6:	183a      	adds	r2, r7, r0
 8004ca8:	1951      	adds	r1, r2, r5
 8004caa:	600b      	str	r3, [r1, #0]
	q4 += qDot4 * SAMPLE_TIME_ICM/1000.0;
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	1899      	adds	r1, r3, r2
 8004cb2:	6808      	ldr	r0, [r1, #0]
 8004cb4:	f7fe f90c 	bl	8002ed0 <__aeabi_f2d>
 8004cb8:	0004      	movs	r4, r0
 8004cba:	000d      	movs	r5, r1
 8004cbc:	4950      	ldr	r1, [pc, #320]	; (8004e00 <MadgwickFilterXIO+0xb6c>)
 8004cbe:	69b8      	ldr	r0, [r7, #24]
 8004cc0:	f7fb ffa6 	bl	8000c10 <__aeabi_fmul>
 8004cc4:	1c03      	adds	r3, r0, #0
 8004cc6:	1c18      	adds	r0, r3, #0
 8004cc8:	f7fe f902 	bl	8002ed0 <__aeabi_f2d>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <MadgwickFilterXIO+0xb70>)
 8004cd0:	f7fc fe50 	bl	8001974 <__aeabi_ddiv>
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	000b      	movs	r3, r1
 8004cd8:	0020      	movs	r0, r4
 8004cda:	0029      	movs	r1, r5
 8004cdc:	f7fc fae0 	bl	80012a0 <__aeabi_dadd>
 8004ce0:	0002      	movs	r2, r0
 8004ce2:	000b      	movs	r3, r1
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	f7fe f93a 	bl	8002f60 <__aeabi_d2f>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	2508      	movs	r5, #8
 8004cf2:	1979      	adds	r1, r7, r5
 8004cf4:	1889      	adds	r1, r1, r2
 8004cf6:	600b      	str	r3, [r1, #0]

	norm = 1 / (float) sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004cf8:	208c      	movs	r0, #140	; 0x8c
 8004cfa:	197b      	adds	r3, r7, r5
 8004cfc:	1819      	adds	r1, r3, r0
 8004cfe:	6809      	ldr	r1, [r1, #0]
 8004d00:	197b      	adds	r3, r7, r5
 8004d02:	181c      	adds	r4, r3, r0
 8004d04:	6820      	ldr	r0, [r4, #0]
 8004d06:	f7fb ff83 	bl	8000c10 <__aeabi_fmul>
 8004d0a:	1c03      	adds	r3, r0, #0
 8004d0c:	1c1c      	adds	r4, r3, #0
 8004d0e:	197b      	adds	r3, r7, r5
 8004d10:	1999      	adds	r1, r3, r6
 8004d12:	6809      	ldr	r1, [r1, #0]
 8004d14:	197b      	adds	r3, r7, r5
 8004d16:	199a      	adds	r2, r3, r6
 8004d18:	6810      	ldr	r0, [r2, #0]
 8004d1a:	f7fb ff79 	bl	8000c10 <__aeabi_fmul>
 8004d1e:	1c03      	adds	r3, r0, #0
 8004d20:	1c19      	adds	r1, r3, #0
 8004d22:	1c20      	adds	r0, r4, #0
 8004d24:	f7fb fc0e 	bl	8000544 <__aeabi_fadd>
 8004d28:	1c03      	adds	r3, r0, #0
 8004d2a:	1c1c      	adds	r4, r3, #0
 8004d2c:	2584      	movs	r5, #132	; 0x84
 8004d2e:	2008      	movs	r0, #8
 8004d30:	183b      	adds	r3, r7, r0
 8004d32:	1959      	adds	r1, r3, r5
 8004d34:	6809      	ldr	r1, [r1, #0]
 8004d36:	183b      	adds	r3, r7, r0
 8004d38:	195a      	adds	r2, r3, r5
 8004d3a:	6810      	ldr	r0, [r2, #0]
 8004d3c:	f7fb ff68 	bl	8000c10 <__aeabi_fmul>
 8004d40:	1c03      	adds	r3, r0, #0
 8004d42:	1c19      	adds	r1, r3, #0
 8004d44:	1c20      	adds	r0, r4, #0
 8004d46:	f7fb fbfd 	bl	8000544 <__aeabi_fadd>
 8004d4a:	1c03      	adds	r3, r0, #0
 8004d4c:	1c1c      	adds	r4, r3, #0
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	2008      	movs	r0, #8
 8004d52:	183a      	adds	r2, r7, r0
 8004d54:	18d2      	adds	r2, r2, r3
 8004d56:	6811      	ldr	r1, [r2, #0]
 8004d58:	183a      	adds	r2, r7, r0
 8004d5a:	18d2      	adds	r2, r2, r3
 8004d5c:	6810      	ldr	r0, [r2, #0]
 8004d5e:	f7fb ff57 	bl	8000c10 <__aeabi_fmul>
 8004d62:	1c03      	adds	r3, r0, #0
 8004d64:	1c19      	adds	r1, r3, #0
 8004d66:	1c20      	adds	r0, r4, #0
 8004d68:	f7fb fbec 	bl	8000544 <__aeabi_fadd>
 8004d6c:	1c03      	adds	r3, r0, #0
 8004d6e:	1c18      	adds	r0, r3, #0
 8004d70:	f7fe f8ae 	bl	8002ed0 <__aeabi_f2d>
 8004d74:	0002      	movs	r2, r0
 8004d76:	000b      	movs	r3, r1
 8004d78:	0010      	movs	r0, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	f00b f832 	bl	800fde4 <sqrt>
 8004d80:	0002      	movs	r2, r0
 8004d82:	000b      	movs	r3, r1
 8004d84:	0010      	movs	r0, r2
 8004d86:	0019      	movs	r1, r3
 8004d88:	f7fe f8ea 	bl	8002f60 <__aeabi_d2f>
 8004d8c:	1c03      	adds	r3, r0, #0
 8004d8e:	1c19      	adds	r1, r3, #0
 8004d90:	20fe      	movs	r0, #254	; 0xfe
 8004d92:	0580      	lsls	r0, r0, #22
 8004d94:	f7fb fd72 	bl	800087c <__aeabi_fdiv>
 8004d98:	1c03      	adds	r3, r0, #0
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	q->q1 = q1 * norm;
 8004d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9e:	208c      	movs	r0, #140	; 0x8c
 8004da0:	2408      	movs	r4, #8
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	181a      	adds	r2, r3, r0
 8004da6:	6810      	ldr	r0, [r2, #0]
 8004da8:	f7fb ff32 	bl	8000c10 <__aeabi_fmul>
 8004dac:	1c03      	adds	r3, r0, #0
 8004dae:	1c1a      	adds	r2, r3, #0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]
	q->q2 = q2 * norm;
 8004db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	199a      	adds	r2, r3, r6
 8004dba:	6810      	ldr	r0, [r2, #0]
 8004dbc:	f7fb ff28 	bl	8000c10 <__aeabi_fmul>
 8004dc0:	1c03      	adds	r3, r0, #0
 8004dc2:	1c1a      	adds	r2, r3, #0
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
	q->q3 = q3 * norm;
 8004dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dca:	193b      	adds	r3, r7, r4
 8004dcc:	195a      	adds	r2, r3, r5
 8004dce:	6810      	ldr	r0, [r2, #0]
 8004dd0:	f7fb ff1e 	bl	8000c10 <__aeabi_fmul>
 8004dd4:	1c03      	adds	r3, r0, #0
 8004dd6:	1c1a      	adds	r2, r3, #0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]
	q->q4 = q4 * norm;
 8004ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	2208      	movs	r2, #8
 8004de2:	4694      	mov	ip, r2
 8004de4:	44bc      	add	ip, r7
 8004de6:	4463      	add	r3, ip
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	f7fb ff11 	bl	8000c10 <__aeabi_fmul>
 8004dee:	1c03      	adds	r3, r0, #0
 8004df0:	1c1a      	adds	r2, r3, #0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	e000      	b.n	8004dfa <MadgwickFilterXIO+0xb66>
	if (norm == 0) return; // handle NaN
 8004df8:	46c0      	nop			; (mov r8, r8)
}
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b027      	add	sp, #156	; 0x9c
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	41f00000 	.word	0x41f00000
 8004e04:	408f4000 	.word	0x408f4000

08004e08 <GyroLowPassFilter1>:
	q->q3 = q2;
	q->q4 = q3;
}

void GyroLowPassFilter1(float *gyro_data, float* prev_filt, float* filt, float a)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	681c      	ldr	r4, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	1c19      	adds	r1, r3, #0
 8004e24:	1c10      	adds	r0, r2, #0
 8004e26:	f7fc f80d 	bl	8000e44 <__aeabi_fsub>
 8004e2a:	1c03      	adds	r3, r0, #0
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	1c18      	adds	r0, r3, #0
 8004e30:	f7fb feee 	bl	8000c10 <__aeabi_fmul>
 8004e34:	1c03      	adds	r3, r0, #0
 8004e36:	1c19      	adds	r1, r3, #0
 8004e38:	1c20      	adds	r0, r4, #0
 8004e3a:	f7fb fb83 	bl	8000544 <__aeabi_fadd>
 8004e3e:	1c03      	adds	r3, r0, #0
 8004e40:	1c1a      	adds	r2, r3, #0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681d      	ldr	r5, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	3304      	adds	r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1c19      	adds	r1, r3, #0
 8004e5a:	1c10      	adds	r0, r2, #0
 8004e5c:	f7fb fff2 	bl	8000e44 <__aeabi_fsub>
 8004e60:	1c03      	adds	r3, r0, #0
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	1c18      	adds	r0, r3, #0
 8004e66:	f7fb fed3 	bl	8000c10 <__aeabi_fmul>
 8004e6a:	1c03      	adds	r3, r0, #0
 8004e6c:	1c1a      	adds	r2, r3, #0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1d1c      	adds	r4, r3, #4
 8004e72:	1c11      	adds	r1, r2, #0
 8004e74:	1c28      	adds	r0, r5, #0
 8004e76:	f7fb fb65 	bl	8000544 <__aeabi_fadd>
 8004e7a:	1c03      	adds	r3, r0, #0
 8004e7c:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3308      	adds	r3, #8
 8004e82:	681d      	ldr	r5, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3308      	adds	r3, #8
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	1c19      	adds	r1, r3, #0
 8004e92:	1c10      	adds	r0, r2, #0
 8004e94:	f7fb ffd6 	bl	8000e44 <__aeabi_fsub>
 8004e98:	1c03      	adds	r3, r0, #0
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	1c18      	adds	r0, r3, #0
 8004e9e:	f7fb feb7 	bl	8000c10 <__aeabi_fmul>
 8004ea2:	1c03      	adds	r3, r0, #0
 8004ea4:	1c1a      	adds	r2, r3, #0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	001c      	movs	r4, r3
 8004eac:	1c11      	adds	r1, r2, #0
 8004eae:	1c28      	adds	r0, r5, #0
 8004eb0:	f7fb fb48 	bl	8000544 <__aeabi_fadd>
 8004eb4:	1c03      	adds	r3, r0, #0
 8004eb6:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6852      	ldr	r2, [r2, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6892      	ldr	r2, [r2, #8]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b004      	add	sp, #16
 8004eda:	bdb0      	pop	{r4, r5, r7, pc}

08004edc <GyroLowPassFilter2>:

void GyroLowPassFilter2(float *gyro_data, float* prev_filt, float* filt, float a)
{
 8004edc:	b5b0      	push	{r4, r5, r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
	// Calculating new high-pass filtered data
	filt[0] = prev_filt[0] + a*(gyro_data[0] - prev_filt[0]);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	681c      	ldr	r4, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1c19      	adds	r1, r3, #0
 8004ef8:	1c10      	adds	r0, r2, #0
 8004efa:	f7fb ffa3 	bl	8000e44 <__aeabi_fsub>
 8004efe:	1c03      	adds	r3, r0, #0
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	1c18      	adds	r0, r3, #0
 8004f04:	f7fb fe84 	bl	8000c10 <__aeabi_fmul>
 8004f08:	1c03      	adds	r3, r0, #0
 8004f0a:	1c19      	adds	r1, r3, #0
 8004f0c:	1c20      	adds	r0, r4, #0
 8004f0e:	f7fb fb19 	bl	8000544 <__aeabi_fadd>
 8004f12:	1c03      	adds	r3, r0, #0
 8004f14:	1c1a      	adds	r2, r3, #0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
	filt[1] = prev_filt[1] + a*(gyro_data[1] - prev_filt[1]);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	681d      	ldr	r5, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3304      	adds	r3, #4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	1c19      	adds	r1, r3, #0
 8004f2e:	1c10      	adds	r0, r2, #0
 8004f30:	f7fb ff88 	bl	8000e44 <__aeabi_fsub>
 8004f34:	1c03      	adds	r3, r0, #0
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	1c18      	adds	r0, r3, #0
 8004f3a:	f7fb fe69 	bl	8000c10 <__aeabi_fmul>
 8004f3e:	1c03      	adds	r3, r0, #0
 8004f40:	1c1a      	adds	r2, r3, #0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	1d1c      	adds	r4, r3, #4
 8004f46:	1c11      	adds	r1, r2, #0
 8004f48:	1c28      	adds	r0, r5, #0
 8004f4a:	f7fb fafb 	bl	8000544 <__aeabi_fadd>
 8004f4e:	1c03      	adds	r3, r0, #0
 8004f50:	6023      	str	r3, [r4, #0]
	filt[2] = prev_filt[2] + a*(gyro_data[2] - prev_filt[2]);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	3308      	adds	r3, #8
 8004f56:	681d      	ldr	r5, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3308      	adds	r3, #8
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	1c19      	adds	r1, r3, #0
 8004f66:	1c10      	adds	r0, r2, #0
 8004f68:	f7fb ff6c 	bl	8000e44 <__aeabi_fsub>
 8004f6c:	1c03      	adds	r3, r0, #0
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	1c18      	adds	r0, r3, #0
 8004f72:	f7fb fe4d 	bl	8000c10 <__aeabi_fmul>
 8004f76:	1c03      	adds	r3, r0, #0
 8004f78:	1c1a      	adds	r2, r3, #0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	001c      	movs	r4, r3
 8004f80:	1c11      	adds	r1, r2, #0
 8004f82:	1c28      	adds	r0, r5, #0
 8004f84:	f7fb fade 	bl	8000544 <__aeabi_fadd>
 8004f88:	1c03      	adds	r3, r0, #0
 8004f8a:	6023      	str	r3, [r4, #0]

	prev_filt[0] = filt[0];
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	601a      	str	r2, [r3, #0]
	prev_filt[1] = filt[1];
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	3304      	adds	r3, #4
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
	prev_filt[2] = filt[2];
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	601a      	str	r2, [r3, #0]
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b004      	add	sp, #16
 8004fae:	bdb0      	pop	{r4, r5, r7, pc}

08004fb0 <CalculateRotationMatrix>:
	quad->q3 /= length;
	quad->q4 /= length;

}

void CalculateRotationMatrix(float* acc_bias, struct matrix *RotationMatrix){
 8004fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb2:	b0a7      	sub	sp, #156	; 0x9c
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	struct matrix Roll;
	struct matrix Pitch;
	struct matrix Yaw;
	struct matrix YawTimesPitch;

	Roll.a11 = 1.0;
 8004fba:	2474      	movs	r4, #116	; 0x74
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	22fe      	movs	r2, #254	; 0xfe
 8004fc0:	0592      	lsls	r2, r2, #22
 8004fc2:	601a      	str	r2, [r3, #0]
	Roll.a12 = 0.0;
 8004fc4:	193b      	adds	r3, r7, r4
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
	Roll.a13 = 0.0;
 8004fca:	193b      	adds	r3, r7, r4
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
	Roll.a21 = 0.0;
 8004fd0:	193b      	adds	r3, r7, r4
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
	Roll.a22= cos(acc_bias[0]*DEG_2_RAD);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1c18      	adds	r0, r3, #0
 8004fdc:	f7fd ff78 	bl	8002ed0 <__aeabi_f2d>
 8004fe0:	4afd      	ldr	r2, [pc, #1012]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8004fe2:	4bfe      	ldr	r3, [pc, #1016]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8004fe4:	f7fd f8cc 	bl	8002180 <__aeabi_dmul>
 8004fe8:	0002      	movs	r2, r0
 8004fea:	000b      	movs	r3, r1
 8004fec:	0010      	movs	r0, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	f00a fd80 	bl	800faf4 <cos>
 8004ff4:	0002      	movs	r2, r0
 8004ff6:	000b      	movs	r3, r1
 8004ff8:	0010      	movs	r0, r2
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	f7fd ffb0 	bl	8002f60 <__aeabi_d2f>
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	193b      	adds	r3, r7, r4
 8005004:	611a      	str	r2, [r3, #16]
	Roll.a23 = -sin(acc_bias[0]*DEG_2_RAD);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	1c18      	adds	r0, r3, #0
 800500c:	f7fd ff60 	bl	8002ed0 <__aeabi_f2d>
 8005010:	4af1      	ldr	r2, [pc, #964]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8005012:	4bf2      	ldr	r3, [pc, #968]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8005014:	f7fd f8b4 	bl	8002180 <__aeabi_dmul>
 8005018:	0002      	movs	r2, r0
 800501a:	000b      	movs	r3, r1
 800501c:	0010      	movs	r0, r2
 800501e:	0019      	movs	r1, r3
 8005020:	f00a fdae 	bl	800fb80 <sin>
 8005024:	0002      	movs	r2, r0
 8005026:	000b      	movs	r3, r1
 8005028:	0010      	movs	r0, r2
 800502a:	0019      	movs	r1, r3
 800502c:	f7fd ff98 	bl	8002f60 <__aeabi_d2f>
 8005030:	1c02      	adds	r2, r0, #0
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	405a      	eors	r2, r3
 8005038:	0025      	movs	r5, r4
 800503a:	197b      	adds	r3, r7, r5
 800503c:	615a      	str	r2, [r3, #20]
	Roll.a31 = 0.0;
 800503e:	197b      	adds	r3, r7, r5
 8005040:	2200      	movs	r2, #0
 8005042:	619a      	str	r2, [r3, #24]
	Roll.a32 = sin(acc_bias[0]*DEG_2_RAD);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	1c18      	adds	r0, r3, #0
 800504a:	f7fd ff41 	bl	8002ed0 <__aeabi_f2d>
 800504e:	4ae2      	ldr	r2, [pc, #904]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8005050:	4be2      	ldr	r3, [pc, #904]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8005052:	f7fd f895 	bl	8002180 <__aeabi_dmul>
 8005056:	0002      	movs	r2, r0
 8005058:	000b      	movs	r3, r1
 800505a:	0010      	movs	r0, r2
 800505c:	0019      	movs	r1, r3
 800505e:	f00a fd8f 	bl	800fb80 <sin>
 8005062:	0002      	movs	r2, r0
 8005064:	000b      	movs	r3, r1
 8005066:	0010      	movs	r0, r2
 8005068:	0019      	movs	r1, r3
 800506a:	f7fd ff79 	bl	8002f60 <__aeabi_d2f>
 800506e:	1c02      	adds	r2, r0, #0
 8005070:	197b      	adds	r3, r7, r5
 8005072:	61da      	str	r2, [r3, #28]
	Roll.a33 = cos(acc_bias[0]*DEG_2_RAD);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1c18      	adds	r0, r3, #0
 800507a:	f7fd ff29 	bl	8002ed0 <__aeabi_f2d>
 800507e:	4ad6      	ldr	r2, [pc, #856]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8005080:	4bd6      	ldr	r3, [pc, #856]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8005082:	f7fd f87d 	bl	8002180 <__aeabi_dmul>
 8005086:	0002      	movs	r2, r0
 8005088:	000b      	movs	r3, r1
 800508a:	0010      	movs	r0, r2
 800508c:	0019      	movs	r1, r3
 800508e:	f00a fd31 	bl	800faf4 <cos>
 8005092:	0002      	movs	r2, r0
 8005094:	000b      	movs	r3, r1
 8005096:	0010      	movs	r0, r2
 8005098:	0019      	movs	r1, r3
 800509a:	f7fd ff61 	bl	8002f60 <__aeabi_d2f>
 800509e:	1c02      	adds	r2, r0, #0
 80050a0:	197b      	adds	r3, r7, r5
 80050a2:	621a      	str	r2, [r3, #32]

	Pitch.a11 = cos(acc_bias[1]*DEG_2_RAD);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	1c18      	adds	r0, r3, #0
 80050ac:	f7fd ff10 	bl	8002ed0 <__aeabi_f2d>
 80050b0:	4ac9      	ldr	r2, [pc, #804]	; (80053d8 <CalculateRotationMatrix+0x428>)
 80050b2:	4bca      	ldr	r3, [pc, #808]	; (80053dc <CalculateRotationMatrix+0x42c>)
 80050b4:	f7fd f864 	bl	8002180 <__aeabi_dmul>
 80050b8:	0002      	movs	r2, r0
 80050ba:	000b      	movs	r3, r1
 80050bc:	0010      	movs	r0, r2
 80050be:	0019      	movs	r1, r3
 80050c0:	f00a fd18 	bl	800faf4 <cos>
 80050c4:	0002      	movs	r2, r0
 80050c6:	000b      	movs	r3, r1
 80050c8:	0010      	movs	r0, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	f7fd ff48 	bl	8002f60 <__aeabi_d2f>
 80050d0:	1c02      	adds	r2, r0, #0
 80050d2:	2450      	movs	r4, #80	; 0x50
 80050d4:	193b      	adds	r3, r7, r4
 80050d6:	601a      	str	r2, [r3, #0]
	Pitch.a12 = 0.0;
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
	Pitch.a13 = sin(acc_bias[1]*DEG_2_RAD);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1c18      	adds	r0, r3, #0
 80050e6:	f7fd fef3 	bl	8002ed0 <__aeabi_f2d>
 80050ea:	4abb      	ldr	r2, [pc, #748]	; (80053d8 <CalculateRotationMatrix+0x428>)
 80050ec:	4bbb      	ldr	r3, [pc, #748]	; (80053dc <CalculateRotationMatrix+0x42c>)
 80050ee:	f7fd f847 	bl	8002180 <__aeabi_dmul>
 80050f2:	0002      	movs	r2, r0
 80050f4:	000b      	movs	r3, r1
 80050f6:	0010      	movs	r0, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	f00a fd41 	bl	800fb80 <sin>
 80050fe:	0002      	movs	r2, r0
 8005100:	000b      	movs	r3, r1
 8005102:	0010      	movs	r0, r2
 8005104:	0019      	movs	r1, r3
 8005106:	f7fd ff2b 	bl	8002f60 <__aeabi_d2f>
 800510a:	1c02      	adds	r2, r0, #0
 800510c:	193b      	adds	r3, r7, r4
 800510e:	609a      	str	r2, [r3, #8]
	Pitch.a21 = 0.0;
 8005110:	193b      	adds	r3, r7, r4
 8005112:	2200      	movs	r2, #0
 8005114:	60da      	str	r2, [r3, #12]
	Pitch.a22 = 1.0;
 8005116:	193b      	adds	r3, r7, r4
 8005118:	22fe      	movs	r2, #254	; 0xfe
 800511a:	0592      	lsls	r2, r2, #22
 800511c:	611a      	str	r2, [r3, #16]
	Pitch.a23 = 0.0;
 800511e:	193b      	adds	r3, r7, r4
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
	Pitch.a31 = -sin(acc_bias[1]*DEG_2_RAD);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1c18      	adds	r0, r3, #0
 800512c:	f7fd fed0 	bl	8002ed0 <__aeabi_f2d>
 8005130:	4aa9      	ldr	r2, [pc, #676]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8005132:	4baa      	ldr	r3, [pc, #680]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8005134:	f7fd f824 	bl	8002180 <__aeabi_dmul>
 8005138:	0002      	movs	r2, r0
 800513a:	000b      	movs	r3, r1
 800513c:	0010      	movs	r0, r2
 800513e:	0019      	movs	r1, r3
 8005140:	f00a fd1e 	bl	800fb80 <sin>
 8005144:	0002      	movs	r2, r0
 8005146:	000b      	movs	r3, r1
 8005148:	0010      	movs	r0, r2
 800514a:	0019      	movs	r1, r3
 800514c:	f7fd ff08 	bl	8002f60 <__aeabi_d2f>
 8005150:	1c02      	adds	r2, r0, #0
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	405a      	eors	r2, r3
 8005158:	193b      	adds	r3, r7, r4
 800515a:	619a      	str	r2, [r3, #24]
	Pitch.a32 = 0.0;
 800515c:	193b      	adds	r3, r7, r4
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
	Pitch.a33 = cos(acc_bias[1]*DEG_2_RAD);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c18      	adds	r0, r3, #0
 800516a:	f7fd feb1 	bl	8002ed0 <__aeabi_f2d>
 800516e:	4a9a      	ldr	r2, [pc, #616]	; (80053d8 <CalculateRotationMatrix+0x428>)
 8005170:	4b9a      	ldr	r3, [pc, #616]	; (80053dc <CalculateRotationMatrix+0x42c>)
 8005172:	f7fd f805 	bl	8002180 <__aeabi_dmul>
 8005176:	0002      	movs	r2, r0
 8005178:	000b      	movs	r3, r1
 800517a:	0010      	movs	r0, r2
 800517c:	0019      	movs	r1, r3
 800517e:	f00a fcb9 	bl	800faf4 <cos>
 8005182:	0002      	movs	r2, r0
 8005184:	000b      	movs	r3, r1
 8005186:	0010      	movs	r0, r2
 8005188:	0019      	movs	r1, r3
 800518a:	f7fd fee9 	bl	8002f60 <__aeabi_d2f>
 800518e:	1c02      	adds	r2, r0, #0
 8005190:	0021      	movs	r1, r4
 8005192:	193b      	adds	r3, r7, r4
 8005194:	621a      	str	r2, [r3, #32]

	Yaw.a11 = 1.0;
 8005196:	202c      	movs	r0, #44	; 0x2c
 8005198:	183b      	adds	r3, r7, r0
 800519a:	22fe      	movs	r2, #254	; 0xfe
 800519c:	0592      	lsls	r2, r2, #22
 800519e:	601a      	str	r2, [r3, #0]
	Yaw.a12 = 0.0;
 80051a0:	183b      	adds	r3, r7, r0
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
	Yaw.a13 = 0.0;
 80051a6:	183b      	adds	r3, r7, r0
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
	Yaw.a21 = 0.0;
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	2200      	movs	r2, #0
 80051b0:	60da      	str	r2, [r3, #12]
	Yaw.a22 = 1.0;
 80051b2:	183b      	adds	r3, r7, r0
 80051b4:	22fe      	movs	r2, #254	; 0xfe
 80051b6:	0592      	lsls	r2, r2, #22
 80051b8:	611a      	str	r2, [r3, #16]
	Yaw.a23 = 0.0;
 80051ba:	183b      	adds	r3, r7, r0
 80051bc:	2200      	movs	r2, #0
 80051be:	615a      	str	r2, [r3, #20]
	Yaw.a31 = 0.0;
 80051c0:	183b      	adds	r3, r7, r0
 80051c2:	2200      	movs	r2, #0
 80051c4:	619a      	str	r2, [r3, #24]
	Yaw.a32 = 0.0;
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
	Yaw.a33 = 1.0;
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	22fe      	movs	r2, #254	; 0xfe
 80051d0:	0592      	lsls	r2, r2, #22
 80051d2:	621a      	str	r2, [r3, #32]

	YawTimesPitch.a11 = Yaw.a11*Pitch.a11 + Yaw.a12*Pitch.a21 + Yaw.a13*Pitch.a31;
 80051d4:	183b      	adds	r3, r7, r0
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	000e      	movs	r6, r1
 80051da:	19bb      	adds	r3, r7, r6
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	1c19      	adds	r1, r3, #0
 80051e0:	1c10      	adds	r0, r2, #0
 80051e2:	f7fb fd15 	bl	8000c10 <__aeabi_fmul>
 80051e6:	1c03      	adds	r3, r0, #0
 80051e8:	1c1c      	adds	r4, r3, #0
 80051ea:	202c      	movs	r0, #44	; 0x2c
 80051ec:	183b      	adds	r3, r7, r0
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	19bb      	adds	r3, r7, r6
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	1c19      	adds	r1, r3, #0
 80051f6:	1c10      	adds	r0, r2, #0
 80051f8:	f7fb fd0a 	bl	8000c10 <__aeabi_fmul>
 80051fc:	1c03      	adds	r3, r0, #0
 80051fe:	1c19      	adds	r1, r3, #0
 8005200:	1c20      	adds	r0, r4, #0
 8005202:	f7fb f99f 	bl	8000544 <__aeabi_fadd>
 8005206:	1c03      	adds	r3, r0, #0
 8005208:	1c1c      	adds	r4, r3, #0
 800520a:	202c      	movs	r0, #44	; 0x2c
 800520c:	183b      	adds	r3, r7, r0
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	19bb      	adds	r3, r7, r6
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	1c19      	adds	r1, r3, #0
 8005216:	1c10      	adds	r0, r2, #0
 8005218:	f7fb fcfa 	bl	8000c10 <__aeabi_fmul>
 800521c:	1c03      	adds	r3, r0, #0
 800521e:	1c19      	adds	r1, r3, #0
 8005220:	1c20      	adds	r0, r4, #0
 8005222:	f7fb f98f 	bl	8000544 <__aeabi_fadd>
 8005226:	1c03      	adds	r3, r0, #0
 8005228:	1c1a      	adds	r2, r3, #0
 800522a:	2308      	movs	r3, #8
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	601a      	str	r2, [r3, #0]
	YawTimesPitch.a12 = Yaw.a11*Pitch.a12 + Yaw.a12*Pitch.a22 + Yaw.a13*Pitch.a32;
 8005230:	202c      	movs	r0, #44	; 0x2c
 8005232:	183b      	adds	r3, r7, r0
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	19bb      	adds	r3, r7, r6
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	1c19      	adds	r1, r3, #0
 800523c:	1c10      	adds	r0, r2, #0
 800523e:	f7fb fce7 	bl	8000c10 <__aeabi_fmul>
 8005242:	1c03      	adds	r3, r0, #0
 8005244:	1c1c      	adds	r4, r3, #0
 8005246:	202c      	movs	r0, #44	; 0x2c
 8005248:	183b      	adds	r3, r7, r0
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	19bb      	adds	r3, r7, r6
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	1c19      	adds	r1, r3, #0
 8005252:	1c10      	adds	r0, r2, #0
 8005254:	f7fb fcdc 	bl	8000c10 <__aeabi_fmul>
 8005258:	1c03      	adds	r3, r0, #0
 800525a:	1c19      	adds	r1, r3, #0
 800525c:	1c20      	adds	r0, r4, #0
 800525e:	f7fb f971 	bl	8000544 <__aeabi_fadd>
 8005262:	1c03      	adds	r3, r0, #0
 8005264:	1c1c      	adds	r4, r3, #0
 8005266:	202c      	movs	r0, #44	; 0x2c
 8005268:	183b      	adds	r3, r7, r0
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	19bb      	adds	r3, r7, r6
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	1c19      	adds	r1, r3, #0
 8005272:	1c10      	adds	r0, r2, #0
 8005274:	f7fb fccc 	bl	8000c10 <__aeabi_fmul>
 8005278:	1c03      	adds	r3, r0, #0
 800527a:	1c19      	adds	r1, r3, #0
 800527c:	1c20      	adds	r0, r4, #0
 800527e:	f7fb f961 	bl	8000544 <__aeabi_fadd>
 8005282:	1c03      	adds	r3, r0, #0
 8005284:	1c1a      	adds	r2, r3, #0
 8005286:	2308      	movs	r3, #8
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	605a      	str	r2, [r3, #4]
	YawTimesPitch.a13 = Yaw.a11*Pitch.a13 + Yaw.a12*Pitch.a23 + Yaw.a13*Pitch.a33;
 800528c:	202c      	movs	r0, #44	; 0x2c
 800528e:	183b      	adds	r3, r7, r0
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	19bb      	adds	r3, r7, r6
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	1c19      	adds	r1, r3, #0
 8005298:	1c10      	adds	r0, r2, #0
 800529a:	f7fb fcb9 	bl	8000c10 <__aeabi_fmul>
 800529e:	1c03      	adds	r3, r0, #0
 80052a0:	1c1c      	adds	r4, r3, #0
 80052a2:	202c      	movs	r0, #44	; 0x2c
 80052a4:	183b      	adds	r3, r7, r0
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	19bb      	adds	r3, r7, r6
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	1c19      	adds	r1, r3, #0
 80052ae:	1c10      	adds	r0, r2, #0
 80052b0:	f7fb fcae 	bl	8000c10 <__aeabi_fmul>
 80052b4:	1c03      	adds	r3, r0, #0
 80052b6:	1c19      	adds	r1, r3, #0
 80052b8:	1c20      	adds	r0, r4, #0
 80052ba:	f7fb f943 	bl	8000544 <__aeabi_fadd>
 80052be:	1c03      	adds	r3, r0, #0
 80052c0:	1c1c      	adds	r4, r3, #0
 80052c2:	202c      	movs	r0, #44	; 0x2c
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	19bb      	adds	r3, r7, r6
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	1c19      	adds	r1, r3, #0
 80052ce:	1c10      	adds	r0, r2, #0
 80052d0:	f7fb fc9e 	bl	8000c10 <__aeabi_fmul>
 80052d4:	1c03      	adds	r3, r0, #0
 80052d6:	1c19      	adds	r1, r3, #0
 80052d8:	1c20      	adds	r0, r4, #0
 80052da:	f7fb f933 	bl	8000544 <__aeabi_fadd>
 80052de:	1c03      	adds	r3, r0, #0
 80052e0:	1c1a      	adds	r2, r3, #0
 80052e2:	2308      	movs	r3, #8
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	609a      	str	r2, [r3, #8]
	YawTimesPitch.a21 = Yaw.a21*Pitch.a11 + Yaw.a22*Pitch.a21 + Yaw.a23*Pitch.a31;
 80052e8:	202c      	movs	r0, #44	; 0x2c
 80052ea:	183b      	adds	r3, r7, r0
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	19bb      	adds	r3, r7, r6
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c19      	adds	r1, r3, #0
 80052f4:	1c10      	adds	r0, r2, #0
 80052f6:	f7fb fc8b 	bl	8000c10 <__aeabi_fmul>
 80052fa:	1c03      	adds	r3, r0, #0
 80052fc:	1c1c      	adds	r4, r3, #0
 80052fe:	202c      	movs	r0, #44	; 0x2c
 8005300:	183b      	adds	r3, r7, r0
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	19bb      	adds	r3, r7, r6
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	1c19      	adds	r1, r3, #0
 800530a:	1c10      	adds	r0, r2, #0
 800530c:	f7fb fc80 	bl	8000c10 <__aeabi_fmul>
 8005310:	1c03      	adds	r3, r0, #0
 8005312:	1c19      	adds	r1, r3, #0
 8005314:	1c20      	adds	r0, r4, #0
 8005316:	f7fb f915 	bl	8000544 <__aeabi_fadd>
 800531a:	1c03      	adds	r3, r0, #0
 800531c:	1c1c      	adds	r4, r3, #0
 800531e:	202c      	movs	r0, #44	; 0x2c
 8005320:	183b      	adds	r3, r7, r0
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	19bb      	adds	r3, r7, r6
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	1c19      	adds	r1, r3, #0
 800532a:	1c10      	adds	r0, r2, #0
 800532c:	f7fb fc70 	bl	8000c10 <__aeabi_fmul>
 8005330:	1c03      	adds	r3, r0, #0
 8005332:	1c19      	adds	r1, r3, #0
 8005334:	1c20      	adds	r0, r4, #0
 8005336:	f7fb f905 	bl	8000544 <__aeabi_fadd>
 800533a:	1c03      	adds	r3, r0, #0
 800533c:	1c1a      	adds	r2, r3, #0
 800533e:	2308      	movs	r3, #8
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	60da      	str	r2, [r3, #12]
	YawTimesPitch.a22 = Yaw.a21*Pitch.a12 + Yaw.a22*Pitch.a22 + Yaw.a23*Pitch.a32;
 8005344:	202c      	movs	r0, #44	; 0x2c
 8005346:	183b      	adds	r3, r7, r0
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	19bb      	adds	r3, r7, r6
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	1c19      	adds	r1, r3, #0
 8005350:	1c10      	adds	r0, r2, #0
 8005352:	f7fb fc5d 	bl	8000c10 <__aeabi_fmul>
 8005356:	1c03      	adds	r3, r0, #0
 8005358:	1c1c      	adds	r4, r3, #0
 800535a:	202c      	movs	r0, #44	; 0x2c
 800535c:	183b      	adds	r3, r7, r0
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	19bb      	adds	r3, r7, r6
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	1c19      	adds	r1, r3, #0
 8005366:	1c10      	adds	r0, r2, #0
 8005368:	f7fb fc52 	bl	8000c10 <__aeabi_fmul>
 800536c:	1c03      	adds	r3, r0, #0
 800536e:	1c19      	adds	r1, r3, #0
 8005370:	1c20      	adds	r0, r4, #0
 8005372:	f7fb f8e7 	bl	8000544 <__aeabi_fadd>
 8005376:	1c03      	adds	r3, r0, #0
 8005378:	1c1c      	adds	r4, r3, #0
 800537a:	202c      	movs	r0, #44	; 0x2c
 800537c:	183b      	adds	r3, r7, r0
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	19bb      	adds	r3, r7, r6
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	1c19      	adds	r1, r3, #0
 8005386:	1c10      	adds	r0, r2, #0
 8005388:	f7fb fc42 	bl	8000c10 <__aeabi_fmul>
 800538c:	1c03      	adds	r3, r0, #0
 800538e:	1c19      	adds	r1, r3, #0
 8005390:	1c20      	adds	r0, r4, #0
 8005392:	f7fb f8d7 	bl	8000544 <__aeabi_fadd>
 8005396:	1c03      	adds	r3, r0, #0
 8005398:	1c1a      	adds	r2, r3, #0
 800539a:	2308      	movs	r3, #8
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	611a      	str	r2, [r3, #16]
	YawTimesPitch.a23 = Yaw.a21*Pitch.a13 + Yaw.a22*Pitch.a23 + Yaw.a23*Pitch.a33;
 80053a0:	202c      	movs	r0, #44	; 0x2c
 80053a2:	183b      	adds	r3, r7, r0
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	19bb      	adds	r3, r7, r6
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	1c19      	adds	r1, r3, #0
 80053ac:	1c10      	adds	r0, r2, #0
 80053ae:	f7fb fc2f 	bl	8000c10 <__aeabi_fmul>
 80053b2:	1c03      	adds	r3, r0, #0
 80053b4:	1c1c      	adds	r4, r3, #0
 80053b6:	202c      	movs	r0, #44	; 0x2c
 80053b8:	183b      	adds	r3, r7, r0
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	19bb      	adds	r3, r7, r6
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	1c19      	adds	r1, r3, #0
 80053c2:	1c10      	adds	r0, r2, #0
 80053c4:	f7fb fc24 	bl	8000c10 <__aeabi_fmul>
 80053c8:	1c03      	adds	r3, r0, #0
 80053ca:	1c19      	adds	r1, r3, #0
 80053cc:	1c20      	adds	r0, r4, #0
 80053ce:	f7fb f8b9 	bl	8000544 <__aeabi_fadd>
 80053d2:	1c03      	adds	r3, r0, #0
 80053d4:	1c1c      	adds	r4, r3, #0
 80053d6:	e003      	b.n	80053e0 <CalculateRotationMatrix+0x430>
 80053d8:	a2529d39 	.word	0xa2529d39
 80053dc:	3f91df46 	.word	0x3f91df46
 80053e0:	202c      	movs	r0, #44	; 0x2c
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	19bb      	adds	r3, r7, r6
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	1c19      	adds	r1, r3, #0
 80053ec:	1c10      	adds	r0, r2, #0
 80053ee:	f7fb fc0f 	bl	8000c10 <__aeabi_fmul>
 80053f2:	1c03      	adds	r3, r0, #0
 80053f4:	1c19      	adds	r1, r3, #0
 80053f6:	1c20      	adds	r0, r4, #0
 80053f8:	f7fb f8a4 	bl	8000544 <__aeabi_fadd>
 80053fc:	1c03      	adds	r3, r0, #0
 80053fe:	1c1a      	adds	r2, r3, #0
 8005400:	2308      	movs	r3, #8
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	615a      	str	r2, [r3, #20]
	YawTimesPitch.a31 = Yaw.a31*Pitch.a11 + Yaw.a32*Pitch.a21 + Yaw.a33*Pitch.a31;
 8005406:	202c      	movs	r0, #44	; 0x2c
 8005408:	183b      	adds	r3, r7, r0
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	19bb      	adds	r3, r7, r6
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1c19      	adds	r1, r3, #0
 8005412:	1c10      	adds	r0, r2, #0
 8005414:	f7fb fbfc 	bl	8000c10 <__aeabi_fmul>
 8005418:	1c03      	adds	r3, r0, #0
 800541a:	1c1c      	adds	r4, r3, #0
 800541c:	202c      	movs	r0, #44	; 0x2c
 800541e:	183b      	adds	r3, r7, r0
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	19bb      	adds	r3, r7, r6
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	1c19      	adds	r1, r3, #0
 8005428:	1c10      	adds	r0, r2, #0
 800542a:	f7fb fbf1 	bl	8000c10 <__aeabi_fmul>
 800542e:	1c03      	adds	r3, r0, #0
 8005430:	1c19      	adds	r1, r3, #0
 8005432:	1c20      	adds	r0, r4, #0
 8005434:	f7fb f886 	bl	8000544 <__aeabi_fadd>
 8005438:	1c03      	adds	r3, r0, #0
 800543a:	1c1c      	adds	r4, r3, #0
 800543c:	202c      	movs	r0, #44	; 0x2c
 800543e:	183b      	adds	r3, r7, r0
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	19bb      	adds	r3, r7, r6
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	1c19      	adds	r1, r3, #0
 8005448:	1c10      	adds	r0, r2, #0
 800544a:	f7fb fbe1 	bl	8000c10 <__aeabi_fmul>
 800544e:	1c03      	adds	r3, r0, #0
 8005450:	1c19      	adds	r1, r3, #0
 8005452:	1c20      	adds	r0, r4, #0
 8005454:	f7fb f876 	bl	8000544 <__aeabi_fadd>
 8005458:	1c03      	adds	r3, r0, #0
 800545a:	1c1a      	adds	r2, r3, #0
 800545c:	2308      	movs	r3, #8
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	619a      	str	r2, [r3, #24]
	YawTimesPitch.a32 = Yaw.a31*Pitch.a12 + Yaw.a32*Pitch.a22 + Yaw.a33*Pitch.a32;
 8005462:	202c      	movs	r0, #44	; 0x2c
 8005464:	183b      	adds	r3, r7, r0
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	19bb      	adds	r3, r7, r6
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	1c19      	adds	r1, r3, #0
 800546e:	1c10      	adds	r0, r2, #0
 8005470:	f7fb fbce 	bl	8000c10 <__aeabi_fmul>
 8005474:	1c03      	adds	r3, r0, #0
 8005476:	1c1c      	adds	r4, r3, #0
 8005478:	202c      	movs	r0, #44	; 0x2c
 800547a:	183b      	adds	r3, r7, r0
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	19bb      	adds	r3, r7, r6
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	1c19      	adds	r1, r3, #0
 8005484:	1c10      	adds	r0, r2, #0
 8005486:	f7fb fbc3 	bl	8000c10 <__aeabi_fmul>
 800548a:	1c03      	adds	r3, r0, #0
 800548c:	1c19      	adds	r1, r3, #0
 800548e:	1c20      	adds	r0, r4, #0
 8005490:	f7fb f858 	bl	8000544 <__aeabi_fadd>
 8005494:	1c03      	adds	r3, r0, #0
 8005496:	1c1c      	adds	r4, r3, #0
 8005498:	202c      	movs	r0, #44	; 0x2c
 800549a:	183b      	adds	r3, r7, r0
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	19bb      	adds	r3, r7, r6
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	1c19      	adds	r1, r3, #0
 80054a4:	1c10      	adds	r0, r2, #0
 80054a6:	f7fb fbb3 	bl	8000c10 <__aeabi_fmul>
 80054aa:	1c03      	adds	r3, r0, #0
 80054ac:	1c19      	adds	r1, r3, #0
 80054ae:	1c20      	adds	r0, r4, #0
 80054b0:	f7fb f848 	bl	8000544 <__aeabi_fadd>
 80054b4:	1c03      	adds	r3, r0, #0
 80054b6:	1c1a      	adds	r2, r3, #0
 80054b8:	2308      	movs	r3, #8
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	61da      	str	r2, [r3, #28]
	YawTimesPitch.a33 = Yaw.a31*Pitch.a13 + Yaw.a32*Pitch.a23 + Yaw.a33*Pitch.a33;
 80054be:	202c      	movs	r0, #44	; 0x2c
 80054c0:	183b      	adds	r3, r7, r0
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	19bb      	adds	r3, r7, r6
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	1c19      	adds	r1, r3, #0
 80054ca:	1c10      	adds	r0, r2, #0
 80054cc:	f7fb fba0 	bl	8000c10 <__aeabi_fmul>
 80054d0:	1c03      	adds	r3, r0, #0
 80054d2:	1c1c      	adds	r4, r3, #0
 80054d4:	202c      	movs	r0, #44	; 0x2c
 80054d6:	183b      	adds	r3, r7, r0
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	19bb      	adds	r3, r7, r6
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	1c19      	adds	r1, r3, #0
 80054e0:	1c10      	adds	r0, r2, #0
 80054e2:	f7fb fb95 	bl	8000c10 <__aeabi_fmul>
 80054e6:	1c03      	adds	r3, r0, #0
 80054e8:	1c19      	adds	r1, r3, #0
 80054ea:	1c20      	adds	r0, r4, #0
 80054ec:	f7fb f82a 	bl	8000544 <__aeabi_fadd>
 80054f0:	1c03      	adds	r3, r0, #0
 80054f2:	1c1c      	adds	r4, r3, #0
 80054f4:	202c      	movs	r0, #44	; 0x2c
 80054f6:	183b      	adds	r3, r7, r0
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	19bb      	adds	r3, r7, r6
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	1c19      	adds	r1, r3, #0
 8005500:	1c10      	adds	r0, r2, #0
 8005502:	f7fb fb85 	bl	8000c10 <__aeabi_fmul>
 8005506:	1c03      	adds	r3, r0, #0
 8005508:	1c19      	adds	r1, r3, #0
 800550a:	1c20      	adds	r0, r4, #0
 800550c:	f7fb f81a 	bl	8000544 <__aeabi_fadd>
 8005510:	1c03      	adds	r3, r0, #0
 8005512:	1c1a      	adds	r2, r3, #0
 8005514:	2608      	movs	r6, #8
 8005516:	19bb      	adds	r3, r7, r6
 8005518:	621a      	str	r2, [r3, #32]

	RotationMatrix->a11 = YawTimesPitch.a11*Roll.a11 + YawTimesPitch.a12*Roll.a21 + YawTimesPitch.a13*Roll.a31;
 800551a:	19bb      	adds	r3, r7, r6
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	197b      	adds	r3, r7, r5
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	1c19      	adds	r1, r3, #0
 8005524:	1c10      	adds	r0, r2, #0
 8005526:	f7fb fb73 	bl	8000c10 <__aeabi_fmul>
 800552a:	1c03      	adds	r3, r0, #0
 800552c:	1c1c      	adds	r4, r3, #0
 800552e:	19bb      	adds	r3, r7, r6
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	197b      	adds	r3, r7, r5
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	1c19      	adds	r1, r3, #0
 8005538:	1c10      	adds	r0, r2, #0
 800553a:	f7fb fb69 	bl	8000c10 <__aeabi_fmul>
 800553e:	1c03      	adds	r3, r0, #0
 8005540:	1c19      	adds	r1, r3, #0
 8005542:	1c20      	adds	r0, r4, #0
 8005544:	f7fa fffe 	bl	8000544 <__aeabi_fadd>
 8005548:	1c03      	adds	r3, r0, #0
 800554a:	1c1c      	adds	r4, r3, #0
 800554c:	19bb      	adds	r3, r7, r6
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	197b      	adds	r3, r7, r5
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	1c19      	adds	r1, r3, #0
 8005556:	1c10      	adds	r0, r2, #0
 8005558:	f7fb fb5a 	bl	8000c10 <__aeabi_fmul>
 800555c:	1c03      	adds	r3, r0, #0
 800555e:	1c19      	adds	r1, r3, #0
 8005560:	1c20      	adds	r0, r4, #0
 8005562:	f7fa ffef 	bl	8000544 <__aeabi_fadd>
 8005566:	1c03      	adds	r3, r0, #0
 8005568:	1c1a      	adds	r2, r3, #0
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	601a      	str	r2, [r3, #0]
	RotationMatrix->a12 = YawTimesPitch.a11*Roll.a12 + YawTimesPitch.a12*Roll.a22 + YawTimesPitch.a13*Roll.a32;
 800556e:	19bb      	adds	r3, r7, r6
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	197b      	adds	r3, r7, r5
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	1c19      	adds	r1, r3, #0
 8005578:	1c10      	adds	r0, r2, #0
 800557a:	f7fb fb49 	bl	8000c10 <__aeabi_fmul>
 800557e:	1c03      	adds	r3, r0, #0
 8005580:	1c1c      	adds	r4, r3, #0
 8005582:	19bb      	adds	r3, r7, r6
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	197b      	adds	r3, r7, r5
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	1c19      	adds	r1, r3, #0
 800558c:	1c10      	adds	r0, r2, #0
 800558e:	f7fb fb3f 	bl	8000c10 <__aeabi_fmul>
 8005592:	1c03      	adds	r3, r0, #0
 8005594:	1c19      	adds	r1, r3, #0
 8005596:	1c20      	adds	r0, r4, #0
 8005598:	f7fa ffd4 	bl	8000544 <__aeabi_fadd>
 800559c:	1c03      	adds	r3, r0, #0
 800559e:	1c1c      	adds	r4, r3, #0
 80055a0:	19bb      	adds	r3, r7, r6
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	197b      	adds	r3, r7, r5
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	1c19      	adds	r1, r3, #0
 80055aa:	1c10      	adds	r0, r2, #0
 80055ac:	f7fb fb30 	bl	8000c10 <__aeabi_fmul>
 80055b0:	1c03      	adds	r3, r0, #0
 80055b2:	1c19      	adds	r1, r3, #0
 80055b4:	1c20      	adds	r0, r4, #0
 80055b6:	f7fa ffc5 	bl	8000544 <__aeabi_fadd>
 80055ba:	1c03      	adds	r3, r0, #0
 80055bc:	1c1a      	adds	r2, r3, #0
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	605a      	str	r2, [r3, #4]
	RotationMatrix->a13 = YawTimesPitch.a11*Roll.a13 + YawTimesPitch.a12*Roll.a23 + YawTimesPitch.a13*Roll.a33;
 80055c2:	19bb      	adds	r3, r7, r6
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	197b      	adds	r3, r7, r5
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	1c19      	adds	r1, r3, #0
 80055cc:	1c10      	adds	r0, r2, #0
 80055ce:	f7fb fb1f 	bl	8000c10 <__aeabi_fmul>
 80055d2:	1c03      	adds	r3, r0, #0
 80055d4:	1c1c      	adds	r4, r3, #0
 80055d6:	19bb      	adds	r3, r7, r6
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	197b      	adds	r3, r7, r5
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	1c19      	adds	r1, r3, #0
 80055e0:	1c10      	adds	r0, r2, #0
 80055e2:	f7fb fb15 	bl	8000c10 <__aeabi_fmul>
 80055e6:	1c03      	adds	r3, r0, #0
 80055e8:	1c19      	adds	r1, r3, #0
 80055ea:	1c20      	adds	r0, r4, #0
 80055ec:	f7fa ffaa 	bl	8000544 <__aeabi_fadd>
 80055f0:	1c03      	adds	r3, r0, #0
 80055f2:	1c1c      	adds	r4, r3, #0
 80055f4:	19bb      	adds	r3, r7, r6
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	197b      	adds	r3, r7, r5
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	1c19      	adds	r1, r3, #0
 80055fe:	1c10      	adds	r0, r2, #0
 8005600:	f7fb fb06 	bl	8000c10 <__aeabi_fmul>
 8005604:	1c03      	adds	r3, r0, #0
 8005606:	1c19      	adds	r1, r3, #0
 8005608:	1c20      	adds	r0, r4, #0
 800560a:	f7fa ff9b 	bl	8000544 <__aeabi_fadd>
 800560e:	1c03      	adds	r3, r0, #0
 8005610:	1c1a      	adds	r2, r3, #0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]
	RotationMatrix->a21 = YawTimesPitch.a21*Roll.a11 + YawTimesPitch.a22*Roll.a21 + YawTimesPitch.a23*Roll.a31;
 8005616:	19bb      	adds	r3, r7, r6
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	197b      	adds	r3, r7, r5
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	1c19      	adds	r1, r3, #0
 8005620:	1c10      	adds	r0, r2, #0
 8005622:	f7fb faf5 	bl	8000c10 <__aeabi_fmul>
 8005626:	1c03      	adds	r3, r0, #0
 8005628:	1c1c      	adds	r4, r3, #0
 800562a:	19bb      	adds	r3, r7, r6
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	197b      	adds	r3, r7, r5
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	1c19      	adds	r1, r3, #0
 8005634:	1c10      	adds	r0, r2, #0
 8005636:	f7fb faeb 	bl	8000c10 <__aeabi_fmul>
 800563a:	1c03      	adds	r3, r0, #0
 800563c:	1c19      	adds	r1, r3, #0
 800563e:	1c20      	adds	r0, r4, #0
 8005640:	f7fa ff80 	bl	8000544 <__aeabi_fadd>
 8005644:	1c03      	adds	r3, r0, #0
 8005646:	1c1c      	adds	r4, r3, #0
 8005648:	19bb      	adds	r3, r7, r6
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	197b      	adds	r3, r7, r5
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	1c19      	adds	r1, r3, #0
 8005652:	1c10      	adds	r0, r2, #0
 8005654:	f7fb fadc 	bl	8000c10 <__aeabi_fmul>
 8005658:	1c03      	adds	r3, r0, #0
 800565a:	1c19      	adds	r1, r3, #0
 800565c:	1c20      	adds	r0, r4, #0
 800565e:	f7fa ff71 	bl	8000544 <__aeabi_fadd>
 8005662:	1c03      	adds	r3, r0, #0
 8005664:	1c1a      	adds	r2, r3, #0
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	60da      	str	r2, [r3, #12]
	RotationMatrix->a22 = YawTimesPitch.a21*Roll.a12 + YawTimesPitch.a22*Roll.a22 + YawTimesPitch.a23*Roll.a32;
 800566a:	19bb      	adds	r3, r7, r6
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	197b      	adds	r3, r7, r5
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	1c19      	adds	r1, r3, #0
 8005674:	1c10      	adds	r0, r2, #0
 8005676:	f7fb facb 	bl	8000c10 <__aeabi_fmul>
 800567a:	1c03      	adds	r3, r0, #0
 800567c:	1c1c      	adds	r4, r3, #0
 800567e:	19bb      	adds	r3, r7, r6
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	197b      	adds	r3, r7, r5
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	1c19      	adds	r1, r3, #0
 8005688:	1c10      	adds	r0, r2, #0
 800568a:	f7fb fac1 	bl	8000c10 <__aeabi_fmul>
 800568e:	1c03      	adds	r3, r0, #0
 8005690:	1c19      	adds	r1, r3, #0
 8005692:	1c20      	adds	r0, r4, #0
 8005694:	f7fa ff56 	bl	8000544 <__aeabi_fadd>
 8005698:	1c03      	adds	r3, r0, #0
 800569a:	1c1c      	adds	r4, r3, #0
 800569c:	19bb      	adds	r3, r7, r6
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	197b      	adds	r3, r7, r5
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	1c19      	adds	r1, r3, #0
 80056a6:	1c10      	adds	r0, r2, #0
 80056a8:	f7fb fab2 	bl	8000c10 <__aeabi_fmul>
 80056ac:	1c03      	adds	r3, r0, #0
 80056ae:	1c19      	adds	r1, r3, #0
 80056b0:	1c20      	adds	r0, r4, #0
 80056b2:	f7fa ff47 	bl	8000544 <__aeabi_fadd>
 80056b6:	1c03      	adds	r3, r0, #0
 80056b8:	1c1a      	adds	r2, r3, #0
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	611a      	str	r2, [r3, #16]
	RotationMatrix->a23 = YawTimesPitch.a21*Roll.a13 + YawTimesPitch.a22*Roll.a23 + YawTimesPitch.a23*Roll.a33;
 80056be:	19bb      	adds	r3, r7, r6
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	197b      	adds	r3, r7, r5
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	1c19      	adds	r1, r3, #0
 80056c8:	1c10      	adds	r0, r2, #0
 80056ca:	f7fb faa1 	bl	8000c10 <__aeabi_fmul>
 80056ce:	1c03      	adds	r3, r0, #0
 80056d0:	1c1c      	adds	r4, r3, #0
 80056d2:	19bb      	adds	r3, r7, r6
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	197b      	adds	r3, r7, r5
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	1c19      	adds	r1, r3, #0
 80056dc:	1c10      	adds	r0, r2, #0
 80056de:	f7fb fa97 	bl	8000c10 <__aeabi_fmul>
 80056e2:	1c03      	adds	r3, r0, #0
 80056e4:	1c19      	adds	r1, r3, #0
 80056e6:	1c20      	adds	r0, r4, #0
 80056e8:	f7fa ff2c 	bl	8000544 <__aeabi_fadd>
 80056ec:	1c03      	adds	r3, r0, #0
 80056ee:	1c1c      	adds	r4, r3, #0
 80056f0:	19bb      	adds	r3, r7, r6
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	197b      	adds	r3, r7, r5
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	1c19      	adds	r1, r3, #0
 80056fa:	1c10      	adds	r0, r2, #0
 80056fc:	f7fb fa88 	bl	8000c10 <__aeabi_fmul>
 8005700:	1c03      	adds	r3, r0, #0
 8005702:	1c19      	adds	r1, r3, #0
 8005704:	1c20      	adds	r0, r4, #0
 8005706:	f7fa ff1d 	bl	8000544 <__aeabi_fadd>
 800570a:	1c03      	adds	r3, r0, #0
 800570c:	1c1a      	adds	r2, r3, #0
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	615a      	str	r2, [r3, #20]
	RotationMatrix->a31 = YawTimesPitch.a31*Roll.a11 + YawTimesPitch.a32*Roll.a21 + YawTimesPitch.a33*Roll.a31;
 8005712:	19bb      	adds	r3, r7, r6
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	197b      	adds	r3, r7, r5
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c19      	adds	r1, r3, #0
 800571c:	1c10      	adds	r0, r2, #0
 800571e:	f7fb fa77 	bl	8000c10 <__aeabi_fmul>
 8005722:	1c03      	adds	r3, r0, #0
 8005724:	1c1c      	adds	r4, r3, #0
 8005726:	19bb      	adds	r3, r7, r6
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	197b      	adds	r3, r7, r5
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	1c19      	adds	r1, r3, #0
 8005730:	1c10      	adds	r0, r2, #0
 8005732:	f7fb fa6d 	bl	8000c10 <__aeabi_fmul>
 8005736:	1c03      	adds	r3, r0, #0
 8005738:	1c19      	adds	r1, r3, #0
 800573a:	1c20      	adds	r0, r4, #0
 800573c:	f7fa ff02 	bl	8000544 <__aeabi_fadd>
 8005740:	1c03      	adds	r3, r0, #0
 8005742:	1c1c      	adds	r4, r3, #0
 8005744:	19bb      	adds	r3, r7, r6
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	197b      	adds	r3, r7, r5
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	1c19      	adds	r1, r3, #0
 800574e:	1c10      	adds	r0, r2, #0
 8005750:	f7fb fa5e 	bl	8000c10 <__aeabi_fmul>
 8005754:	1c03      	adds	r3, r0, #0
 8005756:	1c19      	adds	r1, r3, #0
 8005758:	1c20      	adds	r0, r4, #0
 800575a:	f7fa fef3 	bl	8000544 <__aeabi_fadd>
 800575e:	1c03      	adds	r3, r0, #0
 8005760:	1c1a      	adds	r2, r3, #0
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	619a      	str	r2, [r3, #24]
	RotationMatrix->a32 = YawTimesPitch.a31*Roll.a12 + YawTimesPitch.a32*Roll.a22 + YawTimesPitch.a33*Roll.a32;
 8005766:	19bb      	adds	r3, r7, r6
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	197b      	adds	r3, r7, r5
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	1c19      	adds	r1, r3, #0
 8005770:	1c10      	adds	r0, r2, #0
 8005772:	f7fb fa4d 	bl	8000c10 <__aeabi_fmul>
 8005776:	1c03      	adds	r3, r0, #0
 8005778:	1c1c      	adds	r4, r3, #0
 800577a:	19bb      	adds	r3, r7, r6
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	197b      	adds	r3, r7, r5
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	1c19      	adds	r1, r3, #0
 8005784:	1c10      	adds	r0, r2, #0
 8005786:	f7fb fa43 	bl	8000c10 <__aeabi_fmul>
 800578a:	1c03      	adds	r3, r0, #0
 800578c:	1c19      	adds	r1, r3, #0
 800578e:	1c20      	adds	r0, r4, #0
 8005790:	f7fa fed8 	bl	8000544 <__aeabi_fadd>
 8005794:	1c03      	adds	r3, r0, #0
 8005796:	1c1c      	adds	r4, r3, #0
 8005798:	19bb      	adds	r3, r7, r6
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	197b      	adds	r3, r7, r5
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	1c19      	adds	r1, r3, #0
 80057a2:	1c10      	adds	r0, r2, #0
 80057a4:	f7fb fa34 	bl	8000c10 <__aeabi_fmul>
 80057a8:	1c03      	adds	r3, r0, #0
 80057aa:	1c19      	adds	r1, r3, #0
 80057ac:	1c20      	adds	r0, r4, #0
 80057ae:	f7fa fec9 	bl	8000544 <__aeabi_fadd>
 80057b2:	1c03      	adds	r3, r0, #0
 80057b4:	1c1a      	adds	r2, r3, #0
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	61da      	str	r2, [r3, #28]
	RotationMatrix->a33 = YawTimesPitch.a31*Roll.a13 + YawTimesPitch.a32*Roll.a23 + YawTimesPitch.a33*Roll.a33;
 80057ba:	19bb      	adds	r3, r7, r6
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	197b      	adds	r3, r7, r5
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	1c19      	adds	r1, r3, #0
 80057c4:	1c10      	adds	r0, r2, #0
 80057c6:	f7fb fa23 	bl	8000c10 <__aeabi_fmul>
 80057ca:	1c03      	adds	r3, r0, #0
 80057cc:	1c1c      	adds	r4, r3, #0
 80057ce:	19bb      	adds	r3, r7, r6
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	197b      	adds	r3, r7, r5
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	1c19      	adds	r1, r3, #0
 80057d8:	1c10      	adds	r0, r2, #0
 80057da:	f7fb fa19 	bl	8000c10 <__aeabi_fmul>
 80057de:	1c03      	adds	r3, r0, #0
 80057e0:	1c19      	adds	r1, r3, #0
 80057e2:	1c20      	adds	r0, r4, #0
 80057e4:	f7fa feae 	bl	8000544 <__aeabi_fadd>
 80057e8:	1c03      	adds	r3, r0, #0
 80057ea:	1c1c      	adds	r4, r3, #0
 80057ec:	19bb      	adds	r3, r7, r6
 80057ee:	6a1a      	ldr	r2, [r3, #32]
 80057f0:	197b      	adds	r3, r7, r5
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	1c19      	adds	r1, r3, #0
 80057f6:	1c10      	adds	r0, r2, #0
 80057f8:	f7fb fa0a 	bl	8000c10 <__aeabi_fmul>
 80057fc:	1c03      	adds	r3, r0, #0
 80057fe:	1c19      	adds	r1, r3, #0
 8005800:	1c20      	adds	r0, r4, #0
 8005802:	f7fa fe9f 	bl	8000544 <__aeabi_fadd>
 8005806:	1c03      	adds	r3, r0, #0
 8005808:	1c1a      	adds	r2, r3, #0
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b027      	add	sp, #156	; 0x9c
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)

08005818 <CalculateAccelerometerInEarthFrame>:

void CalculateAccelerometerInEarthFrame(struct matrix *RotationMatrix, float* accel_data, float* new_data){
 8005818:	b5b0      	push	{r4, r5, r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	new_data[0] = accel_data[0]*RotationMatrix->a11 + accel_data[1]*RotationMatrix->a12 + accel_data[2]*RotationMatrix->a13;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1c19      	adds	r1, r3, #0
 800582e:	1c10      	adds	r0, r2, #0
 8005830:	f7fb f9ee 	bl	8000c10 <__aeabi_fmul>
 8005834:	1c03      	adds	r3, r0, #0
 8005836:	1c1c      	adds	r4, r3, #0
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3304      	adds	r3, #4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	1c19      	adds	r1, r3, #0
 8005844:	1c10      	adds	r0, r2, #0
 8005846:	f7fb f9e3 	bl	8000c10 <__aeabi_fmul>
 800584a:	1c03      	adds	r3, r0, #0
 800584c:	1c19      	adds	r1, r3, #0
 800584e:	1c20      	adds	r0, r4, #0
 8005850:	f7fa fe78 	bl	8000544 <__aeabi_fadd>
 8005854:	1c03      	adds	r3, r0, #0
 8005856:	1c1c      	adds	r4, r3, #0
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	3308      	adds	r3, #8
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	1c19      	adds	r1, r3, #0
 8005864:	1c10      	adds	r0, r2, #0
 8005866:	f7fb f9d3 	bl	8000c10 <__aeabi_fmul>
 800586a:	1c03      	adds	r3, r0, #0
 800586c:	1c19      	adds	r1, r3, #0
 800586e:	1c20      	adds	r0, r4, #0
 8005870:	f7fa fe68 	bl	8000544 <__aeabi_fadd>
 8005874:	1c03      	adds	r3, r0, #0
 8005876:	1c1a      	adds	r2, r3, #0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	601a      	str	r2, [r3, #0]
	new_data[1] = accel_data[0]*RotationMatrix->a21 + accel_data[1]*RotationMatrix->a22 + accel_data[2]*RotationMatrix->a23;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	1c19      	adds	r1, r3, #0
 8005886:	1c10      	adds	r0, r2, #0
 8005888:	f7fb f9c2 	bl	8000c10 <__aeabi_fmul>
 800588c:	1c03      	adds	r3, r0, #0
 800588e:	1c1c      	adds	r4, r3, #0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3304      	adds	r3, #4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	1c19      	adds	r1, r3, #0
 800589c:	1c10      	adds	r0, r2, #0
 800589e:	f7fb f9b7 	bl	8000c10 <__aeabi_fmul>
 80058a2:	1c03      	adds	r3, r0, #0
 80058a4:	1c19      	adds	r1, r3, #0
 80058a6:	1c20      	adds	r0, r4, #0
 80058a8:	f7fa fe4c 	bl	8000544 <__aeabi_fadd>
 80058ac:	1c03      	adds	r3, r0, #0
 80058ae:	1c1d      	adds	r5, r3, #0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3308      	adds	r3, #8
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	1c19      	adds	r1, r3, #0
 80058bc:	1c10      	adds	r0, r2, #0
 80058be:	f7fb f9a7 	bl	8000c10 <__aeabi_fmul>
 80058c2:	1c03      	adds	r3, r0, #0
 80058c4:	1c1a      	adds	r2, r3, #0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1d1c      	adds	r4, r3, #4
 80058ca:	1c11      	adds	r1, r2, #0
 80058cc:	1c28      	adds	r0, r5, #0
 80058ce:	f7fa fe39 	bl	8000544 <__aeabi_fadd>
 80058d2:	1c03      	adds	r3, r0, #0
 80058d4:	6023      	str	r3, [r4, #0]
	new_data[2] = accel_data[0]*RotationMatrix->a31 + accel_data[1]*RotationMatrix->a32 + accel_data[2]*RotationMatrix->a33;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	1c19      	adds	r1, r3, #0
 80058e0:	1c10      	adds	r0, r2, #0
 80058e2:	f7fb f995 	bl	8000c10 <__aeabi_fmul>
 80058e6:	1c03      	adds	r3, r0, #0
 80058e8:	1c1c      	adds	r4, r3, #0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3304      	adds	r3, #4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	1c19      	adds	r1, r3, #0
 80058f6:	1c10      	adds	r0, r2, #0
 80058f8:	f7fb f98a 	bl	8000c10 <__aeabi_fmul>
 80058fc:	1c03      	adds	r3, r0, #0
 80058fe:	1c19      	adds	r1, r3, #0
 8005900:	1c20      	adds	r0, r4, #0
 8005902:	f7fa fe1f 	bl	8000544 <__aeabi_fadd>
 8005906:	1c03      	adds	r3, r0, #0
 8005908:	1c1d      	adds	r5, r3, #0
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3308      	adds	r3, #8
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	1c19      	adds	r1, r3, #0
 8005916:	1c10      	adds	r0, r2, #0
 8005918:	f7fb f97a 	bl	8000c10 <__aeabi_fmul>
 800591c:	1c03      	adds	r3, r0, #0
 800591e:	1c1a      	adds	r2, r3, #0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3308      	adds	r3, #8
 8005924:	001c      	movs	r4, r3
 8005926:	1c11      	adds	r1, r2, #0
 8005928:	1c28      	adds	r0, r5, #0
 800592a:	f7fa fe0b 	bl	8000544 <__aeabi_fadd>
 800592e:	1c03      	adds	r3, r0, #0
 8005930:	6023      	str	r3, [r4, #0]

	float norm = 1.0 / sqrt(new_data[0]*new_data[0] + new_data[1]*new_data[1] + new_data[2]*new_data[2]);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1c19      	adds	r1, r3, #0
 800593c:	1c10      	adds	r0, r2, #0
 800593e:	f7fb f967 	bl	8000c10 <__aeabi_fmul>
 8005942:	1c03      	adds	r3, r0, #0
 8005944:	1c1c      	adds	r4, r3, #0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1c19      	adds	r1, r3, #0
 8005954:	1c10      	adds	r0, r2, #0
 8005956:	f7fb f95b 	bl	8000c10 <__aeabi_fmul>
 800595a:	1c03      	adds	r3, r0, #0
 800595c:	1c19      	adds	r1, r3, #0
 800595e:	1c20      	adds	r0, r4, #0
 8005960:	f7fa fdf0 	bl	8000544 <__aeabi_fadd>
 8005964:	1c03      	adds	r3, r0, #0
 8005966:	1c1c      	adds	r4, r3, #0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3308      	adds	r3, #8
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3308      	adds	r3, #8
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1c19      	adds	r1, r3, #0
 8005976:	1c10      	adds	r0, r2, #0
 8005978:	f7fb f94a 	bl	8000c10 <__aeabi_fmul>
 800597c:	1c03      	adds	r3, r0, #0
 800597e:	1c19      	adds	r1, r3, #0
 8005980:	1c20      	adds	r0, r4, #0
 8005982:	f7fa fddf 	bl	8000544 <__aeabi_fadd>
 8005986:	1c03      	adds	r3, r0, #0
 8005988:	1c18      	adds	r0, r3, #0
 800598a:	f7fd faa1 	bl	8002ed0 <__aeabi_f2d>
 800598e:	0002      	movs	r2, r0
 8005990:	000b      	movs	r3, r1
 8005992:	0010      	movs	r0, r2
 8005994:	0019      	movs	r1, r3
 8005996:	f00a fa25 	bl	800fde4 <sqrt>
 800599a:	0002      	movs	r2, r0
 800599c:	000b      	movs	r3, r1
 800599e:	2000      	movs	r0, #0
 80059a0:	4917      	ldr	r1, [pc, #92]	; (8005a00 <CalculateAccelerometerInEarthFrame+0x1e8>)
 80059a2:	f7fb ffe7 	bl	8001974 <__aeabi_ddiv>
 80059a6:	0002      	movs	r2, r0
 80059a8:	000b      	movs	r3, r1
 80059aa:	0010      	movs	r0, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	f7fd fad7 	bl	8002f60 <__aeabi_d2f>
 80059b2:	1c03      	adds	r3, r0, #0
 80059b4:	617b      	str	r3, [r7, #20]
	new_data[0] *= norm;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	1c18      	adds	r0, r3, #0
 80059be:	f7fb f927 	bl	8000c10 <__aeabi_fmul>
 80059c2:	1c03      	adds	r3, r0, #0
 80059c4:	1c1a      	adds	r2, r3, #0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	601a      	str	r2, [r3, #0]
	new_data[1] *= norm;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	1d1c      	adds	r4, r3, #4
 80059d4:	6979      	ldr	r1, [r7, #20]
 80059d6:	1c10      	adds	r0, r2, #0
 80059d8:	f7fb f91a 	bl	8000c10 <__aeabi_fmul>
 80059dc:	1c03      	adds	r3, r0, #0
 80059de:	6023      	str	r3, [r4, #0]
	new_data[2] *= norm;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3308      	adds	r3, #8
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3308      	adds	r3, #8
 80059ea:	001c      	movs	r4, r3
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	1c10      	adds	r0, r2, #0
 80059f0:	f7fb f90e 	bl	8000c10 <__aeabi_fmul>
 80059f4:	1c03      	adds	r3, r0, #0
 80059f6:	6023      	str	r3, [r4, #0]
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b006      	add	sp, #24
 80059fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005a00:	3ff00000 	.word	0x3ff00000

08005a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	46de      	mov	lr, fp
 8005a08:	4657      	mov	r7, sl
 8005a0a:	464e      	mov	r6, r9
 8005a0c:	4645      	mov	r5, r8
 8005a0e:	b5e0      	push	{r5, r6, r7, lr}
 8005a10:	4cfe      	ldr	r4, [pc, #1016]	; (8005e0c <main+0x408>)
 8005a12:	44a5      	add	sp, r4
 8005a14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a16:	f003 fe15 	bl	8009644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a1a:	f003 f8ed 	bl	8008bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005a1e:	f003 fa97 	bl	8008f50 <MX_GPIO_Init>
	MX_SPI1_Init();
 8005a22:	f003 f9a3 	bl	8008d6c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8005a26:	f003 fa45 	bl	8008eb4 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8005a2a:	f003 f971 	bl	8008d10 <MX_RTC_Init>
	MX_TIM16_Init();
 8005a2e:	f003 fa19 	bl	8008e64 <MX_TIM16_Init>
	MX_I2C1_Init();
 8005a32:	f003 f92d 	bl	8008c90 <MX_I2C1_Init>
	MX_SPI2_Init();
 8005a36:	f003 f9d7 	bl	8008de8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	ICM_Initialize(&hspi1, &huart2, IMU_MOVABLE);
 8005a3a:	49f5      	ldr	r1, [pc, #980]	; (8005e10 <main+0x40c>)
 8005a3c:	4bf5      	ldr	r3, [pc, #980]	; (8005e14 <main+0x410>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fd fc49 	bl	80032d8 <ICM_Initialize>
	ICM_Initialize(&hspi2, &huart2, IMU_FIXED);
 8005a46:	49f2      	ldr	r1, [pc, #968]	; (8005e10 <main+0x40c>)
 8005a48:	4bf3      	ldr	r3, [pc, #972]	; (8005e18 <main+0x414>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fd fc43 	bl	80032d8 <ICM_Initialize>

	char uart_buffer[200];

	float accel_data_0[3] = {0,0,0};
 8005a52:	4bf2      	ldr	r3, [pc, #968]	; (8005e1c <main+0x418>)
 8005a54:	229e      	movs	r2, #158	; 0x9e
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	4694      	mov	ip, r2
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	4690      	mov	r8, r2
 8005a5e:	2208      	movs	r2, #8
 8005a60:	4691      	mov	r9, r2
 8005a62:	2208      	movs	r2, #8
 8005a64:	4692      	mov	sl, r2
 8005a66:	2208      	movs	r2, #8
 8005a68:	4693      	mov	fp, r2
 8005a6a:	44bb      	add	fp, r7
 8005a6c:	44da      	add	sl, fp
 8005a6e:	44d1      	add	r9, sl
 8005a70:	44c8      	add	r8, r9
 8005a72:	44c4      	add	ip, r8
 8005a74:	4463      	add	r3, ip
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	4be8      	ldr	r3, [pc, #928]	; (8005e1c <main+0x418>)
 8005a7c:	229e      	movs	r2, #158	; 0x9e
 8005a7e:	0092      	lsls	r2, r2, #2
 8005a80:	4694      	mov	ip, r2
 8005a82:	2208      	movs	r2, #8
 8005a84:	4690      	mov	r8, r2
 8005a86:	2208      	movs	r2, #8
 8005a88:	4691      	mov	r9, r2
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	4692      	mov	sl, r2
 8005a8e:	2208      	movs	r2, #8
 8005a90:	4693      	mov	fp, r2
 8005a92:	44bb      	add	fp, r7
 8005a94:	44da      	add	sl, fp
 8005a96:	44d1      	add	r9, sl
 8005a98:	44c8      	add	r8, r9
 8005a9a:	44c4      	add	ip, r8
 8005a9c:	4463      	add	r3, ip
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	4bde      	ldr	r3, [pc, #888]	; (8005e1c <main+0x418>)
 8005aa4:	229e      	movs	r2, #158	; 0x9e
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	4694      	mov	ip, r2
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4690      	mov	r8, r2
 8005aae:	2208      	movs	r2, #8
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	4692      	mov	sl, r2
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	4693      	mov	fp, r2
 8005aba:	44bb      	add	fp, r7
 8005abc:	44da      	add	sl, fp
 8005abe:	44d1      	add	r9, sl
 8005ac0:	44c8      	add	r8, r9
 8005ac2:	44c4      	add	ip, r8
 8005ac4:	4463      	add	r3, ip
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	609a      	str	r2, [r3, #8]
	float accel_data_1[3] = {0,0,0};
 8005aca:	4bd5      	ldr	r3, [pc, #852]	; (8005e20 <main+0x41c>)
 8005acc:	229e      	movs	r2, #158	; 0x9e
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	4694      	mov	ip, r2
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	4690      	mov	r8, r2
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	4691      	mov	r9, r2
 8005ada:	2208      	movs	r2, #8
 8005adc:	4692      	mov	sl, r2
 8005ade:	2208      	movs	r2, #8
 8005ae0:	4693      	mov	fp, r2
 8005ae2:	44bb      	add	fp, r7
 8005ae4:	44da      	add	sl, fp
 8005ae6:	44d1      	add	r9, sl
 8005ae8:	44c8      	add	r8, r9
 8005aea:	44c4      	add	ip, r8
 8005aec:	4463      	add	r3, ip
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4bcb      	ldr	r3, [pc, #812]	; (8005e20 <main+0x41c>)
 8005af4:	229e      	movs	r2, #158	; 0x9e
 8005af6:	0092      	lsls	r2, r2, #2
 8005af8:	4694      	mov	ip, r2
 8005afa:	2208      	movs	r2, #8
 8005afc:	4690      	mov	r8, r2
 8005afe:	2208      	movs	r2, #8
 8005b00:	4691      	mov	r9, r2
 8005b02:	2208      	movs	r2, #8
 8005b04:	4692      	mov	sl, r2
 8005b06:	2208      	movs	r2, #8
 8005b08:	4693      	mov	fp, r2
 8005b0a:	44bb      	add	fp, r7
 8005b0c:	44da      	add	sl, fp
 8005b0e:	44d1      	add	r9, sl
 8005b10:	44c8      	add	r8, r9
 8005b12:	44c4      	add	ip, r8
 8005b14:	4463      	add	r3, ip
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	4bc1      	ldr	r3, [pc, #772]	; (8005e20 <main+0x41c>)
 8005b1c:	229e      	movs	r2, #158	; 0x9e
 8005b1e:	0092      	lsls	r2, r2, #2
 8005b20:	4694      	mov	ip, r2
 8005b22:	2208      	movs	r2, #8
 8005b24:	4690      	mov	r8, r2
 8005b26:	2208      	movs	r2, #8
 8005b28:	4691      	mov	r9, r2
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4692      	mov	sl, r2
 8005b2e:	2208      	movs	r2, #8
 8005b30:	4693      	mov	fp, r2
 8005b32:	44bb      	add	fp, r7
 8005b34:	44da      	add	sl, fp
 8005b36:	44d1      	add	r9, sl
 8005b38:	44c8      	add	r8, r9
 8005b3a:	44c4      	add	ip, r8
 8005b3c:	4463      	add	r3, ip
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
	float gyro_data_0[3] = {0,0,0};
 8005b42:	4bb8      	ldr	r3, [pc, #736]	; (8005e24 <main+0x420>)
 8005b44:	229e      	movs	r2, #158	; 0x9e
 8005b46:	0092      	lsls	r2, r2, #2
 8005b48:	4694      	mov	ip, r2
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	4690      	mov	r8, r2
 8005b4e:	2208      	movs	r2, #8
 8005b50:	4691      	mov	r9, r2
 8005b52:	2208      	movs	r2, #8
 8005b54:	4692      	mov	sl, r2
 8005b56:	2208      	movs	r2, #8
 8005b58:	4693      	mov	fp, r2
 8005b5a:	44bb      	add	fp, r7
 8005b5c:	44da      	add	sl, fp
 8005b5e:	44d1      	add	r9, sl
 8005b60:	44c8      	add	r8, r9
 8005b62:	44c4      	add	ip, r8
 8005b64:	4463      	add	r3, ip
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	4bae      	ldr	r3, [pc, #696]	; (8005e24 <main+0x420>)
 8005b6c:	229e      	movs	r2, #158	; 0x9e
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	4694      	mov	ip, r2
 8005b72:	2208      	movs	r2, #8
 8005b74:	4690      	mov	r8, r2
 8005b76:	2208      	movs	r2, #8
 8005b78:	4691      	mov	r9, r2
 8005b7a:	2208      	movs	r2, #8
 8005b7c:	4692      	mov	sl, r2
 8005b7e:	2208      	movs	r2, #8
 8005b80:	4693      	mov	fp, r2
 8005b82:	44bb      	add	fp, r7
 8005b84:	44da      	add	sl, fp
 8005b86:	44d1      	add	r9, sl
 8005b88:	44c8      	add	r8, r9
 8005b8a:	44c4      	add	ip, r8
 8005b8c:	4463      	add	r3, ip
 8005b8e:	2200      	movs	r2, #0
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	4ba4      	ldr	r3, [pc, #656]	; (8005e24 <main+0x420>)
 8005b94:	229e      	movs	r2, #158	; 0x9e
 8005b96:	0092      	lsls	r2, r2, #2
 8005b98:	4694      	mov	ip, r2
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	4691      	mov	r9, r2
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	4692      	mov	sl, r2
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	4693      	mov	fp, r2
 8005baa:	44bb      	add	fp, r7
 8005bac:	44da      	add	sl, fp
 8005bae:	44d1      	add	r9, sl
 8005bb0:	44c8      	add	r8, r9
 8005bb2:	44c4      	add	ip, r8
 8005bb4:	4463      	add	r3, ip
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	609a      	str	r2, [r3, #8]
	float gyro_data_1[3] = {0,0,0};
 8005bba:	4b9b      	ldr	r3, [pc, #620]	; (8005e28 <main+0x424>)
 8005bbc:	229e      	movs	r2, #158	; 0x9e
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4694      	mov	ip, r2
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	4690      	mov	r8, r2
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	4691      	mov	r9, r2
 8005bca:	2208      	movs	r2, #8
 8005bcc:	4692      	mov	sl, r2
 8005bce:	2208      	movs	r2, #8
 8005bd0:	4693      	mov	fp, r2
 8005bd2:	44bb      	add	fp, r7
 8005bd4:	44da      	add	sl, fp
 8005bd6:	44d1      	add	r9, sl
 8005bd8:	44c8      	add	r8, r9
 8005bda:	44c4      	add	ip, r8
 8005bdc:	4463      	add	r3, ip
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	4b91      	ldr	r3, [pc, #580]	; (8005e28 <main+0x424>)
 8005be4:	229e      	movs	r2, #158	; 0x9e
 8005be6:	0092      	lsls	r2, r2, #2
 8005be8:	4694      	mov	ip, r2
 8005bea:	2208      	movs	r2, #8
 8005bec:	4690      	mov	r8, r2
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	4692      	mov	sl, r2
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	4693      	mov	fp, r2
 8005bfa:	44bb      	add	fp, r7
 8005bfc:	44da      	add	sl, fp
 8005bfe:	44d1      	add	r9, sl
 8005c00:	44c8      	add	r8, r9
 8005c02:	44c4      	add	ip, r8
 8005c04:	4463      	add	r3, ip
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	4b87      	ldr	r3, [pc, #540]	; (8005e28 <main+0x424>)
 8005c0c:	229e      	movs	r2, #158	; 0x9e
 8005c0e:	0092      	lsls	r2, r2, #2
 8005c10:	4694      	mov	ip, r2
 8005c12:	2208      	movs	r2, #8
 8005c14:	4690      	mov	r8, r2
 8005c16:	2208      	movs	r2, #8
 8005c18:	4691      	mov	r9, r2
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4692      	mov	sl, r2
 8005c1e:	2208      	movs	r2, #8
 8005c20:	4693      	mov	fp, r2
 8005c22:	44bb      	add	fp, r7
 8005c24:	44da      	add	sl, fp
 8005c26:	44d1      	add	r9, sl
 8005c28:	44c8      	add	r8, r9
 8005c2a:	44c4      	add	ip, r8
 8005c2c:	4463      	add	r3, ip
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_0[3] = {0,0,0};
 8005c32:	4b7e      	ldr	r3, [pc, #504]	; (8005e2c <main+0x428>)
 8005c34:	229e      	movs	r2, #158	; 0x9e
 8005c36:	0092      	lsls	r2, r2, #2
 8005c38:	4694      	mov	ip, r2
 8005c3a:	2208      	movs	r2, #8
 8005c3c:	4690      	mov	r8, r2
 8005c3e:	2208      	movs	r2, #8
 8005c40:	4691      	mov	r9, r2
 8005c42:	2208      	movs	r2, #8
 8005c44:	4692      	mov	sl, r2
 8005c46:	2208      	movs	r2, #8
 8005c48:	4693      	mov	fp, r2
 8005c4a:	44bb      	add	fp, r7
 8005c4c:	44da      	add	sl, fp
 8005c4e:	44d1      	add	r9, sl
 8005c50:	44c8      	add	r8, r9
 8005c52:	44c4      	add	ip, r8
 8005c54:	4463      	add	r3, ip
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	4b74      	ldr	r3, [pc, #464]	; (8005e2c <main+0x428>)
 8005c5c:	229e      	movs	r2, #158	; 0x9e
 8005c5e:	0092      	lsls	r2, r2, #2
 8005c60:	4694      	mov	ip, r2
 8005c62:	2208      	movs	r2, #8
 8005c64:	4690      	mov	r8, r2
 8005c66:	2208      	movs	r2, #8
 8005c68:	4691      	mov	r9, r2
 8005c6a:	2208      	movs	r2, #8
 8005c6c:	4692      	mov	sl, r2
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4693      	mov	fp, r2
 8005c72:	44bb      	add	fp, r7
 8005c74:	44da      	add	sl, fp
 8005c76:	44d1      	add	r9, sl
 8005c78:	44c8      	add	r8, r9
 8005c7a:	44c4      	add	ip, r8
 8005c7c:	4463      	add	r3, ip
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <main+0x428>)
 8005c84:	229e      	movs	r2, #158	; 0x9e
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	4694      	mov	ip, r2
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	4690      	mov	r8, r2
 8005c8e:	2208      	movs	r2, #8
 8005c90:	4691      	mov	r9, r2
 8005c92:	2208      	movs	r2, #8
 8005c94:	4692      	mov	sl, r2
 8005c96:	2208      	movs	r2, #8
 8005c98:	4693      	mov	fp, r2
 8005c9a:	44bb      	add	fp, r7
 8005c9c:	44da      	add	sl, fp
 8005c9e:	44d1      	add	r9, sl
 8005ca0:	44c8      	add	r8, r9
 8005ca2:	44c4      	add	ip, r8
 8005ca4:	4463      	add	r3, ip
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
	float accel_data_earthframe_1[3] = {0,0,0};
 8005caa:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <main+0x42c>)
 8005cac:	229e      	movs	r2, #158	; 0x9e
 8005cae:	0092      	lsls	r2, r2, #2
 8005cb0:	4694      	mov	ip, r2
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	4690      	mov	r8, r2
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	4691      	mov	r9, r2
 8005cba:	2208      	movs	r2, #8
 8005cbc:	4692      	mov	sl, r2
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	4693      	mov	fp, r2
 8005cc2:	44bb      	add	fp, r7
 8005cc4:	44da      	add	sl, fp
 8005cc6:	44d1      	add	r9, sl
 8005cc8:	44c8      	add	r8, r9
 8005cca:	44c4      	add	ip, r8
 8005ccc:	4463      	add	r3, ip
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	4b57      	ldr	r3, [pc, #348]	; (8005e30 <main+0x42c>)
 8005cd4:	229e      	movs	r2, #158	; 0x9e
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	4694      	mov	ip, r2
 8005cda:	2208      	movs	r2, #8
 8005cdc:	4690      	mov	r8, r2
 8005cde:	2208      	movs	r2, #8
 8005ce0:	4691      	mov	r9, r2
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	4692      	mov	sl, r2
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	4693      	mov	fp, r2
 8005cea:	44bb      	add	fp, r7
 8005cec:	44da      	add	sl, fp
 8005cee:	44d1      	add	r9, sl
 8005cf0:	44c8      	add	r8, r9
 8005cf2:	44c4      	add	ip, r8
 8005cf4:	4463      	add	r3, ip
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <main+0x42c>)
 8005cfc:	229e      	movs	r2, #158	; 0x9e
 8005cfe:	0092      	lsls	r2, r2, #2
 8005d00:	4694      	mov	ip, r2
 8005d02:	2208      	movs	r2, #8
 8005d04:	4690      	mov	r8, r2
 8005d06:	2208      	movs	r2, #8
 8005d08:	4691      	mov	r9, r2
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	4692      	mov	sl, r2
 8005d0e:	2208      	movs	r2, #8
 8005d10:	4693      	mov	fp, r2
 8005d12:	44bb      	add	fp, r7
 8005d14:	44da      	add	sl, fp
 8005d16:	44d1      	add	r9, sl
 8005d18:	44c8      	add	r8, r9
 8005d1a:	44c4      	add	ip, r8
 8005d1c:	4463      	add	r3, ip
 8005d1e:	2200      	movs	r2, #0
 8005d20:	609a      	str	r2, [r3, #8]
	float gyro_bias_0[3] = {0,0,0};
 8005d22:	4b44      	ldr	r3, [pc, #272]	; (8005e34 <main+0x430>)
 8005d24:	229e      	movs	r2, #158	; 0x9e
 8005d26:	0092      	lsls	r2, r2, #2
 8005d28:	4694      	mov	ip, r2
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	4690      	mov	r8, r2
 8005d2e:	2208      	movs	r2, #8
 8005d30:	4691      	mov	r9, r2
 8005d32:	2208      	movs	r2, #8
 8005d34:	4692      	mov	sl, r2
 8005d36:	2208      	movs	r2, #8
 8005d38:	4693      	mov	fp, r2
 8005d3a:	44bb      	add	fp, r7
 8005d3c:	44da      	add	sl, fp
 8005d3e:	44d1      	add	r9, sl
 8005d40:	44c8      	add	r8, r9
 8005d42:	44c4      	add	ip, r8
 8005d44:	4463      	add	r3, ip
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <main+0x430>)
 8005d4c:	229e      	movs	r2, #158	; 0x9e
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	4694      	mov	ip, r2
 8005d52:	2208      	movs	r2, #8
 8005d54:	4690      	mov	r8, r2
 8005d56:	2208      	movs	r2, #8
 8005d58:	4691      	mov	r9, r2
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4692      	mov	sl, r2
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4693      	mov	fp, r2
 8005d62:	44bb      	add	fp, r7
 8005d64:	44da      	add	sl, fp
 8005d66:	44d1      	add	r9, sl
 8005d68:	44c8      	add	r8, r9
 8005d6a:	44c4      	add	ip, r8
 8005d6c:	4463      	add	r3, ip
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	4b30      	ldr	r3, [pc, #192]	; (8005e34 <main+0x430>)
 8005d74:	229e      	movs	r2, #158	; 0x9e
 8005d76:	0092      	lsls	r2, r2, #2
 8005d78:	4694      	mov	ip, r2
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	2208      	movs	r2, #8
 8005d80:	4691      	mov	r9, r2
 8005d82:	2208      	movs	r2, #8
 8005d84:	4692      	mov	sl, r2
 8005d86:	2208      	movs	r2, #8
 8005d88:	4693      	mov	fp, r2
 8005d8a:	44bb      	add	fp, r7
 8005d8c:	44da      	add	sl, fp
 8005d8e:	44d1      	add	r9, sl
 8005d90:	44c8      	add	r8, r9
 8005d92:	44c4      	add	ip, r8
 8005d94:	4463      	add	r3, ip
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
	float gyro_bias_1[3] = {0,0,0};
 8005d9a:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <main+0x434>)
 8005d9c:	229e      	movs	r2, #158	; 0x9e
 8005d9e:	0092      	lsls	r2, r2, #2
 8005da0:	4694      	mov	ip, r2
 8005da2:	2208      	movs	r2, #8
 8005da4:	4690      	mov	r8, r2
 8005da6:	2208      	movs	r2, #8
 8005da8:	4691      	mov	r9, r2
 8005daa:	2208      	movs	r2, #8
 8005dac:	4692      	mov	sl, r2
 8005dae:	2208      	movs	r2, #8
 8005db0:	4693      	mov	fp, r2
 8005db2:	44bb      	add	fp, r7
 8005db4:	44da      	add	sl, fp
 8005db6:	44d1      	add	r9, sl
 8005db8:	44c8      	add	r8, r9
 8005dba:	44c4      	add	ip, r8
 8005dbc:	4463      	add	r3, ip
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	; (8005e38 <main+0x434>)
 8005dc4:	229e      	movs	r2, #158	; 0x9e
 8005dc6:	0092      	lsls	r2, r2, #2
 8005dc8:	4694      	mov	ip, r2
 8005dca:	2208      	movs	r2, #8
 8005dcc:	4690      	mov	r8, r2
 8005dce:	2208      	movs	r2, #8
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	4693      	mov	fp, r2
 8005dda:	44bb      	add	fp, r7
 8005ddc:	44da      	add	sl, fp
 8005dde:	44d1      	add	r9, sl
 8005de0:	44c8      	add	r8, r9
 8005de2:	44c4      	add	ip, r8
 8005de4:	4463      	add	r3, ip
 8005de6:	2200      	movs	r2, #0
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <main+0x434>)
 8005dec:	229e      	movs	r2, #158	; 0x9e
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	4694      	mov	ip, r2
 8005df2:	2208      	movs	r2, #8
 8005df4:	4690      	mov	r8, r2
 8005df6:	2208      	movs	r2, #8
 8005df8:	4691      	mov	r9, r2
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	4692      	mov	sl, r2
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4693      	mov	fp, r2
 8005e02:	44bb      	add	fp, r7
 8005e04:	44da      	add	sl, fp
 8005e06:	44d1      	add	r9, sl
 8005e08:	e018      	b.n	8005e3c <main+0x438>
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	fffffd54 	.word	0xfffffd54
 8005e10:	200004e8 	.word	0x200004e8
 8005e14:	20000484 	.word	0x20000484
 8005e18:	200003a8 	.word	0x200003a8
 8005e1c:	fffffee8 	.word	0xfffffee8
 8005e20:	fffffedc 	.word	0xfffffedc
 8005e24:	fffffed0 	.word	0xfffffed0
 8005e28:	fffffec4 	.word	0xfffffec4
 8005e2c:	fffffeb8 	.word	0xfffffeb8
 8005e30:	fffffeac 	.word	0xfffffeac
 8005e34:	fffffea0 	.word	0xfffffea0
 8005e38:	fffffe94 	.word	0xfffffe94
 8005e3c:	44c8      	add	r8, r9
 8005e3e:	44c4      	add	ip, r8
 8005e40:	4463      	add	r3, ip
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
	float accel_bias_0[2] = {0,0};
 8005e46:	4bfe      	ldr	r3, [pc, #1016]	; (8006240 <main+0x83c>)
 8005e48:	229e      	movs	r2, #158	; 0x9e
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	4694      	mov	ip, r2
 8005e4e:	2208      	movs	r2, #8
 8005e50:	4690      	mov	r8, r2
 8005e52:	2208      	movs	r2, #8
 8005e54:	4691      	mov	r9, r2
 8005e56:	2208      	movs	r2, #8
 8005e58:	4692      	mov	sl, r2
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4693      	mov	fp, r2
 8005e5e:	44bb      	add	fp, r7
 8005e60:	44da      	add	sl, fp
 8005e62:	44d1      	add	r9, sl
 8005e64:	44c8      	add	r8, r9
 8005e66:	44c4      	add	ip, r8
 8005e68:	4463      	add	r3, ip
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	4bf4      	ldr	r3, [pc, #976]	; (8006240 <main+0x83c>)
 8005e70:	229e      	movs	r2, #158	; 0x9e
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	4694      	mov	ip, r2
 8005e76:	2208      	movs	r2, #8
 8005e78:	4690      	mov	r8, r2
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	4691      	mov	r9, r2
 8005e7e:	2208      	movs	r2, #8
 8005e80:	4692      	mov	sl, r2
 8005e82:	2208      	movs	r2, #8
 8005e84:	4693      	mov	fp, r2
 8005e86:	44bb      	add	fp, r7
 8005e88:	44da      	add	sl, fp
 8005e8a:	44d1      	add	r9, sl
 8005e8c:	44c8      	add	r8, r9
 8005e8e:	44c4      	add	ip, r8
 8005e90:	4463      	add	r3, ip
 8005e92:	2200      	movs	r2, #0
 8005e94:	605a      	str	r2, [r3, #4]
	float accel_bias_1[2] = {0,0};
 8005e96:	4beb      	ldr	r3, [pc, #940]	; (8006244 <main+0x840>)
 8005e98:	229e      	movs	r2, #158	; 0x9e
 8005e9a:	0092      	lsls	r2, r2, #2
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	4690      	mov	r8, r2
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	4691      	mov	r9, r2
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	4692      	mov	sl, r2
 8005eaa:	2208      	movs	r2, #8
 8005eac:	4693      	mov	fp, r2
 8005eae:	44bb      	add	fp, r7
 8005eb0:	44da      	add	sl, fp
 8005eb2:	44d1      	add	r9, sl
 8005eb4:	44c8      	add	r8, r9
 8005eb6:	44c4      	add	ip, r8
 8005eb8:	4463      	add	r3, ip
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	4be1      	ldr	r3, [pc, #900]	; (8006244 <main+0x840>)
 8005ec0:	229e      	movs	r2, #158	; 0x9e
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	4694      	mov	ip, r2
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	4690      	mov	r8, r2
 8005eca:	2208      	movs	r2, #8
 8005ecc:	4691      	mov	r9, r2
 8005ece:	2208      	movs	r2, #8
 8005ed0:	4692      	mov	sl, r2
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4693      	mov	fp, r2
 8005ed6:	44bb      	add	fp, r7
 8005ed8:	44da      	add	sl, fp
 8005eda:	44d1      	add	r9, sl
 8005edc:	44c8      	add	r8, r9
 8005ede:	44c4      	add	ip, r8
 8005ee0:	4463      	add	r3, ip
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	605a      	str	r2, [r3, #4]
		float tampering_buffer_0[6][TAMPERING_BUFFER_SIZE];
		float tampering_buffer_1[6][TAMPERING_BUFFER_SIZE];
	#endif

	// High pass Filter Variables
	float low_pass_gyro_0[3] = {0,0,0};
 8005ee6:	4bd8      	ldr	r3, [pc, #864]	; (8006248 <main+0x844>)
 8005ee8:	229e      	movs	r2, #158	; 0x9e
 8005eea:	0092      	lsls	r2, r2, #2
 8005eec:	4694      	mov	ip, r2
 8005eee:	2208      	movs	r2, #8
 8005ef0:	4690      	mov	r8, r2
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	4691      	mov	r9, r2
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	4692      	mov	sl, r2
 8005efa:	2208      	movs	r2, #8
 8005efc:	4693      	mov	fp, r2
 8005efe:	44bb      	add	fp, r7
 8005f00:	44da      	add	sl, fp
 8005f02:	44d1      	add	r9, sl
 8005f04:	44c8      	add	r8, r9
 8005f06:	44c4      	add	ip, r8
 8005f08:	4463      	add	r3, ip
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	4bce      	ldr	r3, [pc, #824]	; (8006248 <main+0x844>)
 8005f10:	229e      	movs	r2, #158	; 0x9e
 8005f12:	0092      	lsls	r2, r2, #2
 8005f14:	4694      	mov	ip, r2
 8005f16:	2208      	movs	r2, #8
 8005f18:	4690      	mov	r8, r2
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	2208      	movs	r2, #8
 8005f20:	4692      	mov	sl, r2
 8005f22:	2208      	movs	r2, #8
 8005f24:	4693      	mov	fp, r2
 8005f26:	44bb      	add	fp, r7
 8005f28:	44da      	add	sl, fp
 8005f2a:	44d1      	add	r9, sl
 8005f2c:	44c8      	add	r8, r9
 8005f2e:	44c4      	add	ip, r8
 8005f30:	4463      	add	r3, ip
 8005f32:	2200      	movs	r2, #0
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	4bc4      	ldr	r3, [pc, #784]	; (8006248 <main+0x844>)
 8005f38:	229e      	movs	r2, #158	; 0x9e
 8005f3a:	0092      	lsls	r2, r2, #2
 8005f3c:	4694      	mov	ip, r2
 8005f3e:	2208      	movs	r2, #8
 8005f40:	4690      	mov	r8, r2
 8005f42:	2208      	movs	r2, #8
 8005f44:	4691      	mov	r9, r2
 8005f46:	2208      	movs	r2, #8
 8005f48:	4692      	mov	sl, r2
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4693      	mov	fp, r2
 8005f4e:	44bb      	add	fp, r7
 8005f50:	44da      	add	sl, fp
 8005f52:	44d1      	add	r9, sl
 8005f54:	44c8      	add	r8, r9
 8005f56:	44c4      	add	ip, r8
 8005f58:	4463      	add	r3, ip
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	609a      	str	r2, [r3, #8]
	float low_pass_gyro_1[3] = {0,0,0};
 8005f5e:	4bbb      	ldr	r3, [pc, #748]	; (800624c <main+0x848>)
 8005f60:	229e      	movs	r2, #158	; 0x9e
 8005f62:	0092      	lsls	r2, r2, #2
 8005f64:	4694      	mov	ip, r2
 8005f66:	2208      	movs	r2, #8
 8005f68:	4690      	mov	r8, r2
 8005f6a:	2208      	movs	r2, #8
 8005f6c:	4691      	mov	r9, r2
 8005f6e:	2208      	movs	r2, #8
 8005f70:	4692      	mov	sl, r2
 8005f72:	2208      	movs	r2, #8
 8005f74:	4693      	mov	fp, r2
 8005f76:	44bb      	add	fp, r7
 8005f78:	44da      	add	sl, fp
 8005f7a:	44d1      	add	r9, sl
 8005f7c:	44c8      	add	r8, r9
 8005f7e:	44c4      	add	ip, r8
 8005f80:	4463      	add	r3, ip
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	4bb1      	ldr	r3, [pc, #708]	; (800624c <main+0x848>)
 8005f88:	229e      	movs	r2, #158	; 0x9e
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	4694      	mov	ip, r2
 8005f8e:	2208      	movs	r2, #8
 8005f90:	4690      	mov	r8, r2
 8005f92:	2208      	movs	r2, #8
 8005f94:	4691      	mov	r9, r2
 8005f96:	2208      	movs	r2, #8
 8005f98:	4692      	mov	sl, r2
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	4693      	mov	fp, r2
 8005f9e:	44bb      	add	fp, r7
 8005fa0:	44da      	add	sl, fp
 8005fa2:	44d1      	add	r9, sl
 8005fa4:	44c8      	add	r8, r9
 8005fa6:	44c4      	add	ip, r8
 8005fa8:	4463      	add	r3, ip
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	4ba7      	ldr	r3, [pc, #668]	; (800624c <main+0x848>)
 8005fb0:	229e      	movs	r2, #158	; 0x9e
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	4694      	mov	ip, r2
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	4690      	mov	r8, r2
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4691      	mov	r9, r2
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4692      	mov	sl, r2
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4693      	mov	fp, r2
 8005fc6:	44bb      	add	fp, r7
 8005fc8:	44da      	add	sl, fp
 8005fca:	44d1      	add	r9, sl
 8005fcc:	44c8      	add	r8, r9
 8005fce:	44c4      	add	ip, r8
 8005fd0:	4463      	add	r3, ip
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_0[3] = {0,0,0};
 8005fd6:	4b9e      	ldr	r3, [pc, #632]	; (8006250 <main+0x84c>)
 8005fd8:	229e      	movs	r2, #158	; 0x9e
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	4694      	mov	ip, r2
 8005fde:	2208      	movs	r2, #8
 8005fe0:	4690      	mov	r8, r2
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	4691      	mov	r9, r2
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	4692      	mov	sl, r2
 8005fea:	2208      	movs	r2, #8
 8005fec:	4693      	mov	fp, r2
 8005fee:	44bb      	add	fp, r7
 8005ff0:	44da      	add	sl, fp
 8005ff2:	44d1      	add	r9, sl
 8005ff4:	44c8      	add	r8, r9
 8005ff6:	44c4      	add	ip, r8
 8005ff8:	4463      	add	r3, ip
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	4b94      	ldr	r3, [pc, #592]	; (8006250 <main+0x84c>)
 8006000:	229e      	movs	r2, #158	; 0x9e
 8006002:	0092      	lsls	r2, r2, #2
 8006004:	4694      	mov	ip, r2
 8006006:	2208      	movs	r2, #8
 8006008:	4690      	mov	r8, r2
 800600a:	2208      	movs	r2, #8
 800600c:	4691      	mov	r9, r2
 800600e:	2208      	movs	r2, #8
 8006010:	4692      	mov	sl, r2
 8006012:	2208      	movs	r2, #8
 8006014:	4693      	mov	fp, r2
 8006016:	44bb      	add	fp, r7
 8006018:	44da      	add	sl, fp
 800601a:	44d1      	add	r9, sl
 800601c:	44c8      	add	r8, r9
 800601e:	44c4      	add	ip, r8
 8006020:	4463      	add	r3, ip
 8006022:	2200      	movs	r2, #0
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	4b8a      	ldr	r3, [pc, #552]	; (8006250 <main+0x84c>)
 8006028:	229e      	movs	r2, #158	; 0x9e
 800602a:	0092      	lsls	r2, r2, #2
 800602c:	4694      	mov	ip, r2
 800602e:	2208      	movs	r2, #8
 8006030:	4690      	mov	r8, r2
 8006032:	2208      	movs	r2, #8
 8006034:	4691      	mov	r9, r2
 8006036:	2208      	movs	r2, #8
 8006038:	4692      	mov	sl, r2
 800603a:	2208      	movs	r2, #8
 800603c:	4693      	mov	fp, r2
 800603e:	44bb      	add	fp, r7
 8006040:	44da      	add	sl, fp
 8006042:	44d1      	add	r9, sl
 8006044:	44c8      	add	r8, r9
 8006046:	44c4      	add	ip, r8
 8006048:	4463      	add	r3, ip
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
	float prev_low_pass_gyro_1[3] = {0,0,0};
 800604e:	4b81      	ldr	r3, [pc, #516]	; (8006254 <main+0x850>)
 8006050:	229e      	movs	r2, #158	; 0x9e
 8006052:	0092      	lsls	r2, r2, #2
 8006054:	4694      	mov	ip, r2
 8006056:	2208      	movs	r2, #8
 8006058:	4690      	mov	r8, r2
 800605a:	2208      	movs	r2, #8
 800605c:	4691      	mov	r9, r2
 800605e:	2208      	movs	r2, #8
 8006060:	4692      	mov	sl, r2
 8006062:	2208      	movs	r2, #8
 8006064:	4693      	mov	fp, r2
 8006066:	44bb      	add	fp, r7
 8006068:	44da      	add	sl, fp
 800606a:	44d1      	add	r9, sl
 800606c:	44c8      	add	r8, r9
 800606e:	44c4      	add	ip, r8
 8006070:	4463      	add	r3, ip
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	4b77      	ldr	r3, [pc, #476]	; (8006254 <main+0x850>)
 8006078:	229e      	movs	r2, #158	; 0x9e
 800607a:	0092      	lsls	r2, r2, #2
 800607c:	4694      	mov	ip, r2
 800607e:	2208      	movs	r2, #8
 8006080:	4690      	mov	r8, r2
 8006082:	2208      	movs	r2, #8
 8006084:	4691      	mov	r9, r2
 8006086:	2208      	movs	r2, #8
 8006088:	4692      	mov	sl, r2
 800608a:	2208      	movs	r2, #8
 800608c:	4693      	mov	fp, r2
 800608e:	44bb      	add	fp, r7
 8006090:	44da      	add	sl, fp
 8006092:	44d1      	add	r9, sl
 8006094:	44c8      	add	r8, r9
 8006096:	44c4      	add	ip, r8
 8006098:	4463      	add	r3, ip
 800609a:	2200      	movs	r2, #0
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	4b6d      	ldr	r3, [pc, #436]	; (8006254 <main+0x850>)
 80060a0:	229e      	movs	r2, #158	; 0x9e
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	4694      	mov	ip, r2
 80060a6:	2208      	movs	r2, #8
 80060a8:	4690      	mov	r8, r2
 80060aa:	2208      	movs	r2, #8
 80060ac:	4691      	mov	r9, r2
 80060ae:	2208      	movs	r2, #8
 80060b0:	4692      	mov	sl, r2
 80060b2:	2208      	movs	r2, #8
 80060b4:	4693      	mov	fp, r2
 80060b6:	44bb      	add	fp, r7
 80060b8:	44da      	add	sl, fp
 80060ba:	44d1      	add	r9, sl
 80060bc:	44c8      	add	r8, r9
 80060be:	44c4      	add	ip, r8
 80060c0:	4463      	add	r3, ip
 80060c2:	2200      	movs	r2, #0
 80060c4:	609a      	str	r2, [r3, #8]
	float low_alpha_gyro = 0.2;
 80060c6:	4b64      	ldr	r3, [pc, #400]	; (8006258 <main+0x854>)
 80060c8:	2297      	movs	r2, #151	; 0x97
 80060ca:	0092      	lsls	r2, r2, #2
 80060cc:	2108      	movs	r1, #8
 80060ce:	468c      	mov	ip, r1
 80060d0:	2108      	movs	r1, #8
 80060d2:	4688      	mov	r8, r1
 80060d4:	2108      	movs	r1, #8
 80060d6:	4689      	mov	r9, r1
 80060d8:	2108      	movs	r1, #8
 80060da:	468a      	mov	sl, r1
 80060dc:	44ba      	add	sl, r7
 80060de:	44d1      	add	r9, sl
 80060e0:	44c8      	add	r8, r9
 80060e2:	44c4      	add	ip, r8
 80060e4:	4462      	add	r2, ip
 80060e6:	6013      	str	r3, [r2, #0]

	float low_pass_accel_0[3] = {0,0,0};
 80060e8:	4b5c      	ldr	r3, [pc, #368]	; (800625c <main+0x858>)
 80060ea:	229e      	movs	r2, #158	; 0x9e
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	4694      	mov	ip, r2
 80060f0:	2208      	movs	r2, #8
 80060f2:	4690      	mov	r8, r2
 80060f4:	2208      	movs	r2, #8
 80060f6:	4691      	mov	r9, r2
 80060f8:	2208      	movs	r2, #8
 80060fa:	4692      	mov	sl, r2
 80060fc:	2208      	movs	r2, #8
 80060fe:	4693      	mov	fp, r2
 8006100:	44bb      	add	fp, r7
 8006102:	44da      	add	sl, fp
 8006104:	44d1      	add	r9, sl
 8006106:	44c8      	add	r8, r9
 8006108:	44c4      	add	ip, r8
 800610a:	4463      	add	r3, ip
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	4b52      	ldr	r3, [pc, #328]	; (800625c <main+0x858>)
 8006112:	229e      	movs	r2, #158	; 0x9e
 8006114:	0092      	lsls	r2, r2, #2
 8006116:	4694      	mov	ip, r2
 8006118:	2208      	movs	r2, #8
 800611a:	4690      	mov	r8, r2
 800611c:	2208      	movs	r2, #8
 800611e:	4691      	mov	r9, r2
 8006120:	2208      	movs	r2, #8
 8006122:	4692      	mov	sl, r2
 8006124:	2208      	movs	r2, #8
 8006126:	4693      	mov	fp, r2
 8006128:	44bb      	add	fp, r7
 800612a:	44da      	add	sl, fp
 800612c:	44d1      	add	r9, sl
 800612e:	44c8      	add	r8, r9
 8006130:	44c4      	add	ip, r8
 8006132:	4463      	add	r3, ip
 8006134:	2200      	movs	r2, #0
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	4b48      	ldr	r3, [pc, #288]	; (800625c <main+0x858>)
 800613a:	229e      	movs	r2, #158	; 0x9e
 800613c:	0092      	lsls	r2, r2, #2
 800613e:	4694      	mov	ip, r2
 8006140:	2208      	movs	r2, #8
 8006142:	4690      	mov	r8, r2
 8006144:	2208      	movs	r2, #8
 8006146:	4691      	mov	r9, r2
 8006148:	2208      	movs	r2, #8
 800614a:	4692      	mov	sl, r2
 800614c:	2208      	movs	r2, #8
 800614e:	4693      	mov	fp, r2
 8006150:	44bb      	add	fp, r7
 8006152:	44da      	add	sl, fp
 8006154:	44d1      	add	r9, sl
 8006156:	44c8      	add	r8, r9
 8006158:	44c4      	add	ip, r8
 800615a:	4463      	add	r3, ip
 800615c:	2200      	movs	r2, #0
 800615e:	609a      	str	r2, [r3, #8]
	float low_pass_accel_1[3] = {0,0,0};
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <main+0x85c>)
 8006162:	229e      	movs	r2, #158	; 0x9e
 8006164:	0092      	lsls	r2, r2, #2
 8006166:	4694      	mov	ip, r2
 8006168:	2208      	movs	r2, #8
 800616a:	4690      	mov	r8, r2
 800616c:	2208      	movs	r2, #8
 800616e:	4691      	mov	r9, r2
 8006170:	2208      	movs	r2, #8
 8006172:	4692      	mov	sl, r2
 8006174:	2208      	movs	r2, #8
 8006176:	4693      	mov	fp, r2
 8006178:	44bb      	add	fp, r7
 800617a:	44da      	add	sl, fp
 800617c:	44d1      	add	r9, sl
 800617e:	44c8      	add	r8, r9
 8006180:	44c4      	add	ip, r8
 8006182:	4463      	add	r3, ip
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	4b35      	ldr	r3, [pc, #212]	; (8006260 <main+0x85c>)
 800618a:	229e      	movs	r2, #158	; 0x9e
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	4694      	mov	ip, r2
 8006190:	2208      	movs	r2, #8
 8006192:	4690      	mov	r8, r2
 8006194:	2208      	movs	r2, #8
 8006196:	4691      	mov	r9, r2
 8006198:	2208      	movs	r2, #8
 800619a:	4692      	mov	sl, r2
 800619c:	2208      	movs	r2, #8
 800619e:	4693      	mov	fp, r2
 80061a0:	44bb      	add	fp, r7
 80061a2:	44da      	add	sl, fp
 80061a4:	44d1      	add	r9, sl
 80061a6:	44c8      	add	r8, r9
 80061a8:	44c4      	add	ip, r8
 80061aa:	4463      	add	r3, ip
 80061ac:	2200      	movs	r2, #0
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	4b2b      	ldr	r3, [pc, #172]	; (8006260 <main+0x85c>)
 80061b2:	229e      	movs	r2, #158	; 0x9e
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	4694      	mov	ip, r2
 80061b8:	2208      	movs	r2, #8
 80061ba:	4690      	mov	r8, r2
 80061bc:	2208      	movs	r2, #8
 80061be:	4691      	mov	r9, r2
 80061c0:	2208      	movs	r2, #8
 80061c2:	4692      	mov	sl, r2
 80061c4:	2208      	movs	r2, #8
 80061c6:	4693      	mov	fp, r2
 80061c8:	44bb      	add	fp, r7
 80061ca:	44da      	add	sl, fp
 80061cc:	44d1      	add	r9, sl
 80061ce:	44c8      	add	r8, r9
 80061d0:	44c4      	add	ip, r8
 80061d2:	4463      	add	r3, ip
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_0[3] = {0,0,0};
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <main+0x860>)
 80061da:	229e      	movs	r2, #158	; 0x9e
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	4694      	mov	ip, r2
 80061e0:	2208      	movs	r2, #8
 80061e2:	4690      	mov	r8, r2
 80061e4:	2208      	movs	r2, #8
 80061e6:	4691      	mov	r9, r2
 80061e8:	2208      	movs	r2, #8
 80061ea:	4692      	mov	sl, r2
 80061ec:	2208      	movs	r2, #8
 80061ee:	4693      	mov	fp, r2
 80061f0:	44bb      	add	fp, r7
 80061f2:	44da      	add	sl, fp
 80061f4:	44d1      	add	r9, sl
 80061f6:	44c8      	add	r8, r9
 80061f8:	44c4      	add	ip, r8
 80061fa:	4463      	add	r3, ip
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	4b18      	ldr	r3, [pc, #96]	; (8006264 <main+0x860>)
 8006202:	229e      	movs	r2, #158	; 0x9e
 8006204:	0092      	lsls	r2, r2, #2
 8006206:	4694      	mov	ip, r2
 8006208:	2208      	movs	r2, #8
 800620a:	4690      	mov	r8, r2
 800620c:	2208      	movs	r2, #8
 800620e:	4691      	mov	r9, r2
 8006210:	2208      	movs	r2, #8
 8006212:	4692      	mov	sl, r2
 8006214:	2208      	movs	r2, #8
 8006216:	4693      	mov	fp, r2
 8006218:	44bb      	add	fp, r7
 800621a:	44da      	add	sl, fp
 800621c:	44d1      	add	r9, sl
 800621e:	44c8      	add	r8, r9
 8006220:	44c4      	add	ip, r8
 8006222:	4463      	add	r3, ip
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
 8006228:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <main+0x860>)
 800622a:	229e      	movs	r2, #158	; 0x9e
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	4694      	mov	ip, r2
 8006230:	2208      	movs	r2, #8
 8006232:	4690      	mov	r8, r2
 8006234:	2208      	movs	r2, #8
 8006236:	4691      	mov	r9, r2
 8006238:	2208      	movs	r2, #8
 800623a:	4692      	mov	sl, r2
 800623c:	2208      	movs	r2, #8
 800623e:	e013      	b.n	8006268 <main+0x864>
 8006240:	fffffe8c 	.word	0xfffffe8c
 8006244:	fffffe84 	.word	0xfffffe84
 8006248:	fffffe78 	.word	0xfffffe78
 800624c:	fffffe6c 	.word	0xfffffe6c
 8006250:	fffffe60 	.word	0xfffffe60
 8006254:	fffffe54 	.word	0xfffffe54
 8006258:	3e4ccccd 	.word	0x3e4ccccd
 800625c:	fffffe48 	.word	0xfffffe48
 8006260:	fffffe3c 	.word	0xfffffe3c
 8006264:	fffffe30 	.word	0xfffffe30
 8006268:	4693      	mov	fp, r2
 800626a:	44bb      	add	fp, r7
 800626c:	44da      	add	sl, fp
 800626e:	44d1      	add	r9, sl
 8006270:	44c8      	add	r8, r9
 8006272:	44c4      	add	ip, r8
 8006274:	4463      	add	r3, ip
 8006276:	2200      	movs	r2, #0
 8006278:	609a      	str	r2, [r3, #8]
	float prev_low_pass_accel_1[3] = {0,0,0};
 800627a:	4bfe      	ldr	r3, [pc, #1016]	; (8006674 <main+0xc70>)
 800627c:	229e      	movs	r2, #158	; 0x9e
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	4694      	mov	ip, r2
 8006282:	2208      	movs	r2, #8
 8006284:	4690      	mov	r8, r2
 8006286:	2208      	movs	r2, #8
 8006288:	4691      	mov	r9, r2
 800628a:	2208      	movs	r2, #8
 800628c:	4692      	mov	sl, r2
 800628e:	2208      	movs	r2, #8
 8006290:	4693      	mov	fp, r2
 8006292:	44bb      	add	fp, r7
 8006294:	44da      	add	sl, fp
 8006296:	44d1      	add	r9, sl
 8006298:	44c8      	add	r8, r9
 800629a:	44c4      	add	ip, r8
 800629c:	4463      	add	r3, ip
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	4bf4      	ldr	r3, [pc, #976]	; (8006674 <main+0xc70>)
 80062a4:	229e      	movs	r2, #158	; 0x9e
 80062a6:	0092      	lsls	r2, r2, #2
 80062a8:	4694      	mov	ip, r2
 80062aa:	2208      	movs	r2, #8
 80062ac:	4690      	mov	r8, r2
 80062ae:	2208      	movs	r2, #8
 80062b0:	4691      	mov	r9, r2
 80062b2:	2208      	movs	r2, #8
 80062b4:	4692      	mov	sl, r2
 80062b6:	2208      	movs	r2, #8
 80062b8:	4693      	mov	fp, r2
 80062ba:	44bb      	add	fp, r7
 80062bc:	44da      	add	sl, fp
 80062be:	44d1      	add	r9, sl
 80062c0:	44c8      	add	r8, r9
 80062c2:	44c4      	add	ip, r8
 80062c4:	4463      	add	r3, ip
 80062c6:	2200      	movs	r2, #0
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	4bea      	ldr	r3, [pc, #936]	; (8006674 <main+0xc70>)
 80062cc:	229e      	movs	r2, #158	; 0x9e
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	4694      	mov	ip, r2
 80062d2:	2208      	movs	r2, #8
 80062d4:	4690      	mov	r8, r2
 80062d6:	2208      	movs	r2, #8
 80062d8:	4691      	mov	r9, r2
 80062da:	2208      	movs	r2, #8
 80062dc:	4692      	mov	sl, r2
 80062de:	2208      	movs	r2, #8
 80062e0:	4693      	mov	fp, r2
 80062e2:	44bb      	add	fp, r7
 80062e4:	44da      	add	sl, fp
 80062e6:	44d1      	add	r9, sl
 80062e8:	44c8      	add	r8, r9
 80062ea:	44c4      	add	ip, r8
 80062ec:	4463      	add	r3, ip
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
	float low_alpha_acc = 0.2;
 80062f2:	4be1      	ldr	r3, [pc, #900]	; (8006678 <main+0xc74>)
 80062f4:	2296      	movs	r2, #150	; 0x96
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	2108      	movs	r1, #8
 80062fa:	468c      	mov	ip, r1
 80062fc:	2108      	movs	r1, #8
 80062fe:	4688      	mov	r8, r1
 8006300:	2108      	movs	r1, #8
 8006302:	4689      	mov	r9, r1
 8006304:	2108      	movs	r1, #8
 8006306:	468a      	mov	sl, r1
 8006308:	44ba      	add	sl, r7
 800630a:	44d1      	add	r9, sl
 800630c:	44c8      	add	r8, r9
 800630e:	44c4      	add	ip, r8
 8006310:	4462      	add	r2, ip
 8006312:	6013      	str	r3, [r2, #0]

	struct quaternion quat_0 = {1,0,0,0};
 8006314:	4bd9      	ldr	r3, [pc, #868]	; (800667c <main+0xc78>)
 8006316:	229e      	movs	r2, #158	; 0x9e
 8006318:	0092      	lsls	r2, r2, #2
 800631a:	4694      	mov	ip, r2
 800631c:	2208      	movs	r2, #8
 800631e:	4690      	mov	r8, r2
 8006320:	2208      	movs	r2, #8
 8006322:	4691      	mov	r9, r2
 8006324:	2208      	movs	r2, #8
 8006326:	4692      	mov	sl, r2
 8006328:	2208      	movs	r2, #8
 800632a:	4693      	mov	fp, r2
 800632c:	44bb      	add	fp, r7
 800632e:	44da      	add	sl, fp
 8006330:	44d1      	add	r9, sl
 8006332:	44c8      	add	r8, r9
 8006334:	44c4      	add	ip, r8
 8006336:	4463      	add	r3, ip
 8006338:	22fe      	movs	r2, #254	; 0xfe
 800633a:	0592      	lsls	r2, r2, #22
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4bcf      	ldr	r3, [pc, #828]	; (800667c <main+0xc78>)
 8006340:	229e      	movs	r2, #158	; 0x9e
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	4694      	mov	ip, r2
 8006346:	2208      	movs	r2, #8
 8006348:	4690      	mov	r8, r2
 800634a:	2208      	movs	r2, #8
 800634c:	4691      	mov	r9, r2
 800634e:	2208      	movs	r2, #8
 8006350:	4692      	mov	sl, r2
 8006352:	2208      	movs	r2, #8
 8006354:	4693      	mov	fp, r2
 8006356:	44bb      	add	fp, r7
 8006358:	44da      	add	sl, fp
 800635a:	44d1      	add	r9, sl
 800635c:	44c8      	add	r8, r9
 800635e:	44c4      	add	ip, r8
 8006360:	4463      	add	r3, ip
 8006362:	2200      	movs	r2, #0
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	4bc5      	ldr	r3, [pc, #788]	; (800667c <main+0xc78>)
 8006368:	229e      	movs	r2, #158	; 0x9e
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	4694      	mov	ip, r2
 800636e:	2208      	movs	r2, #8
 8006370:	4690      	mov	r8, r2
 8006372:	2208      	movs	r2, #8
 8006374:	4691      	mov	r9, r2
 8006376:	2208      	movs	r2, #8
 8006378:	4692      	mov	sl, r2
 800637a:	2208      	movs	r2, #8
 800637c:	4693      	mov	fp, r2
 800637e:	44bb      	add	fp, r7
 8006380:	44da      	add	sl, fp
 8006382:	44d1      	add	r9, sl
 8006384:	44c8      	add	r8, r9
 8006386:	44c4      	add	ip, r8
 8006388:	4463      	add	r3, ip
 800638a:	2200      	movs	r2, #0
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	4bbb      	ldr	r3, [pc, #748]	; (800667c <main+0xc78>)
 8006390:	229e      	movs	r2, #158	; 0x9e
 8006392:	0092      	lsls	r2, r2, #2
 8006394:	4694      	mov	ip, r2
 8006396:	2208      	movs	r2, #8
 8006398:	4690      	mov	r8, r2
 800639a:	2208      	movs	r2, #8
 800639c:	4691      	mov	r9, r2
 800639e:	2208      	movs	r2, #8
 80063a0:	4692      	mov	sl, r2
 80063a2:	2208      	movs	r2, #8
 80063a4:	4693      	mov	fp, r2
 80063a6:	44bb      	add	fp, r7
 80063a8:	44da      	add	sl, fp
 80063aa:	44d1      	add	r9, sl
 80063ac:	44c8      	add	r8, r9
 80063ae:	44c4      	add	ip, r8
 80063b0:	4463      	add	r3, ip
 80063b2:	2200      	movs	r2, #0
 80063b4:	60da      	str	r2, [r3, #12]
	struct quaternion quat_1 = {1,0,0,0};
 80063b6:	4bb2      	ldr	r3, [pc, #712]	; (8006680 <main+0xc7c>)
 80063b8:	229e      	movs	r2, #158	; 0x9e
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	4694      	mov	ip, r2
 80063be:	2208      	movs	r2, #8
 80063c0:	4690      	mov	r8, r2
 80063c2:	2208      	movs	r2, #8
 80063c4:	4691      	mov	r9, r2
 80063c6:	2208      	movs	r2, #8
 80063c8:	4692      	mov	sl, r2
 80063ca:	2208      	movs	r2, #8
 80063cc:	4693      	mov	fp, r2
 80063ce:	44bb      	add	fp, r7
 80063d0:	44da      	add	sl, fp
 80063d2:	44d1      	add	r9, sl
 80063d4:	44c8      	add	r8, r9
 80063d6:	44c4      	add	ip, r8
 80063d8:	4463      	add	r3, ip
 80063da:	22fe      	movs	r2, #254	; 0xfe
 80063dc:	0592      	lsls	r2, r2, #22
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	4ba7      	ldr	r3, [pc, #668]	; (8006680 <main+0xc7c>)
 80063e2:	229e      	movs	r2, #158	; 0x9e
 80063e4:	0092      	lsls	r2, r2, #2
 80063e6:	4694      	mov	ip, r2
 80063e8:	2208      	movs	r2, #8
 80063ea:	4690      	mov	r8, r2
 80063ec:	2208      	movs	r2, #8
 80063ee:	4691      	mov	r9, r2
 80063f0:	2208      	movs	r2, #8
 80063f2:	4692      	mov	sl, r2
 80063f4:	2208      	movs	r2, #8
 80063f6:	4693      	mov	fp, r2
 80063f8:	44bb      	add	fp, r7
 80063fa:	44da      	add	sl, fp
 80063fc:	44d1      	add	r9, sl
 80063fe:	44c8      	add	r8, r9
 8006400:	44c4      	add	ip, r8
 8006402:	4463      	add	r3, ip
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	4b9d      	ldr	r3, [pc, #628]	; (8006680 <main+0xc7c>)
 800640a:	229e      	movs	r2, #158	; 0x9e
 800640c:	0092      	lsls	r2, r2, #2
 800640e:	4694      	mov	ip, r2
 8006410:	2208      	movs	r2, #8
 8006412:	4690      	mov	r8, r2
 8006414:	2208      	movs	r2, #8
 8006416:	4691      	mov	r9, r2
 8006418:	2208      	movs	r2, #8
 800641a:	4692      	mov	sl, r2
 800641c:	2208      	movs	r2, #8
 800641e:	4693      	mov	fp, r2
 8006420:	44bb      	add	fp, r7
 8006422:	44da      	add	sl, fp
 8006424:	44d1      	add	r9, sl
 8006426:	44c8      	add	r8, r9
 8006428:	44c4      	add	ip, r8
 800642a:	4463      	add	r3, ip
 800642c:	2200      	movs	r2, #0
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	4b93      	ldr	r3, [pc, #588]	; (8006680 <main+0xc7c>)
 8006432:	229e      	movs	r2, #158	; 0x9e
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	4694      	mov	ip, r2
 8006438:	2208      	movs	r2, #8
 800643a:	4690      	mov	r8, r2
 800643c:	2208      	movs	r2, #8
 800643e:	4691      	mov	r9, r2
 8006440:	2208      	movs	r2, #8
 8006442:	4692      	mov	sl, r2
 8006444:	2208      	movs	r2, #8
 8006446:	4693      	mov	fp, r2
 8006448:	44bb      	add	fp, r7
 800644a:	44da      	add	sl, fp
 800644c:	44d1      	add	r9, sl
 800644e:	44c8      	add	r8, r9
 8006450:	44c4      	add	ip, r8
 8006452:	4463      	add	r3, ip
 8006454:	2200      	movs	r2, #0
 8006456:	60da      	str	r2, [r3, #12]
	#ifdef TAMPERING_BUFFER
		struct quaternion quat_buffer_0 = {1,0,0,0};
		struct quaternion quat_buffer_1 = {1,0,0,0};
	#endif
	struct euler_angles angles_0 = {0,0,0};
 8006458:	4b8a      	ldr	r3, [pc, #552]	; (8006684 <main+0xc80>)
 800645a:	229e      	movs	r2, #158	; 0x9e
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	4694      	mov	ip, r2
 8006460:	2208      	movs	r2, #8
 8006462:	4690      	mov	r8, r2
 8006464:	2208      	movs	r2, #8
 8006466:	4691      	mov	r9, r2
 8006468:	2208      	movs	r2, #8
 800646a:	4692      	mov	sl, r2
 800646c:	2208      	movs	r2, #8
 800646e:	4693      	mov	fp, r2
 8006470:	44bb      	add	fp, r7
 8006472:	44da      	add	sl, fp
 8006474:	44d1      	add	r9, sl
 8006476:	44c8      	add	r8, r9
 8006478:	44c4      	add	ip, r8
 800647a:	4463      	add	r3, ip
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	4b80      	ldr	r3, [pc, #512]	; (8006684 <main+0xc80>)
 8006482:	229e      	movs	r2, #158	; 0x9e
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	4694      	mov	ip, r2
 8006488:	2208      	movs	r2, #8
 800648a:	4690      	mov	r8, r2
 800648c:	2208      	movs	r2, #8
 800648e:	4691      	mov	r9, r2
 8006490:	2208      	movs	r2, #8
 8006492:	4692      	mov	sl, r2
 8006494:	2208      	movs	r2, #8
 8006496:	4693      	mov	fp, r2
 8006498:	44bb      	add	fp, r7
 800649a:	44da      	add	sl, fp
 800649c:	44d1      	add	r9, sl
 800649e:	44c8      	add	r8, r9
 80064a0:	44c4      	add	ip, r8
 80064a2:	4463      	add	r3, ip
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	4b76      	ldr	r3, [pc, #472]	; (8006684 <main+0xc80>)
 80064aa:	229e      	movs	r2, #158	; 0x9e
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	4694      	mov	ip, r2
 80064b0:	2208      	movs	r2, #8
 80064b2:	4690      	mov	r8, r2
 80064b4:	2208      	movs	r2, #8
 80064b6:	4691      	mov	r9, r2
 80064b8:	2208      	movs	r2, #8
 80064ba:	4692      	mov	sl, r2
 80064bc:	2208      	movs	r2, #8
 80064be:	4693      	mov	fp, r2
 80064c0:	44bb      	add	fp, r7
 80064c2:	44da      	add	sl, fp
 80064c4:	44d1      	add	r9, sl
 80064c6:	44c8      	add	r8, r9
 80064c8:	44c4      	add	ip, r8
 80064ca:	4463      	add	r3, ip
 80064cc:	2200      	movs	r2, #0
 80064ce:	609a      	str	r2, [r3, #8]
	struct euler_angles angles_1 = {0,0,0};
 80064d0:	4b6d      	ldr	r3, [pc, #436]	; (8006688 <main+0xc84>)
 80064d2:	229e      	movs	r2, #158	; 0x9e
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	4694      	mov	ip, r2
 80064d8:	2208      	movs	r2, #8
 80064da:	4690      	mov	r8, r2
 80064dc:	2208      	movs	r2, #8
 80064de:	4691      	mov	r9, r2
 80064e0:	2208      	movs	r2, #8
 80064e2:	4692      	mov	sl, r2
 80064e4:	2208      	movs	r2, #8
 80064e6:	4693      	mov	fp, r2
 80064e8:	44bb      	add	fp, r7
 80064ea:	44da      	add	sl, fp
 80064ec:	44d1      	add	r9, sl
 80064ee:	44c8      	add	r8, r9
 80064f0:	44c4      	add	ip, r8
 80064f2:	4463      	add	r3, ip
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	4b63      	ldr	r3, [pc, #396]	; (8006688 <main+0xc84>)
 80064fa:	229e      	movs	r2, #158	; 0x9e
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	4694      	mov	ip, r2
 8006500:	2208      	movs	r2, #8
 8006502:	4690      	mov	r8, r2
 8006504:	2208      	movs	r2, #8
 8006506:	4691      	mov	r9, r2
 8006508:	2208      	movs	r2, #8
 800650a:	4692      	mov	sl, r2
 800650c:	2208      	movs	r2, #8
 800650e:	4693      	mov	fp, r2
 8006510:	44bb      	add	fp, r7
 8006512:	44da      	add	sl, fp
 8006514:	44d1      	add	r9, sl
 8006516:	44c8      	add	r8, r9
 8006518:	44c4      	add	ip, r8
 800651a:	4463      	add	r3, ip
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]
 8006520:	4b59      	ldr	r3, [pc, #356]	; (8006688 <main+0xc84>)
 8006522:	229e      	movs	r2, #158	; 0x9e
 8006524:	0092      	lsls	r2, r2, #2
 8006526:	4694      	mov	ip, r2
 8006528:	2208      	movs	r2, #8
 800652a:	4690      	mov	r8, r2
 800652c:	2208      	movs	r2, #8
 800652e:	4691      	mov	r9, r2
 8006530:	2208      	movs	r2, #8
 8006532:	4692      	mov	sl, r2
 8006534:	2208      	movs	r2, #8
 8006536:	4693      	mov	fp, r2
 8006538:	44bb      	add	fp, r7
 800653a:	44da      	add	sl, fp
 800653c:	44d1      	add	r9, sl
 800653e:	44c8      	add	r8, r9
 8006540:	44c4      	add	ip, r8
 8006542:	4463      	add	r3, ip
 8006544:	2200      	movs	r2, #0
 8006546:	609a      	str	r2, [r3, #8]
	#ifdef TAMPERING_BUFFER
		struct euler_angles angles_buffer_0 = {0,0,0};
		struct euler_angles angles_buffer_1 = {0,0,0};
	#endif
	struct euler_angles prev_0 = {0,0,0};
 8006548:	4b50      	ldr	r3, [pc, #320]	; (800668c <main+0xc88>)
 800654a:	229e      	movs	r2, #158	; 0x9e
 800654c:	0092      	lsls	r2, r2, #2
 800654e:	4694      	mov	ip, r2
 8006550:	2208      	movs	r2, #8
 8006552:	4690      	mov	r8, r2
 8006554:	2208      	movs	r2, #8
 8006556:	4691      	mov	r9, r2
 8006558:	2208      	movs	r2, #8
 800655a:	4692      	mov	sl, r2
 800655c:	2208      	movs	r2, #8
 800655e:	4693      	mov	fp, r2
 8006560:	44bb      	add	fp, r7
 8006562:	44da      	add	sl, fp
 8006564:	44d1      	add	r9, sl
 8006566:	44c8      	add	r8, r9
 8006568:	44c4      	add	ip, r8
 800656a:	4463      	add	r3, ip
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	4b46      	ldr	r3, [pc, #280]	; (800668c <main+0xc88>)
 8006572:	229e      	movs	r2, #158	; 0x9e
 8006574:	0092      	lsls	r2, r2, #2
 8006576:	4694      	mov	ip, r2
 8006578:	2208      	movs	r2, #8
 800657a:	4690      	mov	r8, r2
 800657c:	2208      	movs	r2, #8
 800657e:	4691      	mov	r9, r2
 8006580:	2208      	movs	r2, #8
 8006582:	4692      	mov	sl, r2
 8006584:	2208      	movs	r2, #8
 8006586:	4693      	mov	fp, r2
 8006588:	44bb      	add	fp, r7
 800658a:	44da      	add	sl, fp
 800658c:	44d1      	add	r9, sl
 800658e:	44c8      	add	r8, r9
 8006590:	44c4      	add	ip, r8
 8006592:	4463      	add	r3, ip
 8006594:	2200      	movs	r2, #0
 8006596:	605a      	str	r2, [r3, #4]
 8006598:	4b3c      	ldr	r3, [pc, #240]	; (800668c <main+0xc88>)
 800659a:	229e      	movs	r2, #158	; 0x9e
 800659c:	0092      	lsls	r2, r2, #2
 800659e:	4694      	mov	ip, r2
 80065a0:	2208      	movs	r2, #8
 80065a2:	4690      	mov	r8, r2
 80065a4:	2208      	movs	r2, #8
 80065a6:	4691      	mov	r9, r2
 80065a8:	2208      	movs	r2, #8
 80065aa:	4692      	mov	sl, r2
 80065ac:	2208      	movs	r2, #8
 80065ae:	4693      	mov	fp, r2
 80065b0:	44bb      	add	fp, r7
 80065b2:	44da      	add	sl, fp
 80065b4:	44d1      	add	r9, sl
 80065b6:	44c8      	add	r8, r9
 80065b8:	44c4      	add	ip, r8
 80065ba:	4463      	add	r3, ip
 80065bc:	2200      	movs	r2, #0
 80065be:	609a      	str	r2, [r3, #8]
	struct euler_angles prev_1 = {0,0,0};
 80065c0:	4b33      	ldr	r3, [pc, #204]	; (8006690 <main+0xc8c>)
 80065c2:	229e      	movs	r2, #158	; 0x9e
 80065c4:	0092      	lsls	r2, r2, #2
 80065c6:	4694      	mov	ip, r2
 80065c8:	2208      	movs	r2, #8
 80065ca:	4690      	mov	r8, r2
 80065cc:	2208      	movs	r2, #8
 80065ce:	4691      	mov	r9, r2
 80065d0:	2208      	movs	r2, #8
 80065d2:	4692      	mov	sl, r2
 80065d4:	2208      	movs	r2, #8
 80065d6:	4693      	mov	fp, r2
 80065d8:	44bb      	add	fp, r7
 80065da:	44da      	add	sl, fp
 80065dc:	44d1      	add	r9, sl
 80065de:	44c8      	add	r8, r9
 80065e0:	44c4      	add	ip, r8
 80065e2:	4463      	add	r3, ip
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	4b29      	ldr	r3, [pc, #164]	; (8006690 <main+0xc8c>)
 80065ea:	229e      	movs	r2, #158	; 0x9e
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	4694      	mov	ip, r2
 80065f0:	2208      	movs	r2, #8
 80065f2:	4690      	mov	r8, r2
 80065f4:	2208      	movs	r2, #8
 80065f6:	4691      	mov	r9, r2
 80065f8:	2208      	movs	r2, #8
 80065fa:	4692      	mov	sl, r2
 80065fc:	2208      	movs	r2, #8
 80065fe:	4693      	mov	fp, r2
 8006600:	44bb      	add	fp, r7
 8006602:	44da      	add	sl, fp
 8006604:	44d1      	add	r9, sl
 8006606:	44c8      	add	r8, r9
 8006608:	44c4      	add	ip, r8
 800660a:	4463      	add	r3, ip
 800660c:	2200      	movs	r2, #0
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <main+0xc8c>)
 8006612:	229e      	movs	r2, #158	; 0x9e
 8006614:	0092      	lsls	r2, r2, #2
 8006616:	4694      	mov	ip, r2
 8006618:	2208      	movs	r2, #8
 800661a:	4690      	mov	r8, r2
 800661c:	2208      	movs	r2, #8
 800661e:	4691      	mov	r9, r2
 8006620:	2208      	movs	r2, #8
 8006622:	4692      	mov	sl, r2
 8006624:	2208      	movs	r2, #8
 8006626:	4693      	mov	fp, r2
 8006628:	44bb      	add	fp, r7
 800662a:	44da      	add	sl, fp
 800662c:	44d1      	add	r9, sl
 800662e:	44c8      	add	r8, r9
 8006630:	44c4      	add	ip, r8
 8006632:	4463      	add	r3, ip
 8006634:	2200      	movs	r2, #0
 8006636:	609a      	str	r2, [r3, #8]
	struct matrix rotation_matrix_earth_0 = {0,0,0,0,0,0,0,0,0};
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <main+0xc90>)
 800663a:	229e      	movs	r2, #158	; 0x9e
 800663c:	0092      	lsls	r2, r2, #2
 800663e:	4694      	mov	ip, r2
 8006640:	2208      	movs	r2, #8
 8006642:	4690      	mov	r8, r2
 8006644:	2208      	movs	r2, #8
 8006646:	4691      	mov	r9, r2
 8006648:	2208      	movs	r2, #8
 800664a:	4692      	mov	sl, r2
 800664c:	2208      	movs	r2, #8
 800664e:	4693      	mov	fp, r2
 8006650:	44bb      	add	fp, r7
 8006652:	44da      	add	sl, fp
 8006654:	44d1      	add	r9, sl
 8006656:	44c8      	add	r8, r9
 8006658:	44c4      	add	ip, r8
 800665a:	4463      	add	r3, ip
 800665c:	0018      	movs	r0, r3
 800665e:	2324      	movs	r3, #36	; 0x24
 8006660:	001a      	movs	r2, r3
 8006662:	2100      	movs	r1, #0
 8006664:	f006 f972 	bl	800c94c <memset>
	struct matrix rotation_matrix_earth_1 = {0,0,0,0,0,0,0,0,0};
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <main+0xc94>)
 800666a:	229e      	movs	r2, #158	; 0x9e
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	4694      	mov	ip, r2
 8006670:	2208      	movs	r2, #8
 8006672:	e013      	b.n	800669c <main+0xc98>
 8006674:	fffffe24 	.word	0xfffffe24
 8006678:	3e4ccccd 	.word	0x3e4ccccd
 800667c:	fffffe14 	.word	0xfffffe14
 8006680:	fffffe04 	.word	0xfffffe04
 8006684:	fffffdf8 	.word	0xfffffdf8
 8006688:	fffffdec 	.word	0xfffffdec
 800668c:	fffffde0 	.word	0xfffffde0
 8006690:	fffffdd4 	.word	0xfffffdd4
 8006694:	fffffdb0 	.word	0xfffffdb0
 8006698:	fffffd8c 	.word	0xfffffd8c
 800669c:	4690      	mov	r8, r2
 800669e:	2208      	movs	r2, #8
 80066a0:	4691      	mov	r9, r2
 80066a2:	2208      	movs	r2, #8
 80066a4:	4692      	mov	sl, r2
 80066a6:	2208      	movs	r2, #8
 80066a8:	4693      	mov	fp, r2
 80066aa:	44bb      	add	fp, r7
 80066ac:	44da      	add	sl, fp
 80066ae:	44d1      	add	r9, sl
 80066b0:	44c8      	add	r8, r9
 80066b2:	44c4      	add	ip, r8
 80066b4:	4463      	add	r3, ip
 80066b6:	0018      	movs	r0, r3
 80066b8:	2324      	movs	r3, #36	; 0x24
 80066ba:	001a      	movs	r2, r3
 80066bc:	2100      	movs	r1, #0
 80066be:	f006 f945 	bl	800c94c <memset>

	float duration_diff = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	2295      	movs	r2, #149	; 0x95
 80066c6:	0092      	lsls	r2, r2, #2
 80066c8:	2108      	movs	r1, #8
 80066ca:	468c      	mov	ip, r1
 80066cc:	2108      	movs	r1, #8
 80066ce:	4688      	mov	r8, r1
 80066d0:	2108      	movs	r1, #8
 80066d2:	4689      	mov	r9, r1
 80066d4:	2108      	movs	r1, #8
 80066d6:	468a      	mov	sl, r1
 80066d8:	44ba      	add	sl, r7
 80066da:	44d1      	add	r9, sl
 80066dc:	44c8      	add	r8, r9
 80066de:	44c4      	add	ip, r8
 80066e0:	4462      	add	r2, ip
 80066e2:	6013      	str	r3, [r2, #0]
	float duration = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	229d      	movs	r2, #157	; 0x9d
 80066e8:	0092      	lsls	r2, r2, #2
 80066ea:	2108      	movs	r1, #8
 80066ec:	468c      	mov	ip, r1
 80066ee:	2108      	movs	r1, #8
 80066f0:	4688      	mov	r8, r1
 80066f2:	2108      	movs	r1, #8
 80066f4:	4689      	mov	r9, r1
 80066f6:	2108      	movs	r1, #8
 80066f8:	468a      	mov	sl, r1
 80066fa:	44ba      	add	sl, r7
 80066fc:	44d1      	add	r9, sl
 80066fe:	44c8      	add	r8, r9
 8006700:	44c4      	add	ip, r8
 8006702:	4462      	add	r2, ip
 8006704:	6013      	str	r3, [r2, #0]
	float clock = 16000000/16.0;
 8006706:	4bfe      	ldr	r3, [pc, #1016]	; (8006b00 <main+0x10fc>)
 8006708:	2294      	movs	r2, #148	; 0x94
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	2108      	movs	r1, #8
 800670e:	468c      	mov	ip, r1
 8006710:	2108      	movs	r1, #8
 8006712:	4688      	mov	r8, r1
 8006714:	2108      	movs	r1, #8
 8006716:	4689      	mov	r9, r1
 8006718:	2108      	movs	r1, #8
 800671a:	468a      	mov	sl, r1
 800671c:	44ba      	add	sl, r7
 800671e:	44d1      	add	r9, sl
 8006720:	44c8      	add	r8, r9
 8006722:	44c4      	add	ip, r8
 8006724:	4462      	add	r2, ip
 8006726:	6013      	str	r3, [r2, #0]
	float motion_duration = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	229c      	movs	r2, #156	; 0x9c
 800672c:	0092      	lsls	r2, r2, #2
 800672e:	2108      	movs	r1, #8
 8006730:	468c      	mov	ip, r1
 8006732:	2108      	movs	r1, #8
 8006734:	4688      	mov	r8, r1
 8006736:	2108      	movs	r1, #8
 8006738:	4689      	mov	r9, r1
 800673a:	2108      	movs	r1, #8
 800673c:	468a      	mov	sl, r1
 800673e:	44ba      	add	sl, r7
 8006740:	44d1      	add	r9, sl
 8006742:	44c8      	add	r8, r9
 8006744:	44c4      	add	ip, r8
 8006746:	4462      	add	r2, ip
 8006748:	6013      	str	r3, [r2, #0]
	float diff_pitch_1;
	float diff_pan_0_1;
	float diff_tilt_0_1;
	float diff_pitch_0_1;

	int8_t is_moving[3] = {0,0,0};
 800674a:	4bee      	ldr	r3, [pc, #952]	; (8006b04 <main+0x1100>)
 800674c:	229e      	movs	r2, #158	; 0x9e
 800674e:	0092      	lsls	r2, r2, #2
 8006750:	4694      	mov	ip, r2
 8006752:	2208      	movs	r2, #8
 8006754:	4690      	mov	r8, r2
 8006756:	2208      	movs	r2, #8
 8006758:	4691      	mov	r9, r2
 800675a:	2208      	movs	r2, #8
 800675c:	4692      	mov	sl, r2
 800675e:	2208      	movs	r2, #8
 8006760:	4693      	mov	fp, r2
 8006762:	44bb      	add	fp, r7
 8006764:	44da      	add	sl, fp
 8006766:	44d1      	add	r9, sl
 8006768:	44c8      	add	r8, r9
 800676a:	44c4      	add	ip, r8
 800676c:	4463      	add	r3, ip
 800676e:	4ae6      	ldr	r2, [pc, #920]	; (8006b08 <main+0x1104>)
 8006770:	8811      	ldrh	r1, [r2, #0]
 8006772:	8019      	strh	r1, [r3, #0]
 8006774:	7892      	ldrb	r2, [r2, #2]
 8006776:	709a      	strb	r2, [r3, #2]
	int8_t was_moving = 0;
 8006778:	4be4      	ldr	r3, [pc, #912]	; (8006b0c <main+0x1108>)
 800677a:	2208      	movs	r2, #8
 800677c:	4694      	mov	ip, r2
 800677e:	2208      	movs	r2, #8
 8006780:	4690      	mov	r8, r2
 8006782:	2208      	movs	r2, #8
 8006784:	4691      	mov	r9, r2
 8006786:	2208      	movs	r2, #8
 8006788:	4692      	mov	sl, r2
 800678a:	44ba      	add	sl, r7
 800678c:	44d1      	add	r9, sl
 800678e:	44c8      	add	r8, r9
 8006790:	44c4      	add	ip, r8
 8006792:	4463      	add	r3, ip
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
	int8_t moving_expected = 0;
 8006798:	4bdd      	ldr	r3, [pc, #884]	; (8006b10 <main+0x110c>)
 800679a:	2208      	movs	r2, #8
 800679c:	4694      	mov	ip, r2
 800679e:	2208      	movs	r2, #8
 80067a0:	4690      	mov	r8, r2
 80067a2:	2208      	movs	r2, #8
 80067a4:	4691      	mov	r9, r2
 80067a6:	2208      	movs	r2, #8
 80067a8:	4692      	mov	sl, r2
 80067aa:	44ba      	add	sl, r7
 80067ac:	44d1      	add	r9, sl
 80067ae:	44c8      	add	r8, r9
 80067b0:	44c4      	add	ip, r8
 80067b2:	4463      	add	r3, ip
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
	uint8_t uart_prescaler = 0;
 80067b8:	4bd6      	ldr	r3, [pc, #856]	; (8006b14 <main+0x1110>)
 80067ba:	2208      	movs	r2, #8
 80067bc:	4694      	mov	ip, r2
 80067be:	2208      	movs	r2, #8
 80067c0:	4690      	mov	r8, r2
 80067c2:	2208      	movs	r2, #8
 80067c4:	4691      	mov	r9, r2
 80067c6:	2208      	movs	r2, #8
 80067c8:	4692      	mov	sl, r2
 80067ca:	44ba      	add	sl, r7
 80067cc:	44d1      	add	r9, sl
 80067ce:	44c8      	add	r8, r9
 80067d0:	44c4      	add	ip, r8
 80067d2:	4463      	add	r3, ip
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim16);
 80067d8:	4bcf      	ldr	r3, [pc, #828]	; (8006b18 <main+0x1114>)
 80067da:	0018      	movs	r0, r3
 80067dc:	f005 fa40 	bl	800bc60 <HAL_TIM_Base_Start>
	ICM_AccCalibration(&hspi1,&huart2,accel_bias_0, IMU_MOVABLE);
 80067e0:	2686      	movs	r6, #134	; 0x86
 80067e2:	0076      	lsls	r6, r6, #1
 80067e4:	2308      	movs	r3, #8
 80067e6:	2208      	movs	r2, #8
 80067e8:	4694      	mov	ip, r2
 80067ea:	2208      	movs	r2, #8
 80067ec:	4690      	mov	r8, r2
 80067ee:	44b8      	add	r8, r7
 80067f0:	44c4      	add	ip, r8
 80067f2:	4463      	add	r3, ip
 80067f4:	199a      	adds	r2, r3, r6
 80067f6:	49c9      	ldr	r1, [pc, #804]	; (8006b1c <main+0x1118>)
 80067f8:	48c9      	ldr	r0, [pc, #804]	; (8006b20 <main+0x111c>)
 80067fa:	2300      	movs	r3, #0
 80067fc:	f7fd f8d4 	bl	80039a8 <ICM_AccCalibration>
	ICM_AccCalibration(&hspi2,&huart2,accel_bias_1, IMU_FIXED);
 8006800:	24fc      	movs	r4, #252	; 0xfc
 8006802:	2508      	movs	r5, #8
 8006804:	2308      	movs	r3, #8
 8006806:	2208      	movs	r2, #8
 8006808:	4694      	mov	ip, r2
 800680a:	2208      	movs	r2, #8
 800680c:	4690      	mov	r8, r2
 800680e:	44b8      	add	r8, r7
 8006810:	44c4      	add	ip, r8
 8006812:	4463      	add	r3, ip
 8006814:	195b      	adds	r3, r3, r5
 8006816:	191a      	adds	r2, r3, r4
 8006818:	49c0      	ldr	r1, [pc, #768]	; (8006b1c <main+0x1118>)
 800681a:	48c2      	ldr	r0, [pc, #776]	; (8006b24 <main+0x1120>)
 800681c:	2301      	movs	r3, #1
 800681e:	f7fd f8c3 	bl	80039a8 <ICM_AccCalibration>
	CalculateRotationMatrix(accel_bias_0, &rotation_matrix_earth_0);
 8006822:	2328      	movs	r3, #40	; 0x28
 8006824:	2208      	movs	r2, #8
 8006826:	2108      	movs	r1, #8
 8006828:	468c      	mov	ip, r1
 800682a:	2108      	movs	r1, #8
 800682c:	4688      	mov	r8, r1
 800682e:	44b8      	add	r8, r7
 8006830:	44c4      	add	ip, r8
 8006832:	4462      	add	r2, ip
 8006834:	1952      	adds	r2, r2, r5
 8006836:	18d2      	adds	r2, r2, r3
 8006838:	2308      	movs	r3, #8
 800683a:	2108      	movs	r1, #8
 800683c:	468c      	mov	ip, r1
 800683e:	2108      	movs	r1, #8
 8006840:	4688      	mov	r8, r1
 8006842:	44b8      	add	r8, r7
 8006844:	44c4      	add	ip, r8
 8006846:	4463      	add	r3, ip
 8006848:	199b      	adds	r3, r3, r6
 800684a:	0011      	movs	r1, r2
 800684c:	0018      	movs	r0, r3
 800684e:	f7fe fbaf 	bl	8004fb0 <CalculateRotationMatrix>
	CalculateRotationMatrix(accel_bias_1, &rotation_matrix_earth_1);
 8006852:	230c      	movs	r3, #12
 8006854:	2208      	movs	r2, #8
 8006856:	2108      	movs	r1, #8
 8006858:	468c      	mov	ip, r1
 800685a:	2108      	movs	r1, #8
 800685c:	4688      	mov	r8, r1
 800685e:	44b8      	add	r8, r7
 8006860:	44c4      	add	ip, r8
 8006862:	4462      	add	r2, ip
 8006864:	18d2      	adds	r2, r2, r3
 8006866:	2308      	movs	r3, #8
 8006868:	2108      	movs	r1, #8
 800686a:	468c      	mov	ip, r1
 800686c:	2108      	movs	r1, #8
 800686e:	4688      	mov	r8, r1
 8006870:	44b8      	add	r8, r7
 8006872:	44c4      	add	ip, r8
 8006874:	4463      	add	r3, ip
 8006876:	195b      	adds	r3, r3, r5
 8006878:	191b      	adds	r3, r3, r4
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f7fe fb97 	bl	8004fb0 <CalculateRotationMatrix>
	ICM_GyroCalibration(&hspi1,&huart2, gyro_bias_0, IMU_MOVABLE);
 8006882:	238c      	movs	r3, #140	; 0x8c
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	2208      	movs	r2, #8
 8006888:	2108      	movs	r1, #8
 800688a:	468c      	mov	ip, r1
 800688c:	2108      	movs	r1, #8
 800688e:	4688      	mov	r8, r1
 8006890:	44b8      	add	r8, r7
 8006892:	44c4      	add	ip, r8
 8006894:	4462      	add	r2, ip
 8006896:	1952      	adds	r2, r2, r5
 8006898:	18d2      	adds	r2, r2, r3
 800689a:	49a0      	ldr	r1, [pc, #640]	; (8006b1c <main+0x1118>)
 800689c:	48a0      	ldr	r0, [pc, #640]	; (8006b20 <main+0x111c>)
 800689e:	2300      	movs	r3, #0
 80068a0:	f7fc ff26 	bl	80036f0 <ICM_GyroCalibration>
	ICM_GyroCalibration(&hspi2,&huart2, gyro_bias_1, IMU_FIXED);
 80068a4:	2386      	movs	r3, #134	; 0x86
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	2208      	movs	r2, #8
 80068aa:	2108      	movs	r1, #8
 80068ac:	468c      	mov	ip, r1
 80068ae:	2108      	movs	r1, #8
 80068b0:	4688      	mov	r8, r1
 80068b2:	44b8      	add	r8, r7
 80068b4:	44c4      	add	ip, r8
 80068b6:	4462      	add	r2, ip
 80068b8:	1952      	adds	r2, r2, r5
 80068ba:	18d2      	adds	r2, r2, r3
 80068bc:	4997      	ldr	r1, [pc, #604]	; (8006b1c <main+0x1118>)
 80068be:	4899      	ldr	r0, [pc, #612]	; (8006b24 <main+0x1120>)
 80068c0:	2301      	movs	r3, #1
 80068c2:	f7fc ff15 	bl	80036f0 <ICM_GyroCalibration>

	sprintf(uart_buffer, "UART_PREAMBLE\r\n");
 80068c6:	4a98      	ldr	r2, [pc, #608]	; (8006b28 <main+0x1124>)
 80068c8:	24b6      	movs	r4, #182	; 0xb6
 80068ca:	0064      	lsls	r4, r4, #1
 80068cc:	2308      	movs	r3, #8
 80068ce:	2108      	movs	r1, #8
 80068d0:	468c      	mov	ip, r1
 80068d2:	2108      	movs	r1, #8
 80068d4:	4688      	mov	r8, r1
 80068d6:	44b8      	add	r8, r7
 80068d8:	44c4      	add	ip, r8
 80068da:	4463      	add	r3, ip
 80068dc:	195b      	adds	r3, r3, r5
 80068de:	191b      	adds	r3, r3, r4
 80068e0:	0011      	movs	r1, r2
 80068e2:	0018      	movs	r0, r3
 80068e4:	f006 fcb4 	bl	800d250 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80068e8:	2308      	movs	r3, #8
 80068ea:	2208      	movs	r2, #8
 80068ec:	4694      	mov	ip, r2
 80068ee:	2208      	movs	r2, #8
 80068f0:	4690      	mov	r8, r2
 80068f2:	44b8      	add	r8, r7
 80068f4:	44c4      	add	ip, r8
 80068f6:	4463      	add	r3, ip
 80068f8:	195b      	adds	r3, r3, r5
 80068fa:	191b      	adds	r3, r3, r4
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7f9 fbff 	bl	8000100 <strlen>
 8006902:	0003      	movs	r3, r0
 8006904:	b29a      	uxth	r2, r3
 8006906:	23fa      	movs	r3, #250	; 0xfa
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	2108      	movs	r1, #8
 800690c:	2008      	movs	r0, #8
 800690e:	4684      	mov	ip, r0
 8006910:	2008      	movs	r0, #8
 8006912:	4680      	mov	r8, r0
 8006914:	44b8      	add	r8, r7
 8006916:	44c4      	add	ip, r8
 8006918:	4461      	add	r1, ip
 800691a:	1949      	adds	r1, r1, r5
 800691c:	1909      	adds	r1, r1, r4
 800691e:	487f      	ldr	r0, [pc, #508]	; (8006b1c <main+0x1118>)
 8006920:	f005 fab8 	bl	800be94 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	__HAL_TIM_SET_COUNTER(&htim16,0);
 8006924:	4b7c      	ldr	r3, [pc, #496]	; (8006b18 <main+0x1114>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2200      	movs	r2, #0
 800692a:	625a      	str	r2, [r3, #36]	; 0x24
	uart_prescaler = (uart_prescaler + 1) % 50;
 800692c:	4c79      	ldr	r4, [pc, #484]	; (8006b14 <main+0x1110>)
 800692e:	2508      	movs	r5, #8
 8006930:	2308      	movs	r3, #8
 8006932:	2208      	movs	r2, #8
 8006934:	4694      	mov	ip, r2
 8006936:	2208      	movs	r2, #8
 8006938:	4690      	mov	r8, r2
 800693a:	44b8      	add	r8, r7
 800693c:	44c4      	add	ip, r8
 800693e:	4463      	add	r3, ip
 8006940:	195b      	adds	r3, r3, r5
 8006942:	191b      	adds	r3, r3, r4
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	2132      	movs	r1, #50	; 0x32
 800694a:	0018      	movs	r0, r3
 800694c:	f7f9 fd64 	bl	8000418 <__aeabi_idivmod>
 8006950:	000b      	movs	r3, r1
 8006952:	001a      	movs	r2, r3
 8006954:	2308      	movs	r3, #8
 8006956:	2108      	movs	r1, #8
 8006958:	468c      	mov	ip, r1
 800695a:	2108      	movs	r1, #8
 800695c:	4688      	mov	r8, r1
 800695e:	44b8      	add	r8, r7
 8006960:	44c4      	add	ip, r8
 8006962:	4463      	add	r3, ip
 8006964:	195b      	adds	r3, r3, r5
 8006966:	191b      	adds	r3, r3, r4
 8006968:	701a      	strb	r2, [r3, #0]

	// IMU 0 READ DATA
	ICM_ReadGyroData(&hspi1, gyro_data_0, gyro_bias_0, IMU_MOVABLE);
 800696a:	238c      	movs	r3, #140	; 0x8c
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	2208      	movs	r2, #8
 8006970:	2108      	movs	r1, #8
 8006972:	468c      	mov	ip, r1
 8006974:	2108      	movs	r1, #8
 8006976:	4688      	mov	r8, r1
 8006978:	44b8      	add	r8, r7
 800697a:	44c4      	add	ip, r8
 800697c:	4462      	add	r2, ip
 800697e:	1952      	adds	r2, r2, r5
 8006980:	18d2      	adds	r2, r2, r3
 8006982:	24a4      	movs	r4, #164	; 0xa4
 8006984:	0064      	lsls	r4, r4, #1
 8006986:	002e      	movs	r6, r5
 8006988:	2308      	movs	r3, #8
 800698a:	2108      	movs	r1, #8
 800698c:	468c      	mov	ip, r1
 800698e:	2108      	movs	r1, #8
 8006990:	4688      	mov	r8, r1
 8006992:	44b8      	add	r8, r7
 8006994:	44c4      	add	ip, r8
 8006996:	4463      	add	r3, ip
 8006998:	195b      	adds	r3, r3, r5
 800699a:	1919      	adds	r1, r3, r4
 800699c:	4860      	ldr	r0, [pc, #384]	; (8006b20 <main+0x111c>)
 800699e:	2300      	movs	r3, #0
 80069a0:	f7fd f8d8 	bl	8003b54 <ICM_ReadGyroData>
	ICM_ReadAccData(&hspi1, accel_data_0, IMU_MOVABLE);
 80069a4:	25b0      	movs	r5, #176	; 0xb0
 80069a6:	006d      	lsls	r5, r5, #1
 80069a8:	613d      	str	r5, [r7, #16]
 80069aa:	2308      	movs	r3, #8
 80069ac:	2208      	movs	r2, #8
 80069ae:	4694      	mov	ip, r2
 80069b0:	2208      	movs	r2, #8
 80069b2:	4690      	mov	r8, r2
 80069b4:	44b8      	add	r8, r7
 80069b6:	44c4      	add	ip, r8
 80069b8:	4463      	add	r3, ip
 80069ba:	199b      	adds	r3, r3, r6
 80069bc:	1959      	adds	r1, r3, r5
 80069be:	4b58      	ldr	r3, [pc, #352]	; (8006b20 <main+0x111c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7fd f984 	bl	8003cd0 <ICM_ReadAccData>

	// IMU 1 READ DATA
	ICM_ReadGyroData(&hspi2, gyro_data_1, gyro_bias_1, IMU_FIXED);
 80069c8:	2386      	movs	r3, #134	; 0x86
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	0030      	movs	r0, r6
 80069ce:	2208      	movs	r2, #8
 80069d0:	2108      	movs	r1, #8
 80069d2:	468c      	mov	ip, r1
 80069d4:	2108      	movs	r1, #8
 80069d6:	4688      	mov	r8, r1
 80069d8:	44b8      	add	r8, r7
 80069da:	44c4      	add	ip, r8
 80069dc:	4462      	add	r2, ip
 80069de:	1812      	adds	r2, r2, r0
 80069e0:	18d2      	adds	r2, r2, r3
 80069e2:	269e      	movs	r6, #158	; 0x9e
 80069e4:	0076      	lsls	r6, r6, #1
 80069e6:	617e      	str	r6, [r7, #20]
 80069e8:	2308      	movs	r3, #8
 80069ea:	2108      	movs	r1, #8
 80069ec:	468c      	mov	ip, r1
 80069ee:	2108      	movs	r1, #8
 80069f0:	4688      	mov	r8, r1
 80069f2:	44b8      	add	r8, r7
 80069f4:	44c4      	add	ip, r8
 80069f6:	4463      	add	r3, ip
 80069f8:	181b      	adds	r3, r3, r0
 80069fa:	1999      	adds	r1, r3, r6
 80069fc:	4849      	ldr	r0, [pc, #292]	; (8006b24 <main+0x1120>)
 80069fe:	2301      	movs	r3, #1
 8006a00:	f7fd f8a8 	bl	8003b54 <ICM_ReadGyroData>
	ICM_ReadAccData(&hspi2, accel_data_1, IMU_FIXED);
 8006a04:	23aa      	movs	r3, #170	; 0xaa
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	2008      	movs	r0, #8
 8006a0a:	0006      	movs	r6, r0
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	2108      	movs	r1, #8
 8006a10:	468c      	mov	ip, r1
 8006a12:	2108      	movs	r1, #8
 8006a14:	4688      	mov	r8, r1
 8006a16:	44b8      	add	r8, r7
 8006a18:	44c4      	add	ip, r8
 8006a1a:	4462      	add	r2, ip
 8006a1c:	1812      	adds	r2, r2, r0
 8006a1e:	18d1      	adds	r1, r2, r3
 8006a20:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <main+0x1120>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	0018      	movs	r0, r3
 8006a26:	f7fd f953 	bl	8003cd0 <ICM_ReadAccData>

	// Low-pass Filter Gyroscope & Acceleration IMU 0
	GyroLowPassFilter1(gyro_data_0, prev_low_pass_gyro_0, low_pass_gyro_0, low_alpha_gyro);
 8006a2a:	2297      	movs	r2, #151	; 0x97
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	0030      	movs	r0, r6
 8006a30:	2308      	movs	r3, #8
 8006a32:	2108      	movs	r1, #8
 8006a34:	468c      	mov	ip, r1
 8006a36:	2108      	movs	r1, #8
 8006a38:	4688      	mov	r8, r1
 8006a3a:	44b8      	add	r8, r7
 8006a3c:	44c4      	add	ip, r8
 8006a3e:	4463      	add	r3, ip
 8006a40:	181b      	adds	r3, r3, r0
 8006a42:	1899      	adds	r1, r3, r2
 8006a44:	680b      	ldr	r3, [r1, #0]
 8006a46:	21f0      	movs	r1, #240	; 0xf0
 8006a48:	2208      	movs	r2, #8
 8006a4a:	2508      	movs	r5, #8
 8006a4c:	46ac      	mov	ip, r5
 8006a4e:	2508      	movs	r5, #8
 8006a50:	46a8      	mov	r8, r5
 8006a52:	44b8      	add	r8, r7
 8006a54:	44c4      	add	ip, r8
 8006a56:	4462      	add	r2, ip
 8006a58:	1812      	adds	r2, r2, r0
 8006a5a:	1852      	adds	r2, r2, r1
 8006a5c:	21d8      	movs	r1, #216	; 0xd8
 8006a5e:	2608      	movs	r6, #8
 8006a60:	46b4      	mov	ip, r6
 8006a62:	2608      	movs	r6, #8
 8006a64:	46b0      	mov	r8, r6
 8006a66:	2508      	movs	r5, #8
 8006a68:	46a9      	mov	r9, r5
 8006a6a:	2508      	movs	r5, #8
 8006a6c:	46aa      	mov	sl, r5
 8006a6e:	44ba      	add	sl, r7
 8006a70:	44d1      	add	r9, sl
 8006a72:	44c8      	add	r8, r9
 8006a74:	44c4      	add	ip, r8
 8006a76:	4461      	add	r1, ip
 8006a78:	0006      	movs	r6, r0
 8006a7a:	2508      	movs	r5, #8
 8006a7c:	46ac      	mov	ip, r5
 8006a7e:	2508      	movs	r5, #8
 8006a80:	46a8      	mov	r8, r5
 8006a82:	2508      	movs	r5, #8
 8006a84:	46a9      	mov	r9, r5
 8006a86:	44b9      	add	r9, r7
 8006a88:	44c8      	add	r8, r9
 8006a8a:	44c4      	add	ip, r8
 8006a8c:	4460      	add	r0, ip
 8006a8e:	1900      	adds	r0, r0, r4
 8006a90:	f7fe f9ba 	bl	8004e08 <GyroLowPassFilter1>
	GyroLowPassFilter1(accel_data_0, prev_low_pass_accel_0, low_pass_accel_0, low_alpha_acc);
 8006a94:	2496      	movs	r4, #150	; 0x96
 8006a96:	00a4      	lsls	r4, r4, #2
 8006a98:	60bc      	str	r4, [r7, #8]
 8006a9a:	0030      	movs	r0, r6
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	4694      	mov	ip, r2
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	4690      	mov	r8, r2
 8006aa6:	44b8      	add	r8, r7
 8006aa8:	44c4      	add	ip, r8
 8006aaa:	4463      	add	r3, ip
 8006aac:	181b      	adds	r3, r3, r0
 8006aae:	1919      	adds	r1, r3, r4
 8006ab0:	680b      	ldr	r3, [r1, #0]
 8006ab2:	21c0      	movs	r1, #192	; 0xc0
 8006ab4:	0006      	movs	r6, r0
 8006ab6:	2208      	movs	r2, #8
 8006ab8:	2408      	movs	r4, #8
 8006aba:	46a4      	mov	ip, r4
 8006abc:	2408      	movs	r4, #8
 8006abe:	46a0      	mov	r8, r4
 8006ac0:	44b8      	add	r8, r7
 8006ac2:	44c4      	add	ip, r8
 8006ac4:	4462      	add	r2, ip
 8006ac6:	1812      	adds	r2, r2, r0
 8006ac8:	1852      	adds	r2, r2, r1
 8006aca:	20a8      	movs	r0, #168	; 0xa8
 8006acc:	0031      	movs	r1, r6
 8006ace:	000e      	movs	r6, r1
 8006ad0:	2508      	movs	r5, #8
 8006ad2:	46ac      	mov	ip, r5
 8006ad4:	2408      	movs	r4, #8
 8006ad6:	46a0      	mov	r8, r4
 8006ad8:	2408      	movs	r4, #8
 8006ada:	46a1      	mov	r9, r4
 8006adc:	44b9      	add	r9, r7
 8006ade:	44c8      	add	r8, r9
 8006ae0:	44c4      	add	ip, r8
 8006ae2:	4461      	add	r1, ip
 8006ae4:	1809      	adds	r1, r1, r0
 8006ae6:	693d      	ldr	r5, [r7, #16]
 8006ae8:	0030      	movs	r0, r6
 8006aea:	0006      	movs	r6, r0
 8006aec:	2408      	movs	r4, #8
 8006aee:	46a4      	mov	ip, r4
 8006af0:	2408      	movs	r4, #8
 8006af2:	46a0      	mov	r8, r4
 8006af4:	2408      	movs	r4, #8
 8006af6:	46a1      	mov	r9, r4
 8006af8:	44b9      	add	r9, r7
 8006afa:	44c8      	add	r8, r9
 8006afc:	e016      	b.n	8006b2c <main+0x1128>
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	49742400 	.word	0x49742400
 8006b04:	fffffd88 	.word	0xfffffd88
 8006b08:	080122a0 	.word	0x080122a0
 8006b0c:	00000263 	.word	0x00000263
 8006b10:	0000024f 	.word	0x0000024f
 8006b14:	00000262 	.word	0x00000262
 8006b18:	20000578 	.word	0x20000578
 8006b1c:	200004e8 	.word	0x200004e8
 8006b20:	20000484 	.word	0x20000484
 8006b24:	200003a8 	.word	0x200003a8
 8006b28:	080121c0 	.word	0x080121c0
 8006b2c:	44c4      	add	ip, r8
 8006b2e:	4460      	add	r0, ip
 8006b30:	1940      	adds	r0, r0, r5
 8006b32:	f7fe f969 	bl	8004e08 <GyroLowPassFilter1>

	// Low-pass Filter Gyroscope & Acceleration IMU 0
	GyroLowPassFilter2(gyro_data_1, prev_low_pass_gyro_1, low_pass_gyro_1, low_alpha_gyro);
 8006b36:	2297      	movs	r2, #151	; 0x97
 8006b38:	0092      	lsls	r2, r2, #2
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	469c      	mov	ip, r3
 8006b3e:	2308      	movs	r3, #8
 8006b40:	4698      	mov	r8, r3
 8006b42:	2308      	movs	r3, #8
 8006b44:	4699      	mov	r9, r3
 8006b46:	2308      	movs	r3, #8
 8006b48:	469a      	mov	sl, r3
 8006b4a:	44ba      	add	sl, r7
 8006b4c:	44d1      	add	r9, sl
 8006b4e:	44c8      	add	r8, r9
 8006b50:	44c4      	add	ip, r8
 8006b52:	4462      	add	r2, ip
 8006b54:	6813      	ldr	r3, [r2, #0]
 8006b56:	22e4      	movs	r2, #228	; 0xe4
 8006b58:	2108      	movs	r1, #8
 8006b5a:	468c      	mov	ip, r1
 8006b5c:	2108      	movs	r1, #8
 8006b5e:	4688      	mov	r8, r1
 8006b60:	2108      	movs	r1, #8
 8006b62:	4689      	mov	r9, r1
 8006b64:	2108      	movs	r1, #8
 8006b66:	468a      	mov	sl, r1
 8006b68:	44ba      	add	sl, r7
 8006b6a:	44d1      	add	r9, sl
 8006b6c:	44c8      	add	r8, r9
 8006b6e:	44c4      	add	ip, r8
 8006b70:	4462      	add	r2, ip
 8006b72:	25cc      	movs	r5, #204	; 0xcc
 8006b74:	0030      	movs	r0, r6
 8006b76:	2108      	movs	r1, #8
 8006b78:	2408      	movs	r4, #8
 8006b7a:	46a4      	mov	ip, r4
 8006b7c:	2408      	movs	r4, #8
 8006b7e:	46a0      	mov	r8, r4
 8006b80:	44b8      	add	r8, r7
 8006b82:	44c4      	add	ip, r8
 8006b84:	4461      	add	r1, ip
 8006b86:	1809      	adds	r1, r1, r0
 8006b88:	1949      	adds	r1, r1, r5
 8006b8a:	697e      	ldr	r6, [r7, #20]
 8006b8c:	0005      	movs	r5, r0
 8006b8e:	2408      	movs	r4, #8
 8006b90:	46a4      	mov	ip, r4
 8006b92:	2408      	movs	r4, #8
 8006b94:	46a0      	mov	r8, r4
 8006b96:	2408      	movs	r4, #8
 8006b98:	46a1      	mov	r9, r4
 8006b9a:	44b9      	add	r9, r7
 8006b9c:	44c8      	add	r8, r9
 8006b9e:	44c4      	add	ip, r8
 8006ba0:	4460      	add	r0, ip
 8006ba2:	1980      	adds	r0, r0, r6
 8006ba4:	f7fe f99a 	bl	8004edc <GyroLowPassFilter2>
	GyroLowPassFilter2(accel_data_1, prev_low_pass_accel_1, low_pass_accel_1, low_alpha_acc);
 8006ba8:	68bc      	ldr	r4, [r7, #8]
 8006baa:	002e      	movs	r6, r5
 8006bac:	2308      	movs	r3, #8
 8006bae:	2208      	movs	r2, #8
 8006bb0:	4694      	mov	ip, r2
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	44b8      	add	r8, r7
 8006bb8:	44c4      	add	ip, r8
 8006bba:	4463      	add	r3, ip
 8006bbc:	199b      	adds	r3, r3, r6
 8006bbe:	191a      	adds	r2, r3, r4
 8006bc0:	6813      	ldr	r3, [r2, #0]
 8006bc2:	24b4      	movs	r4, #180	; 0xb4
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	2108      	movs	r1, #8
 8006bc8:	468c      	mov	ip, r1
 8006bca:	2108      	movs	r1, #8
 8006bcc:	4688      	mov	r8, r1
 8006bce:	44b8      	add	r8, r7
 8006bd0:	44c4      	add	ip, r8
 8006bd2:	4462      	add	r2, ip
 8006bd4:	1992      	adds	r2, r2, r6
 8006bd6:	1912      	adds	r2, r2, r4
 8006bd8:	259c      	movs	r5, #156	; 0x9c
 8006bda:	2108      	movs	r1, #8
 8006bdc:	2008      	movs	r0, #8
 8006bde:	4684      	mov	ip, r0
 8006be0:	2008      	movs	r0, #8
 8006be2:	4680      	mov	r8, r0
 8006be4:	44b8      	add	r8, r7
 8006be6:	44c4      	add	ip, r8
 8006be8:	4461      	add	r1, ip
 8006bea:	1989      	adds	r1, r1, r6
 8006bec:	1949      	adds	r1, r1, r5
 8006bee:	20aa      	movs	r0, #170	; 0xaa
 8006bf0:	0040      	lsls	r0, r0, #1
 8006bf2:	2508      	movs	r5, #8
 8006bf4:	46ac      	mov	ip, r5
 8006bf6:	2508      	movs	r5, #8
 8006bf8:	46a8      	mov	r8, r5
 8006bfa:	2508      	movs	r5, #8
 8006bfc:	46a9      	mov	r9, r5
 8006bfe:	2508      	movs	r5, #8
 8006c00:	46aa      	mov	sl, r5
 8006c02:	44ba      	add	sl, r7
 8006c04:	44d1      	add	r9, sl
 8006c06:	44c8      	add	r8, r9
 8006c08:	44c4      	add	ip, r8
 8006c0a:	4460      	add	r0, ip
 8006c0c:	f7fe f966 	bl	8004edc <GyroLowPassFilter2>

	// Rotate Accelerometer from Earth frame into reference frame
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_0, low_pass_accel_0, accel_data_earthframe_0);
 8006c10:	2398      	movs	r3, #152	; 0x98
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	0035      	movs	r5, r6
 8006c16:	2208      	movs	r2, #8
 8006c18:	2108      	movs	r1, #8
 8006c1a:	468c      	mov	ip, r1
 8006c1c:	2108      	movs	r1, #8
 8006c1e:	4688      	mov	r8, r1
 8006c20:	44b8      	add	r8, r7
 8006c22:	44c4      	add	ip, r8
 8006c24:	4462      	add	r2, ip
 8006c26:	1952      	adds	r2, r2, r5
 8006c28:	18d2      	adds	r2, r2, r3
 8006c2a:	21c0      	movs	r1, #192	; 0xc0
 8006c2c:	2308      	movs	r3, #8
 8006c2e:	469c      	mov	ip, r3
 8006c30:	2308      	movs	r3, #8
 8006c32:	4698      	mov	r8, r3
 8006c34:	2308      	movs	r3, #8
 8006c36:	4699      	mov	r9, r3
 8006c38:	2308      	movs	r3, #8
 8006c3a:	469a      	mov	sl, r3
 8006c3c:	44ba      	add	sl, r7
 8006c3e:	44d1      	add	r9, sl
 8006c40:	44c8      	add	r8, r9
 8006c42:	44c4      	add	ip, r8
 8006c44:	4461      	add	r1, ip
 8006c46:	2328      	movs	r3, #40	; 0x28
 8006c48:	2008      	movs	r0, #8
 8006c4a:	4684      	mov	ip, r0
 8006c4c:	2008      	movs	r0, #8
 8006c4e:	4680      	mov	r8, r0
 8006c50:	2008      	movs	r0, #8
 8006c52:	4681      	mov	r9, r0
 8006c54:	2008      	movs	r0, #8
 8006c56:	4682      	mov	sl, r0
 8006c58:	44ba      	add	sl, r7
 8006c5a:	44d1      	add	r9, sl
 8006c5c:	44c8      	add	r8, r9
 8006c5e:	44c4      	add	ip, r8
 8006c60:	4463      	add	r3, ip
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7fe fdd8 	bl	8005818 <CalculateAccelerometerInEarthFrame>
	CalculateAccelerometerInEarthFrame(&rotation_matrix_earth_1, low_pass_accel_1, accel_data_earthframe_1);
 8006c68:	2392      	movs	r3, #146	; 0x92
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	2108      	movs	r1, #8
 8006c70:	468c      	mov	ip, r1
 8006c72:	2108      	movs	r1, #8
 8006c74:	4688      	mov	r8, r1
 8006c76:	44b8      	add	r8, r7
 8006c78:	44c4      	add	ip, r8
 8006c7a:	4462      	add	r2, ip
 8006c7c:	1952      	adds	r2, r2, r5
 8006c7e:	18d2      	adds	r2, r2, r3
 8006c80:	2308      	movs	r3, #8
 8006c82:	2108      	movs	r1, #8
 8006c84:	468c      	mov	ip, r1
 8006c86:	2108      	movs	r1, #8
 8006c88:	4688      	mov	r8, r1
 8006c8a:	44b8      	add	r8, r7
 8006c8c:	44c4      	add	ip, r8
 8006c8e:	4463      	add	r3, ip
 8006c90:	195b      	adds	r3, r3, r5
 8006c92:	1919      	adds	r1, r3, r4
 8006c94:	230c      	movs	r3, #12
 8006c96:	2008      	movs	r0, #8
 8006c98:	4684      	mov	ip, r0
 8006c9a:	2008      	movs	r0, #8
 8006c9c:	4680      	mov	r8, r0
 8006c9e:	2008      	movs	r0, #8
 8006ca0:	4681      	mov	r9, r0
 8006ca2:	44b9      	add	r9, r7
 8006ca4:	44c8      	add	r8, r9
 8006ca6:	44c4      	add	ip, r8
 8006ca8:	4463      	add	r3, ip
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7fe fdb4 	bl	8005818 <CalculateAccelerometerInEarthFrame>
		tampering_buffer_1[5][0] = low_pass_gyro_1[2];
	#endif

	// Detect angular movements
		// Detect angular movements
	if (low_pass_gyro_0[0] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[0] < -TAMPERING_UPPER_THRESHOLD)
 8006cb0:	4beb      	ldr	r3, [pc, #940]	; (8007060 <main+0x165c>)
 8006cb2:	229e      	movs	r2, #158	; 0x9e
 8006cb4:	0092      	lsls	r2, r2, #2
 8006cb6:	4694      	mov	ip, r2
 8006cb8:	2208      	movs	r2, #8
 8006cba:	4690      	mov	r8, r2
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	4691      	mov	r9, r2
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	4692      	mov	sl, r2
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	4693      	mov	fp, r2
 8006cc8:	44bb      	add	fp, r7
 8006cca:	44da      	add	sl, fp
 8006ccc:	44d1      	add	r9, sl
 8006cce:	44c8      	add	r8, r9
 8006cd0:	44c4      	add	ip, r8
 8006cd2:	4463      	add	r3, ip
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	49e3      	ldr	r1, [pc, #908]	; (8007064 <main+0x1660>)
 8006cd8:	1c18      	adds	r0, r3, #0
 8006cda:	f7f9 fc07 	bl	80004ec <__aeabi_fcmpgt>
 8006cde:	1e03      	subs	r3, r0, #0
 8006ce0:	d118      	bne.n	8006d14 <main+0x1310>
 8006ce2:	4bdf      	ldr	r3, [pc, #892]	; (8007060 <main+0x165c>)
 8006ce4:	229e      	movs	r2, #158	; 0x9e
 8006ce6:	0092      	lsls	r2, r2, #2
 8006ce8:	4694      	mov	ip, r2
 8006cea:	2208      	movs	r2, #8
 8006cec:	4690      	mov	r8, r2
 8006cee:	2208      	movs	r2, #8
 8006cf0:	4691      	mov	r9, r2
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	4692      	mov	sl, r2
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	4693      	mov	fp, r2
 8006cfa:	44bb      	add	fp, r7
 8006cfc:	44da      	add	sl, fp
 8006cfe:	44d1      	add	r9, sl
 8006d00:	44c8      	add	r8, r9
 8006d02:	44c4      	add	ip, r8
 8006d04:	4463      	add	r3, ip
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	49d7      	ldr	r1, [pc, #860]	; (8007068 <main+0x1664>)
 8006d0a:	1c18      	adds	r0, r3, #0
 8006d0c:	f7f9 fbda 	bl	80004c4 <__aeabi_fcmplt>
 8006d10:	1e03      	subs	r3, r0, #0
 8006d12:	d013      	beq.n	8006d3c <main+0x1338>
	{
		is_moving[0] = 1;
 8006d14:	4bd5      	ldr	r3, [pc, #852]	; (800706c <main+0x1668>)
 8006d16:	229e      	movs	r2, #158	; 0x9e
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	4694      	mov	ip, r2
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	4690      	mov	r8, r2
 8006d20:	2208      	movs	r2, #8
 8006d22:	4691      	mov	r9, r2
 8006d24:	2208      	movs	r2, #8
 8006d26:	4692      	mov	sl, r2
 8006d28:	2208      	movs	r2, #8
 8006d2a:	4693      	mov	fp, r2
 8006d2c:	44bb      	add	fp, r7
 8006d2e:	44da      	add	sl, fp
 8006d30:	44d1      	add	r9, sl
 8006d32:	44c8      	add	r8, r9
 8006d34:	44c4      	add	ip, r8
 8006d36:	4463      	add	r3, ip
 8006d38:	2201      	movs	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[1] < -TAMPERING_UPPER_THRESHOLD)
 8006d3c:	4bc8      	ldr	r3, [pc, #800]	; (8007060 <main+0x165c>)
 8006d3e:	229e      	movs	r2, #158	; 0x9e
 8006d40:	0092      	lsls	r2, r2, #2
 8006d42:	4694      	mov	ip, r2
 8006d44:	2208      	movs	r2, #8
 8006d46:	4690      	mov	r8, r2
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4691      	mov	r9, r2
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	4692      	mov	sl, r2
 8006d50:	2208      	movs	r2, #8
 8006d52:	4693      	mov	fp, r2
 8006d54:	44bb      	add	fp, r7
 8006d56:	44da      	add	sl, fp
 8006d58:	44d1      	add	r9, sl
 8006d5a:	44c8      	add	r8, r9
 8006d5c:	44c4      	add	ip, r8
 8006d5e:	4463      	add	r3, ip
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	49c0      	ldr	r1, [pc, #768]	; (8007064 <main+0x1660>)
 8006d64:	1c18      	adds	r0, r3, #0
 8006d66:	f7f9 fbc1 	bl	80004ec <__aeabi_fcmpgt>
 8006d6a:	1e03      	subs	r3, r0, #0
 8006d6c:	d118      	bne.n	8006da0 <main+0x139c>
 8006d6e:	4bbc      	ldr	r3, [pc, #752]	; (8007060 <main+0x165c>)
 8006d70:	229e      	movs	r2, #158	; 0x9e
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	4694      	mov	ip, r2
 8006d76:	2208      	movs	r2, #8
 8006d78:	4690      	mov	r8, r2
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	4691      	mov	r9, r2
 8006d7e:	2208      	movs	r2, #8
 8006d80:	4692      	mov	sl, r2
 8006d82:	2208      	movs	r2, #8
 8006d84:	4693      	mov	fp, r2
 8006d86:	44bb      	add	fp, r7
 8006d88:	44da      	add	sl, fp
 8006d8a:	44d1      	add	r9, sl
 8006d8c:	44c8      	add	r8, r9
 8006d8e:	44c4      	add	ip, r8
 8006d90:	4463      	add	r3, ip
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	49b4      	ldr	r1, [pc, #720]	; (8007068 <main+0x1664>)
 8006d96:	1c18      	adds	r0, r3, #0
 8006d98:	f7f9 fb94 	bl	80004c4 <__aeabi_fcmplt>
 8006d9c:	1e03      	subs	r3, r0, #0
 8006d9e:	d013      	beq.n	8006dc8 <main+0x13c4>
	{
		is_moving[1] = 1;
 8006da0:	4bb2      	ldr	r3, [pc, #712]	; (800706c <main+0x1668>)
 8006da2:	229e      	movs	r2, #158	; 0x9e
 8006da4:	0092      	lsls	r2, r2, #2
 8006da6:	4694      	mov	ip, r2
 8006da8:	2208      	movs	r2, #8
 8006daa:	4690      	mov	r8, r2
 8006dac:	2208      	movs	r2, #8
 8006dae:	4691      	mov	r9, r2
 8006db0:	2208      	movs	r2, #8
 8006db2:	4692      	mov	sl, r2
 8006db4:	2208      	movs	r2, #8
 8006db6:	4693      	mov	fp, r2
 8006db8:	44bb      	add	fp, r7
 8006dba:	44da      	add	sl, fp
 8006dbc:	44d1      	add	r9, sl
 8006dbe:	44c8      	add	r8, r9
 8006dc0:	44c4      	add	ip, r8
 8006dc2:	4463      	add	r3, ip
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	705a      	strb	r2, [r3, #1]
	}

	if (low_pass_gyro_0[2] > TAMPERING_UPPER_THRESHOLD || low_pass_gyro_0[2] < -TAMPERING_UPPER_THRESHOLD)
 8006dc8:	4ba5      	ldr	r3, [pc, #660]	; (8007060 <main+0x165c>)
 8006dca:	229e      	movs	r2, #158	; 0x9e
 8006dcc:	0092      	lsls	r2, r2, #2
 8006dce:	4694      	mov	ip, r2
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	4690      	mov	r8, r2
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	4691      	mov	r9, r2
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4692      	mov	sl, r2
 8006ddc:	2208      	movs	r2, #8
 8006dde:	4693      	mov	fp, r2
 8006de0:	44bb      	add	fp, r7
 8006de2:	44da      	add	sl, fp
 8006de4:	44d1      	add	r9, sl
 8006de6:	44c8      	add	r8, r9
 8006de8:	44c4      	add	ip, r8
 8006dea:	4463      	add	r3, ip
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	499d      	ldr	r1, [pc, #628]	; (8007064 <main+0x1660>)
 8006df0:	1c18      	adds	r0, r3, #0
 8006df2:	f7f9 fb7b 	bl	80004ec <__aeabi_fcmpgt>
 8006df6:	1e03      	subs	r3, r0, #0
 8006df8:	d118      	bne.n	8006e2c <main+0x1428>
 8006dfa:	4b99      	ldr	r3, [pc, #612]	; (8007060 <main+0x165c>)
 8006dfc:	229e      	movs	r2, #158	; 0x9e
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	4694      	mov	ip, r2
 8006e02:	2208      	movs	r2, #8
 8006e04:	4690      	mov	r8, r2
 8006e06:	2208      	movs	r2, #8
 8006e08:	4691      	mov	r9, r2
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	4692      	mov	sl, r2
 8006e0e:	2208      	movs	r2, #8
 8006e10:	4693      	mov	fp, r2
 8006e12:	44bb      	add	fp, r7
 8006e14:	44da      	add	sl, fp
 8006e16:	44d1      	add	r9, sl
 8006e18:	44c8      	add	r8, r9
 8006e1a:	44c4      	add	ip, r8
 8006e1c:	4463      	add	r3, ip
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4991      	ldr	r1, [pc, #580]	; (8007068 <main+0x1664>)
 8006e22:	1c18      	adds	r0, r3, #0
 8006e24:	f7f9 fb4e 	bl	80004c4 <__aeabi_fcmplt>
 8006e28:	1e03      	subs	r3, r0, #0
 8006e2a:	d013      	beq.n	8006e54 <main+0x1450>
	{
		is_moving[2] = 1;
 8006e2c:	4b8f      	ldr	r3, [pc, #572]	; (800706c <main+0x1668>)
 8006e2e:	229e      	movs	r2, #158	; 0x9e
 8006e30:	0092      	lsls	r2, r2, #2
 8006e32:	4694      	mov	ip, r2
 8006e34:	2208      	movs	r2, #8
 8006e36:	4690      	mov	r8, r2
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4691      	mov	r9, r2
 8006e3c:	2208      	movs	r2, #8
 8006e3e:	4692      	mov	sl, r2
 8006e40:	2208      	movs	r2, #8
 8006e42:	4693      	mov	fp, r2
 8006e44:	44bb      	add	fp, r7
 8006e46:	44da      	add	sl, fp
 8006e48:	44d1      	add	r9, sl
 8006e4a:	44c8      	add	r8, r9
 8006e4c:	44c4      	add	ip, r8
 8006e4e:	4463      	add	r3, ip
 8006e50:	2201      	movs	r2, #1
 8006e52:	709a      	strb	r2, [r3, #2]
	}

	if (low_pass_gyro_0[0] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[0] > -TAMPERING_LOWER_THRESHOLD)
 8006e54:	4b82      	ldr	r3, [pc, #520]	; (8007060 <main+0x165c>)
 8006e56:	229e      	movs	r2, #158	; 0x9e
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	4694      	mov	ip, r2
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	4690      	mov	r8, r2
 8006e60:	2208      	movs	r2, #8
 8006e62:	4691      	mov	r9, r2
 8006e64:	2208      	movs	r2, #8
 8006e66:	4692      	mov	sl, r2
 8006e68:	2208      	movs	r2, #8
 8006e6a:	4693      	mov	fp, r2
 8006e6c:	44bb      	add	fp, r7
 8006e6e:	44da      	add	sl, fp
 8006e70:	44d1      	add	r9, sl
 8006e72:	44c8      	add	r8, r9
 8006e74:	44c4      	add	ip, r8
 8006e76:	4463      	add	r3, ip
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	1c18      	adds	r0, r3, #0
 8006e7c:	f7fc f828 	bl	8002ed0 <__aeabi_f2d>
 8006e80:	4a7b      	ldr	r2, [pc, #492]	; (8007070 <main+0x166c>)
 8006e82:	4b7c      	ldr	r3, [pc, #496]	; (8007074 <main+0x1670>)
 8006e84:	f7f9 fae4 	bl	8000450 <__aeabi_dcmplt>
 8006e88:	1e03      	subs	r3, r0, #0
 8006e8a:	d02f      	beq.n	8006eec <main+0x14e8>
 8006e8c:	4b74      	ldr	r3, [pc, #464]	; (8007060 <main+0x165c>)
 8006e8e:	229e      	movs	r2, #158	; 0x9e
 8006e90:	0092      	lsls	r2, r2, #2
 8006e92:	4694      	mov	ip, r2
 8006e94:	2208      	movs	r2, #8
 8006e96:	4690      	mov	r8, r2
 8006e98:	2208      	movs	r2, #8
 8006e9a:	4691      	mov	r9, r2
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	4692      	mov	sl, r2
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	4693      	mov	fp, r2
 8006ea4:	44bb      	add	fp, r7
 8006ea6:	44da      	add	sl, fp
 8006ea8:	44d1      	add	r9, sl
 8006eaa:	44c8      	add	r8, r9
 8006eac:	44c4      	add	ip, r8
 8006eae:	4463      	add	r3, ip
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	1c18      	adds	r0, r3, #0
 8006eb4:	f7fc f80c 	bl	8002ed0 <__aeabi_f2d>
 8006eb8:	4a6d      	ldr	r2, [pc, #436]	; (8007070 <main+0x166c>)
 8006eba:	4b6f      	ldr	r3, [pc, #444]	; (8007078 <main+0x1674>)
 8006ebc:	f7f9 fadc 	bl	8000478 <__aeabi_dcmpgt>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d013      	beq.n	8006eec <main+0x14e8>
	{
		is_moving[0] = 0;
 8006ec4:	4b69      	ldr	r3, [pc, #420]	; (800706c <main+0x1668>)
 8006ec6:	229e      	movs	r2, #158	; 0x9e
 8006ec8:	0092      	lsls	r2, r2, #2
 8006eca:	4694      	mov	ip, r2
 8006ecc:	2208      	movs	r2, #8
 8006ece:	4690      	mov	r8, r2
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	4692      	mov	sl, r2
 8006ed8:	2208      	movs	r2, #8
 8006eda:	4693      	mov	fp, r2
 8006edc:	44bb      	add	fp, r7
 8006ede:	44da      	add	sl, fp
 8006ee0:	44d1      	add	r9, sl
 8006ee2:	44c8      	add	r8, r9
 8006ee4:	44c4      	add	ip, r8
 8006ee6:	4463      	add	r3, ip
 8006ee8:	2200      	movs	r2, #0
 8006eea:	701a      	strb	r2, [r3, #0]
	}

	if (low_pass_gyro_0[1] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[1] > -TAMPERING_LOWER_THRESHOLD)
 8006eec:	4b5c      	ldr	r3, [pc, #368]	; (8007060 <main+0x165c>)
 8006eee:	229e      	movs	r2, #158	; 0x9e
 8006ef0:	0092      	lsls	r2, r2, #2
 8006ef2:	4694      	mov	ip, r2
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4690      	mov	r8, r2
 8006ef8:	2208      	movs	r2, #8
 8006efa:	4691      	mov	r9, r2
 8006efc:	2208      	movs	r2, #8
 8006efe:	4692      	mov	sl, r2
 8006f00:	2208      	movs	r2, #8
 8006f02:	4693      	mov	fp, r2
 8006f04:	44bb      	add	fp, r7
 8006f06:	44da      	add	sl, fp
 8006f08:	44d1      	add	r9, sl
 8006f0a:	44c8      	add	r8, r9
 8006f0c:	44c4      	add	ip, r8
 8006f0e:	4463      	add	r3, ip
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	1c18      	adds	r0, r3, #0
 8006f14:	f7fb ffdc 	bl	8002ed0 <__aeabi_f2d>
 8006f18:	4a55      	ldr	r2, [pc, #340]	; (8007070 <main+0x166c>)
 8006f1a:	4b56      	ldr	r3, [pc, #344]	; (8007074 <main+0x1670>)
 8006f1c:	f7f9 fa98 	bl	8000450 <__aeabi_dcmplt>
 8006f20:	1e03      	subs	r3, r0, #0
 8006f22:	d02f      	beq.n	8006f84 <main+0x1580>
 8006f24:	4b4e      	ldr	r3, [pc, #312]	; (8007060 <main+0x165c>)
 8006f26:	229e      	movs	r2, #158	; 0x9e
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	4694      	mov	ip, r2
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	4690      	mov	r8, r2
 8006f30:	2208      	movs	r2, #8
 8006f32:	4691      	mov	r9, r2
 8006f34:	2208      	movs	r2, #8
 8006f36:	4692      	mov	sl, r2
 8006f38:	2208      	movs	r2, #8
 8006f3a:	4693      	mov	fp, r2
 8006f3c:	44bb      	add	fp, r7
 8006f3e:	44da      	add	sl, fp
 8006f40:	44d1      	add	r9, sl
 8006f42:	44c8      	add	r8, r9
 8006f44:	44c4      	add	ip, r8
 8006f46:	4463      	add	r3, ip
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	1c18      	adds	r0, r3, #0
 8006f4c:	f7fb ffc0 	bl	8002ed0 <__aeabi_f2d>
 8006f50:	4a47      	ldr	r2, [pc, #284]	; (8007070 <main+0x166c>)
 8006f52:	4b49      	ldr	r3, [pc, #292]	; (8007078 <main+0x1674>)
 8006f54:	f7f9 fa90 	bl	8000478 <__aeabi_dcmpgt>
 8006f58:	1e03      	subs	r3, r0, #0
 8006f5a:	d013      	beq.n	8006f84 <main+0x1580>
	{
		is_moving[1] = 0;
 8006f5c:	4b43      	ldr	r3, [pc, #268]	; (800706c <main+0x1668>)
 8006f5e:	229e      	movs	r2, #158	; 0x9e
 8006f60:	0092      	lsls	r2, r2, #2
 8006f62:	4694      	mov	ip, r2
 8006f64:	2208      	movs	r2, #8
 8006f66:	4690      	mov	r8, r2
 8006f68:	2208      	movs	r2, #8
 8006f6a:	4691      	mov	r9, r2
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	4692      	mov	sl, r2
 8006f70:	2208      	movs	r2, #8
 8006f72:	4693      	mov	fp, r2
 8006f74:	44bb      	add	fp, r7
 8006f76:	44da      	add	sl, fp
 8006f78:	44d1      	add	r9, sl
 8006f7a:	44c8      	add	r8, r9
 8006f7c:	44c4      	add	ip, r8
 8006f7e:	4463      	add	r3, ip
 8006f80:	2200      	movs	r2, #0
 8006f82:	705a      	strb	r2, [r3, #1]
	}
	if (low_pass_gyro_0[2] < TAMPERING_LOWER_THRESHOLD && low_pass_gyro_0[2] > -TAMPERING_LOWER_THRESHOLD)
 8006f84:	4b36      	ldr	r3, [pc, #216]	; (8007060 <main+0x165c>)
 8006f86:	229e      	movs	r2, #158	; 0x9e
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	4694      	mov	ip, r2
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4690      	mov	r8, r2
 8006f90:	2208      	movs	r2, #8
 8006f92:	4691      	mov	r9, r2
 8006f94:	2208      	movs	r2, #8
 8006f96:	4692      	mov	sl, r2
 8006f98:	2208      	movs	r2, #8
 8006f9a:	4693      	mov	fp, r2
 8006f9c:	44bb      	add	fp, r7
 8006f9e:	44da      	add	sl, fp
 8006fa0:	44d1      	add	r9, sl
 8006fa2:	44c8      	add	r8, r9
 8006fa4:	44c4      	add	ip, r8
 8006fa6:	4463      	add	r3, ip
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	1c18      	adds	r0, r3, #0
 8006fac:	f7fb ff90 	bl	8002ed0 <__aeabi_f2d>
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <main+0x166c>)
 8006fb2:	4b30      	ldr	r3, [pc, #192]	; (8007074 <main+0x1670>)
 8006fb4:	f7f9 fa4c 	bl	8000450 <__aeabi_dcmplt>
 8006fb8:	1e03      	subs	r3, r0, #0
 8006fba:	d02f      	beq.n	800701c <main+0x1618>
 8006fbc:	4b28      	ldr	r3, [pc, #160]	; (8007060 <main+0x165c>)
 8006fbe:	229e      	movs	r2, #158	; 0x9e
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	4694      	mov	ip, r2
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	4690      	mov	r8, r2
 8006fc8:	2208      	movs	r2, #8
 8006fca:	4691      	mov	r9, r2
 8006fcc:	2208      	movs	r2, #8
 8006fce:	4692      	mov	sl, r2
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	4693      	mov	fp, r2
 8006fd4:	44bb      	add	fp, r7
 8006fd6:	44da      	add	sl, fp
 8006fd8:	44d1      	add	r9, sl
 8006fda:	44c8      	add	r8, r9
 8006fdc:	44c4      	add	ip, r8
 8006fde:	4463      	add	r3, ip
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	1c18      	adds	r0, r3, #0
 8006fe4:	f7fb ff74 	bl	8002ed0 <__aeabi_f2d>
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <main+0x166c>)
 8006fea:	4b23      	ldr	r3, [pc, #140]	; (8007078 <main+0x1674>)
 8006fec:	f7f9 fa44 	bl	8000478 <__aeabi_dcmpgt>
 8006ff0:	1e03      	subs	r3, r0, #0
 8006ff2:	d013      	beq.n	800701c <main+0x1618>
	{
		is_moving[2] = 0;
 8006ff4:	4b1d      	ldr	r3, [pc, #116]	; (800706c <main+0x1668>)
 8006ff6:	229e      	movs	r2, #158	; 0x9e
 8006ff8:	0092      	lsls	r2, r2, #2
 8006ffa:	4694      	mov	ip, r2
 8006ffc:	2208      	movs	r2, #8
 8006ffe:	4690      	mov	r8, r2
 8007000:	2208      	movs	r2, #8
 8007002:	4691      	mov	r9, r2
 8007004:	2208      	movs	r2, #8
 8007006:	4692      	mov	sl, r2
 8007008:	2208      	movs	r2, #8
 800700a:	4693      	mov	fp, r2
 800700c:	44bb      	add	fp, r7
 800700e:	44da      	add	sl, fp
 8007010:	44d1      	add	r9, sl
 8007012:	44c8      	add	r8, r9
 8007014:	44c4      	add	ip, r8
 8007016:	4463      	add	r3, ip
 8007018:	2200      	movs	r2, #0
 800701a:	709a      	strb	r2, [r3, #2]
	}


	// Camera went from not moving to moving
	if (is_moving[0] == 1 || is_moving[1] == 1 || is_moving[2] == 1)
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <main+0x1668>)
 800701e:	229e      	movs	r2, #158	; 0x9e
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	4694      	mov	ip, r2
 8007024:	2208      	movs	r2, #8
 8007026:	4690      	mov	r8, r2
 8007028:	2208      	movs	r2, #8
 800702a:	4691      	mov	r9, r2
 800702c:	2208      	movs	r2, #8
 800702e:	4692      	mov	sl, r2
 8007030:	2208      	movs	r2, #8
 8007032:	4693      	mov	fp, r2
 8007034:	44bb      	add	fp, r7
 8007036:	44da      	add	sl, fp
 8007038:	44d1      	add	r9, sl
 800703a:	44c8      	add	r8, r9
 800703c:	44c4      	add	ip, r8
 800703e:	4463      	add	r3, ip
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b25b      	sxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d03d      	beq.n	80070c4 <main+0x16c0>
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <main+0x1668>)
 800704a:	229e      	movs	r2, #158	; 0x9e
 800704c:	0092      	lsls	r2, r2, #2
 800704e:	4694      	mov	ip, r2
 8007050:	2208      	movs	r2, #8
 8007052:	4690      	mov	r8, r2
 8007054:	2208      	movs	r2, #8
 8007056:	4691      	mov	r9, r2
 8007058:	2208      	movs	r2, #8
 800705a:	4692      	mov	sl, r2
 800705c:	e00e      	b.n	800707c <main+0x1678>
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	fffffe78 	.word	0xfffffe78
 8007064:	40a00000 	.word	0x40a00000
 8007068:	c0a00000 	.word	0xc0a00000
 800706c:	fffffd88 	.word	0xfffffd88
 8007070:	33333333 	.word	0x33333333
 8007074:	3fd33333 	.word	0x3fd33333
 8007078:	bfd33333 	.word	0xbfd33333
 800707c:	2208      	movs	r2, #8
 800707e:	4693      	mov	fp, r2
 8007080:	44bb      	add	fp, r7
 8007082:	44da      	add	sl, fp
 8007084:	44d1      	add	r9, sl
 8007086:	44c8      	add	r8, r9
 8007088:	44c4      	add	ip, r8
 800708a:	4463      	add	r3, ip
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	b25b      	sxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d017      	beq.n	80070c4 <main+0x16c0>
 8007094:	4bfd      	ldr	r3, [pc, #1012]	; (800748c <main+0x1a88>)
 8007096:	229e      	movs	r2, #158	; 0x9e
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	4694      	mov	ip, r2
 800709c:	2208      	movs	r2, #8
 800709e:	4690      	mov	r8, r2
 80070a0:	2208      	movs	r2, #8
 80070a2:	4691      	mov	r9, r2
 80070a4:	2208      	movs	r2, #8
 80070a6:	4692      	mov	sl, r2
 80070a8:	2208      	movs	r2, #8
 80070aa:	4693      	mov	fp, r2
 80070ac:	44bb      	add	fp, r7
 80070ae:	44da      	add	sl, fp
 80070b0:	44d1      	add	r9, sl
 80070b2:	44c8      	add	r8, r9
 80070b4:	44c4      	add	ip, r8
 80070b6:	4463      	add	r3, ip
 80070b8:	789b      	ldrb	r3, [r3, #2]
 80070ba:	b25b      	sxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d001      	beq.n	80070c4 <main+0x16c0>
 80070c0:	f000 febc 	bl	8007e3c <main+0x2438>
	{
		MadgwickFilterXIO(low_pass_gyro_0, accel_data_earthframe_0, &quat_0);
 80070c4:	238c      	movs	r3, #140	; 0x8c
 80070c6:	2508      	movs	r5, #8
 80070c8:	2208      	movs	r2, #8
 80070ca:	2108      	movs	r1, #8
 80070cc:	468c      	mov	ip, r1
 80070ce:	2108      	movs	r1, #8
 80070d0:	4688      	mov	r8, r1
 80070d2:	44b8      	add	r8, r7
 80070d4:	44c4      	add	ip, r8
 80070d6:	4462      	add	r2, ip
 80070d8:	1952      	adds	r2, r2, r5
 80070da:	18d2      	adds	r2, r2, r3
 80070dc:	2398      	movs	r3, #152	; 0x98
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	2108      	movs	r1, #8
 80070e2:	2008      	movs	r0, #8
 80070e4:	4684      	mov	ip, r0
 80070e6:	2008      	movs	r0, #8
 80070e8:	4680      	mov	r8, r0
 80070ea:	44b8      	add	r8, r7
 80070ec:	44c4      	add	ip, r8
 80070ee:	4461      	add	r1, ip
 80070f0:	1949      	adds	r1, r1, r5
 80070f2:	18c9      	adds	r1, r1, r3
 80070f4:	23f0      	movs	r3, #240	; 0xf0
 80070f6:	2008      	movs	r0, #8
 80070f8:	4684      	mov	ip, r0
 80070fa:	2008      	movs	r0, #8
 80070fc:	4680      	mov	r8, r0
 80070fe:	2008      	movs	r0, #8
 8007100:	4681      	mov	r9, r0
 8007102:	2008      	movs	r0, #8
 8007104:	4682      	mov	sl, r0
 8007106:	44ba      	add	sl, r7
 8007108:	44d1      	add	r9, sl
 800710a:	44c8      	add	r8, r9
 800710c:	44c4      	add	ip, r8
 800710e:	4463      	add	r3, ip
 8007110:	0018      	movs	r0, r3
 8007112:	f7fd f8bf 	bl	8004294 <MadgwickFilterXIO>
		MadgwickFilterXIO(low_pass_gyro_1, accel_data_earthframe_1, &quat_1);
 8007116:	237c      	movs	r3, #124	; 0x7c
 8007118:	2208      	movs	r2, #8
 800711a:	2108      	movs	r1, #8
 800711c:	468c      	mov	ip, r1
 800711e:	2108      	movs	r1, #8
 8007120:	4688      	mov	r8, r1
 8007122:	44b8      	add	r8, r7
 8007124:	44c4      	add	ip, r8
 8007126:	4462      	add	r2, ip
 8007128:	1952      	adds	r2, r2, r5
 800712a:	18d2      	adds	r2, r2, r3
 800712c:	2392      	movs	r3, #146	; 0x92
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	2108      	movs	r1, #8
 8007132:	2008      	movs	r0, #8
 8007134:	4684      	mov	ip, r0
 8007136:	2008      	movs	r0, #8
 8007138:	4680      	mov	r8, r0
 800713a:	44b8      	add	r8, r7
 800713c:	44c4      	add	ip, r8
 800713e:	4461      	add	r1, ip
 8007140:	1949      	adds	r1, r1, r5
 8007142:	18c9      	adds	r1, r1, r3
 8007144:	23e4      	movs	r3, #228	; 0xe4
 8007146:	2008      	movs	r0, #8
 8007148:	4684      	mov	ip, r0
 800714a:	2008      	movs	r0, #8
 800714c:	4680      	mov	r8, r0
 800714e:	2008      	movs	r0, #8
 8007150:	4681      	mov	r9, r0
 8007152:	2008      	movs	r0, #8
 8007154:	4682      	mov	sl, r0
 8007156:	44ba      	add	sl, r7
 8007158:	44d1      	add	r9, sl
 800715a:	44c8      	add	r8, r9
 800715c:	44c4      	add	ip, r8
 800715e:	4463      	add	r3, ip
 8007160:	0018      	movs	r0, r3
 8007162:	f7fd f897 	bl	8004294 <MadgwickFilterXIO>
		was_moving = 1;
 8007166:	4bca      	ldr	r3, [pc, #808]	; (8007490 <main+0x1a8c>)
 8007168:	2208      	movs	r2, #8
 800716a:	4694      	mov	ip, r2
 800716c:	2208      	movs	r2, #8
 800716e:	4690      	mov	r8, r2
 8007170:	2208      	movs	r2, #8
 8007172:	4691      	mov	r9, r2
 8007174:	2208      	movs	r2, #8
 8007176:	4692      	mov	sl, r2
 8007178:	44ba      	add	sl, r7
 800717a:	44d1      	add	r9, sl
 800717c:	44c8      	add	r8, r9
 800717e:	44c4      	add	ip, r8
 8007180:	4463      	add	r3, ip
 8007182:	2201      	movs	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]

		motion_duration += SAMPLE_TIME_ICM;
 8007186:	49c3      	ldr	r1, [pc, #780]	; (8007494 <main+0x1a90>)
 8007188:	249c      	movs	r4, #156	; 0x9c
 800718a:	00a4      	lsls	r4, r4, #2
 800718c:	2308      	movs	r3, #8
 800718e:	2208      	movs	r2, #8
 8007190:	4694      	mov	ip, r2
 8007192:	2208      	movs	r2, #8
 8007194:	4690      	mov	r8, r2
 8007196:	44b8      	add	r8, r7
 8007198:	44c4      	add	ip, r8
 800719a:	4463      	add	r3, ip
 800719c:	195b      	adds	r3, r3, r5
 800719e:	191b      	adds	r3, r3, r4
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f7f9 f9cf 	bl	8000544 <__aeabi_fadd>
 80071a6:	1c03      	adds	r3, r0, #0
 80071a8:	2208      	movs	r2, #8
 80071aa:	2108      	movs	r1, #8
 80071ac:	468c      	mov	ip, r1
 80071ae:	2108      	movs	r1, #8
 80071b0:	4688      	mov	r8, r1
 80071b2:	44b8      	add	r8, r7
 80071b4:	44c4      	add	ip, r8
 80071b6:	4462      	add	r2, ip
 80071b8:	1952      	adds	r2, r2, r5
 80071ba:	1912      	adds	r2, r2, r4
 80071bc:	6013      	str	r3, [r2, #0]

		if (motion_duration > 10*1000)
 80071be:	49b6      	ldr	r1, [pc, #728]	; (8007498 <main+0x1a94>)
 80071c0:	2308      	movs	r3, #8
 80071c2:	2208      	movs	r2, #8
 80071c4:	4694      	mov	ip, r2
 80071c6:	2208      	movs	r2, #8
 80071c8:	4690      	mov	r8, r2
 80071ca:	44b8      	add	r8, r7
 80071cc:	44c4      	add	ip, r8
 80071ce:	4463      	add	r3, ip
 80071d0:	195b      	adds	r3, r3, r5
 80071d2:	191b      	adds	r3, r3, r4
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7f9 f989 	bl	80004ec <__aeabi_fcmpgt>
 80071da:	1e03      	subs	r3, r0, #0
 80071dc:	d101      	bne.n	80071e2 <main+0x17de>
 80071de:	f000 fdc5 	bl	8007d6c <main+0x2368>
		{
			// Convert Quaternion Space to Euler Angles Regular
			CalcQuaternionToEuler(quat_0, &angles_0);
 80071e2:	4bae      	ldr	r3, [pc, #696]	; (800749c <main+0x1a98>)
 80071e4:	229e      	movs	r2, #158	; 0x9e
 80071e6:	0092      	lsls	r2, r2, #2
 80071e8:	4694      	mov	ip, r2
 80071ea:	2208      	movs	r2, #8
 80071ec:	4690      	mov	r8, r2
 80071ee:	2208      	movs	r2, #8
 80071f0:	4691      	mov	r9, r2
 80071f2:	2208      	movs	r2, #8
 80071f4:	4692      	mov	sl, r2
 80071f6:	2208      	movs	r2, #8
 80071f8:	4693      	mov	fp, r2
 80071fa:	44bb      	add	fp, r7
 80071fc:	44da      	add	sl, fp
 80071fe:	44d1      	add	r9, sl
 8007200:	44c8      	add	r8, r9
 8007202:	44c4      	add	ip, r8
 8007204:	4463      	add	r3, ip
 8007206:	2270      	movs	r2, #112	; 0x70
 8007208:	2108      	movs	r1, #8
 800720a:	468c      	mov	ip, r1
 800720c:	2108      	movs	r1, #8
 800720e:	4688      	mov	r8, r1
 8007210:	2108      	movs	r1, #8
 8007212:	4689      	mov	r9, r1
 8007214:	2108      	movs	r1, #8
 8007216:	468a      	mov	sl, r1
 8007218:	44ba      	add	sl, r7
 800721a:	44d1      	add	r9, sl
 800721c:	44c8      	add	r8, r9
 800721e:	44c4      	add	ip, r8
 8007220:	4462      	add	r2, ip
 8007222:	9200      	str	r2, [sp, #0]
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	6859      	ldr	r1, [r3, #4]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f7fc fec6 	bl	8003fbc <CalcQuaternionToEuler>
			CalcQuaternionToEuler(quat_1, &angles_1);
 8007230:	4b9b      	ldr	r3, [pc, #620]	; (80074a0 <main+0x1a9c>)
 8007232:	229e      	movs	r2, #158	; 0x9e
 8007234:	0092      	lsls	r2, r2, #2
 8007236:	4694      	mov	ip, r2
 8007238:	2208      	movs	r2, #8
 800723a:	4690      	mov	r8, r2
 800723c:	2208      	movs	r2, #8
 800723e:	4691      	mov	r9, r2
 8007240:	2208      	movs	r2, #8
 8007242:	4692      	mov	sl, r2
 8007244:	2208      	movs	r2, #8
 8007246:	4693      	mov	fp, r2
 8007248:	44bb      	add	fp, r7
 800724a:	44da      	add	sl, fp
 800724c:	44d1      	add	r9, sl
 800724e:	44c8      	add	r8, r9
 8007250:	44c4      	add	ip, r8
 8007252:	4463      	add	r3, ip
 8007254:	2264      	movs	r2, #100	; 0x64
 8007256:	2108      	movs	r1, #8
 8007258:	468c      	mov	ip, r1
 800725a:	2108      	movs	r1, #8
 800725c:	4688      	mov	r8, r1
 800725e:	2108      	movs	r1, #8
 8007260:	4689      	mov	r9, r1
 8007262:	2108      	movs	r1, #8
 8007264:	468a      	mov	sl, r1
 8007266:	44ba      	add	sl, r7
 8007268:	44d1      	add	r9, sl
 800726a:	44c8      	add	r8, r9
 800726c:	44c4      	add	ip, r8
 800726e:	4462      	add	r2, ip
 8007270:	9200      	str	r2, [sp, #0]
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	6859      	ldr	r1, [r3, #4]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f7fc fe9f 	bl	8003fbc <CalcQuaternionToEuler>

			diff_pan_0 = prev_0.yaw  - angles_0.yaw;
 800727e:	4b89      	ldr	r3, [pc, #548]	; (80074a4 <main+0x1aa0>)
 8007280:	229e      	movs	r2, #158	; 0x9e
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	4694      	mov	ip, r2
 8007286:	2208      	movs	r2, #8
 8007288:	4690      	mov	r8, r2
 800728a:	2208      	movs	r2, #8
 800728c:	4691      	mov	r9, r2
 800728e:	2208      	movs	r2, #8
 8007290:	4692      	mov	sl, r2
 8007292:	2208      	movs	r2, #8
 8007294:	4693      	mov	fp, r2
 8007296:	44bb      	add	fp, r7
 8007298:	44da      	add	sl, fp
 800729a:	44d1      	add	r9, sl
 800729c:	44c8      	add	r8, r9
 800729e:	44c4      	add	ip, r8
 80072a0:	4463      	add	r3, ip
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	4b80      	ldr	r3, [pc, #512]	; (80074a8 <main+0x1aa4>)
 80072a6:	219e      	movs	r1, #158	; 0x9e
 80072a8:	0089      	lsls	r1, r1, #2
 80072aa:	468c      	mov	ip, r1
 80072ac:	2108      	movs	r1, #8
 80072ae:	4688      	mov	r8, r1
 80072b0:	2108      	movs	r1, #8
 80072b2:	4689      	mov	r9, r1
 80072b4:	2108      	movs	r1, #8
 80072b6:	468a      	mov	sl, r1
 80072b8:	2108      	movs	r1, #8
 80072ba:	468b      	mov	fp, r1
 80072bc:	44bb      	add	fp, r7
 80072be:	44da      	add	sl, fp
 80072c0:	44d1      	add	r9, sl
 80072c2:	44c8      	add	r8, r9
 80072c4:	44c4      	add	ip, r8
 80072c6:	4463      	add	r3, ip
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	1c19      	adds	r1, r3, #0
 80072cc:	1c10      	adds	r0, r2, #0
 80072ce:	f7f9 fdb9 	bl	8000e44 <__aeabi_fsub>
 80072d2:	1c03      	adds	r3, r0, #0
 80072d4:	2492      	movs	r4, #146	; 0x92
 80072d6:	00a4      	lsls	r4, r4, #2
 80072d8:	603c      	str	r4, [r7, #0]
 80072da:	002e      	movs	r6, r5
 80072dc:	2208      	movs	r2, #8
 80072de:	2108      	movs	r1, #8
 80072e0:	468c      	mov	ip, r1
 80072e2:	2108      	movs	r1, #8
 80072e4:	4688      	mov	r8, r1
 80072e6:	44b8      	add	r8, r7
 80072e8:	44c4      	add	ip, r8
 80072ea:	4462      	add	r2, ip
 80072ec:	1952      	adds	r2, r2, r5
 80072ee:	1912      	adds	r2, r2, r4
 80072f0:	6013      	str	r3, [r2, #0]
			diff_pan_1 = prev_1.yaw  - angles_1.yaw;
 80072f2:	4b6e      	ldr	r3, [pc, #440]	; (80074ac <main+0x1aa8>)
 80072f4:	229e      	movs	r2, #158	; 0x9e
 80072f6:	0092      	lsls	r2, r2, #2
 80072f8:	4694      	mov	ip, r2
 80072fa:	2208      	movs	r2, #8
 80072fc:	4690      	mov	r8, r2
 80072fe:	2208      	movs	r2, #8
 8007300:	4691      	mov	r9, r2
 8007302:	2208      	movs	r2, #8
 8007304:	4692      	mov	sl, r2
 8007306:	2208      	movs	r2, #8
 8007308:	4693      	mov	fp, r2
 800730a:	44bb      	add	fp, r7
 800730c:	44da      	add	sl, fp
 800730e:	44d1      	add	r9, sl
 8007310:	44c8      	add	r8, r9
 8007312:	44c4      	add	ip, r8
 8007314:	4463      	add	r3, ip
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	4b65      	ldr	r3, [pc, #404]	; (80074b0 <main+0x1aac>)
 800731a:	219e      	movs	r1, #158	; 0x9e
 800731c:	0089      	lsls	r1, r1, #2
 800731e:	468c      	mov	ip, r1
 8007320:	2108      	movs	r1, #8
 8007322:	4688      	mov	r8, r1
 8007324:	2108      	movs	r1, #8
 8007326:	4689      	mov	r9, r1
 8007328:	2108      	movs	r1, #8
 800732a:	468a      	mov	sl, r1
 800732c:	2108      	movs	r1, #8
 800732e:	468b      	mov	fp, r1
 8007330:	44bb      	add	fp, r7
 8007332:	44da      	add	sl, fp
 8007334:	44d1      	add	r9, sl
 8007336:	44c8      	add	r8, r9
 8007338:	44c4      	add	ip, r8
 800733a:	4463      	add	r3, ip
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	1c19      	adds	r1, r3, #0
 8007340:	1c10      	adds	r0, r2, #0
 8007342:	f7f9 fd7f 	bl	8000e44 <__aeabi_fsub>
 8007346:	1c03      	adds	r3, r0, #0
 8007348:	2591      	movs	r5, #145	; 0x91
 800734a:	00ad      	lsls	r5, r5, #2
 800734c:	2208      	movs	r2, #8
 800734e:	2108      	movs	r1, #8
 8007350:	468c      	mov	ip, r1
 8007352:	2108      	movs	r1, #8
 8007354:	4688      	mov	r8, r1
 8007356:	44b8      	add	r8, r7
 8007358:	44c4      	add	ip, r8
 800735a:	4462      	add	r2, ip
 800735c:	1992      	adds	r2, r2, r6
 800735e:	1952      	adds	r2, r2, r5
 8007360:	6013      	str	r3, [r2, #0]

			diff_tilt_0 = prev_0.roll - angles_0.roll;
 8007362:	4b50      	ldr	r3, [pc, #320]	; (80074a4 <main+0x1aa0>)
 8007364:	229e      	movs	r2, #158	; 0x9e
 8007366:	0092      	lsls	r2, r2, #2
 8007368:	4694      	mov	ip, r2
 800736a:	2208      	movs	r2, #8
 800736c:	4690      	mov	r8, r2
 800736e:	2208      	movs	r2, #8
 8007370:	4691      	mov	r9, r2
 8007372:	2208      	movs	r2, #8
 8007374:	4692      	mov	sl, r2
 8007376:	2208      	movs	r2, #8
 8007378:	4693      	mov	fp, r2
 800737a:	44bb      	add	fp, r7
 800737c:	44da      	add	sl, fp
 800737e:	44d1      	add	r9, sl
 8007380:	44c8      	add	r8, r9
 8007382:	44c4      	add	ip, r8
 8007384:	4463      	add	r3, ip
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	4b47      	ldr	r3, [pc, #284]	; (80074a8 <main+0x1aa4>)
 800738a:	219e      	movs	r1, #158	; 0x9e
 800738c:	0089      	lsls	r1, r1, #2
 800738e:	468c      	mov	ip, r1
 8007390:	2008      	movs	r0, #8
 8007392:	4680      	mov	r8, r0
 8007394:	2108      	movs	r1, #8
 8007396:	4689      	mov	r9, r1
 8007398:	2108      	movs	r1, #8
 800739a:	468a      	mov	sl, r1
 800739c:	2108      	movs	r1, #8
 800739e:	468b      	mov	fp, r1
 80073a0:	44bb      	add	fp, r7
 80073a2:	44da      	add	sl, fp
 80073a4:	44d1      	add	r9, sl
 80073a6:	44c8      	add	r8, r9
 80073a8:	44c4      	add	ip, r8
 80073aa:	4463      	add	r3, ip
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1c19      	adds	r1, r3, #0
 80073b0:	1c10      	adds	r0, r2, #0
 80073b2:	f7f9 fd47 	bl	8000e44 <__aeabi_fsub>
 80073b6:	1c03      	adds	r3, r0, #0
 80073b8:	2690      	movs	r6, #144	; 0x90
 80073ba:	00b6      	lsls	r6, r6, #2
 80073bc:	2108      	movs	r1, #8
 80073be:	2208      	movs	r2, #8
 80073c0:	2008      	movs	r0, #8
 80073c2:	4684      	mov	ip, r0
 80073c4:	2008      	movs	r0, #8
 80073c6:	4680      	mov	r8, r0
 80073c8:	44b8      	add	r8, r7
 80073ca:	44c4      	add	ip, r8
 80073cc:	4462      	add	r2, ip
 80073ce:	1850      	adds	r0, r2, r1
 80073d0:	1982      	adds	r2, r0, r6
 80073d2:	6013      	str	r3, [r2, #0]
			diff_tilt_1 = prev_1.roll - angles_1.roll;
 80073d4:	4b35      	ldr	r3, [pc, #212]	; (80074ac <main+0x1aa8>)
 80073d6:	229e      	movs	r2, #158	; 0x9e
 80073d8:	0092      	lsls	r2, r2, #2
 80073da:	4694      	mov	ip, r2
 80073dc:	2008      	movs	r0, #8
 80073de:	4680      	mov	r8, r0
 80073e0:	2208      	movs	r2, #8
 80073e2:	4691      	mov	r9, r2
 80073e4:	2208      	movs	r2, #8
 80073e6:	4692      	mov	sl, r2
 80073e8:	2208      	movs	r2, #8
 80073ea:	4693      	mov	fp, r2
 80073ec:	44bb      	add	fp, r7
 80073ee:	44da      	add	sl, fp
 80073f0:	44d1      	add	r9, sl
 80073f2:	44c8      	add	r8, r9
 80073f4:	44c4      	add	ip, r8
 80073f6:	4463      	add	r3, ip
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <main+0x1aac>)
 80073fc:	219e      	movs	r1, #158	; 0x9e
 80073fe:	0089      	lsls	r1, r1, #2
 8007400:	468c      	mov	ip, r1
 8007402:	2008      	movs	r0, #8
 8007404:	4680      	mov	r8, r0
 8007406:	2108      	movs	r1, #8
 8007408:	4689      	mov	r9, r1
 800740a:	2108      	movs	r1, #8
 800740c:	468a      	mov	sl, r1
 800740e:	2108      	movs	r1, #8
 8007410:	468b      	mov	fp, r1
 8007412:	44bb      	add	fp, r7
 8007414:	44da      	add	sl, fp
 8007416:	44d1      	add	r9, sl
 8007418:	44c8      	add	r8, r9
 800741a:	44c4      	add	ip, r8
 800741c:	4463      	add	r3, ip
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	1c19      	adds	r1, r3, #0
 8007422:	1c10      	adds	r0, r2, #0
 8007424:	f7f9 fd0e 	bl	8000e44 <__aeabi_fsub>
 8007428:	1c03      	adds	r3, r0, #0
 800742a:	228f      	movs	r2, #143	; 0x8f
 800742c:	0092      	lsls	r2, r2, #2
 800742e:	2108      	movs	r1, #8
 8007430:	2008      	movs	r0, #8
 8007432:	2408      	movs	r4, #8
 8007434:	46a4      	mov	ip, r4
 8007436:	2408      	movs	r4, #8
 8007438:	46a0      	mov	r8, r4
 800743a:	44b8      	add	r8, r7
 800743c:	44c4      	add	ip, r8
 800743e:	4460      	add	r0, ip
 8007440:	1840      	adds	r0, r0, r1
 8007442:	1881      	adds	r1, r0, r2
 8007444:	600b      	str	r3, [r1, #0]

			diff_pitch_0 = (prev_0.pitch - angles_0.pitch);
 8007446:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <main+0x1aa0>)
 8007448:	219e      	movs	r1, #158	; 0x9e
 800744a:	0089      	lsls	r1, r1, #2
 800744c:	468c      	mov	ip, r1
 800744e:	2008      	movs	r0, #8
 8007450:	4680      	mov	r8, r0
 8007452:	2208      	movs	r2, #8
 8007454:	4691      	mov	r9, r2
 8007456:	2208      	movs	r2, #8
 8007458:	4692      	mov	sl, r2
 800745a:	2208      	movs	r2, #8
 800745c:	4693      	mov	fp, r2
 800745e:	44bb      	add	fp, r7
 8007460:	44da      	add	sl, fp
 8007462:	44d1      	add	r9, sl
 8007464:	44c8      	add	r8, r9
 8007466:	44c4      	add	ip, r8
 8007468:	4463      	add	r3, ip
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <main+0x1aa4>)
 800746e:	219e      	movs	r1, #158	; 0x9e
 8007470:	0089      	lsls	r1, r1, #2
 8007472:	468c      	mov	ip, r1
 8007474:	2008      	movs	r0, #8
 8007476:	4680      	mov	r8, r0
 8007478:	2108      	movs	r1, #8
 800747a:	4689      	mov	r9, r1
 800747c:	2108      	movs	r1, #8
 800747e:	468a      	mov	sl, r1
 8007480:	2108      	movs	r1, #8
 8007482:	468b      	mov	fp, r1
 8007484:	44bb      	add	fp, r7
 8007486:	44da      	add	sl, fp
 8007488:	44d1      	add	r9, sl
 800748a:	e013      	b.n	80074b4 <main+0x1ab0>
 800748c:	fffffd88 	.word	0xfffffd88
 8007490:	00000263 	.word	0x00000263
 8007494:	41f00000 	.word	0x41f00000
 8007498:	461c4000 	.word	0x461c4000
 800749c:	fffffe14 	.word	0xfffffe14
 80074a0:	fffffe04 	.word	0xfffffe04
 80074a4:	fffffde0 	.word	0xfffffde0
 80074a8:	fffffdf8 	.word	0xfffffdf8
 80074ac:	fffffdd4 	.word	0xfffffdd4
 80074b0:	fffffdec 	.word	0xfffffdec
 80074b4:	44c8      	add	r8, r9
 80074b6:	44c4      	add	ip, r8
 80074b8:	4463      	add	r3, ip
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	1c19      	adds	r1, r3, #0
 80074be:	1c10      	adds	r0, r2, #0
 80074c0:	f7f9 fcc0 	bl	8000e44 <__aeabi_fsub>
 80074c4:	1c03      	adds	r3, r0, #0
 80074c6:	218e      	movs	r1, #142	; 0x8e
 80074c8:	0089      	lsls	r1, r1, #2
 80074ca:	2208      	movs	r2, #8
 80074cc:	2008      	movs	r0, #8
 80074ce:	2408      	movs	r4, #8
 80074d0:	46a4      	mov	ip, r4
 80074d2:	2408      	movs	r4, #8
 80074d4:	46a0      	mov	r8, r4
 80074d6:	44b8      	add	r8, r7
 80074d8:	44c4      	add	ip, r8
 80074da:	4460      	add	r0, ip
 80074dc:	1880      	adds	r0, r0, r2
 80074de:	1840      	adds	r0, r0, r1
 80074e0:	6003      	str	r3, [r0, #0]
			diff_pitch_1 = (prev_1.pitch - angles_1.pitch);
 80074e2:	4bef      	ldr	r3, [pc, #956]	; (80078a0 <main+0x1e9c>)
 80074e4:	209e      	movs	r0, #158	; 0x9e
 80074e6:	0080      	lsls	r0, r0, #2
 80074e8:	4684      	mov	ip, r0
 80074ea:	2108      	movs	r1, #8
 80074ec:	4688      	mov	r8, r1
 80074ee:	2208      	movs	r2, #8
 80074f0:	4691      	mov	r9, r2
 80074f2:	2208      	movs	r2, #8
 80074f4:	4692      	mov	sl, r2
 80074f6:	2208      	movs	r2, #8
 80074f8:	4693      	mov	fp, r2
 80074fa:	44bb      	add	fp, r7
 80074fc:	44da      	add	sl, fp
 80074fe:	44d1      	add	r9, sl
 8007500:	44c8      	add	r8, r9
 8007502:	44c4      	add	ip, r8
 8007504:	4463      	add	r3, ip
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	4be6      	ldr	r3, [pc, #920]	; (80078a4 <main+0x1ea0>)
 800750a:	209e      	movs	r0, #158	; 0x9e
 800750c:	0080      	lsls	r0, r0, #2
 800750e:	4684      	mov	ip, r0
 8007510:	2108      	movs	r1, #8
 8007512:	4688      	mov	r8, r1
 8007514:	2108      	movs	r1, #8
 8007516:	4689      	mov	r9, r1
 8007518:	2108      	movs	r1, #8
 800751a:	468a      	mov	sl, r1
 800751c:	2108      	movs	r1, #8
 800751e:	468b      	mov	fp, r1
 8007520:	44bb      	add	fp, r7
 8007522:	44da      	add	sl, fp
 8007524:	44d1      	add	r9, sl
 8007526:	44c8      	add	r8, r9
 8007528:	44c4      	add	ip, r8
 800752a:	4463      	add	r3, ip
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	1c19      	adds	r1, r3, #0
 8007530:	1c10      	adds	r0, r2, #0
 8007532:	f7f9 fc87 	bl	8000e44 <__aeabi_fsub>
 8007536:	1c03      	adds	r3, r0, #0
 8007538:	208d      	movs	r0, #141	; 0x8d
 800753a:	0080      	lsls	r0, r0, #2
 800753c:	2208      	movs	r2, #8
 800753e:	2108      	movs	r1, #8
 8007540:	2408      	movs	r4, #8
 8007542:	46a4      	mov	ip, r4
 8007544:	2408      	movs	r4, #8
 8007546:	46a0      	mov	r8, r4
 8007548:	44b8      	add	r8, r7
 800754a:	44c4      	add	ip, r8
 800754c:	4461      	add	r1, ip
 800754e:	1889      	adds	r1, r1, r2
 8007550:	1809      	adds	r1, r1, r0
 8007552:	600b      	str	r3, [r1, #0]

			diff_pan_0_1 = diff_pan_0 - diff_pan_1;
 8007554:	2308      	movs	r3, #8
 8007556:	469c      	mov	ip, r3
 8007558:	2308      	movs	r3, #8
 800755a:	4698      	mov	r8, r3
 800755c:	2308      	movs	r3, #8
 800755e:	4699      	mov	r9, r3
 8007560:	2308      	movs	r3, #8
 8007562:	469a      	mov	sl, r3
 8007564:	44ba      	add	sl, r7
 8007566:	44d1      	add	r9, sl
 8007568:	44c8      	add	r8, r9
 800756a:	44c4      	add	ip, r8
 800756c:	4465      	add	r5, ip
 800756e:	6829      	ldr	r1, [r5, #0]
 8007570:	683c      	ldr	r4, [r7, #0]
 8007572:	2308      	movs	r3, #8
 8007574:	469c      	mov	ip, r3
 8007576:	2308      	movs	r3, #8
 8007578:	4698      	mov	r8, r3
 800757a:	2308      	movs	r3, #8
 800757c:	4699      	mov	r9, r3
 800757e:	2308      	movs	r3, #8
 8007580:	469a      	mov	sl, r3
 8007582:	44ba      	add	sl, r7
 8007584:	44d1      	add	r9, sl
 8007586:	44c8      	add	r8, r9
 8007588:	44c4      	add	ip, r8
 800758a:	4464      	add	r4, ip
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	f7f9 fc59 	bl	8000e44 <__aeabi_fsub>
 8007592:	1c03      	adds	r3, r0, #0
 8007594:	249b      	movs	r4, #155	; 0x9b
 8007596:	00a4      	lsls	r4, r4, #2
 8007598:	2008      	movs	r0, #8
 800759a:	2208      	movs	r2, #8
 800759c:	2108      	movs	r1, #8
 800759e:	468c      	mov	ip, r1
 80075a0:	2108      	movs	r1, #8
 80075a2:	4688      	mov	r8, r1
 80075a4:	44b8      	add	r8, r7
 80075a6:	44c4      	add	ip, r8
 80075a8:	4462      	add	r2, ip
 80075aa:	1812      	adds	r2, r2, r0
 80075ac:	1915      	adds	r5, r2, r4
 80075ae:	602b      	str	r3, [r5, #0]
			diff_tilt_0_1 = diff_tilt_0 - diff_tilt_1;
 80075b0:	228f      	movs	r2, #143	; 0x8f
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	2308      	movs	r3, #8
 80075b6:	469c      	mov	ip, r3
 80075b8:	2308      	movs	r3, #8
 80075ba:	4698      	mov	r8, r3
 80075bc:	2308      	movs	r3, #8
 80075be:	4699      	mov	r9, r3
 80075c0:	2308      	movs	r3, #8
 80075c2:	469a      	mov	sl, r3
 80075c4:	44ba      	add	sl, r7
 80075c6:	44d1      	add	r9, sl
 80075c8:	44c8      	add	r8, r9
 80075ca:	44c4      	add	ip, r8
 80075cc:	4462      	add	r2, ip
 80075ce:	6811      	ldr	r1, [r2, #0]
 80075d0:	0005      	movs	r5, r0
 80075d2:	2308      	movs	r3, #8
 80075d4:	2208      	movs	r2, #8
 80075d6:	4694      	mov	ip, r2
 80075d8:	2208      	movs	r2, #8
 80075da:	4690      	mov	r8, r2
 80075dc:	44b8      	add	r8, r7
 80075de:	44c4      	add	ip, r8
 80075e0:	4463      	add	r3, ip
 80075e2:	195b      	adds	r3, r3, r5
 80075e4:	199a      	adds	r2, r3, r6
 80075e6:	6810      	ldr	r0, [r2, #0]
 80075e8:	f7f9 fc2c 	bl	8000e44 <__aeabi_fsub>
 80075ec:	1c03      	adds	r3, r0, #0
 80075ee:	229a      	movs	r2, #154	; 0x9a
 80075f0:	0092      	lsls	r2, r2, #2
 80075f2:	2108      	movs	r1, #8
 80075f4:	468c      	mov	ip, r1
 80075f6:	2108      	movs	r1, #8
 80075f8:	4688      	mov	r8, r1
 80075fa:	2108      	movs	r1, #8
 80075fc:	4689      	mov	r9, r1
 80075fe:	2108      	movs	r1, #8
 8007600:	468a      	mov	sl, r1
 8007602:	44ba      	add	sl, r7
 8007604:	44d1      	add	r9, sl
 8007606:	44c8      	add	r8, r9
 8007608:	44c4      	add	ip, r8
 800760a:	4462      	add	r2, ip
 800760c:	6013      	str	r3, [r2, #0]
			diff_pitch_0_1 = diff_pitch_0 - diff_pitch_1;
 800760e:	208d      	movs	r0, #141	; 0x8d
 8007610:	0080      	lsls	r0, r0, #2
 8007612:	2308      	movs	r3, #8
 8007614:	2208      	movs	r2, #8
 8007616:	4694      	mov	ip, r2
 8007618:	2208      	movs	r2, #8
 800761a:	4690      	mov	r8, r2
 800761c:	44b8      	add	r8, r7
 800761e:	44c4      	add	ip, r8
 8007620:	4463      	add	r3, ip
 8007622:	195b      	adds	r3, r3, r5
 8007624:	181a      	adds	r2, r3, r0
 8007626:	6811      	ldr	r1, [r2, #0]
 8007628:	238e      	movs	r3, #142	; 0x8e
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	2208      	movs	r2, #8
 800762e:	4694      	mov	ip, r2
 8007630:	2208      	movs	r2, #8
 8007632:	4690      	mov	r8, r2
 8007634:	2208      	movs	r2, #8
 8007636:	4691      	mov	r9, r2
 8007638:	2208      	movs	r2, #8
 800763a:	4692      	mov	sl, r2
 800763c:	44ba      	add	sl, r7
 800763e:	44d1      	add	r9, sl
 8007640:	44c8      	add	r8, r9
 8007642:	44c4      	add	ip, r8
 8007644:	4463      	add	r3, ip
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	f7f9 fbfc 	bl	8000e44 <__aeabi_fsub>
 800764c:	1c03      	adds	r3, r0, #0
 800764e:	2299      	movs	r2, #153	; 0x99
 8007650:	0092      	lsls	r2, r2, #2
 8007652:	2108      	movs	r1, #8
 8007654:	468c      	mov	ip, r1
 8007656:	2108      	movs	r1, #8
 8007658:	4688      	mov	r8, r1
 800765a:	2108      	movs	r1, #8
 800765c:	4689      	mov	r9, r1
 800765e:	2108      	movs	r1, #8
 8007660:	468a      	mov	sl, r1
 8007662:	44ba      	add	sl, r7
 8007664:	44d1      	add	r9, sl
 8007666:	44c8      	add	r8, r9
 8007668:	44c4      	add	ip, r8
 800766a:	4462      	add	r2, ip
 800766c:	6013      	str	r3, [r2, #0]

			if (diff_pan_0_1 > 180.0)
 800766e:	498e      	ldr	r1, [pc, #568]	; (80078a8 <main+0x1ea4>)
 8007670:	2308      	movs	r3, #8
 8007672:	2208      	movs	r2, #8
 8007674:	4694      	mov	ip, r2
 8007676:	2208      	movs	r2, #8
 8007678:	4690      	mov	r8, r2
 800767a:	44b8      	add	r8, r7
 800767c:	44c4      	add	ip, r8
 800767e:	4463      	add	r3, ip
 8007680:	195b      	adds	r3, r3, r5
 8007682:	191b      	adds	r3, r3, r4
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f7f8 ff31 	bl	80004ec <__aeabi_fcmpgt>
 800768a:	1e03      	subs	r3, r0, #0
 800768c:	d019      	beq.n	80076c2 <main+0x1cbe>
			{
				diff_pan_0_1 = 360.0 - diff_pan_0_1;
 800768e:	2308      	movs	r3, #8
 8007690:	2208      	movs	r2, #8
 8007692:	4694      	mov	ip, r2
 8007694:	2208      	movs	r2, #8
 8007696:	4690      	mov	r8, r2
 8007698:	44b8      	add	r8, r7
 800769a:	44c4      	add	ip, r8
 800769c:	4463      	add	r3, ip
 800769e:	195b      	adds	r3, r3, r5
 80076a0:	191b      	adds	r3, r3, r4
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	4881      	ldr	r0, [pc, #516]	; (80078ac <main+0x1ea8>)
 80076a6:	f7f9 fbcd 	bl	8000e44 <__aeabi_fsub>
 80076aa:	1c03      	adds	r3, r0, #0
 80076ac:	2208      	movs	r2, #8
 80076ae:	2108      	movs	r1, #8
 80076b0:	468c      	mov	ip, r1
 80076b2:	2108      	movs	r1, #8
 80076b4:	4688      	mov	r8, r1
 80076b6:	44b8      	add	r8, r7
 80076b8:	44c4      	add	ip, r8
 80076ba:	4462      	add	r2, ip
 80076bc:	1952      	adds	r2, r2, r5
 80076be:	1912      	adds	r2, r2, r4
 80076c0:	6013      	str	r3, [r2, #0]
			}

			if (diff_pan_0_1 < -180.0)
 80076c2:	497b      	ldr	r1, [pc, #492]	; (80078b0 <main+0x1eac>)
 80076c4:	249b      	movs	r4, #155	; 0x9b
 80076c6:	00a4      	lsls	r4, r4, #2
 80076c8:	2508      	movs	r5, #8
 80076ca:	2308      	movs	r3, #8
 80076cc:	2208      	movs	r2, #8
 80076ce:	4694      	mov	ip, r2
 80076d0:	2208      	movs	r2, #8
 80076d2:	4690      	mov	r8, r2
 80076d4:	44b8      	add	r8, r7
 80076d6:	44c4      	add	ip, r8
 80076d8:	4463      	add	r3, ip
 80076da:	195b      	adds	r3, r3, r5
 80076dc:	191b      	adds	r3, r3, r4
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	f7f8 fef0 	bl	80004c4 <__aeabi_fcmplt>
 80076e4:	1e03      	subs	r3, r0, #0
 80076e6:	d01d      	beq.n	8007724 <main+0x1d20>
			{
				diff_pan_0_1 = -(diff_pan_0_1 + 360.0);
 80076e8:	4970      	ldr	r1, [pc, #448]	; (80078ac <main+0x1ea8>)
 80076ea:	2308      	movs	r3, #8
 80076ec:	2208      	movs	r2, #8
 80076ee:	4694      	mov	ip, r2
 80076f0:	2208      	movs	r2, #8
 80076f2:	4690      	mov	r8, r2
 80076f4:	44b8      	add	r8, r7
 80076f6:	44c4      	add	ip, r8
 80076f8:	4463      	add	r3, ip
 80076fa:	195b      	adds	r3, r3, r5
 80076fc:	191b      	adds	r3, r3, r4
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	f7f8 ff20 	bl	8000544 <__aeabi_fadd>
 8007704:	1c03      	adds	r3, r0, #0
 8007706:	1c1a      	adds	r2, r3, #0
 8007708:	2380      	movs	r3, #128	; 0x80
 800770a:	061b      	lsls	r3, r3, #24
 800770c:	4053      	eors	r3, r2
 800770e:	2208      	movs	r2, #8
 8007710:	2108      	movs	r1, #8
 8007712:	468c      	mov	ip, r1
 8007714:	2108      	movs	r1, #8
 8007716:	4688      	mov	r8, r1
 8007718:	44b8      	add	r8, r7
 800771a:	44c4      	add	ip, r8
 800771c:	4462      	add	r2, ip
 800771e:	1952      	adds	r2, r2, r5
 8007720:	1912      	adds	r2, r2, r4
 8007722:	6013      	str	r3, [r2, #0]
			}

			if (diff_tilt_0_1 > 180.0)
 8007724:	4960      	ldr	r1, [pc, #384]	; (80078a8 <main+0x1ea4>)
 8007726:	249a      	movs	r4, #154	; 0x9a
 8007728:	00a4      	lsls	r4, r4, #2
 800772a:	2508      	movs	r5, #8
 800772c:	2308      	movs	r3, #8
 800772e:	2208      	movs	r2, #8
 8007730:	4694      	mov	ip, r2
 8007732:	2208      	movs	r2, #8
 8007734:	4690      	mov	r8, r2
 8007736:	44b8      	add	r8, r7
 8007738:	44c4      	add	ip, r8
 800773a:	4463      	add	r3, ip
 800773c:	195b      	adds	r3, r3, r5
 800773e:	191b      	adds	r3, r3, r4
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f7f8 fed3 	bl	80004ec <__aeabi_fcmpgt>
 8007746:	1e03      	subs	r3, r0, #0
 8007748:	d019      	beq.n	800777e <main+0x1d7a>
			{
				diff_tilt_0_1 = 360.0 - diff_tilt_0_1;
 800774a:	2308      	movs	r3, #8
 800774c:	2208      	movs	r2, #8
 800774e:	4694      	mov	ip, r2
 8007750:	2208      	movs	r2, #8
 8007752:	4690      	mov	r8, r2
 8007754:	44b8      	add	r8, r7
 8007756:	44c4      	add	ip, r8
 8007758:	4463      	add	r3, ip
 800775a:	195b      	adds	r3, r3, r5
 800775c:	191b      	adds	r3, r3, r4
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	4852      	ldr	r0, [pc, #328]	; (80078ac <main+0x1ea8>)
 8007762:	f7f9 fb6f 	bl	8000e44 <__aeabi_fsub>
 8007766:	1c03      	adds	r3, r0, #0
 8007768:	2208      	movs	r2, #8
 800776a:	2108      	movs	r1, #8
 800776c:	468c      	mov	ip, r1
 800776e:	2108      	movs	r1, #8
 8007770:	4688      	mov	r8, r1
 8007772:	44b8      	add	r8, r7
 8007774:	44c4      	add	ip, r8
 8007776:	4462      	add	r2, ip
 8007778:	1952      	adds	r2, r2, r5
 800777a:	1912      	adds	r2, r2, r4
 800777c:	6013      	str	r3, [r2, #0]
			}

			if (diff_tilt_0_1 < -180.0)
 800777e:	494c      	ldr	r1, [pc, #304]	; (80078b0 <main+0x1eac>)
 8007780:	249a      	movs	r4, #154	; 0x9a
 8007782:	00a4      	lsls	r4, r4, #2
 8007784:	2508      	movs	r5, #8
 8007786:	2308      	movs	r3, #8
 8007788:	2208      	movs	r2, #8
 800778a:	4694      	mov	ip, r2
 800778c:	2208      	movs	r2, #8
 800778e:	4690      	mov	r8, r2
 8007790:	44b8      	add	r8, r7
 8007792:	44c4      	add	ip, r8
 8007794:	4463      	add	r3, ip
 8007796:	195b      	adds	r3, r3, r5
 8007798:	191b      	adds	r3, r3, r4
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	f7f8 fe92 	bl	80004c4 <__aeabi_fcmplt>
 80077a0:	1e03      	subs	r3, r0, #0
 80077a2:	d01d      	beq.n	80077e0 <main+0x1ddc>
			{
				diff_tilt_0_1 = -(diff_tilt_0_1 + 360.0);
 80077a4:	4941      	ldr	r1, [pc, #260]	; (80078ac <main+0x1ea8>)
 80077a6:	2308      	movs	r3, #8
 80077a8:	2208      	movs	r2, #8
 80077aa:	4694      	mov	ip, r2
 80077ac:	2208      	movs	r2, #8
 80077ae:	4690      	mov	r8, r2
 80077b0:	44b8      	add	r8, r7
 80077b2:	44c4      	add	ip, r8
 80077b4:	4463      	add	r3, ip
 80077b6:	195b      	adds	r3, r3, r5
 80077b8:	191b      	adds	r3, r3, r4
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	f7f8 fec2 	bl	8000544 <__aeabi_fadd>
 80077c0:	1c03      	adds	r3, r0, #0
 80077c2:	1c1a      	adds	r2, r3, #0
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	061b      	lsls	r3, r3, #24
 80077c8:	4053      	eors	r3, r2
 80077ca:	2208      	movs	r2, #8
 80077cc:	2108      	movs	r1, #8
 80077ce:	468c      	mov	ip, r1
 80077d0:	2108      	movs	r1, #8
 80077d2:	4688      	mov	r8, r1
 80077d4:	44b8      	add	r8, r7
 80077d6:	44c4      	add	ip, r8
 80077d8:	4462      	add	r2, ip
 80077da:	1952      	adds	r2, r2, r5
 80077dc:	1912      	adds	r2, r2, r4
 80077de:	6013      	str	r3, [r2, #0]
			}

			if (diff_pitch_0_1 > 180.0)
 80077e0:	4931      	ldr	r1, [pc, #196]	; (80078a8 <main+0x1ea4>)
 80077e2:	2499      	movs	r4, #153	; 0x99
 80077e4:	00a4      	lsls	r4, r4, #2
 80077e6:	2508      	movs	r5, #8
 80077e8:	2308      	movs	r3, #8
 80077ea:	2208      	movs	r2, #8
 80077ec:	4694      	mov	ip, r2
 80077ee:	2208      	movs	r2, #8
 80077f0:	4690      	mov	r8, r2
 80077f2:	44b8      	add	r8, r7
 80077f4:	44c4      	add	ip, r8
 80077f6:	4463      	add	r3, ip
 80077f8:	195b      	adds	r3, r3, r5
 80077fa:	191b      	adds	r3, r3, r4
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f7f8 fe75 	bl	80004ec <__aeabi_fcmpgt>
 8007802:	1e03      	subs	r3, r0, #0
 8007804:	d019      	beq.n	800783a <main+0x1e36>
			{
				diff_pitch_0_1 = 360.0 - diff_pitch_0_1;
 8007806:	2308      	movs	r3, #8
 8007808:	2208      	movs	r2, #8
 800780a:	4694      	mov	ip, r2
 800780c:	2208      	movs	r2, #8
 800780e:	4690      	mov	r8, r2
 8007810:	44b8      	add	r8, r7
 8007812:	44c4      	add	ip, r8
 8007814:	4463      	add	r3, ip
 8007816:	195b      	adds	r3, r3, r5
 8007818:	191b      	adds	r3, r3, r4
 800781a:	6819      	ldr	r1, [r3, #0]
 800781c:	4823      	ldr	r0, [pc, #140]	; (80078ac <main+0x1ea8>)
 800781e:	f7f9 fb11 	bl	8000e44 <__aeabi_fsub>
 8007822:	1c03      	adds	r3, r0, #0
 8007824:	2208      	movs	r2, #8
 8007826:	2108      	movs	r1, #8
 8007828:	468c      	mov	ip, r1
 800782a:	2108      	movs	r1, #8
 800782c:	4688      	mov	r8, r1
 800782e:	44b8      	add	r8, r7
 8007830:	44c4      	add	ip, r8
 8007832:	4462      	add	r2, ip
 8007834:	1952      	adds	r2, r2, r5
 8007836:	1912      	adds	r2, r2, r4
 8007838:	6013      	str	r3, [r2, #0]
			}

			if (diff_pitch_0_1 < -180.0)
 800783a:	491d      	ldr	r1, [pc, #116]	; (80078b0 <main+0x1eac>)
 800783c:	2499      	movs	r4, #153	; 0x99
 800783e:	00a4      	lsls	r4, r4, #2
 8007840:	2508      	movs	r5, #8
 8007842:	2308      	movs	r3, #8
 8007844:	2208      	movs	r2, #8
 8007846:	4694      	mov	ip, r2
 8007848:	2208      	movs	r2, #8
 800784a:	4690      	mov	r8, r2
 800784c:	44b8      	add	r8, r7
 800784e:	44c4      	add	ip, r8
 8007850:	4463      	add	r3, ip
 8007852:	195b      	adds	r3, r3, r5
 8007854:	191b      	adds	r3, r3, r4
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	f7f8 fe34 	bl	80004c4 <__aeabi_fcmplt>
 800785c:	1e03      	subs	r3, r0, #0
 800785e:	d029      	beq.n	80078b4 <main+0x1eb0>
			{
				diff_pitch_0_1 = -(diff_pitch_0_1 + 360.0);
 8007860:	4912      	ldr	r1, [pc, #72]	; (80078ac <main+0x1ea8>)
 8007862:	2308      	movs	r3, #8
 8007864:	2208      	movs	r2, #8
 8007866:	4694      	mov	ip, r2
 8007868:	2208      	movs	r2, #8
 800786a:	4690      	mov	r8, r2
 800786c:	44b8      	add	r8, r7
 800786e:	44c4      	add	ip, r8
 8007870:	4463      	add	r3, ip
 8007872:	195b      	adds	r3, r3, r5
 8007874:	191b      	adds	r3, r3, r4
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	f7f8 fe64 	bl	8000544 <__aeabi_fadd>
 800787c:	1c03      	adds	r3, r0, #0
 800787e:	1c1a      	adds	r2, r3, #0
 8007880:	2380      	movs	r3, #128	; 0x80
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	4053      	eors	r3, r2
 8007886:	2208      	movs	r2, #8
 8007888:	2108      	movs	r1, #8
 800788a:	468c      	mov	ip, r1
 800788c:	2108      	movs	r1, #8
 800788e:	4688      	mov	r8, r1
 8007890:	44b8      	add	r8, r7
 8007892:	44c4      	add	ip, r8
 8007894:	4462      	add	r2, ip
 8007896:	1952      	adds	r2, r2, r5
 8007898:	1912      	adds	r2, r2, r4
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	e00a      	b.n	80078b4 <main+0x1eb0>
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	fffffdd4 	.word	0xfffffdd4
 80078a4:	fffffdec 	.word	0xfffffdec
 80078a8:	43340000 	.word	0x43340000
 80078ac:	43b40000 	.word	0x43b40000
 80078b0:	c3340000 	.word	0xc3340000
			}

			if ((fabs(diff_pan_0_1) > 3.0) | (fabs(diff_tilt_0_1) > 5.0) | (fabs(diff_pitch_0_1) > 5.0))
 80078b4:	239b      	movs	r3, #155	; 0x9b
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	2208      	movs	r2, #8
 80078ba:	4694      	mov	ip, r2
 80078bc:	2208      	movs	r2, #8
 80078be:	4690      	mov	r8, r2
 80078c0:	2208      	movs	r2, #8
 80078c2:	4691      	mov	r9, r2
 80078c4:	2208      	movs	r2, #8
 80078c6:	4692      	mov	sl, r2
 80078c8:	44ba      	add	sl, r7
 80078ca:	44d1      	add	r9, sl
 80078cc:	44c8      	add	r8, r9
 80078ce:	44c4      	add	ip, r8
 80078d0:	4463      	add	r3, ip
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	2201      	movs	r2, #1
 80078da:	1c14      	adds	r4, r2, #0
 80078dc:	4968      	ldr	r1, [pc, #416]	; (8007a80 <main+0x207c>)
 80078de:	1c18      	adds	r0, r3, #0
 80078e0:	f7f8 fe04 	bl	80004ec <__aeabi_fcmpgt>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d101      	bne.n	80078ec <main+0x1ee8>
 80078e8:	2300      	movs	r3, #0
 80078ea:	1c1c      	adds	r4, r3, #0
 80078ec:	b2e4      	uxtb	r4, r4
 80078ee:	239a      	movs	r3, #154	; 0x9a
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	2208      	movs	r2, #8
 80078f4:	4694      	mov	ip, r2
 80078f6:	2208      	movs	r2, #8
 80078f8:	4690      	mov	r8, r2
 80078fa:	2208      	movs	r2, #8
 80078fc:	4691      	mov	r9, r2
 80078fe:	2208      	movs	r2, #8
 8007900:	4692      	mov	sl, r2
 8007902:	44ba      	add	sl, r7
 8007904:	44d1      	add	r9, sl
 8007906:	44c8      	add	r8, r9
 8007908:	44c4      	add	ip, r8
 800790a:	4463      	add	r3, ip
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	2201      	movs	r2, #1
 8007914:	1c15      	adds	r5, r2, #0
 8007916:	495b      	ldr	r1, [pc, #364]	; (8007a84 <main+0x2080>)
 8007918:	1c18      	adds	r0, r3, #0
 800791a:	f7f8 fde7 	bl	80004ec <__aeabi_fcmpgt>
 800791e:	1e03      	subs	r3, r0, #0
 8007920:	d101      	bne.n	8007926 <main+0x1f22>
 8007922:	2300      	movs	r3, #0
 8007924:	1c1d      	adds	r5, r3, #0
 8007926:	b2eb      	uxtb	r3, r5
 8007928:	4323      	orrs	r3, r4
 800792a:	b2db      	uxtb	r3, r3
 800792c:	001c      	movs	r4, r3
 800792e:	2399      	movs	r3, #153	; 0x99
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	2208      	movs	r2, #8
 8007934:	4694      	mov	ip, r2
 8007936:	2208      	movs	r2, #8
 8007938:	4690      	mov	r8, r2
 800793a:	2208      	movs	r2, #8
 800793c:	4691      	mov	r9, r2
 800793e:	2208      	movs	r2, #8
 8007940:	4692      	mov	sl, r2
 8007942:	44ba      	add	sl, r7
 8007944:	44d1      	add	r9, sl
 8007946:	44c8      	add	r8, r9
 8007948:	44c4      	add	ip, r8
 800794a:	4463      	add	r3, ip
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	2201      	movs	r2, #1
 8007954:	1c15      	adds	r5, r2, #0
 8007956:	494b      	ldr	r1, [pc, #300]	; (8007a84 <main+0x2080>)
 8007958:	1c18      	adds	r0, r3, #0
 800795a:	f7f8 fdc7 	bl	80004ec <__aeabi_fcmpgt>
 800795e:	1e03      	subs	r3, r0, #0
 8007960:	d101      	bne.n	8007966 <main+0x1f62>
 8007962:	2300      	movs	r3, #0
 8007964:	1c1d      	adds	r5, r3, #0
 8007966:	b2eb      	uxtb	r3, r5
 8007968:	4323      	orrs	r3, r4
 800796a:	d100      	bne.n	800796e <main+0x1f6a>
 800796c:	e107      	b.n	8007b7e <main+0x217a>
			{
				// Movement Expected - measured == expected?
				if (moving_expected)
 800796e:	4b46      	ldr	r3, [pc, #280]	; (8007a88 <main+0x2084>)
 8007970:	2208      	movs	r2, #8
 8007972:	4694      	mov	ip, r2
 8007974:	2208      	movs	r2, #8
 8007976:	4690      	mov	r8, r2
 8007978:	2208      	movs	r2, #8
 800797a:	4691      	mov	r9, r2
 800797c:	2208      	movs	r2, #8
 800797e:	4692      	mov	sl, r2
 8007980:	44ba      	add	sl, r7
 8007982:	44d1      	add	r9, sl
 8007984:	44c8      	add	r8, r9
 8007986:	44c4      	add	ip, r8
 8007988:	4463      	add	r3, ip
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b25b      	sxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d100      	bne.n	8007994 <main+0x1f90>
 8007992:	e07f      	b.n	8007a94 <main+0x2090>
				{
					sprintf(uart_buffer, "Movement Expected! measured: %.2f : %.2f : %.2f \r\n", diff_pan_0_1, diff_tilt_0_1, diff_pitch_0_1);
 8007994:	239b      	movs	r3, #155	; 0x9b
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	2208      	movs	r2, #8
 800799a:	4694      	mov	ip, r2
 800799c:	2208      	movs	r2, #8
 800799e:	4690      	mov	r8, r2
 80079a0:	2208      	movs	r2, #8
 80079a2:	4691      	mov	r9, r2
 80079a4:	2208      	movs	r2, #8
 80079a6:	4692      	mov	sl, r2
 80079a8:	44ba      	add	sl, r7
 80079aa:	44d1      	add	r9, sl
 80079ac:	44c8      	add	r8, r9
 80079ae:	44c4      	add	ip, r8
 80079b0:	4463      	add	r3, ip
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	f7fb fa8c 	bl	8002ed0 <__aeabi_f2d>
 80079b8:	61b8      	str	r0, [r7, #24]
 80079ba:	61f9      	str	r1, [r7, #28]
 80079bc:	239a      	movs	r3, #154	; 0x9a
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	2208      	movs	r2, #8
 80079c2:	4694      	mov	ip, r2
 80079c4:	2208      	movs	r2, #8
 80079c6:	4690      	mov	r8, r2
 80079c8:	2208      	movs	r2, #8
 80079ca:	4691      	mov	r9, r2
 80079cc:	2208      	movs	r2, #8
 80079ce:	4692      	mov	sl, r2
 80079d0:	44ba      	add	sl, r7
 80079d2:	44d1      	add	r9, sl
 80079d4:	44c8      	add	r8, r9
 80079d6:	44c4      	add	ip, r8
 80079d8:	4463      	add	r3, ip
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	f7fb fa78 	bl	8002ed0 <__aeabi_f2d>
 80079e0:	0004      	movs	r4, r0
 80079e2:	000d      	movs	r5, r1
 80079e4:	2399      	movs	r3, #153	; 0x99
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	2208      	movs	r2, #8
 80079ea:	4694      	mov	ip, r2
 80079ec:	2208      	movs	r2, #8
 80079ee:	4690      	mov	r8, r2
 80079f0:	2208      	movs	r2, #8
 80079f2:	4691      	mov	r9, r2
 80079f4:	2208      	movs	r2, #8
 80079f6:	4692      	mov	sl, r2
 80079f8:	44ba      	add	sl, r7
 80079fa:	44d1      	add	r9, sl
 80079fc:	44c8      	add	r8, r9
 80079fe:	44c4      	add	ip, r8
 8007a00:	4463      	add	r3, ip
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	f7fb fa64 	bl	8002ed0 <__aeabi_f2d>
 8007a08:	60b8      	str	r0, [r7, #8]
 8007a0a:	60f9      	str	r1, [r7, #12]
 8007a0c:	491f      	ldr	r1, [pc, #124]	; (8007a8c <main+0x2088>)
 8007a0e:	26b6      	movs	r6, #182	; 0xb6
 8007a10:	0076      	lsls	r6, r6, #1
 8007a12:	2008      	movs	r0, #8
 8007a14:	2308      	movs	r3, #8
 8007a16:	469c      	mov	ip, r3
 8007a18:	2308      	movs	r3, #8
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	2308      	movs	r3, #8
 8007a1e:	4699      	mov	r9, r3
 8007a20:	44b9      	add	r9, r7
 8007a22:	44c8      	add	r8, r9
 8007a24:	44c4      	add	ip, r8
 8007a26:	4460      	add	r0, ip
 8007a28:	1980      	adds	r0, r0, r6
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	9400      	str	r4, [sp, #0]
 8007a34:	9501      	str	r5, [sp, #4]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f005 fc09 	bl	800d250 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007a3e:	0034      	movs	r4, r6
 8007a40:	2508      	movs	r5, #8
 8007a42:	2308      	movs	r3, #8
 8007a44:	2208      	movs	r2, #8
 8007a46:	4694      	mov	ip, r2
 8007a48:	2208      	movs	r2, #8
 8007a4a:	4690      	mov	r8, r2
 8007a4c:	44b8      	add	r8, r7
 8007a4e:	44c4      	add	ip, r8
 8007a50:	4463      	add	r3, ip
 8007a52:	195b      	adds	r3, r3, r5
 8007a54:	191b      	adds	r3, r3, r4
 8007a56:	0018      	movs	r0, r3
 8007a58:	f7f8 fb52 	bl	8000100 <strlen>
 8007a5c:	0003      	movs	r3, r0
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	23fa      	movs	r3, #250	; 0xfa
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	2108      	movs	r1, #8
 8007a66:	2008      	movs	r0, #8
 8007a68:	4684      	mov	ip, r0
 8007a6a:	2008      	movs	r0, #8
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	44b8      	add	r8, r7
 8007a70:	44c4      	add	ip, r8
 8007a72:	4461      	add	r1, ip
 8007a74:	1949      	adds	r1, r1, r5
 8007a76:	1909      	adds	r1, r1, r4
 8007a78:	4805      	ldr	r0, [pc, #20]	; (8007a90 <main+0x208c>)
 8007a7a:	f004 fa0b 	bl	800be94 <HAL_UART_Transmit>
 8007a7e:	e07e      	b.n	8007b7e <main+0x217a>
 8007a80:	40400000 	.word	0x40400000
 8007a84:	40a00000 	.word	0x40a00000
 8007a88:	0000024f 	.word	0x0000024f
 8007a8c:	080121d0 	.word	0x080121d0
 8007a90:	200004e8 	.word	0x200004e8
				} else {
					// Movement NOT Expected - Tampering detected
					sprintf(uart_buffer, "Movement not Expected! tampering: %.2f : %.2f : %.2f \r\n", diff_pan_0_1, diff_tilt_0_1, diff_pitch_0_1);
 8007a94:	239b      	movs	r3, #155	; 0x9b
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	2208      	movs	r2, #8
 8007a9a:	4694      	mov	ip, r2
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	4690      	mov	r8, r2
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	4691      	mov	r9, r2
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	4692      	mov	sl, r2
 8007aa8:	44ba      	add	sl, r7
 8007aaa:	44d1      	add	r9, sl
 8007aac:	44c8      	add	r8, r9
 8007aae:	44c4      	add	ip, r8
 8007ab0:	4463      	add	r3, ip
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	f7fb fa0c 	bl	8002ed0 <__aeabi_f2d>
 8007ab8:	61b8      	str	r0, [r7, #24]
 8007aba:	61f9      	str	r1, [r7, #28]
 8007abc:	239a      	movs	r3, #154	; 0x9a
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	4694      	mov	ip, r2
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	4690      	mov	r8, r2
 8007ac8:	2208      	movs	r2, #8
 8007aca:	4691      	mov	r9, r2
 8007acc:	2208      	movs	r2, #8
 8007ace:	4692      	mov	sl, r2
 8007ad0:	44ba      	add	sl, r7
 8007ad2:	44d1      	add	r9, sl
 8007ad4:	44c8      	add	r8, r9
 8007ad6:	44c4      	add	ip, r8
 8007ad8:	4463      	add	r3, ip
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	f7fb f9f8 	bl	8002ed0 <__aeabi_f2d>
 8007ae0:	0004      	movs	r4, r0
 8007ae2:	000d      	movs	r5, r1
 8007ae4:	2399      	movs	r3, #153	; 0x99
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	2208      	movs	r2, #8
 8007aea:	4694      	mov	ip, r2
 8007aec:	2208      	movs	r2, #8
 8007aee:	4690      	mov	r8, r2
 8007af0:	2208      	movs	r2, #8
 8007af2:	4691      	mov	r9, r2
 8007af4:	2208      	movs	r2, #8
 8007af6:	4692      	mov	sl, r2
 8007af8:	44ba      	add	sl, r7
 8007afa:	44d1      	add	r9, sl
 8007afc:	44c8      	add	r8, r9
 8007afe:	44c4      	add	ip, r8
 8007b00:	4463      	add	r3, ip
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	f7fb f9e4 	bl	8002ed0 <__aeabi_f2d>
 8007b08:	60b8      	str	r0, [r7, #8]
 8007b0a:	60f9      	str	r1, [r7, #12]
 8007b0c:	49c3      	ldr	r1, [pc, #780]	; (8007e1c <main+0x2418>)
 8007b0e:	26b6      	movs	r6, #182	; 0xb6
 8007b10:	0076      	lsls	r6, r6, #1
 8007b12:	2008      	movs	r0, #8
 8007b14:	2308      	movs	r3, #8
 8007b16:	469c      	mov	ip, r3
 8007b18:	2308      	movs	r3, #8
 8007b1a:	4698      	mov	r8, r3
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	4699      	mov	r9, r3
 8007b20:	44b9      	add	r9, r7
 8007b22:	44c8      	add	r8, r9
 8007b24:	44c4      	add	ip, r8
 8007b26:	4460      	add	r0, ip
 8007b28:	1980      	adds	r0, r0, r6
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	9400      	str	r4, [sp, #0]
 8007b34:	9501      	str	r5, [sp, #4]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f005 fb89 	bl	800d250 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007b3e:	0034      	movs	r4, r6
 8007b40:	2508      	movs	r5, #8
 8007b42:	2308      	movs	r3, #8
 8007b44:	2208      	movs	r2, #8
 8007b46:	4694      	mov	ip, r2
 8007b48:	2208      	movs	r2, #8
 8007b4a:	4690      	mov	r8, r2
 8007b4c:	44b8      	add	r8, r7
 8007b4e:	44c4      	add	ip, r8
 8007b50:	4463      	add	r3, ip
 8007b52:	195b      	adds	r3, r3, r5
 8007b54:	191b      	adds	r3, r3, r4
 8007b56:	0018      	movs	r0, r3
 8007b58:	f7f8 fad2 	bl	8000100 <strlen>
 8007b5c:	0003      	movs	r3, r0
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	23fa      	movs	r3, #250	; 0xfa
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	2108      	movs	r1, #8
 8007b66:	2008      	movs	r0, #8
 8007b68:	4684      	mov	ip, r0
 8007b6a:	2008      	movs	r0, #8
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	44b8      	add	r8, r7
 8007b70:	44c4      	add	ip, r8
 8007b72:	4461      	add	r1, ip
 8007b74:	1949      	adds	r1, r1, r5
 8007b76:	1909      	adds	r1, r1, r4
 8007b78:	48a9      	ldr	r0, [pc, #676]	; (8007e20 <main+0x241c>)
 8007b7a:	f004 f98b 	bl	800be94 <HAL_UART_Transmit>
				}
			}

			// Update previous quaternion state
			prev_0.roll = angles_0.roll;
 8007b7e:	4ba9      	ldr	r3, [pc, #676]	; (8007e24 <main+0x2420>)
 8007b80:	229e      	movs	r2, #158	; 0x9e
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	4694      	mov	ip, r2
 8007b86:	2208      	movs	r2, #8
 8007b88:	4690      	mov	r8, r2
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	4691      	mov	r9, r2
 8007b8e:	2208      	movs	r2, #8
 8007b90:	4692      	mov	sl, r2
 8007b92:	2208      	movs	r2, #8
 8007b94:	4693      	mov	fp, r2
 8007b96:	44bb      	add	fp, r7
 8007b98:	44da      	add	sl, fp
 8007b9a:	44d1      	add	r9, sl
 8007b9c:	44c8      	add	r8, r9
 8007b9e:	44c4      	add	ip, r8
 8007ba0:	4463      	add	r3, ip
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	4ba0      	ldr	r3, [pc, #640]	; (8007e28 <main+0x2424>)
 8007ba6:	219e      	movs	r1, #158	; 0x9e
 8007ba8:	0089      	lsls	r1, r1, #2
 8007baa:	468c      	mov	ip, r1
 8007bac:	2108      	movs	r1, #8
 8007bae:	4688      	mov	r8, r1
 8007bb0:	2108      	movs	r1, #8
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	2108      	movs	r1, #8
 8007bb6:	468a      	mov	sl, r1
 8007bb8:	2108      	movs	r1, #8
 8007bba:	468b      	mov	fp, r1
 8007bbc:	44bb      	add	fp, r7
 8007bbe:	44da      	add	sl, fp
 8007bc0:	44d1      	add	r9, sl
 8007bc2:	44c8      	add	r8, r9
 8007bc4:	44c4      	add	ip, r8
 8007bc6:	4463      	add	r3, ip
 8007bc8:	601a      	str	r2, [r3, #0]
			prev_0.yaw = angles_0.yaw;
 8007bca:	4b96      	ldr	r3, [pc, #600]	; (8007e24 <main+0x2420>)
 8007bcc:	229e      	movs	r2, #158	; 0x9e
 8007bce:	0092      	lsls	r2, r2, #2
 8007bd0:	4694      	mov	ip, r2
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	4690      	mov	r8, r2
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	4691      	mov	r9, r2
 8007bda:	2208      	movs	r2, #8
 8007bdc:	4692      	mov	sl, r2
 8007bde:	2208      	movs	r2, #8
 8007be0:	4693      	mov	fp, r2
 8007be2:	44bb      	add	fp, r7
 8007be4:	44da      	add	sl, fp
 8007be6:	44d1      	add	r9, sl
 8007be8:	44c8      	add	r8, r9
 8007bea:	44c4      	add	ip, r8
 8007bec:	4463      	add	r3, ip
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	4b8d      	ldr	r3, [pc, #564]	; (8007e28 <main+0x2424>)
 8007bf2:	219e      	movs	r1, #158	; 0x9e
 8007bf4:	0089      	lsls	r1, r1, #2
 8007bf6:	468c      	mov	ip, r1
 8007bf8:	2108      	movs	r1, #8
 8007bfa:	4688      	mov	r8, r1
 8007bfc:	2108      	movs	r1, #8
 8007bfe:	4689      	mov	r9, r1
 8007c00:	2108      	movs	r1, #8
 8007c02:	468a      	mov	sl, r1
 8007c04:	2108      	movs	r1, #8
 8007c06:	468b      	mov	fp, r1
 8007c08:	44bb      	add	fp, r7
 8007c0a:	44da      	add	sl, fp
 8007c0c:	44d1      	add	r9, sl
 8007c0e:	44c8      	add	r8, r9
 8007c10:	44c4      	add	ip, r8
 8007c12:	4463      	add	r3, ip
 8007c14:	609a      	str	r2, [r3, #8]
			prev_0.pitch = angles_0.pitch;
 8007c16:	4b83      	ldr	r3, [pc, #524]	; (8007e24 <main+0x2420>)
 8007c18:	229e      	movs	r2, #158	; 0x9e
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	4694      	mov	ip, r2
 8007c1e:	2208      	movs	r2, #8
 8007c20:	4690      	mov	r8, r2
 8007c22:	2208      	movs	r2, #8
 8007c24:	4691      	mov	r9, r2
 8007c26:	2208      	movs	r2, #8
 8007c28:	4692      	mov	sl, r2
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	4693      	mov	fp, r2
 8007c2e:	44bb      	add	fp, r7
 8007c30:	44da      	add	sl, fp
 8007c32:	44d1      	add	r9, sl
 8007c34:	44c8      	add	r8, r9
 8007c36:	44c4      	add	ip, r8
 8007c38:	4463      	add	r3, ip
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b7a      	ldr	r3, [pc, #488]	; (8007e28 <main+0x2424>)
 8007c3e:	219e      	movs	r1, #158	; 0x9e
 8007c40:	0089      	lsls	r1, r1, #2
 8007c42:	468c      	mov	ip, r1
 8007c44:	2108      	movs	r1, #8
 8007c46:	4688      	mov	r8, r1
 8007c48:	2108      	movs	r1, #8
 8007c4a:	4689      	mov	r9, r1
 8007c4c:	2108      	movs	r1, #8
 8007c4e:	468a      	mov	sl, r1
 8007c50:	2108      	movs	r1, #8
 8007c52:	468b      	mov	fp, r1
 8007c54:	44bb      	add	fp, r7
 8007c56:	44da      	add	sl, fp
 8007c58:	44d1      	add	r9, sl
 8007c5a:	44c8      	add	r8, r9
 8007c5c:	44c4      	add	ip, r8
 8007c5e:	4463      	add	r3, ip
 8007c60:	605a      	str	r2, [r3, #4]
			prev_1.roll = angles_1.roll;
 8007c62:	4b72      	ldr	r3, [pc, #456]	; (8007e2c <main+0x2428>)
 8007c64:	229e      	movs	r2, #158	; 0x9e
 8007c66:	0092      	lsls	r2, r2, #2
 8007c68:	4694      	mov	ip, r2
 8007c6a:	2208      	movs	r2, #8
 8007c6c:	4690      	mov	r8, r2
 8007c6e:	2208      	movs	r2, #8
 8007c70:	4691      	mov	r9, r2
 8007c72:	2208      	movs	r2, #8
 8007c74:	4692      	mov	sl, r2
 8007c76:	2208      	movs	r2, #8
 8007c78:	4693      	mov	fp, r2
 8007c7a:	44bb      	add	fp, r7
 8007c7c:	44da      	add	sl, fp
 8007c7e:	44d1      	add	r9, sl
 8007c80:	44c8      	add	r8, r9
 8007c82:	44c4      	add	ip, r8
 8007c84:	4463      	add	r3, ip
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4b69      	ldr	r3, [pc, #420]	; (8007e30 <main+0x242c>)
 8007c8a:	219e      	movs	r1, #158	; 0x9e
 8007c8c:	0089      	lsls	r1, r1, #2
 8007c8e:	468c      	mov	ip, r1
 8007c90:	2108      	movs	r1, #8
 8007c92:	4688      	mov	r8, r1
 8007c94:	2108      	movs	r1, #8
 8007c96:	4689      	mov	r9, r1
 8007c98:	2108      	movs	r1, #8
 8007c9a:	468a      	mov	sl, r1
 8007c9c:	2108      	movs	r1, #8
 8007c9e:	468b      	mov	fp, r1
 8007ca0:	44bb      	add	fp, r7
 8007ca2:	44da      	add	sl, fp
 8007ca4:	44d1      	add	r9, sl
 8007ca6:	44c8      	add	r8, r9
 8007ca8:	44c4      	add	ip, r8
 8007caa:	4463      	add	r3, ip
 8007cac:	601a      	str	r2, [r3, #0]
			prev_1.yaw = angles_1.yaw;
 8007cae:	4b5f      	ldr	r3, [pc, #380]	; (8007e2c <main+0x2428>)
 8007cb0:	229e      	movs	r2, #158	; 0x9e
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	4694      	mov	ip, r2
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	4690      	mov	r8, r2
 8007cba:	2208      	movs	r2, #8
 8007cbc:	4691      	mov	r9, r2
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	4692      	mov	sl, r2
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	4693      	mov	fp, r2
 8007cc6:	44bb      	add	fp, r7
 8007cc8:	44da      	add	sl, fp
 8007cca:	44d1      	add	r9, sl
 8007ccc:	44c8      	add	r8, r9
 8007cce:	44c4      	add	ip, r8
 8007cd0:	4463      	add	r3, ip
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	4b56      	ldr	r3, [pc, #344]	; (8007e30 <main+0x242c>)
 8007cd6:	219e      	movs	r1, #158	; 0x9e
 8007cd8:	0089      	lsls	r1, r1, #2
 8007cda:	468c      	mov	ip, r1
 8007cdc:	2108      	movs	r1, #8
 8007cde:	4688      	mov	r8, r1
 8007ce0:	2108      	movs	r1, #8
 8007ce2:	4689      	mov	r9, r1
 8007ce4:	2108      	movs	r1, #8
 8007ce6:	468a      	mov	sl, r1
 8007ce8:	2108      	movs	r1, #8
 8007cea:	468b      	mov	fp, r1
 8007cec:	44bb      	add	fp, r7
 8007cee:	44da      	add	sl, fp
 8007cf0:	44d1      	add	r9, sl
 8007cf2:	44c8      	add	r8, r9
 8007cf4:	44c4      	add	ip, r8
 8007cf6:	4463      	add	r3, ip
 8007cf8:	609a      	str	r2, [r3, #8]
			prev_1.pitch = angles_1.pitch;
 8007cfa:	4b4c      	ldr	r3, [pc, #304]	; (8007e2c <main+0x2428>)
 8007cfc:	229e      	movs	r2, #158	; 0x9e
 8007cfe:	0092      	lsls	r2, r2, #2
 8007d00:	4694      	mov	ip, r2
 8007d02:	2208      	movs	r2, #8
 8007d04:	4690      	mov	r8, r2
 8007d06:	2208      	movs	r2, #8
 8007d08:	4691      	mov	r9, r2
 8007d0a:	2208      	movs	r2, #8
 8007d0c:	4692      	mov	sl, r2
 8007d0e:	2208      	movs	r2, #8
 8007d10:	4693      	mov	fp, r2
 8007d12:	44bb      	add	fp, r7
 8007d14:	44da      	add	sl, fp
 8007d16:	44d1      	add	r9, sl
 8007d18:	44c8      	add	r8, r9
 8007d1a:	44c4      	add	ip, r8
 8007d1c:	4463      	add	r3, ip
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	4b43      	ldr	r3, [pc, #268]	; (8007e30 <main+0x242c>)
 8007d22:	219e      	movs	r1, #158	; 0x9e
 8007d24:	0089      	lsls	r1, r1, #2
 8007d26:	468c      	mov	ip, r1
 8007d28:	2108      	movs	r1, #8
 8007d2a:	4688      	mov	r8, r1
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	4689      	mov	r9, r1
 8007d30:	2108      	movs	r1, #8
 8007d32:	468a      	mov	sl, r1
 8007d34:	2108      	movs	r1, #8
 8007d36:	468b      	mov	fp, r1
 8007d38:	44bb      	add	fp, r7
 8007d3a:	44da      	add	sl, fp
 8007d3c:	44d1      	add	r9, sl
 8007d3e:	44c8      	add	r8, r9
 8007d40:	44c4      	add	ip, r8
 8007d42:	4463      	add	r3, ip
 8007d44:	605a      	str	r2, [r3, #4]
			motion_duration = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	229c      	movs	r2, #156	; 0x9c
 8007d4a:	0092      	lsls	r2, r2, #2
 8007d4c:	2108      	movs	r1, #8
 8007d4e:	468c      	mov	ip, r1
 8007d50:	2108      	movs	r1, #8
 8007d52:	4688      	mov	r8, r1
 8007d54:	2108      	movs	r1, #8
 8007d56:	4689      	mov	r9, r1
 8007d58:	2108      	movs	r1, #8
 8007d5a:	468a      	mov	sl, r1
 8007d5c:	44ba      	add	sl, r7
 8007d5e:	44d1      	add	r9, sl
 8007d60:	44c8      	add	r8, r9
 8007d62:	44c4      	add	ip, r8
 8007d64:	4462      	add	r2, ip
 8007d66:	6013      	str	r3, [r2, #0]
		if (motion_duration > 10*1000)
 8007d68:	f000 fec4 	bl	8008af4 <main+0x30f0>
		} else if (uart_prescaler == 0)
 8007d6c:	4b31      	ldr	r3, [pc, #196]	; (8007e34 <main+0x2430>)
 8007d6e:	2208      	movs	r2, #8
 8007d70:	4694      	mov	ip, r2
 8007d72:	2208      	movs	r2, #8
 8007d74:	4690      	mov	r8, r2
 8007d76:	2208      	movs	r2, #8
 8007d78:	4691      	mov	r9, r2
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4692      	mov	sl, r2
 8007d7e:	44ba      	add	sl, r7
 8007d80:	44d1      	add	r9, sl
 8007d82:	44c8      	add	r8, r9
 8007d84:	44c4      	add	ip, r8
 8007d86:	4463      	add	r3, ip
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <main+0x238e>
 8007d8e:	f000 feb1 	bl	8008af4 <main+0x30f0>
		{
			sprintf(uart_buffer, "MOVEMENT DURATION: %.3f \r\n", motion_duration);
 8007d92:	239c      	movs	r3, #156	; 0x9c
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	2208      	movs	r2, #8
 8007d98:	4694      	mov	ip, r2
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4690      	mov	r8, r2
 8007d9e:	2208      	movs	r2, #8
 8007da0:	4691      	mov	r9, r2
 8007da2:	2208      	movs	r2, #8
 8007da4:	4692      	mov	sl, r2
 8007da6:	44ba      	add	sl, r7
 8007da8:	44d1      	add	r9, sl
 8007daa:	44c8      	add	r8, r9
 8007dac:	44c4      	add	ip, r8
 8007dae:	4463      	add	r3, ip
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f7fb f88d 	bl	8002ed0 <__aeabi_f2d>
 8007db6:	0002      	movs	r2, r0
 8007db8:	000b      	movs	r3, r1
 8007dba:	491f      	ldr	r1, [pc, #124]	; (8007e38 <main+0x2434>)
 8007dbc:	24b6      	movs	r4, #182	; 0xb6
 8007dbe:	0064      	lsls	r4, r4, #1
 8007dc0:	2508      	movs	r5, #8
 8007dc2:	2008      	movs	r0, #8
 8007dc4:	2608      	movs	r6, #8
 8007dc6:	46b4      	mov	ip, r6
 8007dc8:	2608      	movs	r6, #8
 8007dca:	46b0      	mov	r8, r6
 8007dcc:	44b8      	add	r8, r7
 8007dce:	44c4      	add	ip, r8
 8007dd0:	4460      	add	r0, ip
 8007dd2:	1940      	adds	r0, r0, r5
 8007dd4:	1900      	adds	r0, r0, r4
 8007dd6:	f005 fa3b 	bl	800d250 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007dda:	2308      	movs	r3, #8
 8007ddc:	2208      	movs	r2, #8
 8007dde:	4694      	mov	ip, r2
 8007de0:	2208      	movs	r2, #8
 8007de2:	4690      	mov	r8, r2
 8007de4:	44b8      	add	r8, r7
 8007de6:	44c4      	add	ip, r8
 8007de8:	4463      	add	r3, ip
 8007dea:	195b      	adds	r3, r3, r5
 8007dec:	191b      	adds	r3, r3, r4
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7f8 f986 	bl	8000100 <strlen>
 8007df4:	0003      	movs	r3, r0
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	23fa      	movs	r3, #250	; 0xfa
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	2108      	movs	r1, #8
 8007dfe:	2008      	movs	r0, #8
 8007e00:	4684      	mov	ip, r0
 8007e02:	2008      	movs	r0, #8
 8007e04:	4680      	mov	r8, r0
 8007e06:	44b8      	add	r8, r7
 8007e08:	44c4      	add	ip, r8
 8007e0a:	4461      	add	r1, ip
 8007e0c:	1949      	adds	r1, r1, r5
 8007e0e:	1909      	adds	r1, r1, r4
 8007e10:	4803      	ldr	r0, [pc, #12]	; (8007e20 <main+0x241c>)
 8007e12:	f004 f83f 	bl	800be94 <HAL_UART_Transmit>
		if (motion_duration > 10*1000)
 8007e16:	f000 fe6d 	bl	8008af4 <main+0x30f0>
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	08012204 	.word	0x08012204
 8007e20:	200004e8 	.word	0x200004e8
 8007e24:	fffffdf8 	.word	0xfffffdf8
 8007e28:	fffffde0 	.word	0xfffffde0
 8007e2c:	fffffdec 	.word	0xfffffdec
 8007e30:	fffffdd4 	.word	0xfffffdd4
 8007e34:	00000262 	.word	0x00000262
 8007e38:	0801223c 	.word	0x0801223c
		}
	} else {
		if (was_moving)
 8007e3c:	4bfe      	ldr	r3, [pc, #1016]	; (8008238 <main+0x2834>)
 8007e3e:	2208      	movs	r2, #8
 8007e40:	4694      	mov	ip, r2
 8007e42:	2208      	movs	r2, #8
 8007e44:	4690      	mov	r8, r2
 8007e46:	2208      	movs	r2, #8
 8007e48:	4691      	mov	r9, r2
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	4692      	mov	sl, r2
 8007e4e:	44ba      	add	sl, r7
 8007e50:	44d1      	add	r9, sl
 8007e52:	44c8      	add	r8, r9
 8007e54:	44c4      	add	ip, r8
 8007e56:	4463      	add	r3, ip
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b25b      	sxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <main+0x2460>
 8007e60:	f000 fdb8 	bl	80089d4 <main+0x2fd0>
				CalcQuaternionToEuler(quat_buffer_0, &angles_buffer_0);
				CalcQuaternionToEuler(quat_buffer_1, &angles_buffer_1);
			#endif

			// Convert Quaternion Space to Euler Angles Regular
			CalcQuaternionToEuler(quat_0, &angles_0);
 8007e64:	4bf5      	ldr	r3, [pc, #980]	; (800823c <main+0x2838>)
 8007e66:	229e      	movs	r2, #158	; 0x9e
 8007e68:	0092      	lsls	r2, r2, #2
 8007e6a:	4694      	mov	ip, r2
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	4690      	mov	r8, r2
 8007e70:	2208      	movs	r2, #8
 8007e72:	4691      	mov	r9, r2
 8007e74:	2208      	movs	r2, #8
 8007e76:	4692      	mov	sl, r2
 8007e78:	2208      	movs	r2, #8
 8007e7a:	4693      	mov	fp, r2
 8007e7c:	44bb      	add	fp, r7
 8007e7e:	44da      	add	sl, fp
 8007e80:	44d1      	add	r9, sl
 8007e82:	44c8      	add	r8, r9
 8007e84:	44c4      	add	ip, r8
 8007e86:	4463      	add	r3, ip
 8007e88:	2270      	movs	r2, #112	; 0x70
 8007e8a:	2108      	movs	r1, #8
 8007e8c:	468c      	mov	ip, r1
 8007e8e:	2108      	movs	r1, #8
 8007e90:	4688      	mov	r8, r1
 8007e92:	2108      	movs	r1, #8
 8007e94:	4689      	mov	r9, r1
 8007e96:	2108      	movs	r1, #8
 8007e98:	468a      	mov	sl, r1
 8007e9a:	44ba      	add	sl, r7
 8007e9c:	44d1      	add	r9, sl
 8007e9e:	44c8      	add	r8, r9
 8007ea0:	44c4      	add	ip, r8
 8007ea2:	4462      	add	r2, ip
 8007ea4:	9200      	str	r2, [sp, #0]
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	6859      	ldr	r1, [r3, #4]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f7fc f885 	bl	8003fbc <CalcQuaternionToEuler>
			CalcQuaternionToEuler(quat_1, &angles_1);
 8007eb2:	4be3      	ldr	r3, [pc, #908]	; (8008240 <main+0x283c>)
 8007eb4:	229e      	movs	r2, #158	; 0x9e
 8007eb6:	0092      	lsls	r2, r2, #2
 8007eb8:	4694      	mov	ip, r2
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4690      	mov	r8, r2
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	4691      	mov	r9, r2
 8007ec2:	2208      	movs	r2, #8
 8007ec4:	4692      	mov	sl, r2
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	4693      	mov	fp, r2
 8007eca:	44bb      	add	fp, r7
 8007ecc:	44da      	add	sl, fp
 8007ece:	44d1      	add	r9, sl
 8007ed0:	44c8      	add	r8, r9
 8007ed2:	44c4      	add	ip, r8
 8007ed4:	4463      	add	r3, ip
 8007ed6:	2264      	movs	r2, #100	; 0x64
 8007ed8:	2108      	movs	r1, #8
 8007eda:	468c      	mov	ip, r1
 8007edc:	2108      	movs	r1, #8
 8007ede:	4688      	mov	r8, r1
 8007ee0:	2108      	movs	r1, #8
 8007ee2:	4689      	mov	r9, r1
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	468a      	mov	sl, r1
 8007ee8:	44ba      	add	sl, r7
 8007eea:	44d1      	add	r9, sl
 8007eec:	44c8      	add	r8, r9
 8007eee:	44c4      	add	ip, r8
 8007ef0:	4462      	add	r2, ip
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	6859      	ldr	r1, [r3, #4]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f7fc f85e 	bl	8003fbc <CalcQuaternionToEuler>

				sprintf(uart_buffer, "diff_roll_1 buffer: %.3f  other: %.3f \r\n", temp7 ,temp8);
				HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
			#else

				diff_pan_0 = prev_0.yaw  - angles_0.yaw;
 8007f00:	4bd0      	ldr	r3, [pc, #832]	; (8008244 <main+0x2840>)
 8007f02:	229e      	movs	r2, #158	; 0x9e
 8007f04:	0092      	lsls	r2, r2, #2
 8007f06:	4694      	mov	ip, r2
 8007f08:	2208      	movs	r2, #8
 8007f0a:	4690      	mov	r8, r2
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	4691      	mov	r9, r2
 8007f10:	2208      	movs	r2, #8
 8007f12:	4692      	mov	sl, r2
 8007f14:	2208      	movs	r2, #8
 8007f16:	4693      	mov	fp, r2
 8007f18:	44bb      	add	fp, r7
 8007f1a:	44da      	add	sl, fp
 8007f1c:	44d1      	add	r9, sl
 8007f1e:	44c8      	add	r8, r9
 8007f20:	44c4      	add	ip, r8
 8007f22:	4463      	add	r3, ip
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	4bc8      	ldr	r3, [pc, #800]	; (8008248 <main+0x2844>)
 8007f28:	219e      	movs	r1, #158	; 0x9e
 8007f2a:	0089      	lsls	r1, r1, #2
 8007f2c:	468c      	mov	ip, r1
 8007f2e:	2108      	movs	r1, #8
 8007f30:	4688      	mov	r8, r1
 8007f32:	2108      	movs	r1, #8
 8007f34:	4689      	mov	r9, r1
 8007f36:	2108      	movs	r1, #8
 8007f38:	468a      	mov	sl, r1
 8007f3a:	2108      	movs	r1, #8
 8007f3c:	468b      	mov	fp, r1
 8007f3e:	44bb      	add	fp, r7
 8007f40:	44da      	add	sl, fp
 8007f42:	44d1      	add	r9, sl
 8007f44:	44c8      	add	r8, r9
 8007f46:	44c4      	add	ip, r8
 8007f48:	4463      	add	r3, ip
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	1c19      	adds	r1, r3, #0
 8007f4e:	1c10      	adds	r0, r2, #0
 8007f50:	f7f8 ff78 	bl	8000e44 <__aeabi_fsub>
 8007f54:	1c03      	adds	r3, r0, #0
 8007f56:	2492      	movs	r4, #146	; 0x92
 8007f58:	00a4      	lsls	r4, r4, #2
 8007f5a:	603c      	str	r4, [r7, #0]
 8007f5c:	2608      	movs	r6, #8
 8007f5e:	2208      	movs	r2, #8
 8007f60:	2108      	movs	r1, #8
 8007f62:	468c      	mov	ip, r1
 8007f64:	2108      	movs	r1, #8
 8007f66:	4688      	mov	r8, r1
 8007f68:	44b8      	add	r8, r7
 8007f6a:	44c4      	add	ip, r8
 8007f6c:	4462      	add	r2, ip
 8007f6e:	1992      	adds	r2, r2, r6
 8007f70:	1912      	adds	r2, r2, r4
 8007f72:	6013      	str	r3, [r2, #0]
				diff_pan_1 = prev_1.yaw  - angles_1.yaw;
 8007f74:	4bb5      	ldr	r3, [pc, #724]	; (800824c <main+0x2848>)
 8007f76:	229e      	movs	r2, #158	; 0x9e
 8007f78:	0092      	lsls	r2, r2, #2
 8007f7a:	4694      	mov	ip, r2
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	4690      	mov	r8, r2
 8007f80:	2208      	movs	r2, #8
 8007f82:	4691      	mov	r9, r2
 8007f84:	2208      	movs	r2, #8
 8007f86:	4692      	mov	sl, r2
 8007f88:	2208      	movs	r2, #8
 8007f8a:	4693      	mov	fp, r2
 8007f8c:	44bb      	add	fp, r7
 8007f8e:	44da      	add	sl, fp
 8007f90:	44d1      	add	r9, sl
 8007f92:	44c8      	add	r8, r9
 8007f94:	44c4      	add	ip, r8
 8007f96:	4463      	add	r3, ip
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	4bad      	ldr	r3, [pc, #692]	; (8008250 <main+0x284c>)
 8007f9c:	219e      	movs	r1, #158	; 0x9e
 8007f9e:	0089      	lsls	r1, r1, #2
 8007fa0:	468c      	mov	ip, r1
 8007fa2:	2108      	movs	r1, #8
 8007fa4:	4688      	mov	r8, r1
 8007fa6:	2108      	movs	r1, #8
 8007fa8:	4689      	mov	r9, r1
 8007faa:	2108      	movs	r1, #8
 8007fac:	468a      	mov	sl, r1
 8007fae:	2108      	movs	r1, #8
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	44bb      	add	fp, r7
 8007fb4:	44da      	add	sl, fp
 8007fb6:	44d1      	add	r9, sl
 8007fb8:	44c8      	add	r8, r9
 8007fba:	44c4      	add	ip, r8
 8007fbc:	4463      	add	r3, ip
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	1c19      	adds	r1, r3, #0
 8007fc2:	1c10      	adds	r0, r2, #0
 8007fc4:	f7f8 ff3e 	bl	8000e44 <__aeabi_fsub>
 8007fc8:	1c03      	adds	r3, r0, #0
 8007fca:	2591      	movs	r5, #145	; 0x91
 8007fcc:	00ad      	lsls	r5, r5, #2
 8007fce:	2208      	movs	r2, #8
 8007fd0:	2108      	movs	r1, #8
 8007fd2:	468c      	mov	ip, r1
 8007fd4:	2108      	movs	r1, #8
 8007fd6:	4688      	mov	r8, r1
 8007fd8:	44b8      	add	r8, r7
 8007fda:	44c4      	add	ip, r8
 8007fdc:	4462      	add	r2, ip
 8007fde:	1992      	adds	r2, r2, r6
 8007fe0:	1952      	adds	r2, r2, r5
 8007fe2:	6013      	str	r3, [r2, #0]

				diff_tilt_0 = prev_0.roll - angles_0.roll;
 8007fe4:	4b97      	ldr	r3, [pc, #604]	; (8008244 <main+0x2840>)
 8007fe6:	229e      	movs	r2, #158	; 0x9e
 8007fe8:	0092      	lsls	r2, r2, #2
 8007fea:	4694      	mov	ip, r2
 8007fec:	2208      	movs	r2, #8
 8007fee:	4690      	mov	r8, r2
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	4691      	mov	r9, r2
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	4692      	mov	sl, r2
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	4693      	mov	fp, r2
 8007ffc:	44bb      	add	fp, r7
 8007ffe:	44da      	add	sl, fp
 8008000:	44d1      	add	r9, sl
 8008002:	44c8      	add	r8, r9
 8008004:	44c4      	add	ip, r8
 8008006:	4463      	add	r3, ip
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b8f      	ldr	r3, [pc, #572]	; (8008248 <main+0x2844>)
 800800c:	219e      	movs	r1, #158	; 0x9e
 800800e:	0089      	lsls	r1, r1, #2
 8008010:	468c      	mov	ip, r1
 8008012:	2008      	movs	r0, #8
 8008014:	4680      	mov	r8, r0
 8008016:	2108      	movs	r1, #8
 8008018:	4689      	mov	r9, r1
 800801a:	2108      	movs	r1, #8
 800801c:	468a      	mov	sl, r1
 800801e:	2108      	movs	r1, #8
 8008020:	468b      	mov	fp, r1
 8008022:	44bb      	add	fp, r7
 8008024:	44da      	add	sl, fp
 8008026:	44d1      	add	r9, sl
 8008028:	44c8      	add	r8, r9
 800802a:	44c4      	add	ip, r8
 800802c:	4463      	add	r3, ip
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	1c19      	adds	r1, r3, #0
 8008032:	1c10      	adds	r0, r2, #0
 8008034:	f7f8 ff06 	bl	8000e44 <__aeabi_fsub>
 8008038:	1c03      	adds	r3, r0, #0
 800803a:	2690      	movs	r6, #144	; 0x90
 800803c:	00b6      	lsls	r6, r6, #2
 800803e:	2108      	movs	r1, #8
 8008040:	2208      	movs	r2, #8
 8008042:	2008      	movs	r0, #8
 8008044:	4684      	mov	ip, r0
 8008046:	2008      	movs	r0, #8
 8008048:	4680      	mov	r8, r0
 800804a:	44b8      	add	r8, r7
 800804c:	44c4      	add	ip, r8
 800804e:	4462      	add	r2, ip
 8008050:	1850      	adds	r0, r2, r1
 8008052:	1982      	adds	r2, r0, r6
 8008054:	6013      	str	r3, [r2, #0]
				diff_tilt_1 = prev_1.roll - angles_1.roll;
 8008056:	4b7d      	ldr	r3, [pc, #500]	; (800824c <main+0x2848>)
 8008058:	229e      	movs	r2, #158	; 0x9e
 800805a:	0092      	lsls	r2, r2, #2
 800805c:	4694      	mov	ip, r2
 800805e:	2008      	movs	r0, #8
 8008060:	4680      	mov	r8, r0
 8008062:	2208      	movs	r2, #8
 8008064:	4691      	mov	r9, r2
 8008066:	2208      	movs	r2, #8
 8008068:	4692      	mov	sl, r2
 800806a:	2208      	movs	r2, #8
 800806c:	4693      	mov	fp, r2
 800806e:	44bb      	add	fp, r7
 8008070:	44da      	add	sl, fp
 8008072:	44d1      	add	r9, sl
 8008074:	44c8      	add	r8, r9
 8008076:	44c4      	add	ip, r8
 8008078:	4463      	add	r3, ip
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	4b74      	ldr	r3, [pc, #464]	; (8008250 <main+0x284c>)
 800807e:	219e      	movs	r1, #158	; 0x9e
 8008080:	0089      	lsls	r1, r1, #2
 8008082:	468c      	mov	ip, r1
 8008084:	2008      	movs	r0, #8
 8008086:	4680      	mov	r8, r0
 8008088:	2108      	movs	r1, #8
 800808a:	4689      	mov	r9, r1
 800808c:	2108      	movs	r1, #8
 800808e:	468a      	mov	sl, r1
 8008090:	2108      	movs	r1, #8
 8008092:	468b      	mov	fp, r1
 8008094:	44bb      	add	fp, r7
 8008096:	44da      	add	sl, fp
 8008098:	44d1      	add	r9, sl
 800809a:	44c8      	add	r8, r9
 800809c:	44c4      	add	ip, r8
 800809e:	4463      	add	r3, ip
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1c19      	adds	r1, r3, #0
 80080a4:	1c10      	adds	r0, r2, #0
 80080a6:	f7f8 fecd 	bl	8000e44 <__aeabi_fsub>
 80080aa:	1c03      	adds	r3, r0, #0
 80080ac:	228f      	movs	r2, #143	; 0x8f
 80080ae:	0092      	lsls	r2, r2, #2
 80080b0:	2108      	movs	r1, #8
 80080b2:	2008      	movs	r0, #8
 80080b4:	2408      	movs	r4, #8
 80080b6:	46a4      	mov	ip, r4
 80080b8:	2408      	movs	r4, #8
 80080ba:	46a0      	mov	r8, r4
 80080bc:	44b8      	add	r8, r7
 80080be:	44c4      	add	ip, r8
 80080c0:	4460      	add	r0, ip
 80080c2:	1840      	adds	r0, r0, r1
 80080c4:	1881      	adds	r1, r0, r2
 80080c6:	600b      	str	r3, [r1, #0]

				diff_pitch_0 = (prev_0.pitch - angles_0.pitch);
 80080c8:	4b5e      	ldr	r3, [pc, #376]	; (8008244 <main+0x2840>)
 80080ca:	219e      	movs	r1, #158	; 0x9e
 80080cc:	0089      	lsls	r1, r1, #2
 80080ce:	468c      	mov	ip, r1
 80080d0:	2008      	movs	r0, #8
 80080d2:	4680      	mov	r8, r0
 80080d4:	2208      	movs	r2, #8
 80080d6:	4691      	mov	r9, r2
 80080d8:	2208      	movs	r2, #8
 80080da:	4692      	mov	sl, r2
 80080dc:	2208      	movs	r2, #8
 80080de:	4693      	mov	fp, r2
 80080e0:	44bb      	add	fp, r7
 80080e2:	44da      	add	sl, fp
 80080e4:	44d1      	add	r9, sl
 80080e6:	44c8      	add	r8, r9
 80080e8:	44c4      	add	ip, r8
 80080ea:	4463      	add	r3, ip
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	4b56      	ldr	r3, [pc, #344]	; (8008248 <main+0x2844>)
 80080f0:	219e      	movs	r1, #158	; 0x9e
 80080f2:	0089      	lsls	r1, r1, #2
 80080f4:	468c      	mov	ip, r1
 80080f6:	2008      	movs	r0, #8
 80080f8:	4680      	mov	r8, r0
 80080fa:	2108      	movs	r1, #8
 80080fc:	4689      	mov	r9, r1
 80080fe:	2108      	movs	r1, #8
 8008100:	468a      	mov	sl, r1
 8008102:	2108      	movs	r1, #8
 8008104:	468b      	mov	fp, r1
 8008106:	44bb      	add	fp, r7
 8008108:	44da      	add	sl, fp
 800810a:	44d1      	add	r9, sl
 800810c:	44c8      	add	r8, r9
 800810e:	44c4      	add	ip, r8
 8008110:	4463      	add	r3, ip
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	1c19      	adds	r1, r3, #0
 8008116:	1c10      	adds	r0, r2, #0
 8008118:	f7f8 fe94 	bl	8000e44 <__aeabi_fsub>
 800811c:	1c03      	adds	r3, r0, #0
 800811e:	218e      	movs	r1, #142	; 0x8e
 8008120:	0089      	lsls	r1, r1, #2
 8008122:	2208      	movs	r2, #8
 8008124:	2008      	movs	r0, #8
 8008126:	2408      	movs	r4, #8
 8008128:	46a4      	mov	ip, r4
 800812a:	2408      	movs	r4, #8
 800812c:	46a0      	mov	r8, r4
 800812e:	44b8      	add	r8, r7
 8008130:	44c4      	add	ip, r8
 8008132:	4460      	add	r0, ip
 8008134:	1880      	adds	r0, r0, r2
 8008136:	1840      	adds	r0, r0, r1
 8008138:	6003      	str	r3, [r0, #0]
				diff_pitch_1 = (prev_1.pitch - angles_1.pitch);
 800813a:	4b44      	ldr	r3, [pc, #272]	; (800824c <main+0x2848>)
 800813c:	209e      	movs	r0, #158	; 0x9e
 800813e:	0080      	lsls	r0, r0, #2
 8008140:	4684      	mov	ip, r0
 8008142:	2108      	movs	r1, #8
 8008144:	4688      	mov	r8, r1
 8008146:	2208      	movs	r2, #8
 8008148:	4691      	mov	r9, r2
 800814a:	2208      	movs	r2, #8
 800814c:	4692      	mov	sl, r2
 800814e:	2208      	movs	r2, #8
 8008150:	4693      	mov	fp, r2
 8008152:	44bb      	add	fp, r7
 8008154:	44da      	add	sl, fp
 8008156:	44d1      	add	r9, sl
 8008158:	44c8      	add	r8, r9
 800815a:	44c4      	add	ip, r8
 800815c:	4463      	add	r3, ip
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b3b      	ldr	r3, [pc, #236]	; (8008250 <main+0x284c>)
 8008162:	209e      	movs	r0, #158	; 0x9e
 8008164:	0080      	lsls	r0, r0, #2
 8008166:	4684      	mov	ip, r0
 8008168:	2108      	movs	r1, #8
 800816a:	4688      	mov	r8, r1
 800816c:	2108      	movs	r1, #8
 800816e:	4689      	mov	r9, r1
 8008170:	2108      	movs	r1, #8
 8008172:	468a      	mov	sl, r1
 8008174:	2108      	movs	r1, #8
 8008176:	468b      	mov	fp, r1
 8008178:	44bb      	add	fp, r7
 800817a:	44da      	add	sl, fp
 800817c:	44d1      	add	r9, sl
 800817e:	44c8      	add	r8, r9
 8008180:	44c4      	add	ip, r8
 8008182:	4463      	add	r3, ip
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	1c19      	adds	r1, r3, #0
 8008188:	1c10      	adds	r0, r2, #0
 800818a:	f7f8 fe5b 	bl	8000e44 <__aeabi_fsub>
 800818e:	1c03      	adds	r3, r0, #0
 8008190:	208d      	movs	r0, #141	; 0x8d
 8008192:	0080      	lsls	r0, r0, #2
 8008194:	2208      	movs	r2, #8
 8008196:	2108      	movs	r1, #8
 8008198:	2408      	movs	r4, #8
 800819a:	46a4      	mov	ip, r4
 800819c:	2408      	movs	r4, #8
 800819e:	46a0      	mov	r8, r4
 80081a0:	44b8      	add	r8, r7
 80081a2:	44c4      	add	ip, r8
 80081a4:	4461      	add	r1, ip
 80081a6:	1889      	adds	r1, r1, r2
 80081a8:	1809      	adds	r1, r1, r0
 80081aa:	600b      	str	r3, [r1, #0]
			#endif

			diff_pan_0_1 = diff_pan_0 - diff_pan_1;
 80081ac:	2308      	movs	r3, #8
 80081ae:	469c      	mov	ip, r3
 80081b0:	2308      	movs	r3, #8
 80081b2:	4698      	mov	r8, r3
 80081b4:	2308      	movs	r3, #8
 80081b6:	4699      	mov	r9, r3
 80081b8:	2308      	movs	r3, #8
 80081ba:	469a      	mov	sl, r3
 80081bc:	44ba      	add	sl, r7
 80081be:	44d1      	add	r9, sl
 80081c0:	44c8      	add	r8, r9
 80081c2:	44c4      	add	ip, r8
 80081c4:	4465      	add	r5, ip
 80081c6:	6829      	ldr	r1, [r5, #0]
 80081c8:	683c      	ldr	r4, [r7, #0]
 80081ca:	2308      	movs	r3, #8
 80081cc:	469c      	mov	ip, r3
 80081ce:	2308      	movs	r3, #8
 80081d0:	4698      	mov	r8, r3
 80081d2:	2308      	movs	r3, #8
 80081d4:	4699      	mov	r9, r3
 80081d6:	2308      	movs	r3, #8
 80081d8:	469a      	mov	sl, r3
 80081da:	44ba      	add	sl, r7
 80081dc:	44d1      	add	r9, sl
 80081de:	44c8      	add	r8, r9
 80081e0:	44c4      	add	ip, r8
 80081e2:	4464      	add	r4, ip
 80081e4:	6820      	ldr	r0, [r4, #0]
 80081e6:	f7f8 fe2d 	bl	8000e44 <__aeabi_fsub>
 80081ea:	1c03      	adds	r3, r0, #0
 80081ec:	249b      	movs	r4, #155	; 0x9b
 80081ee:	00a4      	lsls	r4, r4, #2
 80081f0:	2008      	movs	r0, #8
 80081f2:	2208      	movs	r2, #8
 80081f4:	2108      	movs	r1, #8
 80081f6:	468c      	mov	ip, r1
 80081f8:	2108      	movs	r1, #8
 80081fa:	4688      	mov	r8, r1
 80081fc:	44b8      	add	r8, r7
 80081fe:	44c4      	add	ip, r8
 8008200:	4462      	add	r2, ip
 8008202:	1812      	adds	r2, r2, r0
 8008204:	1915      	adds	r5, r2, r4
 8008206:	602b      	str	r3, [r5, #0]
			diff_tilt_0_1 = diff_tilt_0 - diff_tilt_1;
 8008208:	228f      	movs	r2, #143	; 0x8f
 800820a:	0092      	lsls	r2, r2, #2
 800820c:	2308      	movs	r3, #8
 800820e:	469c      	mov	ip, r3
 8008210:	2308      	movs	r3, #8
 8008212:	4698      	mov	r8, r3
 8008214:	2308      	movs	r3, #8
 8008216:	4699      	mov	r9, r3
 8008218:	2308      	movs	r3, #8
 800821a:	469a      	mov	sl, r3
 800821c:	44ba      	add	sl, r7
 800821e:	44d1      	add	r9, sl
 8008220:	44c8      	add	r8, r9
 8008222:	44c4      	add	ip, r8
 8008224:	4462      	add	r2, ip
 8008226:	6811      	ldr	r1, [r2, #0]
 8008228:	0005      	movs	r5, r0
 800822a:	2308      	movs	r3, #8
 800822c:	2208      	movs	r2, #8
 800822e:	4694      	mov	ip, r2
 8008230:	2208      	movs	r2, #8
 8008232:	4690      	mov	r8, r2
 8008234:	e00e      	b.n	8008254 <main+0x2850>
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	00000263 	.word	0x00000263
 800823c:	fffffe14 	.word	0xfffffe14
 8008240:	fffffe04 	.word	0xfffffe04
 8008244:	fffffde0 	.word	0xfffffde0
 8008248:	fffffdf8 	.word	0xfffffdf8
 800824c:	fffffdd4 	.word	0xfffffdd4
 8008250:	fffffdec 	.word	0xfffffdec
 8008254:	44b8      	add	r8, r7
 8008256:	44c4      	add	ip, r8
 8008258:	4463      	add	r3, ip
 800825a:	195b      	adds	r3, r3, r5
 800825c:	199a      	adds	r2, r3, r6
 800825e:	6810      	ldr	r0, [r2, #0]
 8008260:	f7f8 fdf0 	bl	8000e44 <__aeabi_fsub>
 8008264:	1c03      	adds	r3, r0, #0
 8008266:	229a      	movs	r2, #154	; 0x9a
 8008268:	0092      	lsls	r2, r2, #2
 800826a:	2108      	movs	r1, #8
 800826c:	468c      	mov	ip, r1
 800826e:	2108      	movs	r1, #8
 8008270:	4688      	mov	r8, r1
 8008272:	2108      	movs	r1, #8
 8008274:	4689      	mov	r9, r1
 8008276:	2108      	movs	r1, #8
 8008278:	468a      	mov	sl, r1
 800827a:	44ba      	add	sl, r7
 800827c:	44d1      	add	r9, sl
 800827e:	44c8      	add	r8, r9
 8008280:	44c4      	add	ip, r8
 8008282:	4462      	add	r2, ip
 8008284:	6013      	str	r3, [r2, #0]
			diff_pitch_0_1 = diff_pitch_0 - diff_pitch_1;
 8008286:	208d      	movs	r0, #141	; 0x8d
 8008288:	0080      	lsls	r0, r0, #2
 800828a:	2308      	movs	r3, #8
 800828c:	2208      	movs	r2, #8
 800828e:	4694      	mov	ip, r2
 8008290:	2208      	movs	r2, #8
 8008292:	4690      	mov	r8, r2
 8008294:	44b8      	add	r8, r7
 8008296:	44c4      	add	ip, r8
 8008298:	4463      	add	r3, ip
 800829a:	195b      	adds	r3, r3, r5
 800829c:	181a      	adds	r2, r3, r0
 800829e:	6811      	ldr	r1, [r2, #0]
 80082a0:	238e      	movs	r3, #142	; 0x8e
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	2208      	movs	r2, #8
 80082a6:	4694      	mov	ip, r2
 80082a8:	2208      	movs	r2, #8
 80082aa:	4690      	mov	r8, r2
 80082ac:	2208      	movs	r2, #8
 80082ae:	4691      	mov	r9, r2
 80082b0:	2208      	movs	r2, #8
 80082b2:	4692      	mov	sl, r2
 80082b4:	44ba      	add	sl, r7
 80082b6:	44d1      	add	r9, sl
 80082b8:	44c8      	add	r8, r9
 80082ba:	44c4      	add	ip, r8
 80082bc:	4463      	add	r3, ip
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	f7f8 fdc0 	bl	8000e44 <__aeabi_fsub>
 80082c4:	1c03      	adds	r3, r0, #0
 80082c6:	2299      	movs	r2, #153	; 0x99
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	2108      	movs	r1, #8
 80082cc:	468c      	mov	ip, r1
 80082ce:	2108      	movs	r1, #8
 80082d0:	4688      	mov	r8, r1
 80082d2:	2108      	movs	r1, #8
 80082d4:	4689      	mov	r9, r1
 80082d6:	2108      	movs	r1, #8
 80082d8:	468a      	mov	sl, r1
 80082da:	44ba      	add	sl, r7
 80082dc:	44d1      	add	r9, sl
 80082de:	44c8      	add	r8, r9
 80082e0:	44c4      	add	ip, r8
 80082e2:	4462      	add	r2, ip
 80082e4:	6013      	str	r3, [r2, #0]

			if (diff_pan_0_1 > 180.0)
 80082e6:	49ee      	ldr	r1, [pc, #952]	; (80086a0 <main+0x2c9c>)
 80082e8:	2308      	movs	r3, #8
 80082ea:	2208      	movs	r2, #8
 80082ec:	4694      	mov	ip, r2
 80082ee:	2208      	movs	r2, #8
 80082f0:	4690      	mov	r8, r2
 80082f2:	44b8      	add	r8, r7
 80082f4:	44c4      	add	ip, r8
 80082f6:	4463      	add	r3, ip
 80082f8:	195b      	adds	r3, r3, r5
 80082fa:	191b      	adds	r3, r3, r4
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7f8 f8f5 	bl	80004ec <__aeabi_fcmpgt>
 8008302:	1e03      	subs	r3, r0, #0
 8008304:	d019      	beq.n	800833a <main+0x2936>
			{
				diff_pan_0_1 = 360.0 - diff_pan_0_1;
 8008306:	2308      	movs	r3, #8
 8008308:	2208      	movs	r2, #8
 800830a:	4694      	mov	ip, r2
 800830c:	2208      	movs	r2, #8
 800830e:	4690      	mov	r8, r2
 8008310:	44b8      	add	r8, r7
 8008312:	44c4      	add	ip, r8
 8008314:	4463      	add	r3, ip
 8008316:	195b      	adds	r3, r3, r5
 8008318:	191b      	adds	r3, r3, r4
 800831a:	6819      	ldr	r1, [r3, #0]
 800831c:	48e1      	ldr	r0, [pc, #900]	; (80086a4 <main+0x2ca0>)
 800831e:	f7f8 fd91 	bl	8000e44 <__aeabi_fsub>
 8008322:	1c03      	adds	r3, r0, #0
 8008324:	2208      	movs	r2, #8
 8008326:	2108      	movs	r1, #8
 8008328:	468c      	mov	ip, r1
 800832a:	2108      	movs	r1, #8
 800832c:	4688      	mov	r8, r1
 800832e:	44b8      	add	r8, r7
 8008330:	44c4      	add	ip, r8
 8008332:	4462      	add	r2, ip
 8008334:	1952      	adds	r2, r2, r5
 8008336:	1912      	adds	r2, r2, r4
 8008338:	6013      	str	r3, [r2, #0]
			}

			if (diff_pan_0_1 < -180.0)
 800833a:	49db      	ldr	r1, [pc, #876]	; (80086a8 <main+0x2ca4>)
 800833c:	249b      	movs	r4, #155	; 0x9b
 800833e:	00a4      	lsls	r4, r4, #2
 8008340:	2508      	movs	r5, #8
 8008342:	2308      	movs	r3, #8
 8008344:	2208      	movs	r2, #8
 8008346:	4694      	mov	ip, r2
 8008348:	2208      	movs	r2, #8
 800834a:	4690      	mov	r8, r2
 800834c:	44b8      	add	r8, r7
 800834e:	44c4      	add	ip, r8
 8008350:	4463      	add	r3, ip
 8008352:	195b      	adds	r3, r3, r5
 8008354:	191b      	adds	r3, r3, r4
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	f7f8 f8b4 	bl	80004c4 <__aeabi_fcmplt>
 800835c:	1e03      	subs	r3, r0, #0
 800835e:	d01d      	beq.n	800839c <main+0x2998>
			{
				diff_pan_0_1 = -(diff_pan_0_1 + 360.0);
 8008360:	49d0      	ldr	r1, [pc, #832]	; (80086a4 <main+0x2ca0>)
 8008362:	2308      	movs	r3, #8
 8008364:	2208      	movs	r2, #8
 8008366:	4694      	mov	ip, r2
 8008368:	2208      	movs	r2, #8
 800836a:	4690      	mov	r8, r2
 800836c:	44b8      	add	r8, r7
 800836e:	44c4      	add	ip, r8
 8008370:	4463      	add	r3, ip
 8008372:	195b      	adds	r3, r3, r5
 8008374:	191b      	adds	r3, r3, r4
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	f7f8 f8e4 	bl	8000544 <__aeabi_fadd>
 800837c:	1c03      	adds	r3, r0, #0
 800837e:	1c1a      	adds	r2, r3, #0
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	4053      	eors	r3, r2
 8008386:	2208      	movs	r2, #8
 8008388:	2108      	movs	r1, #8
 800838a:	468c      	mov	ip, r1
 800838c:	2108      	movs	r1, #8
 800838e:	4688      	mov	r8, r1
 8008390:	44b8      	add	r8, r7
 8008392:	44c4      	add	ip, r8
 8008394:	4462      	add	r2, ip
 8008396:	1952      	adds	r2, r2, r5
 8008398:	1912      	adds	r2, r2, r4
 800839a:	6013      	str	r3, [r2, #0]
			}

			if (diff_tilt_0_1 > 180.0)
 800839c:	49c0      	ldr	r1, [pc, #768]	; (80086a0 <main+0x2c9c>)
 800839e:	249a      	movs	r4, #154	; 0x9a
 80083a0:	00a4      	lsls	r4, r4, #2
 80083a2:	2508      	movs	r5, #8
 80083a4:	2308      	movs	r3, #8
 80083a6:	2208      	movs	r2, #8
 80083a8:	4694      	mov	ip, r2
 80083aa:	2208      	movs	r2, #8
 80083ac:	4690      	mov	r8, r2
 80083ae:	44b8      	add	r8, r7
 80083b0:	44c4      	add	ip, r8
 80083b2:	4463      	add	r3, ip
 80083b4:	195b      	adds	r3, r3, r5
 80083b6:	191b      	adds	r3, r3, r4
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f7f8 f897 	bl	80004ec <__aeabi_fcmpgt>
 80083be:	1e03      	subs	r3, r0, #0
 80083c0:	d019      	beq.n	80083f6 <main+0x29f2>
			{
				diff_tilt_0_1 = 360.0 - diff_tilt_0_1;
 80083c2:	2308      	movs	r3, #8
 80083c4:	2208      	movs	r2, #8
 80083c6:	4694      	mov	ip, r2
 80083c8:	2208      	movs	r2, #8
 80083ca:	4690      	mov	r8, r2
 80083cc:	44b8      	add	r8, r7
 80083ce:	44c4      	add	ip, r8
 80083d0:	4463      	add	r3, ip
 80083d2:	195b      	adds	r3, r3, r5
 80083d4:	191b      	adds	r3, r3, r4
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	48b2      	ldr	r0, [pc, #712]	; (80086a4 <main+0x2ca0>)
 80083da:	f7f8 fd33 	bl	8000e44 <__aeabi_fsub>
 80083de:	1c03      	adds	r3, r0, #0
 80083e0:	2208      	movs	r2, #8
 80083e2:	2108      	movs	r1, #8
 80083e4:	468c      	mov	ip, r1
 80083e6:	2108      	movs	r1, #8
 80083e8:	4688      	mov	r8, r1
 80083ea:	44b8      	add	r8, r7
 80083ec:	44c4      	add	ip, r8
 80083ee:	4462      	add	r2, ip
 80083f0:	1952      	adds	r2, r2, r5
 80083f2:	1912      	adds	r2, r2, r4
 80083f4:	6013      	str	r3, [r2, #0]
			}

			if (diff_tilt_0_1 < -180.0)
 80083f6:	49ac      	ldr	r1, [pc, #688]	; (80086a8 <main+0x2ca4>)
 80083f8:	249a      	movs	r4, #154	; 0x9a
 80083fa:	00a4      	lsls	r4, r4, #2
 80083fc:	2508      	movs	r5, #8
 80083fe:	2308      	movs	r3, #8
 8008400:	2208      	movs	r2, #8
 8008402:	4694      	mov	ip, r2
 8008404:	2208      	movs	r2, #8
 8008406:	4690      	mov	r8, r2
 8008408:	44b8      	add	r8, r7
 800840a:	44c4      	add	ip, r8
 800840c:	4463      	add	r3, ip
 800840e:	195b      	adds	r3, r3, r5
 8008410:	191b      	adds	r3, r3, r4
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	f7f8 f856 	bl	80004c4 <__aeabi_fcmplt>
 8008418:	1e03      	subs	r3, r0, #0
 800841a:	d01d      	beq.n	8008458 <main+0x2a54>
			{
				diff_tilt_0_1 = -(diff_tilt_0_1 + 360.0);
 800841c:	49a1      	ldr	r1, [pc, #644]	; (80086a4 <main+0x2ca0>)
 800841e:	2308      	movs	r3, #8
 8008420:	2208      	movs	r2, #8
 8008422:	4694      	mov	ip, r2
 8008424:	2208      	movs	r2, #8
 8008426:	4690      	mov	r8, r2
 8008428:	44b8      	add	r8, r7
 800842a:	44c4      	add	ip, r8
 800842c:	4463      	add	r3, ip
 800842e:	195b      	adds	r3, r3, r5
 8008430:	191b      	adds	r3, r3, r4
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	f7f8 f886 	bl	8000544 <__aeabi_fadd>
 8008438:	1c03      	adds	r3, r0, #0
 800843a:	1c1a      	adds	r2, r3, #0
 800843c:	2380      	movs	r3, #128	; 0x80
 800843e:	061b      	lsls	r3, r3, #24
 8008440:	4053      	eors	r3, r2
 8008442:	2208      	movs	r2, #8
 8008444:	2108      	movs	r1, #8
 8008446:	468c      	mov	ip, r1
 8008448:	2108      	movs	r1, #8
 800844a:	4688      	mov	r8, r1
 800844c:	44b8      	add	r8, r7
 800844e:	44c4      	add	ip, r8
 8008450:	4462      	add	r2, ip
 8008452:	1952      	adds	r2, r2, r5
 8008454:	1912      	adds	r2, r2, r4
 8008456:	6013      	str	r3, [r2, #0]
			}

			if (diff_pitch_0_1 > 180.0)
 8008458:	4991      	ldr	r1, [pc, #580]	; (80086a0 <main+0x2c9c>)
 800845a:	2499      	movs	r4, #153	; 0x99
 800845c:	00a4      	lsls	r4, r4, #2
 800845e:	2508      	movs	r5, #8
 8008460:	2308      	movs	r3, #8
 8008462:	2208      	movs	r2, #8
 8008464:	4694      	mov	ip, r2
 8008466:	2208      	movs	r2, #8
 8008468:	4690      	mov	r8, r2
 800846a:	44b8      	add	r8, r7
 800846c:	44c4      	add	ip, r8
 800846e:	4463      	add	r3, ip
 8008470:	195b      	adds	r3, r3, r5
 8008472:	191b      	adds	r3, r3, r4
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	f7f8 f839 	bl	80004ec <__aeabi_fcmpgt>
 800847a:	1e03      	subs	r3, r0, #0
 800847c:	d019      	beq.n	80084b2 <main+0x2aae>
			{
				diff_pitch_0_1 = 360.0 - diff_pitch_0_1;
 800847e:	2308      	movs	r3, #8
 8008480:	2208      	movs	r2, #8
 8008482:	4694      	mov	ip, r2
 8008484:	2208      	movs	r2, #8
 8008486:	4690      	mov	r8, r2
 8008488:	44b8      	add	r8, r7
 800848a:	44c4      	add	ip, r8
 800848c:	4463      	add	r3, ip
 800848e:	195b      	adds	r3, r3, r5
 8008490:	191b      	adds	r3, r3, r4
 8008492:	6819      	ldr	r1, [r3, #0]
 8008494:	4883      	ldr	r0, [pc, #524]	; (80086a4 <main+0x2ca0>)
 8008496:	f7f8 fcd5 	bl	8000e44 <__aeabi_fsub>
 800849a:	1c03      	adds	r3, r0, #0
 800849c:	2208      	movs	r2, #8
 800849e:	2108      	movs	r1, #8
 80084a0:	468c      	mov	ip, r1
 80084a2:	2108      	movs	r1, #8
 80084a4:	4688      	mov	r8, r1
 80084a6:	44b8      	add	r8, r7
 80084a8:	44c4      	add	ip, r8
 80084aa:	4462      	add	r2, ip
 80084ac:	1952      	adds	r2, r2, r5
 80084ae:	1912      	adds	r2, r2, r4
 80084b0:	6013      	str	r3, [r2, #0]
			}

			if (diff_pitch_0_1 < -180.0)
 80084b2:	497d      	ldr	r1, [pc, #500]	; (80086a8 <main+0x2ca4>)
 80084b4:	2499      	movs	r4, #153	; 0x99
 80084b6:	00a4      	lsls	r4, r4, #2
 80084b8:	2508      	movs	r5, #8
 80084ba:	2308      	movs	r3, #8
 80084bc:	2208      	movs	r2, #8
 80084be:	4694      	mov	ip, r2
 80084c0:	2208      	movs	r2, #8
 80084c2:	4690      	mov	r8, r2
 80084c4:	44b8      	add	r8, r7
 80084c6:	44c4      	add	ip, r8
 80084c8:	4463      	add	r3, ip
 80084ca:	195b      	adds	r3, r3, r5
 80084cc:	191b      	adds	r3, r3, r4
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	f7f7 fff8 	bl	80004c4 <__aeabi_fcmplt>
 80084d4:	1e03      	subs	r3, r0, #0
 80084d6:	d01d      	beq.n	8008514 <main+0x2b10>
			{
				diff_pitch_0_1 = -(diff_pitch_0_1 + 360.0);
 80084d8:	4972      	ldr	r1, [pc, #456]	; (80086a4 <main+0x2ca0>)
 80084da:	2308      	movs	r3, #8
 80084dc:	2208      	movs	r2, #8
 80084de:	4694      	mov	ip, r2
 80084e0:	2208      	movs	r2, #8
 80084e2:	4690      	mov	r8, r2
 80084e4:	44b8      	add	r8, r7
 80084e6:	44c4      	add	ip, r8
 80084e8:	4463      	add	r3, ip
 80084ea:	195b      	adds	r3, r3, r5
 80084ec:	191b      	adds	r3, r3, r4
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	f7f8 f828 	bl	8000544 <__aeabi_fadd>
 80084f4:	1c03      	adds	r3, r0, #0
 80084f6:	1c1a      	adds	r2, r3, #0
 80084f8:	2380      	movs	r3, #128	; 0x80
 80084fa:	061b      	lsls	r3, r3, #24
 80084fc:	4053      	eors	r3, r2
 80084fe:	2208      	movs	r2, #8
 8008500:	2108      	movs	r1, #8
 8008502:	468c      	mov	ip, r1
 8008504:	2108      	movs	r1, #8
 8008506:	4688      	mov	r8, r1
 8008508:	44b8      	add	r8, r7
 800850a:	44c4      	add	ip, r8
 800850c:	4462      	add	r2, ip
 800850e:	1952      	adds	r2, r2, r5
 8008510:	1912      	adds	r2, r2, r4
 8008512:	6013      	str	r3, [r2, #0]
			}

			if ((fabs(diff_pan_0_1) > 3.0) | (fabs(diff_tilt_0_1) > 5.0) | (fabs(diff_pitch_0_1) > 5.0))
 8008514:	239b      	movs	r3, #155	; 0x9b
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	2208      	movs	r2, #8
 800851a:	4694      	mov	ip, r2
 800851c:	2208      	movs	r2, #8
 800851e:	4690      	mov	r8, r2
 8008520:	2208      	movs	r2, #8
 8008522:	4691      	mov	r9, r2
 8008524:	2208      	movs	r2, #8
 8008526:	4692      	mov	sl, r2
 8008528:	44ba      	add	sl, r7
 800852a:	44d1      	add	r9, sl
 800852c:	44c8      	add	r8, r9
 800852e:	44c4      	add	ip, r8
 8008530:	4463      	add	r3, ip
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	085b      	lsrs	r3, r3, #1
 8008538:	2201      	movs	r2, #1
 800853a:	1c14      	adds	r4, r2, #0
 800853c:	495b      	ldr	r1, [pc, #364]	; (80086ac <main+0x2ca8>)
 800853e:	1c18      	adds	r0, r3, #0
 8008540:	f7f7 ffd4 	bl	80004ec <__aeabi_fcmpgt>
 8008544:	1e03      	subs	r3, r0, #0
 8008546:	d101      	bne.n	800854c <main+0x2b48>
 8008548:	2300      	movs	r3, #0
 800854a:	1c1c      	adds	r4, r3, #0
 800854c:	b2e4      	uxtb	r4, r4
 800854e:	239a      	movs	r3, #154	; 0x9a
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	2208      	movs	r2, #8
 8008554:	4694      	mov	ip, r2
 8008556:	2208      	movs	r2, #8
 8008558:	4690      	mov	r8, r2
 800855a:	2208      	movs	r2, #8
 800855c:	4691      	mov	r9, r2
 800855e:	2208      	movs	r2, #8
 8008560:	4692      	mov	sl, r2
 8008562:	44ba      	add	sl, r7
 8008564:	44d1      	add	r9, sl
 8008566:	44c8      	add	r8, r9
 8008568:	44c4      	add	ip, r8
 800856a:	4463      	add	r3, ip
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	2201      	movs	r2, #1
 8008574:	1c15      	adds	r5, r2, #0
 8008576:	494e      	ldr	r1, [pc, #312]	; (80086b0 <main+0x2cac>)
 8008578:	1c18      	adds	r0, r3, #0
 800857a:	f7f7 ffb7 	bl	80004ec <__aeabi_fcmpgt>
 800857e:	1e03      	subs	r3, r0, #0
 8008580:	d101      	bne.n	8008586 <main+0x2b82>
 8008582:	2300      	movs	r3, #0
 8008584:	1c1d      	adds	r5, r3, #0
 8008586:	b2eb      	uxtb	r3, r5
 8008588:	4323      	orrs	r3, r4
 800858a:	b2db      	uxtb	r3, r3
 800858c:	001c      	movs	r4, r3
 800858e:	2399      	movs	r3, #153	; 0x99
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	2208      	movs	r2, #8
 8008594:	4694      	mov	ip, r2
 8008596:	2208      	movs	r2, #8
 8008598:	4690      	mov	r8, r2
 800859a:	2208      	movs	r2, #8
 800859c:	4691      	mov	r9, r2
 800859e:	2208      	movs	r2, #8
 80085a0:	4692      	mov	sl, r2
 80085a2:	44ba      	add	sl, r7
 80085a4:	44d1      	add	r9, sl
 80085a6:	44c8      	add	r8, r9
 80085a8:	44c4      	add	ip, r8
 80085aa:	4463      	add	r3, ip
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	085b      	lsrs	r3, r3, #1
 80085b2:	2201      	movs	r2, #1
 80085b4:	1c15      	adds	r5, r2, #0
 80085b6:	493e      	ldr	r1, [pc, #248]	; (80086b0 <main+0x2cac>)
 80085b8:	1c18      	adds	r0, r3, #0
 80085ba:	f7f7 ff97 	bl	80004ec <__aeabi_fcmpgt>
 80085be:	1e03      	subs	r3, r0, #0
 80085c0:	d101      	bne.n	80085c6 <main+0x2bc2>
 80085c2:	2300      	movs	r3, #0
 80085c4:	1c1d      	adds	r5, r3, #0
 80085c6:	b2eb      	uxtb	r3, r5
 80085c8:	4323      	orrs	r3, r4
 80085ca:	d100      	bne.n	80085ce <main+0x2bca>
 80085cc:	e10c      	b.n	80087e8 <main+0x2de4>
			{
				// Movement Expected - measured == expected?
				if (moving_expected)
 80085ce:	4b39      	ldr	r3, [pc, #228]	; (80086b4 <main+0x2cb0>)
 80085d0:	2208      	movs	r2, #8
 80085d2:	4694      	mov	ip, r2
 80085d4:	2208      	movs	r2, #8
 80085d6:	4690      	mov	r8, r2
 80085d8:	2208      	movs	r2, #8
 80085da:	4691      	mov	r9, r2
 80085dc:	2208      	movs	r2, #8
 80085de:	4692      	mov	sl, r2
 80085e0:	44ba      	add	sl, r7
 80085e2:	44d1      	add	r9, sl
 80085e4:	44c8      	add	r8, r9
 80085e6:	44c4      	add	ip, r8
 80085e8:	4463      	add	r3, ip
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b25b      	sxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d100      	bne.n	80085f4 <main+0x2bf0>
 80085f2:	e084      	b.n	80086fe <main+0x2cfa>
				{
					sprintf(uart_buffer, "Movement Expected! measured: %.2f : %.2f : %.2f \r\n", diff_pan_0_1, diff_tilt_0_1, diff_pitch_0_1);
 80085f4:	239b      	movs	r3, #155	; 0x9b
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	2208      	movs	r2, #8
 80085fa:	4694      	mov	ip, r2
 80085fc:	2208      	movs	r2, #8
 80085fe:	4690      	mov	r8, r2
 8008600:	2208      	movs	r2, #8
 8008602:	4691      	mov	r9, r2
 8008604:	2208      	movs	r2, #8
 8008606:	4692      	mov	sl, r2
 8008608:	44ba      	add	sl, r7
 800860a:	44d1      	add	r9, sl
 800860c:	44c8      	add	r8, r9
 800860e:	44c4      	add	ip, r8
 8008610:	4463      	add	r3, ip
 8008612:	6818      	ldr	r0, [r3, #0]
 8008614:	f7fa fc5c 	bl	8002ed0 <__aeabi_f2d>
 8008618:	61b8      	str	r0, [r7, #24]
 800861a:	61f9      	str	r1, [r7, #28]
 800861c:	239a      	movs	r3, #154	; 0x9a
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	2208      	movs	r2, #8
 8008622:	4694      	mov	ip, r2
 8008624:	2208      	movs	r2, #8
 8008626:	4690      	mov	r8, r2
 8008628:	2208      	movs	r2, #8
 800862a:	4691      	mov	r9, r2
 800862c:	2208      	movs	r2, #8
 800862e:	4692      	mov	sl, r2
 8008630:	44ba      	add	sl, r7
 8008632:	44d1      	add	r9, sl
 8008634:	44c8      	add	r8, r9
 8008636:	44c4      	add	ip, r8
 8008638:	4463      	add	r3, ip
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	f7fa fc48 	bl	8002ed0 <__aeabi_f2d>
 8008640:	0004      	movs	r4, r0
 8008642:	000d      	movs	r5, r1
 8008644:	2399      	movs	r3, #153	; 0x99
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	2208      	movs	r2, #8
 800864a:	4694      	mov	ip, r2
 800864c:	2208      	movs	r2, #8
 800864e:	4690      	mov	r8, r2
 8008650:	2208      	movs	r2, #8
 8008652:	4691      	mov	r9, r2
 8008654:	2208      	movs	r2, #8
 8008656:	4692      	mov	sl, r2
 8008658:	44ba      	add	sl, r7
 800865a:	44d1      	add	r9, sl
 800865c:	44c8      	add	r8, r9
 800865e:	44c4      	add	ip, r8
 8008660:	4463      	add	r3, ip
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	f7fa fc34 	bl	8002ed0 <__aeabi_f2d>
 8008668:	60b8      	str	r0, [r7, #8]
 800866a:	60f9      	str	r1, [r7, #12]
 800866c:	4912      	ldr	r1, [pc, #72]	; (80086b8 <main+0x2cb4>)
 800866e:	26b6      	movs	r6, #182	; 0xb6
 8008670:	0076      	lsls	r6, r6, #1
 8008672:	2008      	movs	r0, #8
 8008674:	2308      	movs	r3, #8
 8008676:	469c      	mov	ip, r3
 8008678:	2308      	movs	r3, #8
 800867a:	4698      	mov	r8, r3
 800867c:	2308      	movs	r3, #8
 800867e:	4699      	mov	r9, r3
 8008680:	44b9      	add	r9, r7
 8008682:	44c8      	add	r8, r9
 8008684:	44c4      	add	ip, r8
 8008686:	4460      	add	r0, ip
 8008688:	1980      	adds	r0, r0, r6
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	9202      	str	r2, [sp, #8]
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	9400      	str	r4, [sp, #0]
 8008694:	9501      	str	r5, [sp, #4]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	f004 fdd9 	bl	800d250 <siprintf>
 800869e:	e00d      	b.n	80086bc <main+0x2cb8>
 80086a0:	43340000 	.word	0x43340000
 80086a4:	43b40000 	.word	0x43b40000
 80086a8:	c3340000 	.word	0xc3340000
 80086ac:	40400000 	.word	0x40400000
 80086b0:	40a00000 	.word	0x40a00000
 80086b4:	0000024f 	.word	0x0000024f
 80086b8:	080121d0 	.word	0x080121d0
					HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80086bc:	0034      	movs	r4, r6
 80086be:	2508      	movs	r5, #8
 80086c0:	2308      	movs	r3, #8
 80086c2:	2208      	movs	r2, #8
 80086c4:	4694      	mov	ip, r2
 80086c6:	2208      	movs	r2, #8
 80086c8:	4690      	mov	r8, r2
 80086ca:	44b8      	add	r8, r7
 80086cc:	44c4      	add	ip, r8
 80086ce:	4463      	add	r3, ip
 80086d0:	195b      	adds	r3, r3, r5
 80086d2:	191b      	adds	r3, r3, r4
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7f7 fd13 	bl	8000100 <strlen>
 80086da:	0003      	movs	r3, r0
 80086dc:	b29a      	uxth	r2, r3
 80086de:	23fa      	movs	r3, #250	; 0xfa
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	2108      	movs	r1, #8
 80086e4:	2008      	movs	r0, #8
 80086e6:	4684      	mov	ip, r0
 80086e8:	2008      	movs	r0, #8
 80086ea:	4680      	mov	r8, r0
 80086ec:	44b8      	add	r8, r7
 80086ee:	44c4      	add	ip, r8
 80086f0:	4461      	add	r1, ip
 80086f2:	1949      	adds	r1, r1, r5
 80086f4:	1909      	adds	r1, r1, r4
 80086f6:	48f5      	ldr	r0, [pc, #980]	; (8008acc <main+0x30c8>)
 80086f8:	f003 fbcc 	bl	800be94 <HAL_UART_Transmit>
 80086fc:	e074      	b.n	80087e8 <main+0x2de4>
				} else {
					// Movement NOT Expected - Tampering detected
					sprintf(uart_buffer, "Movement not Expected! tampering: %.2f : %.2f : %.2f \r\n", diff_pan_0_1, diff_tilt_0_1, diff_pitch_0_1);
 80086fe:	239b      	movs	r3, #155	; 0x9b
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	2208      	movs	r2, #8
 8008704:	4694      	mov	ip, r2
 8008706:	2208      	movs	r2, #8
 8008708:	4690      	mov	r8, r2
 800870a:	2208      	movs	r2, #8
 800870c:	4691      	mov	r9, r2
 800870e:	2208      	movs	r2, #8
 8008710:	4692      	mov	sl, r2
 8008712:	44ba      	add	sl, r7
 8008714:	44d1      	add	r9, sl
 8008716:	44c8      	add	r8, r9
 8008718:	44c4      	add	ip, r8
 800871a:	4463      	add	r3, ip
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f7fa fbd7 	bl	8002ed0 <__aeabi_f2d>
 8008722:	61b8      	str	r0, [r7, #24]
 8008724:	61f9      	str	r1, [r7, #28]
 8008726:	239a      	movs	r3, #154	; 0x9a
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	2208      	movs	r2, #8
 800872c:	4694      	mov	ip, r2
 800872e:	2208      	movs	r2, #8
 8008730:	4690      	mov	r8, r2
 8008732:	2208      	movs	r2, #8
 8008734:	4691      	mov	r9, r2
 8008736:	2208      	movs	r2, #8
 8008738:	4692      	mov	sl, r2
 800873a:	44ba      	add	sl, r7
 800873c:	44d1      	add	r9, sl
 800873e:	44c8      	add	r8, r9
 8008740:	44c4      	add	ip, r8
 8008742:	4463      	add	r3, ip
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7fa fbc3 	bl	8002ed0 <__aeabi_f2d>
 800874a:	0004      	movs	r4, r0
 800874c:	000d      	movs	r5, r1
 800874e:	2399      	movs	r3, #153	; 0x99
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	2208      	movs	r2, #8
 8008754:	4694      	mov	ip, r2
 8008756:	2208      	movs	r2, #8
 8008758:	4690      	mov	r8, r2
 800875a:	2208      	movs	r2, #8
 800875c:	4691      	mov	r9, r2
 800875e:	2208      	movs	r2, #8
 8008760:	4692      	mov	sl, r2
 8008762:	44ba      	add	sl, r7
 8008764:	44d1      	add	r9, sl
 8008766:	44c8      	add	r8, r9
 8008768:	44c4      	add	ip, r8
 800876a:	4463      	add	r3, ip
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f7fa fbaf 	bl	8002ed0 <__aeabi_f2d>
 8008772:	60b8      	str	r0, [r7, #8]
 8008774:	60f9      	str	r1, [r7, #12]
 8008776:	49d6      	ldr	r1, [pc, #856]	; (8008ad0 <main+0x30cc>)
 8008778:	26b6      	movs	r6, #182	; 0xb6
 800877a:	0076      	lsls	r6, r6, #1
 800877c:	2008      	movs	r0, #8
 800877e:	2308      	movs	r3, #8
 8008780:	469c      	mov	ip, r3
 8008782:	2308      	movs	r3, #8
 8008784:	4698      	mov	r8, r3
 8008786:	2308      	movs	r3, #8
 8008788:	4699      	mov	r9, r3
 800878a:	44b9      	add	r9, r7
 800878c:	44c8      	add	r8, r9
 800878e:	44c4      	add	ip, r8
 8008790:	4460      	add	r0, ip
 8008792:	1980      	adds	r0, r0, r6
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	9202      	str	r2, [sp, #8]
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	9400      	str	r4, [sp, #0]
 800879e:	9501      	str	r5, [sp, #4]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f004 fd54 	bl	800d250 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80087a8:	0034      	movs	r4, r6
 80087aa:	2508      	movs	r5, #8
 80087ac:	2308      	movs	r3, #8
 80087ae:	2208      	movs	r2, #8
 80087b0:	4694      	mov	ip, r2
 80087b2:	2208      	movs	r2, #8
 80087b4:	4690      	mov	r8, r2
 80087b6:	44b8      	add	r8, r7
 80087b8:	44c4      	add	ip, r8
 80087ba:	4463      	add	r3, ip
 80087bc:	195b      	adds	r3, r3, r5
 80087be:	191b      	adds	r3, r3, r4
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7f7 fc9d 	bl	8000100 <strlen>
 80087c6:	0003      	movs	r3, r0
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	23fa      	movs	r3, #250	; 0xfa
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	2108      	movs	r1, #8
 80087d0:	2008      	movs	r0, #8
 80087d2:	4684      	mov	ip, r0
 80087d4:	2008      	movs	r0, #8
 80087d6:	4680      	mov	r8, r0
 80087d8:	44b8      	add	r8, r7
 80087da:	44c4      	add	ip, r8
 80087dc:	4461      	add	r1, ip
 80087de:	1949      	adds	r1, r1, r5
 80087e0:	1909      	adds	r1, r1, r4
 80087e2:	48ba      	ldr	r0, [pc, #744]	; (8008acc <main+0x30c8>)
 80087e4:	f003 fb56 	bl	800be94 <HAL_UART_Transmit>
				}
			}

			// Update previous quaternion state
			prev_0.roll = angles_0.roll;
 80087e8:	4bba      	ldr	r3, [pc, #744]	; (8008ad4 <main+0x30d0>)
 80087ea:	229e      	movs	r2, #158	; 0x9e
 80087ec:	0092      	lsls	r2, r2, #2
 80087ee:	4694      	mov	ip, r2
 80087f0:	2208      	movs	r2, #8
 80087f2:	4690      	mov	r8, r2
 80087f4:	2208      	movs	r2, #8
 80087f6:	4691      	mov	r9, r2
 80087f8:	2208      	movs	r2, #8
 80087fa:	4692      	mov	sl, r2
 80087fc:	2208      	movs	r2, #8
 80087fe:	4693      	mov	fp, r2
 8008800:	44bb      	add	fp, r7
 8008802:	44da      	add	sl, fp
 8008804:	44d1      	add	r9, sl
 8008806:	44c8      	add	r8, r9
 8008808:	44c4      	add	ip, r8
 800880a:	4463      	add	r3, ip
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4bb2      	ldr	r3, [pc, #712]	; (8008ad8 <main+0x30d4>)
 8008810:	219e      	movs	r1, #158	; 0x9e
 8008812:	0089      	lsls	r1, r1, #2
 8008814:	468c      	mov	ip, r1
 8008816:	2108      	movs	r1, #8
 8008818:	4688      	mov	r8, r1
 800881a:	2108      	movs	r1, #8
 800881c:	4689      	mov	r9, r1
 800881e:	2108      	movs	r1, #8
 8008820:	468a      	mov	sl, r1
 8008822:	2108      	movs	r1, #8
 8008824:	468b      	mov	fp, r1
 8008826:	44bb      	add	fp, r7
 8008828:	44da      	add	sl, fp
 800882a:	44d1      	add	r9, sl
 800882c:	44c8      	add	r8, r9
 800882e:	44c4      	add	ip, r8
 8008830:	4463      	add	r3, ip
 8008832:	601a      	str	r2, [r3, #0]
			prev_0.yaw = angles_0.yaw;
 8008834:	4ba7      	ldr	r3, [pc, #668]	; (8008ad4 <main+0x30d0>)
 8008836:	229e      	movs	r2, #158	; 0x9e
 8008838:	0092      	lsls	r2, r2, #2
 800883a:	4694      	mov	ip, r2
 800883c:	2208      	movs	r2, #8
 800883e:	4690      	mov	r8, r2
 8008840:	2208      	movs	r2, #8
 8008842:	4691      	mov	r9, r2
 8008844:	2208      	movs	r2, #8
 8008846:	4692      	mov	sl, r2
 8008848:	2208      	movs	r2, #8
 800884a:	4693      	mov	fp, r2
 800884c:	44bb      	add	fp, r7
 800884e:	44da      	add	sl, fp
 8008850:	44d1      	add	r9, sl
 8008852:	44c8      	add	r8, r9
 8008854:	44c4      	add	ip, r8
 8008856:	4463      	add	r3, ip
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	4b9f      	ldr	r3, [pc, #636]	; (8008ad8 <main+0x30d4>)
 800885c:	219e      	movs	r1, #158	; 0x9e
 800885e:	0089      	lsls	r1, r1, #2
 8008860:	468c      	mov	ip, r1
 8008862:	2108      	movs	r1, #8
 8008864:	4688      	mov	r8, r1
 8008866:	2108      	movs	r1, #8
 8008868:	4689      	mov	r9, r1
 800886a:	2108      	movs	r1, #8
 800886c:	468a      	mov	sl, r1
 800886e:	2108      	movs	r1, #8
 8008870:	468b      	mov	fp, r1
 8008872:	44bb      	add	fp, r7
 8008874:	44da      	add	sl, fp
 8008876:	44d1      	add	r9, sl
 8008878:	44c8      	add	r8, r9
 800887a:	44c4      	add	ip, r8
 800887c:	4463      	add	r3, ip
 800887e:	609a      	str	r2, [r3, #8]
			prev_0.pitch = angles_0.pitch;
 8008880:	4b94      	ldr	r3, [pc, #592]	; (8008ad4 <main+0x30d0>)
 8008882:	229e      	movs	r2, #158	; 0x9e
 8008884:	0092      	lsls	r2, r2, #2
 8008886:	4694      	mov	ip, r2
 8008888:	2208      	movs	r2, #8
 800888a:	4690      	mov	r8, r2
 800888c:	2208      	movs	r2, #8
 800888e:	4691      	mov	r9, r2
 8008890:	2208      	movs	r2, #8
 8008892:	4692      	mov	sl, r2
 8008894:	2208      	movs	r2, #8
 8008896:	4693      	mov	fp, r2
 8008898:	44bb      	add	fp, r7
 800889a:	44da      	add	sl, fp
 800889c:	44d1      	add	r9, sl
 800889e:	44c8      	add	r8, r9
 80088a0:	44c4      	add	ip, r8
 80088a2:	4463      	add	r3, ip
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4b8c      	ldr	r3, [pc, #560]	; (8008ad8 <main+0x30d4>)
 80088a8:	219e      	movs	r1, #158	; 0x9e
 80088aa:	0089      	lsls	r1, r1, #2
 80088ac:	468c      	mov	ip, r1
 80088ae:	2108      	movs	r1, #8
 80088b0:	4688      	mov	r8, r1
 80088b2:	2108      	movs	r1, #8
 80088b4:	4689      	mov	r9, r1
 80088b6:	2108      	movs	r1, #8
 80088b8:	468a      	mov	sl, r1
 80088ba:	2108      	movs	r1, #8
 80088bc:	468b      	mov	fp, r1
 80088be:	44bb      	add	fp, r7
 80088c0:	44da      	add	sl, fp
 80088c2:	44d1      	add	r9, sl
 80088c4:	44c8      	add	r8, r9
 80088c6:	44c4      	add	ip, r8
 80088c8:	4463      	add	r3, ip
 80088ca:	605a      	str	r2, [r3, #4]
			prev_1.roll = angles_1.roll;
 80088cc:	4b83      	ldr	r3, [pc, #524]	; (8008adc <main+0x30d8>)
 80088ce:	229e      	movs	r2, #158	; 0x9e
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	4694      	mov	ip, r2
 80088d4:	2208      	movs	r2, #8
 80088d6:	4690      	mov	r8, r2
 80088d8:	2208      	movs	r2, #8
 80088da:	4691      	mov	r9, r2
 80088dc:	2208      	movs	r2, #8
 80088de:	4692      	mov	sl, r2
 80088e0:	2208      	movs	r2, #8
 80088e2:	4693      	mov	fp, r2
 80088e4:	44bb      	add	fp, r7
 80088e6:	44da      	add	sl, fp
 80088e8:	44d1      	add	r9, sl
 80088ea:	44c8      	add	r8, r9
 80088ec:	44c4      	add	ip, r8
 80088ee:	4463      	add	r3, ip
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b7b      	ldr	r3, [pc, #492]	; (8008ae0 <main+0x30dc>)
 80088f4:	219e      	movs	r1, #158	; 0x9e
 80088f6:	0089      	lsls	r1, r1, #2
 80088f8:	468c      	mov	ip, r1
 80088fa:	2108      	movs	r1, #8
 80088fc:	4688      	mov	r8, r1
 80088fe:	2108      	movs	r1, #8
 8008900:	4689      	mov	r9, r1
 8008902:	2108      	movs	r1, #8
 8008904:	468a      	mov	sl, r1
 8008906:	2108      	movs	r1, #8
 8008908:	468b      	mov	fp, r1
 800890a:	44bb      	add	fp, r7
 800890c:	44da      	add	sl, fp
 800890e:	44d1      	add	r9, sl
 8008910:	44c8      	add	r8, r9
 8008912:	44c4      	add	ip, r8
 8008914:	4463      	add	r3, ip
 8008916:	601a      	str	r2, [r3, #0]
			prev_1.yaw = angles_1.yaw;
 8008918:	4b70      	ldr	r3, [pc, #448]	; (8008adc <main+0x30d8>)
 800891a:	229e      	movs	r2, #158	; 0x9e
 800891c:	0092      	lsls	r2, r2, #2
 800891e:	4694      	mov	ip, r2
 8008920:	2208      	movs	r2, #8
 8008922:	4690      	mov	r8, r2
 8008924:	2208      	movs	r2, #8
 8008926:	4691      	mov	r9, r2
 8008928:	2208      	movs	r2, #8
 800892a:	4692      	mov	sl, r2
 800892c:	2208      	movs	r2, #8
 800892e:	4693      	mov	fp, r2
 8008930:	44bb      	add	fp, r7
 8008932:	44da      	add	sl, fp
 8008934:	44d1      	add	r9, sl
 8008936:	44c8      	add	r8, r9
 8008938:	44c4      	add	ip, r8
 800893a:	4463      	add	r3, ip
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	4b68      	ldr	r3, [pc, #416]	; (8008ae0 <main+0x30dc>)
 8008940:	219e      	movs	r1, #158	; 0x9e
 8008942:	0089      	lsls	r1, r1, #2
 8008944:	468c      	mov	ip, r1
 8008946:	2108      	movs	r1, #8
 8008948:	4688      	mov	r8, r1
 800894a:	2108      	movs	r1, #8
 800894c:	4689      	mov	r9, r1
 800894e:	2108      	movs	r1, #8
 8008950:	468a      	mov	sl, r1
 8008952:	2108      	movs	r1, #8
 8008954:	468b      	mov	fp, r1
 8008956:	44bb      	add	fp, r7
 8008958:	44da      	add	sl, fp
 800895a:	44d1      	add	r9, sl
 800895c:	44c8      	add	r8, r9
 800895e:	44c4      	add	ip, r8
 8008960:	4463      	add	r3, ip
 8008962:	609a      	str	r2, [r3, #8]
			prev_1.pitch = angles_1.pitch;
 8008964:	4b5d      	ldr	r3, [pc, #372]	; (8008adc <main+0x30d8>)
 8008966:	229e      	movs	r2, #158	; 0x9e
 8008968:	0092      	lsls	r2, r2, #2
 800896a:	4694      	mov	ip, r2
 800896c:	2208      	movs	r2, #8
 800896e:	4690      	mov	r8, r2
 8008970:	2208      	movs	r2, #8
 8008972:	4691      	mov	r9, r2
 8008974:	2208      	movs	r2, #8
 8008976:	4692      	mov	sl, r2
 8008978:	2208      	movs	r2, #8
 800897a:	4693      	mov	fp, r2
 800897c:	44bb      	add	fp, r7
 800897e:	44da      	add	sl, fp
 8008980:	44d1      	add	r9, sl
 8008982:	44c8      	add	r8, r9
 8008984:	44c4      	add	ip, r8
 8008986:	4463      	add	r3, ip
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	4b55      	ldr	r3, [pc, #340]	; (8008ae0 <main+0x30dc>)
 800898c:	219e      	movs	r1, #158	; 0x9e
 800898e:	0089      	lsls	r1, r1, #2
 8008990:	468c      	mov	ip, r1
 8008992:	2108      	movs	r1, #8
 8008994:	4688      	mov	r8, r1
 8008996:	2108      	movs	r1, #8
 8008998:	4689      	mov	r9, r1
 800899a:	2108      	movs	r1, #8
 800899c:	468a      	mov	sl, r1
 800899e:	2108      	movs	r1, #8
 80089a0:	468b      	mov	fp, r1
 80089a2:	44bb      	add	fp, r7
 80089a4:	44da      	add	sl, fp
 80089a6:	44d1      	add	r9, sl
 80089a8:	44c8      	add	r8, r9
 80089aa:	44c4      	add	ip, r8
 80089ac:	4463      	add	r3, ip
 80089ae:	605a      	str	r2, [r3, #4]
			motion_duration = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	229c      	movs	r2, #156	; 0x9c
 80089b4:	0092      	lsls	r2, r2, #2
 80089b6:	2108      	movs	r1, #8
 80089b8:	468c      	mov	ip, r1
 80089ba:	2108      	movs	r1, #8
 80089bc:	4688      	mov	r8, r1
 80089be:	2108      	movs	r1, #8
 80089c0:	4689      	mov	r9, r1
 80089c2:	2108      	movs	r1, #8
 80089c4:	468a      	mov	sl, r1
 80089c6:	44ba      	add	sl, r7
 80089c8:	44d1      	add	r9, sl
 80089ca:	44c8      	add	r8, r9
 80089cc:	44c4      	add	ip, r8
 80089ce:	4462      	add	r2, ip
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e069      	b.n	8008aa8 <main+0x30a4>
			#ifdef TAMPERING_BUFFER
				quat_buffer_0 = quat_0;
				quat_buffer_1 = quat_1;
			#endif
		}
		else if (uart_prescaler == 0)
 80089d4:	4b43      	ldr	r3, [pc, #268]	; (8008ae4 <main+0x30e0>)
 80089d6:	2208      	movs	r2, #8
 80089d8:	4694      	mov	ip, r2
 80089da:	2208      	movs	r2, #8
 80089dc:	4690      	mov	r8, r2
 80089de:	2208      	movs	r2, #8
 80089e0:	4691      	mov	r9, r2
 80089e2:	2208      	movs	r2, #8
 80089e4:	4692      	mov	sl, r2
 80089e6:	44ba      	add	sl, r7
 80089e8:	44d1      	add	r9, sl
 80089ea:	44c8      	add	r8, r9
 80089ec:	44c4      	add	ip, r8
 80089ee:	4463      	add	r3, ip
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d158      	bne.n	8008aa8 <main+0x30a4>
		{
			sprintf(uart_buffer, "NO TAMPERING DETECTED -> MOVE EXPECTED: %i -> LOOP DURATION: %.3f \r\n", moving_expected, duration);
 80089f6:	4b3c      	ldr	r3, [pc, #240]	; (8008ae8 <main+0x30e4>)
 80089f8:	2208      	movs	r2, #8
 80089fa:	4694      	mov	ip, r2
 80089fc:	2208      	movs	r2, #8
 80089fe:	4690      	mov	r8, r2
 8008a00:	2208      	movs	r2, #8
 8008a02:	4691      	mov	r9, r2
 8008a04:	2208      	movs	r2, #8
 8008a06:	4692      	mov	sl, r2
 8008a08:	44ba      	add	sl, r7
 8008a0a:	44d1      	add	r9, sl
 8008a0c:	44c8      	add	r8, r9
 8008a0e:	44c4      	add	ip, r8
 8008a10:	4463      	add	r3, ip
 8008a12:	2400      	movs	r4, #0
 8008a14:	571c      	ldrsb	r4, [r3, r4]
 8008a16:	239d      	movs	r3, #157	; 0x9d
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	2208      	movs	r2, #8
 8008a1c:	4694      	mov	ip, r2
 8008a1e:	2208      	movs	r2, #8
 8008a20:	4690      	mov	r8, r2
 8008a22:	2208      	movs	r2, #8
 8008a24:	4691      	mov	r9, r2
 8008a26:	2208      	movs	r2, #8
 8008a28:	4692      	mov	sl, r2
 8008a2a:	44ba      	add	sl, r7
 8008a2c:	44d1      	add	r9, sl
 8008a2e:	44c8      	add	r8, r9
 8008a30:	44c4      	add	ip, r8
 8008a32:	4463      	add	r3, ip
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f7fa fa4b 	bl	8002ed0 <__aeabi_f2d>
 8008a3a:	6038      	str	r0, [r7, #0]
 8008a3c:	6079      	str	r1, [r7, #4]
 8008a3e:	492b      	ldr	r1, [pc, #172]	; (8008aec <main+0x30e8>)
 8008a40:	25b6      	movs	r5, #182	; 0xb6
 8008a42:	006d      	lsls	r5, r5, #1
 8008a44:	2608      	movs	r6, #8
 8008a46:	2008      	movs	r0, #8
 8008a48:	2308      	movs	r3, #8
 8008a4a:	469c      	mov	ip, r3
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	4698      	mov	r8, r3
 8008a50:	44b8      	add	r8, r7
 8008a52:	44c4      	add	ip, r8
 8008a54:	4460      	add	r0, ip
 8008a56:	1980      	adds	r0, r0, r6
 8008a58:	1940      	adds	r0, r0, r5
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	9200      	str	r2, [sp, #0]
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	0022      	movs	r2, r4
 8008a64:	f004 fbf4 	bl	800d250 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8008a68:	002c      	movs	r4, r5
 8008a6a:	0035      	movs	r5, r6
 8008a6c:	2308      	movs	r3, #8
 8008a6e:	2208      	movs	r2, #8
 8008a70:	4694      	mov	ip, r2
 8008a72:	2208      	movs	r2, #8
 8008a74:	4690      	mov	r8, r2
 8008a76:	44b8      	add	r8, r7
 8008a78:	44c4      	add	ip, r8
 8008a7a:	4463      	add	r3, ip
 8008a7c:	195b      	adds	r3, r3, r5
 8008a7e:	191b      	adds	r3, r3, r4
 8008a80:	0018      	movs	r0, r3
 8008a82:	f7f7 fb3d 	bl	8000100 <strlen>
 8008a86:	0003      	movs	r3, r0
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	23fa      	movs	r3, #250	; 0xfa
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	2108      	movs	r1, #8
 8008a90:	2008      	movs	r0, #8
 8008a92:	4684      	mov	ip, r0
 8008a94:	2008      	movs	r0, #8
 8008a96:	4680      	mov	r8, r0
 8008a98:	44b8      	add	r8, r7
 8008a9a:	44c4      	add	ip, r8
 8008a9c:	4461      	add	r1, ip
 8008a9e:	1949      	adds	r1, r1, r5
 8008aa0:	1909      	adds	r1, r1, r4
 8008aa2:	480a      	ldr	r0, [pc, #40]	; (8008acc <main+0x30c8>)
 8008aa4:	f003 f9f6 	bl	800be94 <HAL_UART_Transmit>
		}
		was_moving = 0;
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <main+0x30ec>)
 8008aaa:	2208      	movs	r2, #8
 8008aac:	4694      	mov	ip, r2
 8008aae:	2208      	movs	r2, #8
 8008ab0:	4690      	mov	r8, r2
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	4691      	mov	r9, r2
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	4692      	mov	sl, r2
 8008aba:	44ba      	add	sl, r7
 8008abc:	44d1      	add	r9, sl
 8008abe:	44c8      	add	r8, r9
 8008ac0:	44c4      	add	ip, r8
 8008ac2:	4463      	add	r3, ip
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	e015      	b.n	8008af6 <main+0x30f2>
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	200004e8 	.word	0x200004e8
 8008ad0:	08012204 	.word	0x08012204
 8008ad4:	fffffdf8 	.word	0xfffffdf8
 8008ad8:	fffffde0 	.word	0xfffffde0
 8008adc:	fffffdec 	.word	0xfffffdec
 8008ae0:	fffffdd4 	.word	0xfffffdd4
 8008ae4:	00000262 	.word	0x00000262
 8008ae8:	0000024f 	.word	0x0000024f
 8008aec:	08012258 	.word	0x08012258
 8008af0:	00000263 	.word	0x00000263
		if (motion_duration > 10*1000)
 8008af4:	46c0      	nop			; (mov r8, r8)
	}

	// Calculate loop execution duration and wait if not finished
	duration = (__HAL_TIM_GET_COUNTER(&htim16))*1000.0/clock;
 8008af6:	4b3d      	ldr	r3, [pc, #244]	; (8008bec <main+0x31e8>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7fa f9c1 	bl	8002e84 <__aeabi_ui2d>
 8008b02:	2200      	movs	r2, #0
 8008b04:	4b3a      	ldr	r3, [pc, #232]	; (8008bf0 <main+0x31ec>)
 8008b06:	f7f9 fb3b 	bl	8002180 <__aeabi_dmul>
 8008b0a:	0002      	movs	r2, r0
 8008b0c:	000b      	movs	r3, r1
 8008b0e:	0014      	movs	r4, r2
 8008b10:	001d      	movs	r5, r3
 8008b12:	2394      	movs	r3, #148	; 0x94
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	2208      	movs	r2, #8
 8008b18:	4694      	mov	ip, r2
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	4690      	mov	r8, r2
 8008b1e:	2208      	movs	r2, #8
 8008b20:	4691      	mov	r9, r2
 8008b22:	2208      	movs	r2, #8
 8008b24:	4692      	mov	sl, r2
 8008b26:	44ba      	add	sl, r7
 8008b28:	44d1      	add	r9, sl
 8008b2a:	44c8      	add	r8, r9
 8008b2c:	44c4      	add	ip, r8
 8008b2e:	4463      	add	r3, ip
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f7fa f9cd 	bl	8002ed0 <__aeabi_f2d>
 8008b36:	0002      	movs	r2, r0
 8008b38:	000b      	movs	r3, r1
 8008b3a:	0020      	movs	r0, r4
 8008b3c:	0029      	movs	r1, r5
 8008b3e:	f7f8 ff19 	bl	8001974 <__aeabi_ddiv>
 8008b42:	0002      	movs	r2, r0
 8008b44:	000b      	movs	r3, r1
 8008b46:	0010      	movs	r0, r2
 8008b48:	0019      	movs	r1, r3
 8008b4a:	f7fa fa09 	bl	8002f60 <__aeabi_d2f>
 8008b4e:	1c03      	adds	r3, r0, #0
 8008b50:	229d      	movs	r2, #157	; 0x9d
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	2508      	movs	r5, #8
 8008b56:	2108      	movs	r1, #8
 8008b58:	2008      	movs	r0, #8
 8008b5a:	4684      	mov	ip, r0
 8008b5c:	2008      	movs	r0, #8
 8008b5e:	4680      	mov	r8, r0
 8008b60:	44b8      	add	r8, r7
 8008b62:	44c4      	add	ip, r8
 8008b64:	4461      	add	r1, ip
 8008b66:	1949      	adds	r1, r1, r5
 8008b68:	1889      	adds	r1, r1, r2
 8008b6a:	600b      	str	r3, [r1, #0]
	duration_diff = SAMPLE_TIME_ICM - duration;
 8008b6c:	2308      	movs	r3, #8
 8008b6e:	2108      	movs	r1, #8
 8008b70:	468c      	mov	ip, r1
 8008b72:	2108      	movs	r1, #8
 8008b74:	4688      	mov	r8, r1
 8008b76:	44b8      	add	r8, r7
 8008b78:	44c4      	add	ip, r8
 8008b7a:	4463      	add	r3, ip
 8008b7c:	195b      	adds	r3, r3, r5
 8008b7e:	189b      	adds	r3, r3, r2
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	481c      	ldr	r0, [pc, #112]	; (8008bf4 <main+0x31f0>)
 8008b84:	f7f8 f95e 	bl	8000e44 <__aeabi_fsub>
 8008b88:	1c03      	adds	r3, r0, #0
 8008b8a:	2495      	movs	r4, #149	; 0x95
 8008b8c:	00a4      	lsls	r4, r4, #2
 8008b8e:	2208      	movs	r2, #8
 8008b90:	2108      	movs	r1, #8
 8008b92:	468c      	mov	ip, r1
 8008b94:	2108      	movs	r1, #8
 8008b96:	4688      	mov	r8, r1
 8008b98:	44b8      	add	r8, r7
 8008b9a:	44c4      	add	ip, r8
 8008b9c:	4462      	add	r2, ip
 8008b9e:	1952      	adds	r2, r2, r5
 8008ba0:	1912      	adds	r2, r2, r4
 8008ba2:	6013      	str	r3, [r2, #0]

	if(duration_diff > 0)
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	2208      	movs	r2, #8
 8008baa:	4694      	mov	ip, r2
 8008bac:	2208      	movs	r2, #8
 8008bae:	4690      	mov	r8, r2
 8008bb0:	44b8      	add	r8, r7
 8008bb2:	44c4      	add	ip, r8
 8008bb4:	4463      	add	r3, ip
 8008bb6:	195b      	adds	r3, r3, r5
 8008bb8:	191b      	adds	r3, r3, r4
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	f7f7 fc96 	bl	80004ec <__aeabi_fcmpgt>
 8008bc0:	1e03      	subs	r3, r0, #0
 8008bc2:	d010      	beq.n	8008be6 <main+0x31e2>
	{
	  HAL_Delay(duration_diff);
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	2208      	movs	r2, #8
 8008bc8:	4694      	mov	ip, r2
 8008bca:	2208      	movs	r2, #8
 8008bcc:	4690      	mov	r8, r2
 8008bce:	44b8      	add	r8, r7
 8008bd0:	44c4      	add	ip, r8
 8008bd2:	4463      	add	r3, ip
 8008bd4:	195b      	adds	r3, r3, r5
 8008bd6:	191b      	adds	r3, r3, r4
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	f7f7 fc9b 	bl	8000514 <__aeabi_f2uiz>
 8008bde:	0003      	movs	r3, r0
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 fdb5 	bl	8009750 <HAL_Delay>
	__HAL_TIM_SET_COUNTER(&htim16,0);
 8008be6:	f7fd fe9d 	bl	8006924 <main+0xf20>
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	20000578 	.word	0x20000578
 8008bf0:	408f4000 	.word	0x408f4000
 8008bf4:	41f00000 	.word	0x41f00000

08008bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b093      	sub	sp, #76	; 0x4c
 8008bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008bfe:	2414      	movs	r4, #20
 8008c00:	193b      	adds	r3, r7, r4
 8008c02:	0018      	movs	r0, r3
 8008c04:	2334      	movs	r3, #52	; 0x34
 8008c06:	001a      	movs	r2, r3
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f003 fe9f 	bl	800c94c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c0e:	1d3b      	adds	r3, r7, #4
 8008c10:	0018      	movs	r0, r3
 8008c12:	2310      	movs	r3, #16
 8008c14:	001a      	movs	r2, r3
 8008c16:	2100      	movs	r1, #0
 8008c18:	f003 fe98 	bl	800c94c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	0018      	movs	r0, r3
 8008c22:	f001 f933 	bl	8009e8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008c26:	193b      	adds	r3, r7, r4
 8008c28:	220a      	movs	r2, #10
 8008c2a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c2c:	193b      	adds	r3, r7, r4
 8008c2e:	2280      	movs	r2, #128	; 0x80
 8008c30:	0052      	lsls	r2, r2, #1
 8008c32:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8008c34:	0021      	movs	r1, r4
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	2200      	movs	r2, #0
 8008c3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008c3c:	187b      	adds	r3, r7, r1
 8008c3e:	2240      	movs	r2, #64	; 0x40
 8008c40:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008c42:	187b      	adds	r3, r7, r1
 8008c44:	2201      	movs	r2, #1
 8008c46:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008c48:	187b      	adds	r3, r7, r1
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c4e:	187b      	adds	r3, r7, r1
 8008c50:	0018      	movs	r0, r3
 8008c52:	f001 f967 	bl	8009f24 <HAL_RCC_OscConfig>
 8008c56:	1e03      	subs	r3, r0, #0
 8008c58:	d001      	beq.n	8008c5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8008c5a:	f000 f9f9 	bl	8009050 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c5e:	1d3b      	adds	r3, r7, #4
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008c64:	1d3b      	adds	r3, r7, #4
 8008c66:	2200      	movs	r2, #0
 8008c68:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	2200      	movs	r2, #0
 8008c74:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008c76:	1d3b      	adds	r3, r7, #4
 8008c78:	2100      	movs	r1, #0
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f001 fc68 	bl	800a550 <HAL_RCC_ClockConfig>
 8008c80:	1e03      	subs	r3, r0, #0
 8008c82:	d001      	beq.n	8008c88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8008c84:	f000 f9e4 	bl	8009050 <Error_Handler>
  }
}
 8008c88:	46c0      	nop			; (mov r8, r8)
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	b013      	add	sp, #76	; 0x4c
 8008c8e:	bd90      	pop	{r4, r7, pc}

08008c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008c94:	4b1b      	ldr	r3, [pc, #108]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008c96:	4a1c      	ldr	r2, [pc, #112]	; (8008d08 <MX_I2C1_Init+0x78>)
 8008c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8008c9a:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008c9c:	4a1b      	ldr	r2, [pc, #108]	; (8008d0c <MX_I2C1_Init+0x7c>)
 8008c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008ca0:	4b18      	ldr	r3, [pc, #96]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008ca6:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008ca8:	2201      	movs	r2, #1
 8008caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008cac:	4b15      	ldr	r3, [pc, #84]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008cb2:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008cb8:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f000 ffaf 	bl	8009c30 <HAL_I2C_Init>
 8008cd2:	1e03      	subs	r3, r0, #0
 8008cd4:	d001      	beq.n	8008cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008cd6:	f000 f9bb 	bl	8009050 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cdc:	2100      	movs	r1, #0
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f001 f83c 	bl	8009d5c <HAL_I2CEx_ConfigAnalogFilter>
 8008ce4:	1e03      	subs	r3, r0, #0
 8008ce6:	d001      	beq.n	8008cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008ce8:	f000 f9b2 	bl	8009050 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008cec:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <MX_I2C1_Init+0x74>)
 8008cee:	2100      	movs	r1, #0
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f001 f87f 	bl	8009df4 <HAL_I2CEx_ConfigDigitalFilter>
 8008cf6:	1e03      	subs	r3, r0, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008cfa:	f000 f9a9 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	2000040c 	.word	0x2000040c
 8008d08:	40005400 	.word	0x40005400
 8008d0c:	00303d5b 	.word	0x00303d5b

08008d10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d16:	4a14      	ldr	r2, [pc, #80]	; (8008d68 <MX_RTC_Init+0x58>)
 8008d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8008d20:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d22:	227f      	movs	r2, #127	; 0x7f
 8008d24:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8008d26:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d28:	22ff      	movs	r2, #255	; 0xff
 8008d2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008d2c:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d40:	2280      	movs	r2, #128	; 0x80
 8008d42:	05d2      	lsls	r2, r2, #23
 8008d44:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <MX_RTC_Init+0x54>)
 8008d4e:	0018      	movs	r0, r3
 8008d50:	f001 fedc 	bl	800ab0c <HAL_RTC_Init>
 8008d54:	1e03      	subs	r3, r0, #0
 8008d56:	d001      	beq.n	8008d5c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8008d58:	f000 f97a 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008d5c:	46c0      	nop			; (mov r8, r8)
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	46c0      	nop			; (mov r8, r8)
 8008d64:	20000458 	.word	0x20000458
 8008d68:	40002800 	.word	0x40002800

08008d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d72:	4a1c      	ldr	r2, [pc, #112]	; (8008de4 <MX_SPI1_Init+0x78>)
 8008d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008d76:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d78:	2282      	movs	r2, #130	; 0x82
 8008d7a:	0052      	lsls	r2, r2, #1
 8008d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008d7e:	4b18      	ldr	r3, [pc, #96]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d84:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d86:	22e0      	movs	r2, #224	; 0xe0
 8008d88:	00d2      	lsls	r2, r2, #3
 8008d8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d8c:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d92:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	0092      	lsls	r2, r2, #2
 8008d9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008da0:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008da6:	4b0e      	ldr	r3, [pc, #56]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008dac:	4b0c      	ldr	r3, [pc, #48]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008db2:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008dba:	2207      	movs	r2, #7
 8008dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008dc6:	2208      	movs	r2, #8
 8008dc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <MX_SPI1_Init+0x74>)
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f001 ffe1 	bl	800ad94 <HAL_SPI_Init>
 8008dd2:	1e03      	subs	r3, r0, #0
 8008dd4:	d001      	beq.n	8008dda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8008dd6:	f000 f93b 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000484 	.word	0x20000484
 8008de4:	40013000 	.word	0x40013000

08008de8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008dec:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008dee:	4a1c      	ldr	r2, [pc, #112]	; (8008e60 <MX_SPI2_Init+0x78>)
 8008df0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008df2:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008df4:	2282      	movs	r2, #130	; 0x82
 8008df6:	0052      	lsls	r2, r2, #1
 8008df8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008dfa:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e00:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e02:	22e0      	movs	r2, #224	; 0xe0
 8008e04:	00d2      	lsls	r2, r2, #3
 8008e06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e08:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008e14:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e16:	2280      	movs	r2, #128	; 0x80
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e1e:	2200      	movs	r2, #0
 8008e20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e22:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e28:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e36:	2207      	movs	r2, #7
 8008e38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008e3a:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e42:	2208      	movs	r2, #8
 8008e44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <MX_SPI2_Init+0x74>)
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f001 ffa3 	bl	800ad94 <HAL_SPI_Init>
 8008e4e:	1e03      	subs	r3, r0, #0
 8008e50:	d001      	beq.n	8008e56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8008e52:	f000 f8fd 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200003a8 	.word	0x200003a8
 8008e60:	40003800 	.word	0x40003800

08008e64 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e6a:	4a10      	ldr	r2, [pc, #64]	; (8008eac <MX_TIM16_Init+0x48>)
 8008e6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16;
 8008e6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e70:	2210      	movs	r2, #16
 8008e72:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008e7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e7c:	4a0c      	ldr	r2, [pc, #48]	; (8008eb0 <MX_TIM16_Init+0x4c>)
 8008e7e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e80:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008e86:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008e92:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <MX_TIM16_Init+0x44>)
 8008e94:	0018      	movs	r0, r3
 8008e96:	f002 fe8b 	bl	800bbb0 <HAL_TIM_Base_Init>
 8008e9a:	1e03      	subs	r3, r0, #0
 8008e9c:	d001      	beq.n	8008ea2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8008e9e:	f000 f8d7 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000578 	.word	0x20000578
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	0000ffff 	.word	0x0000ffff

08008eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008eb8:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008eba:	4a24      	ldr	r2, [pc, #144]	; (8008f4c <MX_USART2_UART_Init+0x98>)
 8008ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008ebe:	4b22      	ldr	r3, [pc, #136]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ec0:	22e1      	movs	r2, #225	; 0xe1
 8008ec2:	0252      	lsls	r2, r2, #9
 8008ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008ec6:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008ed8:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008eda:	220c      	movs	r2, #12
 8008edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ede:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ee4:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008eea:	4b17      	ldr	r3, [pc, #92]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008ef0:	4b15      	ldr	r3, [pc, #84]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008efc:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008efe:	0018      	movs	r0, r3
 8008f00:	f002 ff72 	bl	800bde8 <HAL_UART_Init>
 8008f04:	1e03      	subs	r3, r0, #0
 8008f06:	d001      	beq.n	8008f0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008f08:	f000 f8a2 	bl	8009050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f0c:	4b0e      	ldr	r3, [pc, #56]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008f0e:	2100      	movs	r1, #0
 8008f10:	0018      	movs	r0, r3
 8008f12:	f003 fc11 	bl	800c738 <HAL_UARTEx_SetTxFifoThreshold>
 8008f16:	1e03      	subs	r3, r0, #0
 8008f18:	d001      	beq.n	8008f1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008f1a:	f000 f899 	bl	8009050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008f20:	2100      	movs	r1, #0
 8008f22:	0018      	movs	r0, r3
 8008f24:	f003 fc48 	bl	800c7b8 <HAL_UARTEx_SetRxFifoThreshold>
 8008f28:	1e03      	subs	r3, r0, #0
 8008f2a:	d001      	beq.n	8008f30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008f2c:	f000 f890 	bl	8009050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <MX_USART2_UART_Init+0x94>)
 8008f32:	0018      	movs	r0, r3
 8008f34:	f003 fbc6 	bl	800c6c4 <HAL_UARTEx_DisableFifoMode>
 8008f38:	1e03      	subs	r3, r0, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008f3c:	f000 f888 	bl	8009050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008f40:	46c0      	nop			; (mov r8, r8)
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	200004e8 	.word	0x200004e8
 8008f4c:	40004400 	.word	0x40004400

08008f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b089      	sub	sp, #36	; 0x24
 8008f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f56:	240c      	movs	r4, #12
 8008f58:	193b      	adds	r3, r7, r4
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	2314      	movs	r3, #20
 8008f5e:	001a      	movs	r2, r3
 8008f60:	2100      	movs	r1, #0
 8008f62:	f003 fcf3 	bl	800c94c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f66:	4b37      	ldr	r3, [pc, #220]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f6a:	4b36      	ldr	r3, [pc, #216]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f6c:	2104      	movs	r1, #4
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	635a      	str	r2, [r3, #52]	; 0x34
 8008f72:	4b34      	ldr	r3, [pc, #208]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f76:	2204      	movs	r2, #4
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60bb      	str	r3, [r7, #8]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f7e:	4b31      	ldr	r3, [pc, #196]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f82:	4b30      	ldr	r3, [pc, #192]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f84:	2101      	movs	r1, #1
 8008f86:	430a      	orrs	r2, r1
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34
 8008f8a:	4b2e      	ldr	r3, [pc, #184]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4013      	ands	r3, r2
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f96:	4b2b      	ldr	r3, [pc, #172]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f9a:	4b2a      	ldr	r3, [pc, #168]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008f9c:	2102      	movs	r1, #2
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fa2:	4b28      	ldr	r3, [pc, #160]	; (8009044 <MX_GPIO_Init+0xf4>)
 8008fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	4013      	ands	r3, r2
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	015b      	lsls	r3, r3, #5
 8008fb2:	4825      	ldr	r0, [pc, #148]	; (8009048 <MX_GPIO_Init+0xf8>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	f000 fe1c 	bl	8009bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4822      	ldr	r0, [pc, #136]	; (800904c <MX_GPIO_Init+0xfc>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	f000 fe15 	bl	8009bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008fca:	193b      	adds	r3, r7, r4
 8008fcc:	2280      	movs	r2, #128	; 0x80
 8008fce:	0192      	lsls	r2, r2, #6
 8008fd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fd2:	193b      	adds	r3, r7, r4
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd8:	193b      	adds	r3, r7, r4
 8008fda:	2200      	movs	r2, #0
 8008fdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fde:	193b      	adds	r3, r7, r4
 8008fe0:	4a1a      	ldr	r2, [pc, #104]	; (800904c <MX_GPIO_Init+0xfc>)
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	0010      	movs	r0, r2
 8008fe6:	f000 fca1 	bl	800992c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008fea:	0021      	movs	r1, r4
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	2280      	movs	r2, #128	; 0x80
 8008ff0:	0152      	lsls	r2, r2, #5
 8008ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ff4:	000c      	movs	r4, r1
 8008ff6:	193b      	adds	r3, r7, r4
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffc:	193b      	adds	r3, r7, r4
 8008ffe:	2200      	movs	r2, #0
 8009000:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009002:	193b      	adds	r3, r7, r4
 8009004:	2200      	movs	r2, #0
 8009006:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009008:	193b      	adds	r3, r7, r4
 800900a:	4a0f      	ldr	r2, [pc, #60]	; (8009048 <MX_GPIO_Init+0xf8>)
 800900c:	0019      	movs	r1, r3
 800900e:	0010      	movs	r0, r2
 8009010:	f000 fc8c 	bl	800992c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009014:	0021      	movs	r1, r4
 8009016:	187b      	adds	r3, r7, r1
 8009018:	2280      	movs	r2, #128	; 0x80
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800901e:	187b      	adds	r3, r7, r1
 8009020:	2201      	movs	r2, #1
 8009022:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009024:	187b      	adds	r3, r7, r1
 8009026:	2200      	movs	r2, #0
 8009028:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800902a:	187b      	adds	r3, r7, r1
 800902c:	2200      	movs	r2, #0
 800902e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009030:	187b      	adds	r3, r7, r1
 8009032:	4a06      	ldr	r2, [pc, #24]	; (800904c <MX_GPIO_Init+0xfc>)
 8009034:	0019      	movs	r1, r3
 8009036:	0010      	movs	r0, r2
 8009038:	f000 fc78 	bl	800992c <HAL_GPIO_Init>

}
 800903c:	46c0      	nop			; (mov r8, r8)
 800903e:	46bd      	mov	sp, r7
 8009040:	b009      	add	sp, #36	; 0x24
 8009042:	bd90      	pop	{r4, r7, pc}
 8009044:	40021000 	.word	0x40021000
 8009048:	50000400 	.word	0x50000400
 800904c:	50000800 	.word	0x50000800

08009050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009054:	b672      	cpsid	i
}
 8009056:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8009058:	e7fe      	b.n	8009058 <Error_Handler+0x8>
	...

0800905c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <HAL_MspInit+0x4c>)
 8009064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <HAL_MspInit+0x4c>)
 8009068:	2101      	movs	r1, #1
 800906a:	430a      	orrs	r2, r1
 800906c:	641a      	str	r2, [r3, #64]	; 0x40
 800906e:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <HAL_MspInit+0x4c>)
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	2201      	movs	r2, #1
 8009074:	4013      	ands	r3, r2
 8009076:	607b      	str	r3, [r7, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800907a:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <HAL_MspInit+0x4c>)
 800907c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <HAL_MspInit+0x4c>)
 8009080:	2180      	movs	r1, #128	; 0x80
 8009082:	0549      	lsls	r1, r1, #21
 8009084:	430a      	orrs	r2, r1
 8009086:	63da      	str	r2, [r3, #60]	; 0x3c
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <HAL_MspInit+0x4c>)
 800908a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	055b      	lsls	r3, r3, #21
 8009090:	4013      	ands	r3, r2
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8009096:	23c0      	movs	r3, #192	; 0xc0
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	0018      	movs	r0, r3
 800909c:	f000 fb7c 	bl	8009798 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090a0:	46c0      	nop			; (mov r8, r8)
 80090a2:	46bd      	mov	sp, r7
 80090a4:	b002      	add	sp, #8
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40021000 	.word	0x40021000

080090ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b091      	sub	sp, #68	; 0x44
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b4:	232c      	movs	r3, #44	; 0x2c
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	0018      	movs	r0, r3
 80090ba:	2314      	movs	r3, #20
 80090bc:	001a      	movs	r2, r3
 80090be:	2100      	movs	r1, #0
 80090c0:	f003 fc44 	bl	800c94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80090c4:	2410      	movs	r4, #16
 80090c6:	193b      	adds	r3, r7, r4
 80090c8:	0018      	movs	r0, r3
 80090ca:	231c      	movs	r3, #28
 80090cc:	001a      	movs	r2, r3
 80090ce:	2100      	movs	r1, #0
 80090d0:	f003 fc3c 	bl	800c94c <memset>
  if(hi2c->Instance==I2C1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a23      	ldr	r2, [pc, #140]	; (8009168 <HAL_I2C_MspInit+0xbc>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d13f      	bne.n	800915e <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80090de:	193b      	adds	r3, r7, r4
 80090e0:	2220      	movs	r2, #32
 80090e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80090e4:	193b      	adds	r3, r7, r4
 80090e6:	2200      	movs	r2, #0
 80090e8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80090ea:	193b      	adds	r3, r7, r4
 80090ec:	0018      	movs	r0, r3
 80090ee:	f001 fbd9 	bl	800a8a4 <HAL_RCCEx_PeriphCLKConfig>
 80090f2:	1e03      	subs	r3, r0, #0
 80090f4:	d001      	beq.n	80090fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80090f6:	f7ff ffab 	bl	8009050 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fa:	4b1c      	ldr	r3, [pc, #112]	; (800916c <HAL_I2C_MspInit+0xc0>)
 80090fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fe:	4b1b      	ldr	r3, [pc, #108]	; (800916c <HAL_I2C_MspInit+0xc0>)
 8009100:	2101      	movs	r1, #1
 8009102:	430a      	orrs	r2, r1
 8009104:	635a      	str	r2, [r3, #52]	; 0x34
 8009106:	4b19      	ldr	r3, [pc, #100]	; (800916c <HAL_I2C_MspInit+0xc0>)
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	2201      	movs	r2, #1
 800910c:	4013      	ands	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009112:	212c      	movs	r1, #44	; 0x2c
 8009114:	187b      	adds	r3, r7, r1
 8009116:	22c0      	movs	r2, #192	; 0xc0
 8009118:	00d2      	lsls	r2, r2, #3
 800911a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800911c:	187b      	adds	r3, r7, r1
 800911e:	2212      	movs	r2, #18
 8009120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009122:	187b      	adds	r3, r7, r1
 8009124:	2200      	movs	r2, #0
 8009126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009128:	187b      	adds	r3, r7, r1
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800912e:	187b      	adds	r3, r7, r1
 8009130:	2206      	movs	r2, #6
 8009132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009134:	187a      	adds	r2, r7, r1
 8009136:	23a0      	movs	r3, #160	; 0xa0
 8009138:	05db      	lsls	r3, r3, #23
 800913a:	0011      	movs	r1, r2
 800913c:	0018      	movs	r0, r3
 800913e:	f000 fbf5 	bl	800992c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009142:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_I2C_MspInit+0xc0>)
 8009144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_I2C_MspInit+0xc0>)
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	0389      	lsls	r1, r1, #14
 800914c:	430a      	orrs	r2, r1
 800914e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <HAL_I2C_MspInit+0xc0>)
 8009152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009154:	2380      	movs	r3, #128	; 0x80
 8009156:	039b      	lsls	r3, r3, #14
 8009158:	4013      	ands	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]
 800915c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	46bd      	mov	sp, r7
 8009162:	b011      	add	sp, #68	; 0x44
 8009164:	bd90      	pop	{r4, r7, pc}
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	40005400 	.word	0x40005400
 800916c:	40021000 	.word	0x40021000

08009170 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b08b      	sub	sp, #44	; 0x2c
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009178:	240c      	movs	r4, #12
 800917a:	193b      	adds	r3, r7, r4
 800917c:	0018      	movs	r0, r3
 800917e:	231c      	movs	r3, #28
 8009180:	001a      	movs	r2, r3
 8009182:	2100      	movs	r1, #0
 8009184:	f003 fbe2 	bl	800c94c <memset>
  if(hrtc->Instance==RTC)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <HAL_RTC_MspInit+0x74>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d124      	bne.n	80091dc <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009192:	193b      	adds	r3, r7, r4
 8009194:	2280      	movs	r2, #128	; 0x80
 8009196:	0292      	lsls	r2, r2, #10
 8009198:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800919a:	193b      	adds	r3, r7, r4
 800919c:	2280      	movs	r2, #128	; 0x80
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80091a2:	193b      	adds	r3, r7, r4
 80091a4:	0018      	movs	r0, r3
 80091a6:	f001 fb7d 	bl	800a8a4 <HAL_RCCEx_PeriphCLKConfig>
 80091aa:	1e03      	subs	r3, r0, #0
 80091ac:	d001      	beq.n	80091b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80091ae:	f7ff ff4f 	bl	8009050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80091b2:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <HAL_RTC_MspInit+0x78>)
 80091b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <HAL_RTC_MspInit+0x78>)
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	0209      	lsls	r1, r1, #8
 80091bc:	430a      	orrs	r2, r1
 80091be:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <HAL_RTC_MspInit+0x78>)
 80091c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091c4:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <HAL_RTC_MspInit+0x78>)
 80091c6:	2180      	movs	r1, #128	; 0x80
 80091c8:	00c9      	lsls	r1, r1, #3
 80091ca:	430a      	orrs	r2, r1
 80091cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <HAL_RTC_MspInit+0x78>)
 80091d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d2:	2380      	movs	r3, #128	; 0x80
 80091d4:	00db      	lsls	r3, r3, #3
 80091d6:	4013      	ands	r3, r2
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	b00b      	add	sp, #44	; 0x2c
 80091e2:	bd90      	pop	{r4, r7, pc}
 80091e4:	40002800 	.word	0x40002800
 80091e8:	40021000 	.word	0x40021000

080091ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b08d      	sub	sp, #52	; 0x34
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f4:	241c      	movs	r4, #28
 80091f6:	193b      	adds	r3, r7, r4
 80091f8:	0018      	movs	r0, r3
 80091fa:	2314      	movs	r3, #20
 80091fc:	001a      	movs	r2, r3
 80091fe:	2100      	movs	r1, #0
 8009200:	f003 fba4 	bl	800c94c <memset>
  if(hspi->Instance==SPI1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a48      	ldr	r2, [pc, #288]	; (800932c <HAL_SPI_MspInit+0x140>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d131      	bne.n	8009272 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800920e:	4b48      	ldr	r3, [pc, #288]	; (8009330 <HAL_SPI_MspInit+0x144>)
 8009210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009212:	4b47      	ldr	r3, [pc, #284]	; (8009330 <HAL_SPI_MspInit+0x144>)
 8009214:	2180      	movs	r1, #128	; 0x80
 8009216:	0149      	lsls	r1, r1, #5
 8009218:	430a      	orrs	r2, r1
 800921a:	641a      	str	r2, [r3, #64]	; 0x40
 800921c:	4b44      	ldr	r3, [pc, #272]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800921e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009220:	2380      	movs	r3, #128	; 0x80
 8009222:	015b      	lsls	r3, r3, #5
 8009224:	4013      	ands	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
 8009228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800922a:	4b41      	ldr	r3, [pc, #260]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800922c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922e:	4b40      	ldr	r3, [pc, #256]	; (8009330 <HAL_SPI_MspInit+0x144>)
 8009230:	2101      	movs	r1, #1
 8009232:	430a      	orrs	r2, r1
 8009234:	635a      	str	r2, [r3, #52]	; 0x34
 8009236:	4b3e      	ldr	r3, [pc, #248]	; (8009330 <HAL_SPI_MspInit+0x144>)
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	2201      	movs	r2, #1
 800923c:	4013      	ands	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009242:	0021      	movs	r1, r4
 8009244:	187b      	adds	r3, r7, r1
 8009246:	22e0      	movs	r2, #224	; 0xe0
 8009248:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800924a:	187b      	adds	r3, r7, r1
 800924c:	2202      	movs	r2, #2
 800924e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009250:	187b      	adds	r3, r7, r1
 8009252:	2200      	movs	r2, #0
 8009254:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009256:	187b      	adds	r3, r7, r1
 8009258:	2200      	movs	r2, #0
 800925a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800925c:	187b      	adds	r3, r7, r1
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009262:	187a      	adds	r2, r7, r1
 8009264:	23a0      	movs	r3, #160	; 0xa0
 8009266:	05db      	lsls	r3, r3, #23
 8009268:	0011      	movs	r1, r2
 800926a:	0018      	movs	r0, r3
 800926c:	f000 fb5e 	bl	800992c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009270:	e057      	b.n	8009322 <HAL_SPI_MspInit+0x136>
  else if(hspi->Instance==SPI2)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a2f      	ldr	r2, [pc, #188]	; (8009334 <HAL_SPI_MspInit+0x148>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d152      	bne.n	8009322 <HAL_SPI_MspInit+0x136>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800927c:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800927e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009280:	4b2b      	ldr	r3, [pc, #172]	; (8009330 <HAL_SPI_MspInit+0x144>)
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	01c9      	lsls	r1, r1, #7
 8009286:	430a      	orrs	r2, r1
 8009288:	63da      	str	r2, [r3, #60]	; 0x3c
 800928a:	4b29      	ldr	r3, [pc, #164]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800928c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800928e:	2380      	movs	r3, #128	; 0x80
 8009290:	01db      	lsls	r3, r3, #7
 8009292:	4013      	ands	r3, r2
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800929a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800929c:	4b24      	ldr	r3, [pc, #144]	; (8009330 <HAL_SPI_MspInit+0x144>)
 800929e:	2104      	movs	r1, #4
 80092a0:	430a      	orrs	r2, r1
 80092a2:	635a      	str	r2, [r3, #52]	; 0x34
 80092a4:	4b22      	ldr	r3, [pc, #136]	; (8009330 <HAL_SPI_MspInit+0x144>)
 80092a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a8:	2204      	movs	r2, #4
 80092aa:	4013      	ands	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b0:	4b1f      	ldr	r3, [pc, #124]	; (8009330 <HAL_SPI_MspInit+0x144>)
 80092b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092b4:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <HAL_SPI_MspInit+0x144>)
 80092b6:	2101      	movs	r1, #1
 80092b8:	430a      	orrs	r2, r1
 80092ba:	635a      	str	r2, [r3, #52]	; 0x34
 80092bc:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <HAL_SPI_MspInit+0x144>)
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	2201      	movs	r2, #1
 80092c2:	4013      	ands	r3, r2
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80092c8:	241c      	movs	r4, #28
 80092ca:	193b      	adds	r3, r7, r4
 80092cc:	220c      	movs	r2, #12
 80092ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d0:	193b      	adds	r3, r7, r4
 80092d2:	2202      	movs	r2, #2
 80092d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d6:	193b      	adds	r3, r7, r4
 80092d8:	2200      	movs	r2, #0
 80092da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092dc:	193b      	adds	r3, r7, r4
 80092de:	2200      	movs	r2, #0
 80092e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80092e2:	193b      	adds	r3, r7, r4
 80092e4:	2201      	movs	r2, #1
 80092e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092e8:	193b      	adds	r3, r7, r4
 80092ea:	4a13      	ldr	r2, [pc, #76]	; (8009338 <HAL_SPI_MspInit+0x14c>)
 80092ec:	0019      	movs	r1, r3
 80092ee:	0010      	movs	r0, r2
 80092f0:	f000 fb1c 	bl	800992c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80092f4:	0021      	movs	r1, r4
 80092f6:	187b      	adds	r3, r7, r1
 80092f8:	2201      	movs	r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fc:	187b      	adds	r3, r7, r1
 80092fe:	2202      	movs	r2, #2
 8009300:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009302:	187b      	adds	r3, r7, r1
 8009304:	2200      	movs	r2, #0
 8009306:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009308:	187b      	adds	r3, r7, r1
 800930a:	2200      	movs	r2, #0
 800930c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800930e:	187b      	adds	r3, r7, r1
 8009310:	2200      	movs	r2, #0
 8009312:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009314:	187a      	adds	r2, r7, r1
 8009316:	23a0      	movs	r3, #160	; 0xa0
 8009318:	05db      	lsls	r3, r3, #23
 800931a:	0011      	movs	r1, r2
 800931c:	0018      	movs	r0, r3
 800931e:	f000 fb05 	bl	800992c <HAL_GPIO_Init>
}
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	46bd      	mov	sp, r7
 8009326:	b00d      	add	sp, #52	; 0x34
 8009328:	bd90      	pop	{r4, r7, pc}
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	40013000 	.word	0x40013000
 8009330:	40021000 	.word	0x40021000
 8009334:	40003800 	.word	0x40003800
 8009338:	50000800 	.word	0x50000800

0800933c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <HAL_TIM_Base_MspInit+0x38>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d10d      	bne.n	800936a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800934e:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <HAL_TIM_Base_MspInit+0x3c>)
 8009350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <HAL_TIM_Base_MspInit+0x3c>)
 8009354:	2180      	movs	r1, #128	; 0x80
 8009356:	0289      	lsls	r1, r1, #10
 8009358:	430a      	orrs	r2, r1
 800935a:	641a      	str	r2, [r3, #64]	; 0x40
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <HAL_TIM_Base_MspInit+0x3c>)
 800935e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	029b      	lsls	r3, r3, #10
 8009364:	4013      	ands	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800936a:	46c0      	nop			; (mov r8, r8)
 800936c:	46bd      	mov	sp, r7
 800936e:	b004      	add	sp, #16
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	40014400 	.word	0x40014400
 8009378:	40021000 	.word	0x40021000

0800937c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800937c:	b590      	push	{r4, r7, lr}
 800937e:	b091      	sub	sp, #68	; 0x44
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009384:	232c      	movs	r3, #44	; 0x2c
 8009386:	18fb      	adds	r3, r7, r3
 8009388:	0018      	movs	r0, r3
 800938a:	2314      	movs	r3, #20
 800938c:	001a      	movs	r2, r3
 800938e:	2100      	movs	r1, #0
 8009390:	f003 fadc 	bl	800c94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009394:	2410      	movs	r4, #16
 8009396:	193b      	adds	r3, r7, r4
 8009398:	0018      	movs	r0, r3
 800939a:	231c      	movs	r3, #28
 800939c:	001a      	movs	r2, r3
 800939e:	2100      	movs	r1, #0
 80093a0:	f003 fad4 	bl	800c94c <memset>
  if(huart->Instance==USART2)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <HAL_UART_MspInit+0xb8>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d13e      	bne.n	800942c <HAL_UART_MspInit+0xb0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80093ae:	193b      	adds	r3, r7, r4
 80093b0:	2202      	movs	r2, #2
 80093b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80093b4:	193b      	adds	r3, r7, r4
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80093ba:	193b      	adds	r3, r7, r4
 80093bc:	0018      	movs	r0, r3
 80093be:	f001 fa71 	bl	800a8a4 <HAL_RCCEx_PeriphCLKConfig>
 80093c2:	1e03      	subs	r3, r0, #0
 80093c4:	d001      	beq.n	80093ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80093c6:	f7ff fe43 	bl	8009050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80093ca:	4b1b      	ldr	r3, [pc, #108]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093ce:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093d0:	2180      	movs	r1, #128	; 0x80
 80093d2:	0289      	lsls	r1, r1, #10
 80093d4:	430a      	orrs	r2, r1
 80093d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80093d8:	4b17      	ldr	r3, [pc, #92]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093dc:	2380      	movs	r3, #128	; 0x80
 80093de:	029b      	lsls	r3, r3, #10
 80093e0:	4013      	ands	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093e6:	4b14      	ldr	r3, [pc, #80]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093ec:	2101      	movs	r1, #1
 80093ee:	430a      	orrs	r2, r1
 80093f0:	635a      	str	r2, [r3, #52]	; 0x34
 80093f2:	4b11      	ldr	r3, [pc, #68]	; (8009438 <HAL_UART_MspInit+0xbc>)
 80093f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f6:	2201      	movs	r2, #1
 80093f8:	4013      	ands	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]
 80093fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80093fe:	212c      	movs	r1, #44	; 0x2c
 8009400:	187b      	adds	r3, r7, r1
 8009402:	220c      	movs	r2, #12
 8009404:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009406:	187b      	adds	r3, r7, r1
 8009408:	2202      	movs	r2, #2
 800940a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940c:	187b      	adds	r3, r7, r1
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009412:	187b      	adds	r3, r7, r1
 8009414:	2200      	movs	r2, #0
 8009416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8009418:	187b      	adds	r3, r7, r1
 800941a:	2201      	movs	r2, #1
 800941c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800941e:	187a      	adds	r2, r7, r1
 8009420:	23a0      	movs	r3, #160	; 0xa0
 8009422:	05db      	lsls	r3, r3, #23
 8009424:	0011      	movs	r1, r2
 8009426:	0018      	movs	r0, r3
 8009428:	f000 fa80 	bl	800992c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800942c:	46c0      	nop			; (mov r8, r8)
 800942e:	46bd      	mov	sp, r7
 8009430:	b011      	add	sp, #68	; 0x44
 8009432:	bd90      	pop	{r4, r7, pc}
 8009434:	40004400 	.word	0x40004400
 8009438:	40021000 	.word	0x40021000

0800943c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009440:	e7fe      	b.n	8009440 <NMI_Handler+0x4>

08009442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009446:	e7fe      	b.n	8009446 <HardFault_Handler+0x4>

08009448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800944c:	46c0      	nop			; (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009460:	f000 f95a 	bl	8009718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009464:	46c0      	nop			; (mov r8, r8)
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	af00      	add	r7, sp, #0
	return 1;
 800946e:	2301      	movs	r3, #1
}
 8009470:	0018      	movs	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <_kill>:

int _kill(int pid, int sig)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009480:	f003 fa3a 	bl	800c8f8 <__errno>
 8009484:	0003      	movs	r3, r0
 8009486:	2216      	movs	r2, #22
 8009488:	601a      	str	r2, [r3, #0]
	return -1;
 800948a:	2301      	movs	r3, #1
 800948c:	425b      	negs	r3, r3
}
 800948e:	0018      	movs	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	b002      	add	sp, #8
 8009494:	bd80      	pop	{r7, pc}

08009496 <_exit>:

void _exit (int status)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800949e:	2301      	movs	r3, #1
 80094a0:	425a      	negs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	0011      	movs	r1, r2
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7ff ffe5 	bl	8009476 <_kill>
	while (1) {}		/* Make sure we hang here */
 80094ac:	e7fe      	b.n	80094ac <_exit+0x16>

080094ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b086      	sub	sp, #24
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094ba:	2300      	movs	r3, #0
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	e00a      	b.n	80094d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80094c0:	e000      	b.n	80094c4 <_read+0x16>
 80094c2:	bf00      	nop
 80094c4:	0001      	movs	r1, r0
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	60ba      	str	r2, [r7, #8]
 80094cc:	b2ca      	uxtb	r2, r1
 80094ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	3301      	adds	r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	dbf0      	blt.n	80094c0 <_read+0x12>
	}

return len;
 80094de:	687b      	ldr	r3, [r7, #4]
}
 80094e0:	0018      	movs	r0, r3
 80094e2:	46bd      	mov	sp, r7
 80094e4:	b006      	add	sp, #24
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	e009      	b.n	800950e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	60ba      	str	r2, [r7, #8]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	0018      	movs	r0, r3
 8009504:	e000      	b.n	8009508 <_write+0x20>
 8009506:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3301      	adds	r3, #1
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	dbf1      	blt.n	80094fa <_write+0x12>
	}
	return len;
 8009516:	687b      	ldr	r3, [r7, #4]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b006      	add	sp, #24
 800951e:	bd80      	pop	{r7, pc}

08009520 <_close>:

int _close(int file)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	return -1;
 8009528:	2301      	movs	r3, #1
 800952a:	425b      	negs	r3, r3
}
 800952c:	0018      	movs	r0, r3
 800952e:	46bd      	mov	sp, r7
 8009530:	b002      	add	sp, #8
 8009532:	bd80      	pop	{r7, pc}

08009534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2280      	movs	r2, #128	; 0x80
 8009542:	0192      	lsls	r2, r2, #6
 8009544:	605a      	str	r2, [r3, #4]
	return 0;
 8009546:	2300      	movs	r3, #0
}
 8009548:	0018      	movs	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	b002      	add	sp, #8
 800954e:	bd80      	pop	{r7, pc}

08009550 <_isatty>:

int _isatty(int file)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
	return 1;
 8009558:	2301      	movs	r3, #1
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	b002      	add	sp, #8
 8009560:	bd80      	pop	{r7, pc}

08009562 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
	return 0;
 800956e:	2300      	movs	r3, #0
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b004      	add	sp, #16
 8009576:	bd80      	pop	{r7, pc}

08009578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009580:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <_sbrk+0x5c>)
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <_sbrk+0x60>)
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800958c:	4b13      	ldr	r3, [pc, #76]	; (80095dc <_sbrk+0x64>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009594:	4b11      	ldr	r3, [pc, #68]	; (80095dc <_sbrk+0x64>)
 8009596:	4a12      	ldr	r2, [pc, #72]	; (80095e0 <_sbrk+0x68>)
 8009598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <_sbrk+0x64>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	18d3      	adds	r3, r2, r3
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d207      	bcs.n	80095b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095a8:	f003 f9a6 	bl	800c8f8 <__errno>
 80095ac:	0003      	movs	r3, r0
 80095ae:	220c      	movs	r2, #12
 80095b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095b2:	2301      	movs	r3, #1
 80095b4:	425b      	negs	r3, r3
 80095b6:	e009      	b.n	80095cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <_sbrk+0x64>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095be:	4b07      	ldr	r3, [pc, #28]	; (80095dc <_sbrk+0x64>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	18d2      	adds	r2, r2, r3
 80095c6:	4b05      	ldr	r3, [pc, #20]	; (80095dc <_sbrk+0x64>)
 80095c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80095ca:	68fb      	ldr	r3, [r7, #12]
}
 80095cc:	0018      	movs	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	b006      	add	sp, #24
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20009000 	.word	0x20009000
 80095d8:	00000400 	.word	0x00000400
 80095dc:	20000200 	.word	0x20000200
 80095e0:	200005d8 	.word	0x200005d8

080095e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095e8:	46c0      	nop			; (mov r8, r8)
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80095f0:	480d      	ldr	r0, [pc, #52]	; (8009628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80095f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80095f4:	f7ff fff6 	bl	80095e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80095f8:	480c      	ldr	r0, [pc, #48]	; (800962c <LoopForever+0x6>)
  ldr r1, =_edata
 80095fa:	490d      	ldr	r1, [pc, #52]	; (8009630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80095fc:	4a0d      	ldr	r2, [pc, #52]	; (8009634 <LoopForever+0xe>)
  movs r3, #0
 80095fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009600:	e002      	b.n	8009608 <LoopCopyDataInit>

08009602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009606:	3304      	adds	r3, #4

08009608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800960a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800960c:	d3f9      	bcc.n	8009602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800960e:	4a0a      	ldr	r2, [pc, #40]	; (8009638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009610:	4c0a      	ldr	r4, [pc, #40]	; (800963c <LoopForever+0x16>)
  movs r3, #0
 8009612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009614:	e001      	b.n	800961a <LoopFillZerobss>

08009616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009618:	3204      	adds	r2, #4

0800961a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800961a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800961c:	d3fb      	bcc.n	8009616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800961e:	f003 f971 	bl	800c904 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8009622:	f7fc f9ef 	bl	8005a04 <main>

08009626 <LoopForever>:

LoopForever:
  b LoopForever
 8009626:	e7fe      	b.n	8009626 <LoopForever>
  ldr   r0, =_estack
 8009628:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800962c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009630:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8009634:	08012ae0 	.word	0x08012ae0
  ldr r2, =_sbss
 8009638:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800963c:	200005d8 	.word	0x200005d8

08009640 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009640:	e7fe      	b.n	8009640 <ADC1_IRQHandler>
	...

08009644 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800964a:	1dfb      	adds	r3, r7, #7
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <HAL_Init+0x3c>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <HAL_Init+0x3c>)
 8009656:	2180      	movs	r1, #128	; 0x80
 8009658:	0049      	lsls	r1, r1, #1
 800965a:	430a      	orrs	r2, r1
 800965c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800965e:	2003      	movs	r0, #3
 8009660:	f000 f810 	bl	8009684 <HAL_InitTick>
 8009664:	1e03      	subs	r3, r0, #0
 8009666:	d003      	beq.n	8009670 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009668:	1dfb      	adds	r3, r7, #7
 800966a:	2201      	movs	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	e001      	b.n	8009674 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009670:	f7ff fcf4 	bl	800905c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009674:	1dfb      	adds	r3, r7, #7
 8009676:	781b      	ldrb	r3, [r3, #0]
}
 8009678:	0018      	movs	r0, r3
 800967a:	46bd      	mov	sp, r7
 800967c:	b002      	add	sp, #8
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40022000 	.word	0x40022000

08009684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800968c:	230f      	movs	r3, #15
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	2200      	movs	r2, #0
 8009692:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8009694:	4b1d      	ldr	r3, [pc, #116]	; (800970c <HAL_InitTick+0x88>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d02b      	beq.n	80096f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800969c:	4b1c      	ldr	r3, [pc, #112]	; (8009710 <HAL_InitTick+0x8c>)
 800969e:	681c      	ldr	r4, [r3, #0]
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <HAL_InitTick+0x88>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	0019      	movs	r1, r3
 80096a6:	23fa      	movs	r3, #250	; 0xfa
 80096a8:	0098      	lsls	r0, r3, #2
 80096aa:	f7f6 fd45 	bl	8000138 <__udivsi3>
 80096ae:	0003      	movs	r3, r0
 80096b0:	0019      	movs	r1, r3
 80096b2:	0020      	movs	r0, r4
 80096b4:	f7f6 fd40 	bl	8000138 <__udivsi3>
 80096b8:	0003      	movs	r3, r0
 80096ba:	0018      	movs	r0, r3
 80096bc:	f000 f929 	bl	8009912 <HAL_SYSTICK_Config>
 80096c0:	1e03      	subs	r3, r0, #0
 80096c2:	d112      	bne.n	80096ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d80a      	bhi.n	80096e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	2301      	movs	r3, #1
 80096ce:	425b      	negs	r3, r3
 80096d0:	2200      	movs	r2, #0
 80096d2:	0018      	movs	r0, r3
 80096d4:	f000 f908 	bl	80098e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <HAL_InitTick+0x90>)
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e00d      	b.n	80096fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80096e0:	230f      	movs	r3, #15
 80096e2:	18fb      	adds	r3, r7, r3
 80096e4:	2201      	movs	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e008      	b.n	80096fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80096ea:	230f      	movs	r3, #15
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	2201      	movs	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
 80096f2:	e003      	b.n	80096fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80096f4:	230f      	movs	r3, #15
 80096f6:	18fb      	adds	r3, r7, r3
 80096f8:	2201      	movs	r2, #1
 80096fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80096fc:	230f      	movs	r3, #15
 80096fe:	18fb      	adds	r3, r7, r3
 8009700:	781b      	ldrb	r3, [r3, #0]
}
 8009702:	0018      	movs	r0, r3
 8009704:	46bd      	mov	sp, r7
 8009706:	b005      	add	sp, #20
 8009708:	bd90      	pop	{r4, r7, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	2000000c 	.word	0x2000000c
 8009710:	20000004 	.word	0x20000004
 8009714:	20000008 	.word	0x20000008

08009718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <HAL_IncTick+0x1c>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	001a      	movs	r2, r3
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <HAL_IncTick+0x20>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	18d2      	adds	r2, r2, r3
 8009728:	4b03      	ldr	r3, [pc, #12]	; (8009738 <HAL_IncTick+0x20>)
 800972a:	601a      	str	r2, [r3, #0]
}
 800972c:	46c0      	nop			; (mov r8, r8)
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	2000000c 	.word	0x2000000c
 8009738:	200005c4 	.word	0x200005c4

0800973c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  return uwTick;
 8009740:	4b02      	ldr	r3, [pc, #8]	; (800974c <HAL_GetTick+0x10>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			; (mov r8, r8)
 800974c:	200005c4 	.word	0x200005c4

08009750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009758:	f7ff fff0 	bl	800973c <HAL_GetTick>
 800975c:	0003      	movs	r3, r0
 800975e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	d005      	beq.n	8009776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <HAL_Delay+0x44>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	001a      	movs	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	189b      	adds	r3, r3, r2
 8009774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	f7ff ffe0 	bl	800973c <HAL_GetTick>
 800977c:	0002      	movs	r2, r0
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	429a      	cmp	r2, r3
 8009786:	d8f7      	bhi.n	8009778 <HAL_Delay+0x28>
  {
  }
}
 8009788:	46c0      	nop			; (mov r8, r8)
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	46bd      	mov	sp, r7
 800978e:	b004      	add	sp, #16
 8009790:	bd80      	pop	{r7, pc}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	2000000c 	.word	0x2000000c

08009798 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a06      	ldr	r2, [pc, #24]	; (80097c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	0019      	movs	r1, r3
 80097aa:	4b04      	ldr	r3, [pc, #16]	; (80097bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	601a      	str	r2, [r3, #0]
}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b002      	add	sp, #8
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	40010000 	.word	0x40010000
 80097c0:	fffff9ff 	.word	0xfffff9ff

080097c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	0002      	movs	r2, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	1dfb      	adds	r3, r7, #7
 80097d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80097d2:	1dfb      	adds	r3, r7, #7
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b7f      	cmp	r3, #127	; 0x7f
 80097d8:	d828      	bhi.n	800982c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097da:	4a2f      	ldr	r2, [pc, #188]	; (8009898 <__NVIC_SetPriority+0xd4>)
 80097dc:	1dfb      	adds	r3, r7, #7
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	b25b      	sxtb	r3, r3
 80097e2:	089b      	lsrs	r3, r3, #2
 80097e4:	33c0      	adds	r3, #192	; 0xc0
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	589b      	ldr	r3, [r3, r2]
 80097ea:	1dfa      	adds	r2, r7, #7
 80097ec:	7812      	ldrb	r2, [r2, #0]
 80097ee:	0011      	movs	r1, r2
 80097f0:	2203      	movs	r2, #3
 80097f2:	400a      	ands	r2, r1
 80097f4:	00d2      	lsls	r2, r2, #3
 80097f6:	21ff      	movs	r1, #255	; 0xff
 80097f8:	4091      	lsls	r1, r2
 80097fa:	000a      	movs	r2, r1
 80097fc:	43d2      	mvns	r2, r2
 80097fe:	401a      	ands	r2, r3
 8009800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	019b      	lsls	r3, r3, #6
 8009806:	22ff      	movs	r2, #255	; 0xff
 8009808:	401a      	ands	r2, r3
 800980a:	1dfb      	adds	r3, r7, #7
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	0018      	movs	r0, r3
 8009810:	2303      	movs	r3, #3
 8009812:	4003      	ands	r3, r0
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009818:	481f      	ldr	r0, [pc, #124]	; (8009898 <__NVIC_SetPriority+0xd4>)
 800981a:	1dfb      	adds	r3, r7, #7
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b25b      	sxtb	r3, r3
 8009820:	089b      	lsrs	r3, r3, #2
 8009822:	430a      	orrs	r2, r1
 8009824:	33c0      	adds	r3, #192	; 0xc0
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800982a:	e031      	b.n	8009890 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800982c:	4a1b      	ldr	r2, [pc, #108]	; (800989c <__NVIC_SetPriority+0xd8>)
 800982e:	1dfb      	adds	r3, r7, #7
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	0019      	movs	r1, r3
 8009834:	230f      	movs	r3, #15
 8009836:	400b      	ands	r3, r1
 8009838:	3b08      	subs	r3, #8
 800983a:	089b      	lsrs	r3, r3, #2
 800983c:	3306      	adds	r3, #6
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	18d3      	adds	r3, r2, r3
 8009842:	3304      	adds	r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1dfa      	adds	r2, r7, #7
 8009848:	7812      	ldrb	r2, [r2, #0]
 800984a:	0011      	movs	r1, r2
 800984c:	2203      	movs	r2, #3
 800984e:	400a      	ands	r2, r1
 8009850:	00d2      	lsls	r2, r2, #3
 8009852:	21ff      	movs	r1, #255	; 0xff
 8009854:	4091      	lsls	r1, r2
 8009856:	000a      	movs	r2, r1
 8009858:	43d2      	mvns	r2, r2
 800985a:	401a      	ands	r2, r3
 800985c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	019b      	lsls	r3, r3, #6
 8009862:	22ff      	movs	r2, #255	; 0xff
 8009864:	401a      	ands	r2, r3
 8009866:	1dfb      	adds	r3, r7, #7
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	0018      	movs	r0, r3
 800986c:	2303      	movs	r3, #3
 800986e:	4003      	ands	r3, r0
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009874:	4809      	ldr	r0, [pc, #36]	; (800989c <__NVIC_SetPriority+0xd8>)
 8009876:	1dfb      	adds	r3, r7, #7
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	001c      	movs	r4, r3
 800987c:	230f      	movs	r3, #15
 800987e:	4023      	ands	r3, r4
 8009880:	3b08      	subs	r3, #8
 8009882:	089b      	lsrs	r3, r3, #2
 8009884:	430a      	orrs	r2, r1
 8009886:	3306      	adds	r3, #6
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	18c3      	adds	r3, r0, r3
 800988c:	3304      	adds	r3, #4
 800988e:	601a      	str	r2, [r3, #0]
}
 8009890:	46c0      	nop			; (mov r8, r8)
 8009892:	46bd      	mov	sp, r7
 8009894:	b003      	add	sp, #12
 8009896:	bd90      	pop	{r4, r7, pc}
 8009898:	e000e100 	.word	0xe000e100
 800989c:	e000ed00 	.word	0xe000ed00

080098a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	1e5a      	subs	r2, r3, #1
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	045b      	lsls	r3, r3, #17
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d301      	bcc.n	80098b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098b4:	2301      	movs	r3, #1
 80098b6:	e010      	b.n	80098da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <SysTick_Config+0x44>)
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	3a01      	subs	r2, #1
 80098be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098c0:	2301      	movs	r3, #1
 80098c2:	425b      	negs	r3, r3
 80098c4:	2103      	movs	r1, #3
 80098c6:	0018      	movs	r0, r3
 80098c8:	f7ff ff7c 	bl	80097c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098cc:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <SysTick_Config+0x44>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <SysTick_Config+0x44>)
 80098d4:	2207      	movs	r2, #7
 80098d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098d8:	2300      	movs	r3, #0
}
 80098da:	0018      	movs	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	b002      	add	sp, #8
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	e000e010 	.word	0xe000e010

080098e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
 80098f2:	210f      	movs	r1, #15
 80098f4:	187b      	adds	r3, r7, r1
 80098f6:	1c02      	adds	r2, r0, #0
 80098f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	187b      	adds	r3, r7, r1
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b25b      	sxtb	r3, r3
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f7ff ff5d 	bl	80097c4 <__NVIC_SetPriority>
}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	46bd      	mov	sp, r7
 800990e:	b004      	add	sp, #16
 8009910:	bd80      	pop	{r7, pc}

08009912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0018      	movs	r0, r3
 800991e:	f7ff ffbf 	bl	80098a0 <SysTick_Config>
 8009922:	0003      	movs	r3, r0
}
 8009924:	0018      	movs	r0, r3
 8009926:	46bd      	mov	sp, r7
 8009928:	b002      	add	sp, #8
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800993a:	e147      	b.n	8009bcc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2101      	movs	r1, #1
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4091      	lsls	r1, r2
 8009946:	000a      	movs	r2, r1
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d100      	bne.n	8009954 <HAL_GPIO_Init+0x28>
 8009952:	e138      	b.n	8009bc6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2203      	movs	r2, #3
 800995a:	4013      	ands	r3, r2
 800995c:	2b01      	cmp	r3, #1
 800995e:	d005      	beq.n	800996c <HAL_GPIO_Init+0x40>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2203      	movs	r2, #3
 8009966:	4013      	ands	r3, r2
 8009968:	2b02      	cmp	r3, #2
 800996a:	d130      	bne.n	80099ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	2203      	movs	r2, #3
 8009978:	409a      	lsls	r2, r3
 800997a:	0013      	movs	r3, r2
 800997c:	43da      	mvns	r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	4013      	ands	r3, r2
 8009982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	409a      	lsls	r2, r3
 800998e:	0013      	movs	r3, r2
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	4313      	orrs	r3, r2
 8009994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80099a2:	2201      	movs	r2, #1
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	409a      	lsls	r2, r3
 80099a8:	0013      	movs	r3, r2
 80099aa:	43da      	mvns	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	4013      	ands	r3, r2
 80099b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	091b      	lsrs	r3, r3, #4
 80099b8:	2201      	movs	r2, #1
 80099ba:	401a      	ands	r2, r3
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	409a      	lsls	r2, r3
 80099c0:	0013      	movs	r3, r2
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	2203      	movs	r2, #3
 80099d4:	4013      	ands	r3, r2
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d017      	beq.n	8009a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	2203      	movs	r2, #3
 80099e6:	409a      	lsls	r2, r3
 80099e8:	0013      	movs	r3, r2
 80099ea:	43da      	mvns	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	4013      	ands	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	409a      	lsls	r2, r3
 80099fc:	0013      	movs	r3, r2
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	4013      	ands	r3, r2
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d123      	bne.n	8009a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	08da      	lsrs	r2, r3, #3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3208      	adds	r2, #8
 8009a1e:	0092      	lsls	r2, r2, #2
 8009a20:	58d3      	ldr	r3, [r2, r3]
 8009a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2207      	movs	r2, #7
 8009a28:	4013      	ands	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	220f      	movs	r2, #15
 8009a2e:	409a      	lsls	r2, r3
 8009a30:	0013      	movs	r3, r2
 8009a32:	43da      	mvns	r2, r3
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	4013      	ands	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691a      	ldr	r2, [r3, #16]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2107      	movs	r1, #7
 8009a42:	400b      	ands	r3, r1
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	409a      	lsls	r2, r3
 8009a48:	0013      	movs	r3, r2
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	08da      	lsrs	r2, r3, #3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3208      	adds	r2, #8
 8009a58:	0092      	lsls	r2, r2, #2
 8009a5a:	6939      	ldr	r1, [r7, #16]
 8009a5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	2203      	movs	r2, #3
 8009a6a:	409a      	lsls	r2, r3
 8009a6c:	0013      	movs	r3, r2
 8009a6e:	43da      	mvns	r2, r3
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	4013      	ands	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2203      	movs	r2, #3
 8009a7c:	401a      	ands	r2, r3
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	409a      	lsls	r2, r3
 8009a84:	0013      	movs	r3, r2
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	23c0      	movs	r3, #192	; 0xc0
 8009a98:	029b      	lsls	r3, r3, #10
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	d100      	bne.n	8009aa0 <HAL_GPIO_Init+0x174>
 8009a9e:	e092      	b.n	8009bc6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009aa0:	4a50      	ldr	r2, [pc, #320]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	089b      	lsrs	r3, r3, #2
 8009aa6:	3318      	adds	r3, #24
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	589b      	ldr	r3, [r3, r2]
 8009aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	220f      	movs	r2, #15
 8009ab8:	409a      	lsls	r2, r3
 8009aba:	0013      	movs	r3, r2
 8009abc:	43da      	mvns	r2, r3
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	23a0      	movs	r3, #160	; 0xa0
 8009ac8:	05db      	lsls	r3, r3, #23
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d013      	beq.n	8009af6 <HAL_GPIO_Init+0x1ca>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a45      	ldr	r2, [pc, #276]	; (8009be8 <HAL_GPIO_Init+0x2bc>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00d      	beq.n	8009af2 <HAL_GPIO_Init+0x1c6>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a44      	ldr	r2, [pc, #272]	; (8009bec <HAL_GPIO_Init+0x2c0>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d007      	beq.n	8009aee <HAL_GPIO_Init+0x1c2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a43      	ldr	r2, [pc, #268]	; (8009bf0 <HAL_GPIO_Init+0x2c4>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d101      	bne.n	8009aea <HAL_GPIO_Init+0x1be>
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e006      	b.n	8009af8 <HAL_GPIO_Init+0x1cc>
 8009aea:	2305      	movs	r3, #5
 8009aec:	e004      	b.n	8009af8 <HAL_GPIO_Init+0x1cc>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e002      	b.n	8009af8 <HAL_GPIO_Init+0x1cc>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e000      	b.n	8009af8 <HAL_GPIO_Init+0x1cc>
 8009af6:	2300      	movs	r3, #0
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	2103      	movs	r1, #3
 8009afc:	400a      	ands	r2, r1
 8009afe:	00d2      	lsls	r2, r2, #3
 8009b00:	4093      	lsls	r3, r2
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009b08:	4936      	ldr	r1, [pc, #216]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	089b      	lsrs	r3, r3, #2
 8009b0e:	3318      	adds	r3, #24
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009b16:	4a33      	ldr	r2, [pc, #204]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	58d3      	ldr	r3, [r2, r3]
 8009b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	43da      	mvns	r2, r3
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	4013      	ands	r3, r2
 8009b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	025b      	lsls	r3, r3, #9
 8009b30:	4013      	ands	r3, r2
 8009b32:	d003      	beq.n	8009b3c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009b3c:	4929      	ldr	r1, [pc, #164]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b3e:	2280      	movs	r2, #128	; 0x80
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8009b44:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b46:	2384      	movs	r3, #132	; 0x84
 8009b48:	58d3      	ldr	r3, [r2, r3]
 8009b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	43da      	mvns	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4013      	ands	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	2380      	movs	r3, #128	; 0x80
 8009b5c:	029b      	lsls	r3, r3, #10
 8009b5e:	4013      	ands	r3, r2
 8009b60:	d003      	beq.n	8009b6a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009b6a:	491e      	ldr	r1, [pc, #120]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b6c:	2284      	movs	r2, #132	; 0x84
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b72:	4b1c      	ldr	r3, [pc, #112]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	43da      	mvns	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	035b      	lsls	r3, r3, #13
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009b9c:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	43da      	mvns	r2, r3
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	039b      	lsls	r3, r3, #14
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009bc0:	4b08      	ldr	r3, [pc, #32]	; (8009be4 <HAL_GPIO_Init+0x2b8>)
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	40da      	lsrs	r2, r3
 8009bd4:	1e13      	subs	r3, r2, #0
 8009bd6:	d000      	beq.n	8009bda <HAL_GPIO_Init+0x2ae>
 8009bd8:	e6b0      	b.n	800993c <HAL_GPIO_Init+0x10>
  }
}
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	46c0      	nop			; (mov r8, r8)
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b006      	add	sp, #24
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	40021800 	.word	0x40021800
 8009be8:	50000400 	.word	0x50000400
 8009bec:	50000800 	.word	0x50000800
 8009bf0:	50000c00 	.word	0x50000c00

08009bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	0008      	movs	r0, r1
 8009bfe:	0011      	movs	r1, r2
 8009c00:	1cbb      	adds	r3, r7, #2
 8009c02:	1c02      	adds	r2, r0, #0
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	1c7b      	adds	r3, r7, #1
 8009c08:	1c0a      	adds	r2, r1, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c0c:	1c7b      	adds	r3, r7, #1
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c14:	1cbb      	adds	r3, r7, #2
 8009c16:	881a      	ldrh	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c1c:	e003      	b.n	8009c26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c1e:	1cbb      	adds	r3, r7, #2
 8009c20:	881a      	ldrh	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	b002      	add	sp, #8
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e082      	b.n	8009d48 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2241      	movs	r2, #65	; 0x41
 8009c46:	5c9b      	ldrb	r3, [r3, r2]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d107      	bne.n	8009c5e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2240      	movs	r2, #64	; 0x40
 8009c52:	2100      	movs	r1, #0
 8009c54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f7ff fa27 	bl	80090ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2241      	movs	r2, #65	; 0x41
 8009c62:	2124      	movs	r1, #36	; 0x24
 8009c64:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2101      	movs	r1, #1
 8009c72:	438a      	bics	r2, r1
 8009c74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4934      	ldr	r1, [pc, #208]	; (8009d50 <HAL_I2C_Init+0x120>)
 8009c80:	400a      	ands	r2, r1
 8009c82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4931      	ldr	r1, [pc, #196]	; (8009d54 <HAL_I2C_Init+0x124>)
 8009c90:	400a      	ands	r2, r1
 8009c92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d108      	bne.n	8009cae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	0209      	lsls	r1, r1, #8
 8009ca8:	430a      	orrs	r2, r1
 8009caa:	609a      	str	r2, [r3, #8]
 8009cac:	e007      	b.n	8009cbe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689a      	ldr	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2184      	movs	r1, #132	; 0x84
 8009cb8:	0209      	lsls	r1, r1, #8
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d104      	bne.n	8009cd0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2280      	movs	r2, #128	; 0x80
 8009ccc:	0112      	lsls	r2, r2, #4
 8009cce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	491f      	ldr	r1, [pc, #124]	; (8009d58 <HAL_I2C_Init+0x128>)
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	491a      	ldr	r1, [pc, #104]	; (8009d54 <HAL_I2C_Init+0x124>)
 8009cec:	400a      	ands	r2, r1
 8009cee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	430a      	orrs	r2, r1
 8009d08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	69d9      	ldr	r1, [r3, #28]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1a      	ldr	r2, [r3, #32]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2101      	movs	r1, #1
 8009d26:	430a      	orrs	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2241      	movs	r2, #65	; 0x41
 8009d34:	2120      	movs	r1, #32
 8009d36:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2242      	movs	r2, #66	; 0x42
 8009d42:	2100      	movs	r1, #0
 8009d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	0018      	movs	r0, r3
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	b002      	add	sp, #8
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	f0ffffff 	.word	0xf0ffffff
 8009d54:	ffff7fff 	.word	0xffff7fff
 8009d58:	02008000 	.word	0x02008000

08009d5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2241      	movs	r2, #65	; 0x41
 8009d6a:	5c9b      	ldrb	r3, [r3, r2]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d138      	bne.n	8009de4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2240      	movs	r2, #64	; 0x40
 8009d76:	5c9b      	ldrb	r3, [r3, r2]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e032      	b.n	8009de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2240      	movs	r2, #64	; 0x40
 8009d84:	2101      	movs	r1, #1
 8009d86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2241      	movs	r2, #65	; 0x41
 8009d8c:	2124      	movs	r1, #36	; 0x24
 8009d8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	438a      	bics	r2, r1
 8009d9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4911      	ldr	r1, [pc, #68]	; (8009df0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009dac:	400a      	ands	r2, r1
 8009dae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6819      	ldr	r1, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2101      	movs	r1, #1
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2241      	movs	r2, #65	; 0x41
 8009dd4:	2120      	movs	r1, #32
 8009dd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2240      	movs	r2, #64	; 0x40
 8009ddc:	2100      	movs	r1, #0
 8009dde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e000      	b.n	8009de6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009de4:	2302      	movs	r3, #2
  }
}
 8009de6:	0018      	movs	r0, r3
 8009de8:	46bd      	mov	sp, r7
 8009dea:	b002      	add	sp, #8
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	46c0      	nop			; (mov r8, r8)
 8009df0:	ffffefff 	.word	0xffffefff

08009df4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2241      	movs	r2, #65	; 0x41
 8009e02:	5c9b      	ldrb	r3, [r3, r2]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d139      	bne.n	8009e7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2240      	movs	r2, #64	; 0x40
 8009e0e:	5c9b      	ldrb	r3, [r3, r2]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d101      	bne.n	8009e18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e14:	2302      	movs	r3, #2
 8009e16:	e033      	b.n	8009e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2241      	movs	r2, #65	; 0x41
 8009e24:	2124      	movs	r1, #36	; 0x24
 8009e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2101      	movs	r1, #1
 8009e34:	438a      	bics	r2, r1
 8009e36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2101      	movs	r1, #1
 8009e66:	430a      	orrs	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2241      	movs	r2, #65	; 0x41
 8009e6e:	2120      	movs	r1, #32
 8009e70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2240      	movs	r2, #64	; 0x40
 8009e76:	2100      	movs	r1, #0
 8009e78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e000      	b.n	8009e80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	0018      	movs	r0, r3
 8009e82:	46bd      	mov	sp, r7
 8009e84:	b004      	add	sp, #16
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	fffff0ff 	.word	0xfffff0ff

08009e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009e94:	4b19      	ldr	r3, [pc, #100]	; (8009efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a19      	ldr	r2, [pc, #100]	; (8009f00 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	0019      	movs	r1, r3
 8009e9e:	4b17      	ldr	r3, [pc, #92]	; (8009efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	2380      	movs	r3, #128	; 0x80
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d11f      	bne.n	8009ef0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009eb0:	4b14      	ldr	r3, [pc, #80]	; (8009f04 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	0013      	movs	r3, r2
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	189b      	adds	r3, r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4912      	ldr	r1, [pc, #72]	; (8009f08 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f7f6 f93a 	bl	8000138 <__udivsi3>
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009eca:	e008      	b.n	8009ede <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e001      	b.n	8009ede <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e009      	b.n	8009ef2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009ee0:	695a      	ldr	r2, [r3, #20]
 8009ee2:	2380      	movs	r3, #128	; 0x80
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	401a      	ands	r2, r3
 8009ee8:	2380      	movs	r3, #128	; 0x80
 8009eea:	00db      	lsls	r3, r3, #3
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d0ed      	beq.n	8009ecc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	40007000 	.word	0x40007000
 8009f00:	fffff9ff 	.word	0xfffff9ff
 8009f04:	20000004 	.word	0x20000004
 8009f08:	000f4240 	.word	0x000f4240

08009f0c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009f10:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	23e0      	movs	r3, #224	; 0xe0
 8009f16:	01db      	lsls	r3, r3, #7
 8009f18:	4013      	ands	r3, r2
}
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	40021000 	.word	0x40021000

08009f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e2f9      	b.n	800a52a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	d100      	bne.n	8009f42 <HAL_RCC_OscConfig+0x1e>
 8009f40:	e07c      	b.n	800a03c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f42:	4bc3      	ldr	r3, [pc, #780]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2238      	movs	r2, #56	; 0x38
 8009f48:	4013      	ands	r3, r2
 8009f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f4c:	4bc0      	ldr	r3, [pc, #768]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	2203      	movs	r2, #3
 8009f52:	4013      	ands	r3, r2
 8009f54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	2b10      	cmp	r3, #16
 8009f5a:	d102      	bne.n	8009f62 <HAL_RCC_OscConfig+0x3e>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d002      	beq.n	8009f68 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d10b      	bne.n	8009f80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f68:	4bb9      	ldr	r3, [pc, #740]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	2380      	movs	r3, #128	; 0x80
 8009f6e:	029b      	lsls	r3, r3, #10
 8009f70:	4013      	ands	r3, r2
 8009f72:	d062      	beq.n	800a03a <HAL_RCC_OscConfig+0x116>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d15e      	bne.n	800a03a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e2d4      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	2380      	movs	r3, #128	; 0x80
 8009f86:	025b      	lsls	r3, r3, #9
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d107      	bne.n	8009f9c <HAL_RCC_OscConfig+0x78>
 8009f8c:	4bb0      	ldr	r3, [pc, #704]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	4baf      	ldr	r3, [pc, #700]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009f92:	2180      	movs	r1, #128	; 0x80
 8009f94:	0249      	lsls	r1, r1, #9
 8009f96:	430a      	orrs	r2, r1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e020      	b.n	8009fde <HAL_RCC_OscConfig+0xba>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	23a0      	movs	r3, #160	; 0xa0
 8009fa2:	02db      	lsls	r3, r3, #11
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d10e      	bne.n	8009fc6 <HAL_RCC_OscConfig+0xa2>
 8009fa8:	4ba9      	ldr	r3, [pc, #676]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	4ba8      	ldr	r3, [pc, #672]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fae:	2180      	movs	r1, #128	; 0x80
 8009fb0:	02c9      	lsls	r1, r1, #11
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	4ba6      	ldr	r3, [pc, #664]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	4ba5      	ldr	r3, [pc, #660]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	0249      	lsls	r1, r1, #9
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e00b      	b.n	8009fde <HAL_RCC_OscConfig+0xba>
 8009fc6:	4ba2      	ldr	r3, [pc, #648]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4ba1      	ldr	r3, [pc, #644]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fcc:	49a1      	ldr	r1, [pc, #644]	; (800a254 <HAL_RCC_OscConfig+0x330>)
 8009fce:	400a      	ands	r2, r1
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	4b9f      	ldr	r3, [pc, #636]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	4b9e      	ldr	r3, [pc, #632]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 8009fd8:	499f      	ldr	r1, [pc, #636]	; (800a258 <HAL_RCC_OscConfig+0x334>)
 8009fda:	400a      	ands	r2, r1
 8009fdc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d014      	beq.n	800a010 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe6:	f7ff fba9 	bl	800973c <HAL_GetTick>
 8009fea:	0003      	movs	r3, r0
 8009fec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ff0:	f7ff fba4 	bl	800973c <HAL_GetTick>
 8009ff4:	0002      	movs	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b64      	cmp	r3, #100	; 0x64
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e293      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a002:	4b93      	ldr	r3, [pc, #588]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	029b      	lsls	r3, r3, #10
 800a00a:	4013      	ands	r3, r2
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0xcc>
 800a00e:	e015      	b.n	800a03c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a010:	f7ff fb94 	bl	800973c <HAL_GetTick>
 800a014:	0003      	movs	r3, r0
 800a016:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a018:	e008      	b.n	800a02c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a01a:	f7ff fb8f 	bl	800973c <HAL_GetTick>
 800a01e:	0002      	movs	r2, r0
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b64      	cmp	r3, #100	; 0x64
 800a026:	d901      	bls.n	800a02c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e27e      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a02c:	4b88      	ldr	r3, [pc, #544]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	2380      	movs	r3, #128	; 0x80
 800a032:	029b      	lsls	r3, r3, #10
 800a034:	4013      	ands	r3, r2
 800a036:	d1f0      	bne.n	800a01a <HAL_RCC_OscConfig+0xf6>
 800a038:	e000      	b.n	800a03c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a03a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2202      	movs	r2, #2
 800a042:	4013      	ands	r3, r2
 800a044:	d100      	bne.n	800a048 <HAL_RCC_OscConfig+0x124>
 800a046:	e099      	b.n	800a17c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a048:	4b81      	ldr	r3, [pc, #516]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	2238      	movs	r2, #56	; 0x38
 800a04e:	4013      	ands	r3, r2
 800a050:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a052:	4b7f      	ldr	r3, [pc, #508]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2203      	movs	r2, #3
 800a058:	4013      	ands	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d102      	bne.n	800a068 <HAL_RCC_OscConfig+0x144>
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d002      	beq.n	800a06e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d135      	bne.n	800a0da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a06e:	4b78      	ldr	r3, [pc, #480]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	2380      	movs	r3, #128	; 0x80
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	4013      	ands	r3, r2
 800a078:	d005      	beq.n	800a086 <HAL_RCC_OscConfig+0x162>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e251      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a086:	4b72      	ldr	r3, [pc, #456]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4a74      	ldr	r2, [pc, #464]	; (800a25c <HAL_RCC_OscConfig+0x338>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	0019      	movs	r1, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	021a      	lsls	r2, r3, #8
 800a096:	4b6e      	ldr	r3, [pc, #440]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d112      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a0a2:	4b6b      	ldr	r3, [pc, #428]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a6e      	ldr	r2, [pc, #440]	; (800a260 <HAL_RCC_OscConfig+0x33c>)
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	0019      	movs	r1, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691a      	ldr	r2, [r3, #16]
 800a0b0:	4b67      	ldr	r3, [pc, #412]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a0b6:	4b66      	ldr	r3, [pc, #408]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	0adb      	lsrs	r3, r3, #11
 800a0bc:	2207      	movs	r2, #7
 800a0be:	4013      	ands	r3, r2
 800a0c0:	4a68      	ldr	r2, [pc, #416]	; (800a264 <HAL_RCC_OscConfig+0x340>)
 800a0c2:	40da      	lsrs	r2, r3
 800a0c4:	4b68      	ldr	r3, [pc, #416]	; (800a268 <HAL_RCC_OscConfig+0x344>)
 800a0c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a0c8:	4b68      	ldr	r3, [pc, #416]	; (800a26c <HAL_RCC_OscConfig+0x348>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7ff fad9 	bl	8009684 <HAL_InitTick>
 800a0d2:	1e03      	subs	r3, r0, #0
 800a0d4:	d051      	beq.n	800a17a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e227      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d030      	beq.n	800a144 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a0e2:	4b5b      	ldr	r3, [pc, #364]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a5e      	ldr	r2, [pc, #376]	; (800a260 <HAL_RCC_OscConfig+0x33c>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	0019      	movs	r1, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	4b57      	ldr	r3, [pc, #348]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a0f6:	4b56      	ldr	r3, [pc, #344]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	4b55      	ldr	r3, [pc, #340]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a0fc:	2180      	movs	r1, #128	; 0x80
 800a0fe:	0049      	lsls	r1, r1, #1
 800a100:	430a      	orrs	r2, r1
 800a102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a104:	f7ff fb1a 	bl	800973c <HAL_GetTick>
 800a108:	0003      	movs	r3, r0
 800a10a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a10c:	e008      	b.n	800a120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a10e:	f7ff fb15 	bl	800973c <HAL_GetTick>
 800a112:	0002      	movs	r2, r0
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d901      	bls.n	800a120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e204      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a120:	4b4b      	ldr	r3, [pc, #300]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	2380      	movs	r3, #128	; 0x80
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4013      	ands	r3, r2
 800a12a:	d0f0      	beq.n	800a10e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12c:	4b48      	ldr	r3, [pc, #288]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	4a4a      	ldr	r2, [pc, #296]	; (800a25c <HAL_RCC_OscConfig+0x338>)
 800a132:	4013      	ands	r3, r2
 800a134:	0019      	movs	r1, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	021a      	lsls	r2, r3, #8
 800a13c:	4b44      	ldr	r3, [pc, #272]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a13e:	430a      	orrs	r2, r1
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	e01b      	b.n	800a17c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a144:	4b42      	ldr	r3, [pc, #264]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	4b41      	ldr	r3, [pc, #260]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a14a:	4949      	ldr	r1, [pc, #292]	; (800a270 <HAL_RCC_OscConfig+0x34c>)
 800a14c:	400a      	ands	r2, r1
 800a14e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a150:	f7ff faf4 	bl	800973c <HAL_GetTick>
 800a154:	0003      	movs	r3, r0
 800a156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a158:	e008      	b.n	800a16c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a15a:	f7ff faef 	bl	800973c <HAL_GetTick>
 800a15e:	0002      	movs	r2, r0
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	2b02      	cmp	r3, #2
 800a166:	d901      	bls.n	800a16c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a168:	2303      	movs	r3, #3
 800a16a:	e1de      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a16c:	4b38      	ldr	r3, [pc, #224]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	2380      	movs	r3, #128	; 0x80
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4013      	ands	r3, r2
 800a176:	d1f0      	bne.n	800a15a <HAL_RCC_OscConfig+0x236>
 800a178:	e000      	b.n	800a17c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a17a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2208      	movs	r2, #8
 800a182:	4013      	ands	r3, r2
 800a184:	d047      	beq.n	800a216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a186:	4b32      	ldr	r3, [pc, #200]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	2238      	movs	r2, #56	; 0x38
 800a18c:	4013      	ands	r3, r2
 800a18e:	2b18      	cmp	r3, #24
 800a190:	d10a      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a192:	4b2f      	ldr	r3, [pc, #188]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a196:	2202      	movs	r2, #2
 800a198:	4013      	ands	r3, r2
 800a19a:	d03c      	beq.n	800a216 <HAL_RCC_OscConfig+0x2f2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d138      	bne.n	800a216 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e1c0      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d019      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a1b0:	4b27      	ldr	r3, [pc, #156]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a1b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a1b4:	4b26      	ldr	r3, [pc, #152]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1bc:	f7ff fabe 	bl	800973c <HAL_GetTick>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1c4:	e008      	b.n	800a1d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1c6:	f7ff fab9 	bl	800973c <HAL_GetTick>
 800a1ca:	0002      	movs	r2, r0
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d901      	bls.n	800a1d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e1a8      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a1d8:	4b1d      	ldr	r3, [pc, #116]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a1da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1dc:	2202      	movs	r2, #2
 800a1de:	4013      	ands	r3, r2
 800a1e0:	d0f1      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x2a2>
 800a1e2:	e018      	b.n	800a216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a1e4:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a1e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a1e8:	4b19      	ldr	r3, [pc, #100]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	438a      	bics	r2, r1
 800a1ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f0:	f7ff faa4 	bl	800973c <HAL_GetTick>
 800a1f4:	0003      	movs	r3, r0
 800a1f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a1f8:	e008      	b.n	800a20c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1fa:	f7ff fa9f 	bl	800973c <HAL_GetTick>
 800a1fe:	0002      	movs	r2, r0
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e18e      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a20c:	4b10      	ldr	r3, [pc, #64]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a20e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a210:	2202      	movs	r2, #2
 800a212:	4013      	ands	r3, r2
 800a214:	d1f1      	bne.n	800a1fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2204      	movs	r2, #4
 800a21c:	4013      	ands	r3, r2
 800a21e:	d100      	bne.n	800a222 <HAL_RCC_OscConfig+0x2fe>
 800a220:	e0c6      	b.n	800a3b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a222:	231f      	movs	r3, #31
 800a224:	18fb      	adds	r3, r7, r3
 800a226:	2200      	movs	r2, #0
 800a228:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2238      	movs	r2, #56	; 0x38
 800a230:	4013      	ands	r3, r2
 800a232:	2b20      	cmp	r3, #32
 800a234:	d11e      	bne.n	800a274 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <HAL_RCC_OscConfig+0x32c>)
 800a238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23a:	2202      	movs	r2, #2
 800a23c:	4013      	ands	r3, r2
 800a23e:	d100      	bne.n	800a242 <HAL_RCC_OscConfig+0x31e>
 800a240:	e0b6      	b.n	800a3b0 <HAL_RCC_OscConfig+0x48c>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d000      	beq.n	800a24c <HAL_RCC_OscConfig+0x328>
 800a24a:	e0b1      	b.n	800a3b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e16c      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
 800a250:	40021000 	.word	0x40021000
 800a254:	fffeffff 	.word	0xfffeffff
 800a258:	fffbffff 	.word	0xfffbffff
 800a25c:	ffff80ff 	.word	0xffff80ff
 800a260:	ffffc7ff 	.word	0xffffc7ff
 800a264:	00f42400 	.word	0x00f42400
 800a268:	20000004 	.word	0x20000004
 800a26c:	20000008 	.word	0x20000008
 800a270:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a274:	4baf      	ldr	r3, [pc, #700]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	055b      	lsls	r3, r3, #21
 800a27c:	4013      	ands	r3, r2
 800a27e:	d101      	bne.n	800a284 <HAL_RCC_OscConfig+0x360>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <HAL_RCC_OscConfig+0x362>
 800a284:	2300      	movs	r3, #0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d011      	beq.n	800a2ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a28a:	4baa      	ldr	r3, [pc, #680]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a28e:	4ba9      	ldr	r3, [pc, #676]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a290:	2180      	movs	r1, #128	; 0x80
 800a292:	0549      	lsls	r1, r1, #21
 800a294:	430a      	orrs	r2, r1
 800a296:	63da      	str	r2, [r3, #60]	; 0x3c
 800a298:	4ba6      	ldr	r3, [pc, #664]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a29a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a29c:	2380      	movs	r3, #128	; 0x80
 800a29e:	055b      	lsls	r3, r3, #21
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a2a6:	231f      	movs	r3, #31
 800a2a8:	18fb      	adds	r3, r7, r3
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2ae:	4ba2      	ldr	r3, [pc, #648]	; (800a538 <HAL_RCC_OscConfig+0x614>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	2380      	movs	r3, #128	; 0x80
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d11a      	bne.n	800a2f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2ba:	4b9f      	ldr	r3, [pc, #636]	; (800a538 <HAL_RCC_OscConfig+0x614>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	4b9e      	ldr	r3, [pc, #632]	; (800a538 <HAL_RCC_OscConfig+0x614>)
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	0049      	lsls	r1, r1, #1
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a2c8:	f7ff fa38 	bl	800973c <HAL_GetTick>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2d0:	e008      	b.n	800a2e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2d2:	f7ff fa33 	bl	800973c <HAL_GetTick>
 800a2d6:	0002      	movs	r2, r0
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d901      	bls.n	800a2e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e122      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2e4:	4b94      	ldr	r3, [pc, #592]	; (800a538 <HAL_RCC_OscConfig+0x614>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	2380      	movs	r3, #128	; 0x80
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	d0f0      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d106      	bne.n	800a306 <HAL_RCC_OscConfig+0x3e2>
 800a2f8:	4b8e      	ldr	r3, [pc, #568]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a2fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2fc:	4b8d      	ldr	r3, [pc, #564]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a2fe:	2101      	movs	r1, #1
 800a300:	430a      	orrs	r2, r1
 800a302:	65da      	str	r2, [r3, #92]	; 0x5c
 800a304:	e01c      	b.n	800a340 <HAL_RCC_OscConfig+0x41c>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	d10c      	bne.n	800a328 <HAL_RCC_OscConfig+0x404>
 800a30e:	4b89      	ldr	r3, [pc, #548]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a310:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a312:	4b88      	ldr	r3, [pc, #544]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a314:	2104      	movs	r1, #4
 800a316:	430a      	orrs	r2, r1
 800a318:	65da      	str	r2, [r3, #92]	; 0x5c
 800a31a:	4b86      	ldr	r3, [pc, #536]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a31c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a31e:	4b85      	ldr	r3, [pc, #532]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a320:	2101      	movs	r1, #1
 800a322:	430a      	orrs	r2, r1
 800a324:	65da      	str	r2, [r3, #92]	; 0x5c
 800a326:	e00b      	b.n	800a340 <HAL_RCC_OscConfig+0x41c>
 800a328:	4b82      	ldr	r3, [pc, #520]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a32a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a32c:	4b81      	ldr	r3, [pc, #516]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a32e:	2101      	movs	r1, #1
 800a330:	438a      	bics	r2, r1
 800a332:	65da      	str	r2, [r3, #92]	; 0x5c
 800a334:	4b7f      	ldr	r3, [pc, #508]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a338:	4b7e      	ldr	r3, [pc, #504]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a33a:	2104      	movs	r1, #4
 800a33c:	438a      	bics	r2, r1
 800a33e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d014      	beq.n	800a372 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a348:	f7ff f9f8 	bl	800973c <HAL_GetTick>
 800a34c:	0003      	movs	r3, r0
 800a34e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a350:	e009      	b.n	800a366 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a352:	f7ff f9f3 	bl	800973c <HAL_GetTick>
 800a356:	0002      	movs	r2, r0
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	4a77      	ldr	r2, [pc, #476]	; (800a53c <HAL_RCC_OscConfig+0x618>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e0e1      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a366:	4b73      	ldr	r3, [pc, #460]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a36a:	2202      	movs	r2, #2
 800a36c:	4013      	ands	r3, r2
 800a36e:	d0f0      	beq.n	800a352 <HAL_RCC_OscConfig+0x42e>
 800a370:	e013      	b.n	800a39a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a372:	f7ff f9e3 	bl	800973c <HAL_GetTick>
 800a376:	0003      	movs	r3, r0
 800a378:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a37a:	e009      	b.n	800a390 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a37c:	f7ff f9de 	bl	800973c <HAL_GetTick>
 800a380:	0002      	movs	r2, r0
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	4a6d      	ldr	r2, [pc, #436]	; (800a53c <HAL_RCC_OscConfig+0x618>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d901      	bls.n	800a390 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e0cc      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a390:	4b68      	ldr	r3, [pc, #416]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	2202      	movs	r2, #2
 800a396:	4013      	ands	r3, r2
 800a398:	d1f0      	bne.n	800a37c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a39a:	231f      	movs	r3, #31
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d105      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a3a4:	4b63      	ldr	r3, [pc, #396]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3a8:	4b62      	ldr	r3, [pc, #392]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3aa:	4965      	ldr	r1, [pc, #404]	; (800a540 <HAL_RCC_OscConfig+0x61c>)
 800a3ac:	400a      	ands	r2, r1
 800a3ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d100      	bne.n	800a3ba <HAL_RCC_OscConfig+0x496>
 800a3b8:	e0b6      	b.n	800a528 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3ba:	4b5e      	ldr	r3, [pc, #376]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	2238      	movs	r2, #56	; 0x38
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	2b10      	cmp	r3, #16
 800a3c4:	d100      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x4a4>
 800a3c6:	e07e      	b.n	800a4c6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d153      	bne.n	800a478 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3d0:	4b58      	ldr	r3, [pc, #352]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	4b57      	ldr	r3, [pc, #348]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3d6:	495b      	ldr	r1, [pc, #364]	; (800a544 <HAL_RCC_OscConfig+0x620>)
 800a3d8:	400a      	ands	r2, r1
 800a3da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3dc:	f7ff f9ae 	bl	800973c <HAL_GetTick>
 800a3e0:	0003      	movs	r3, r0
 800a3e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3e4:	e008      	b.n	800a3f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3e6:	f7ff f9a9 	bl	800973c <HAL_GetTick>
 800a3ea:	0002      	movs	r2, r0
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d901      	bls.n	800a3f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e098      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	2380      	movs	r3, #128	; 0x80
 800a3fe:	049b      	lsls	r3, r3, #18
 800a400:	4013      	ands	r3, r2
 800a402:	d1f0      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a404:	4b4b      	ldr	r3, [pc, #300]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	4a4f      	ldr	r2, [pc, #316]	; (800a548 <HAL_RCC_OscConfig+0x624>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	0019      	movs	r1, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	431a      	orrs	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	431a      	orrs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	431a      	orrs	r2, r3
 800a42c:	4b41      	ldr	r3, [pc, #260]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a42e:	430a      	orrs	r2, r1
 800a430:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a432:	4b40      	ldr	r3, [pc, #256]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4b3f      	ldr	r3, [pc, #252]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a438:	2180      	movs	r1, #128	; 0x80
 800a43a:	0449      	lsls	r1, r1, #17
 800a43c:	430a      	orrs	r2, r1
 800a43e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a440:	4b3c      	ldr	r3, [pc, #240]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	4b3b      	ldr	r3, [pc, #236]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a446:	2180      	movs	r1, #128	; 0x80
 800a448:	0549      	lsls	r1, r1, #21
 800a44a:	430a      	orrs	r2, r1
 800a44c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a44e:	f7ff f975 	bl	800973c <HAL_GetTick>
 800a452:	0003      	movs	r3, r0
 800a454:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a458:	f7ff f970 	bl	800973c <HAL_GetTick>
 800a45c:	0002      	movs	r2, r0
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e05f      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a46a:	4b32      	ldr	r3, [pc, #200]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	2380      	movs	r3, #128	; 0x80
 800a470:	049b      	lsls	r3, r3, #18
 800a472:	4013      	ands	r3, r2
 800a474:	d0f0      	beq.n	800a458 <HAL_RCC_OscConfig+0x534>
 800a476:	e057      	b.n	800a528 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a478:	4b2e      	ldr	r3, [pc, #184]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	4b2d      	ldr	r3, [pc, #180]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a47e:	4931      	ldr	r1, [pc, #196]	; (800a544 <HAL_RCC_OscConfig+0x620>)
 800a480:	400a      	ands	r2, r1
 800a482:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a484:	4b2b      	ldr	r3, [pc, #172]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	4b2a      	ldr	r3, [pc, #168]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a48a:	2103      	movs	r1, #3
 800a48c:	438a      	bics	r2, r1
 800a48e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	4b27      	ldr	r3, [pc, #156]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a496:	492d      	ldr	r1, [pc, #180]	; (800a54c <HAL_RCC_OscConfig+0x628>)
 800a498:	400a      	ands	r2, r1
 800a49a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49c:	f7ff f94e 	bl	800973c <HAL_GetTick>
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4a4:	e008      	b.n	800a4b8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a6:	f7ff f949 	bl	800973c <HAL_GetTick>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e038      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4b8:	4b1e      	ldr	r3, [pc, #120]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	049b      	lsls	r3, r3, #18
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d1f0      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x582>
 800a4c4:	e030      	b.n	800a528 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e02b      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a4d2:	4b18      	ldr	r3, [pc, #96]	; (800a534 <HAL_RCC_OscConfig+0x610>)
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2203      	movs	r2, #3
 800a4dc:	401a      	ands	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d11e      	bne.n	800a524 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2270      	movs	r2, #112	; 0x70
 800a4ea:	401a      	ands	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d117      	bne.n	800a524 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	23fe      	movs	r3, #254	; 0xfe
 800a4f8:	01db      	lsls	r3, r3, #7
 800a4fa:	401a      	ands	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a500:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a502:	429a      	cmp	r2, r3
 800a504:	d10e      	bne.n	800a524 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	23f8      	movs	r3, #248	; 0xf8
 800a50a:	039b      	lsls	r3, r3, #14
 800a50c:	401a      	ands	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a512:	429a      	cmp	r2, r3
 800a514:	d106      	bne.n	800a524 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	0f5b      	lsrs	r3, r3, #29
 800a51a:	075a      	lsls	r2, r3, #29
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a520:	429a      	cmp	r2, r3
 800a522:	d001      	beq.n	800a528 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e000      	b.n	800a52a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	0018      	movs	r0, r3
 800a52c:	46bd      	mov	sp, r7
 800a52e:	b008      	add	sp, #32
 800a530:	bd80      	pop	{r7, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	40021000 	.word	0x40021000
 800a538:	40007000 	.word	0x40007000
 800a53c:	00001388 	.word	0x00001388
 800a540:	efffffff 	.word	0xefffffff
 800a544:	feffffff 	.word	0xfeffffff
 800a548:	1fc1808c 	.word	0x1fc1808c
 800a54c:	effeffff 	.word	0xeffeffff

0800a550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e0e9      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a564:	4b76      	ldr	r3, [pc, #472]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2207      	movs	r2, #7
 800a56a:	4013      	ands	r3, r2
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d91e      	bls.n	800a5b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a572:	4b73      	ldr	r3, [pc, #460]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2207      	movs	r2, #7
 800a578:	4393      	bics	r3, r2
 800a57a:	0019      	movs	r1, r3
 800a57c:	4b70      	ldr	r3, [pc, #448]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a584:	f7ff f8da 	bl	800973c <HAL_GetTick>
 800a588:	0003      	movs	r3, r0
 800a58a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a58c:	e009      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a58e:	f7ff f8d5 	bl	800973c <HAL_GetTick>
 800a592:	0002      	movs	r2, r0
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	4a6a      	ldr	r2, [pc, #424]	; (800a744 <HAL_RCC_ClockConfig+0x1f4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e0ca      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a5a2:	4b67      	ldr	r3, [pc, #412]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2207      	movs	r2, #7
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d1ee      	bne.n	800a58e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d015      	beq.n	800a5e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2204      	movs	r2, #4
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	d006      	beq.n	800a5d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a5c4:	4b60      	ldr	r3, [pc, #384]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	4b5f      	ldr	r3, [pc, #380]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a5ca:	21e0      	movs	r1, #224	; 0xe0
 800a5cc:	01c9      	lsls	r1, r1, #7
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5d2:	4b5d      	ldr	r3, [pc, #372]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	4a5d      	ldr	r2, [pc, #372]	; (800a74c <HAL_RCC_ClockConfig+0x1fc>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	0019      	movs	r1, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	4b59      	ldr	r3, [pc, #356]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	d057      	beq.n	800a6a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d107      	bne.n	800a608 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5f8:	4b53      	ldr	r3, [pc, #332]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	029b      	lsls	r3, r3, #10
 800a600:	4013      	ands	r3, r2
 800a602:	d12b      	bne.n	800a65c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e097      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d107      	bne.n	800a620 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a610:	4b4d      	ldr	r3, [pc, #308]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	2380      	movs	r3, #128	; 0x80
 800a616:	049b      	lsls	r3, r3, #18
 800a618:	4013      	ands	r3, r2
 800a61a:	d11f      	bne.n	800a65c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e08b      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d107      	bne.n	800a638 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a628:	4b47      	ldr	r3, [pc, #284]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	2380      	movs	r3, #128	; 0x80
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	4013      	ands	r3, r2
 800a632:	d113      	bne.n	800a65c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e07f      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d106      	bne.n	800a64e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a640:	4b41      	ldr	r3, [pc, #260]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a644:	2202      	movs	r2, #2
 800a646:	4013      	ands	r3, r2
 800a648:	d108      	bne.n	800a65c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e074      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a64e:	4b3e      	ldr	r3, [pc, #248]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a652:	2202      	movs	r2, #2
 800a654:	4013      	ands	r3, r2
 800a656:	d101      	bne.n	800a65c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e06d      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a65c:	4b3a      	ldr	r3, [pc, #232]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	2207      	movs	r2, #7
 800a662:	4393      	bics	r3, r2
 800a664:	0019      	movs	r1, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	4b37      	ldr	r3, [pc, #220]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a66c:	430a      	orrs	r2, r1
 800a66e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a670:	f7ff f864 	bl	800973c <HAL_GetTick>
 800a674:	0003      	movs	r3, r0
 800a676:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a678:	e009      	b.n	800a68e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a67a:	f7ff f85f 	bl	800973c <HAL_GetTick>
 800a67e:	0002      	movs	r2, r0
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	4a2f      	ldr	r2, [pc, #188]	; (800a744 <HAL_RCC_ClockConfig+0x1f4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e054      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a68e:	4b2e      	ldr	r3, [pc, #184]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2238      	movs	r2, #56	; 0x38
 800a694:	401a      	ands	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d1ec      	bne.n	800a67a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6a0:	4b27      	ldr	r3, [pc, #156]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d21e      	bcs.n	800a6ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6ae:	4b24      	ldr	r3, [pc, #144]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2207      	movs	r2, #7
 800a6b4:	4393      	bics	r3, r2
 800a6b6:	0019      	movs	r1, r3
 800a6b8:	4b21      	ldr	r3, [pc, #132]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a6c0:	f7ff f83c 	bl	800973c <HAL_GetTick>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a6c8:	e009      	b.n	800a6de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6ca:	f7ff f837 	bl	800973c <HAL_GetTick>
 800a6ce:	0002      	movs	r2, r0
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	4a1b      	ldr	r2, [pc, #108]	; (800a744 <HAL_RCC_ClockConfig+0x1f4>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d901      	bls.n	800a6de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e02c      	b.n	800a738 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a6de:	4b18      	ldr	r3, [pc, #96]	; (800a740 <HAL_RCC_ClockConfig+0x1f0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2207      	movs	r2, #7
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d1ee      	bne.n	800a6ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2204      	movs	r2, #4
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	4a15      	ldr	r2, [pc, #84]	; (800a750 <HAL_RCC_ClockConfig+0x200>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	0019      	movs	r1, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	4b10      	ldr	r3, [pc, #64]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a706:	430a      	orrs	r2, r1
 800a708:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a70a:	f000 f829 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800a70e:	0001      	movs	r1, r0
 800a710:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <HAL_RCC_ClockConfig+0x1f8>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	0a1b      	lsrs	r3, r3, #8
 800a716:	220f      	movs	r2, #15
 800a718:	401a      	ands	r2, r3
 800a71a:	4b0e      	ldr	r3, [pc, #56]	; (800a754 <HAL_RCC_ClockConfig+0x204>)
 800a71c:	0092      	lsls	r2, r2, #2
 800a71e:	58d3      	ldr	r3, [r2, r3]
 800a720:	221f      	movs	r2, #31
 800a722:	4013      	ands	r3, r2
 800a724:	000a      	movs	r2, r1
 800a726:	40da      	lsrs	r2, r3
 800a728:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <HAL_RCC_ClockConfig+0x208>)
 800a72a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a72c:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <HAL_RCC_ClockConfig+0x20c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	0018      	movs	r0, r3
 800a732:	f7fe ffa7 	bl	8009684 <HAL_InitTick>
 800a736:	0003      	movs	r3, r0
}
 800a738:	0018      	movs	r0, r3
 800a73a:	46bd      	mov	sp, r7
 800a73c:	b004      	add	sp, #16
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	40022000 	.word	0x40022000
 800a744:	00001388 	.word	0x00001388
 800a748:	40021000 	.word	0x40021000
 800a74c:	fffff0ff 	.word	0xfffff0ff
 800a750:	ffff8fff 	.word	0xffff8fff
 800a754:	080123e4 	.word	0x080123e4
 800a758:	20000004 	.word	0x20000004
 800a75c:	20000008 	.word	0x20000008

0800a760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a766:	4b3c      	ldr	r3, [pc, #240]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	2238      	movs	r2, #56	; 0x38
 800a76c:	4013      	ands	r3, r2
 800a76e:	d10f      	bne.n	800a790 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a770:	4b39      	ldr	r3, [pc, #228]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	0adb      	lsrs	r3, r3, #11
 800a776:	2207      	movs	r2, #7
 800a778:	4013      	ands	r3, r2
 800a77a:	2201      	movs	r2, #1
 800a77c:	409a      	lsls	r2, r3
 800a77e:	0013      	movs	r3, r2
 800a780:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	4835      	ldr	r0, [pc, #212]	; (800a85c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a786:	f7f5 fcd7 	bl	8000138 <__udivsi3>
 800a78a:	0003      	movs	r3, r0
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	e05d      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a790:	4b31      	ldr	r3, [pc, #196]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2238      	movs	r2, #56	; 0x38
 800a796:	4013      	ands	r3, r2
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d102      	bne.n	800a7a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a79c:	4b30      	ldr	r3, [pc, #192]	; (800a860 <HAL_RCC_GetSysClockFreq+0x100>)
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	e054      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7a2:	4b2d      	ldr	r3, [pc, #180]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2238      	movs	r2, #56	; 0x38
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	2b10      	cmp	r3, #16
 800a7ac:	d138      	bne.n	800a820 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a7ae:	4b2a      	ldr	r3, [pc, #168]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7b8:	4b27      	ldr	r3, [pc, #156]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	091b      	lsrs	r3, r3, #4
 800a7be:	2207      	movs	r2, #7
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	4824      	ldr	r0, [pc, #144]	; (800a860 <HAL_RCC_GetSysClockFreq+0x100>)
 800a7d0:	f7f5 fcb2 	bl	8000138 <__udivsi3>
 800a7d4:	0003      	movs	r3, r0
 800a7d6:	0019      	movs	r1, r3
 800a7d8:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	0a1b      	lsrs	r3, r3, #8
 800a7de:	227f      	movs	r2, #127	; 0x7f
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	434b      	muls	r3, r1
 800a7e4:	617b      	str	r3, [r7, #20]
        break;
 800a7e6:	e00d      	b.n	800a804 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	481c      	ldr	r0, [pc, #112]	; (800a85c <HAL_RCC_GetSysClockFreq+0xfc>)
 800a7ec:	f7f5 fca4 	bl	8000138 <__udivsi3>
 800a7f0:	0003      	movs	r3, r0
 800a7f2:	0019      	movs	r1, r3
 800a7f4:	4b18      	ldr	r3, [pc, #96]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	0a1b      	lsrs	r3, r3, #8
 800a7fa:	227f      	movs	r2, #127	; 0x7f
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	434b      	muls	r3, r1
 800a800:	617b      	str	r3, [r7, #20]
        break;
 800a802:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a804:	4b14      	ldr	r3, [pc, #80]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	0f5b      	lsrs	r3, r3, #29
 800a80a:	2207      	movs	r2, #7
 800a80c:	4013      	ands	r3, r2
 800a80e:	3301      	adds	r3, #1
 800a810:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	6978      	ldr	r0, [r7, #20]
 800a816:	f7f5 fc8f 	bl	8000138 <__udivsi3>
 800a81a:	0003      	movs	r3, r0
 800a81c:	613b      	str	r3, [r7, #16]
 800a81e:	e015      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2238      	movs	r2, #56	; 0x38
 800a826:	4013      	ands	r3, r2
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d103      	bne.n	800a834 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a82c:	2380      	movs	r3, #128	; 0x80
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	e00b      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a834:	4b08      	ldr	r3, [pc, #32]	; (800a858 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2238      	movs	r2, #56	; 0x38
 800a83a:	4013      	ands	r3, r2
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d103      	bne.n	800a848 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a840:	23fa      	movs	r3, #250	; 0xfa
 800a842:	01db      	lsls	r3, r3, #7
 800a844:	613b      	str	r3, [r7, #16]
 800a846:	e001      	b.n	800a84c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a84c:	693b      	ldr	r3, [r7, #16]
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b006      	add	sp, #24
 800a854:	bd80      	pop	{r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	40021000 	.word	0x40021000
 800a85c:	00f42400 	.word	0x00f42400
 800a860:	007a1200 	.word	0x007a1200

0800a864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <HAL_RCC_GetHCLKFreq+0x10>)
 800a86a:	681b      	ldr	r3, [r3, #0]
}
 800a86c:	0018      	movs	r0, r3
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	20000004 	.word	0x20000004

0800a878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a878:	b5b0      	push	{r4, r5, r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a87c:	f7ff fff2 	bl	800a864 <HAL_RCC_GetHCLKFreq>
 800a880:	0004      	movs	r4, r0
 800a882:	f7ff fb43 	bl	8009f0c <LL_RCC_GetAPB1Prescaler>
 800a886:	0003      	movs	r3, r0
 800a888:	0b1a      	lsrs	r2, r3, #12
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a88c:	0092      	lsls	r2, r2, #2
 800a88e:	58d3      	ldr	r3, [r2, r3]
 800a890:	221f      	movs	r2, #31
 800a892:	4013      	ands	r3, r2
 800a894:	40dc      	lsrs	r4, r3
 800a896:	0023      	movs	r3, r4
}
 800a898:	0018      	movs	r0, r3
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bdb0      	pop	{r4, r5, r7, pc}
 800a89e:	46c0      	nop			; (mov r8, r8)
 800a8a0:	08012424 	.word	0x08012424

0800a8a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a8ac:	2313      	movs	r3, #19
 800a8ae:	18fb      	adds	r3, r7, r3
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8b4:	2312      	movs	r3, #18
 800a8b6:	18fb      	adds	r3, r7, r3
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	029b      	lsls	r3, r3, #10
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	d100      	bne.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a8c8:	e0a3      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8ca:	2011      	movs	r0, #17
 800a8cc:	183b      	adds	r3, r7, r0
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8d2:	4b86      	ldr	r3, [pc, #536]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8d6:	2380      	movs	r3, #128	; 0x80
 800a8d8:	055b      	lsls	r3, r3, #21
 800a8da:	4013      	ands	r3, r2
 800a8dc:	d110      	bne.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8de:	4b83      	ldr	r3, [pc, #524]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e2:	4b82      	ldr	r3, [pc, #520]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8e4:	2180      	movs	r1, #128	; 0x80
 800a8e6:	0549      	lsls	r1, r1, #21
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8ec:	4b7f      	ldr	r3, [pc, #508]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8f0:	2380      	movs	r3, #128	; 0x80
 800a8f2:	055b      	lsls	r3, r3, #21
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	60bb      	str	r3, [r7, #8]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8fa:	183b      	adds	r3, r7, r0
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a900:	4b7b      	ldr	r3, [pc, #492]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4b7a      	ldr	r3, [pc, #488]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a906:	2180      	movs	r1, #128	; 0x80
 800a908:	0049      	lsls	r1, r1, #1
 800a90a:	430a      	orrs	r2, r1
 800a90c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a90e:	f7fe ff15 	bl	800973c <HAL_GetTick>
 800a912:	0003      	movs	r3, r0
 800a914:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a916:	e00b      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a918:	f7fe ff10 	bl	800973c <HAL_GetTick>
 800a91c:	0002      	movs	r2, r0
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d904      	bls.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a926:	2313      	movs	r3, #19
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	2203      	movs	r2, #3
 800a92c:	701a      	strb	r2, [r3, #0]
        break;
 800a92e:	e005      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a930:	4b6f      	ldr	r3, [pc, #444]	; (800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4013      	ands	r3, r2
 800a93a:	d0ed      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a93c:	2313      	movs	r3, #19
 800a93e:	18fb      	adds	r3, r7, r3
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d154      	bne.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a946:	4b69      	ldr	r3, [pc, #420]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a94a:	23c0      	movs	r3, #192	; 0xc0
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4013      	ands	r3, r2
 800a950:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d019      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d014      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a962:	4b62      	ldr	r3, [pc, #392]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a966:	4a63      	ldr	r2, [pc, #396]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a968:	4013      	ands	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a96c:	4b5f      	ldr	r3, [pc, #380]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a96e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a970:	4b5e      	ldr	r3, [pc, #376]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a972:	2180      	movs	r1, #128	; 0x80
 800a974:	0249      	lsls	r1, r1, #9
 800a976:	430a      	orrs	r2, r1
 800a978:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a97a:	4b5c      	ldr	r3, [pc, #368]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a97c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a97e:	4b5b      	ldr	r3, [pc, #364]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a980:	495d      	ldr	r1, [pc, #372]	; (800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a982:	400a      	ands	r2, r1
 800a984:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a986:	4b59      	ldr	r3, [pc, #356]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2201      	movs	r2, #1
 800a990:	4013      	ands	r3, r2
 800a992:	d016      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a994:	f7fe fed2 	bl	800973c <HAL_GetTick>
 800a998:	0003      	movs	r3, r0
 800a99a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a99c:	e00c      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a99e:	f7fe fecd 	bl	800973c <HAL_GetTick>
 800a9a2:	0002      	movs	r2, r0
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	4a54      	ldr	r2, [pc, #336]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d904      	bls.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a9ae:	2313      	movs	r3, #19
 800a9b0:	18fb      	adds	r3, r7, r3
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	701a      	strb	r2, [r3, #0]
            break;
 800a9b6:	e004      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9b8:	4b4c      	ldr	r3, [pc, #304]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9bc:	2202      	movs	r2, #2
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d0ed      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a9c2:	2313      	movs	r3, #19
 800a9c4:	18fb      	adds	r3, r7, r3
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9cc:	4b47      	ldr	r3, [pc, #284]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d0:	4a48      	ldr	r2, [pc, #288]	; (800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	0019      	movs	r1, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	699a      	ldr	r2, [r3, #24]
 800a9da:	4b44      	ldr	r3, [pc, #272]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	65da      	str	r2, [r3, #92]	; 0x5c
 800a9e0:	e00c      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a9e2:	2312      	movs	r3, #18
 800a9e4:	18fb      	adds	r3, r7, r3
 800a9e6:	2213      	movs	r2, #19
 800a9e8:	18ba      	adds	r2, r7, r2
 800a9ea:	7812      	ldrb	r2, [r2, #0]
 800a9ec:	701a      	strb	r2, [r3, #0]
 800a9ee:	e005      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f0:	2312      	movs	r3, #18
 800a9f2:	18fb      	adds	r3, r7, r3
 800a9f4:	2213      	movs	r2, #19
 800a9f6:	18ba      	adds	r2, r7, r2
 800a9f8:	7812      	ldrb	r2, [r2, #0]
 800a9fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9fc:	2311      	movs	r3, #17
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d105      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa06:	4b39      	ldr	r3, [pc, #228]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa0a:	4b38      	ldr	r3, [pc, #224]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa0c:	493c      	ldr	r1, [pc, #240]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800aa0e:	400a      	ands	r2, r1
 800aa10:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2201      	movs	r2, #1
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d009      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa1c:	4b33      	ldr	r3, [pc, #204]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa20:	2203      	movs	r2, #3
 800aa22:	4393      	bics	r3, r2
 800aa24:	0019      	movs	r1, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	4b30      	ldr	r3, [pc, #192]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2202      	movs	r2, #2
 800aa36:	4013      	ands	r3, r2
 800aa38:	d009      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa3a:	4b2c      	ldr	r3, [pc, #176]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3e:	220c      	movs	r2, #12
 800aa40:	4393      	bics	r3, r2
 800aa42:	0019      	movs	r1, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	4b28      	ldr	r3, [pc, #160]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2220      	movs	r2, #32
 800aa54:	4013      	ands	r3, r2
 800aa56:	d009      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa58:	4b24      	ldr	r3, [pc, #144]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5c:	4a29      	ldr	r2, [pc, #164]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	0019      	movs	r1, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	4b21      	ldr	r3, [pc, #132]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	2380      	movs	r3, #128	; 0x80
 800aa72:	01db      	lsls	r3, r3, #7
 800aa74:	4013      	ands	r3, r2
 800aa76:	d015      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa78:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	0899      	lsrs	r1, r3, #2
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695a      	ldr	r2, [r3, #20]
 800aa84:	4b19      	ldr	r3, [pc, #100]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa86:	430a      	orrs	r2, r1
 800aa88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	695a      	ldr	r2, [r3, #20]
 800aa8e:	2380      	movs	r3, #128	; 0x80
 800aa90:	05db      	lsls	r3, r3, #23
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d106      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aa96:	4b15      	ldr	r3, [pc, #84]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	4b14      	ldr	r3, [pc, #80]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aa9c:	2180      	movs	r1, #128	; 0x80
 800aa9e:	0249      	lsls	r1, r1, #9
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	2380      	movs	r3, #128	; 0x80
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	4013      	ands	r3, r2
 800aaae:	d016      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800aab0:	4b0e      	ldr	r3, [pc, #56]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab4:	4a14      	ldr	r2, [pc, #80]	; (800ab08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800aab6:	4013      	ands	r3, r2
 800aab8:	0019      	movs	r1, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aac0:	430a      	orrs	r2, r1
 800aac2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	2380      	movs	r3, #128	; 0x80
 800aaca:	01db      	lsls	r3, r3, #7
 800aacc:	429a      	cmp	r2, r3
 800aace:	d106      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aad0:	4b06      	ldr	r3, [pc, #24]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aad2:	68da      	ldr	r2, [r3, #12]
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800aad6:	2180      	movs	r1, #128	; 0x80
 800aad8:	0249      	lsls	r1, r1, #9
 800aada:	430a      	orrs	r2, r1
 800aadc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800aade:	2312      	movs	r3, #18
 800aae0:	18fb      	adds	r3, r7, r3
 800aae2:	781b      	ldrb	r3, [r3, #0]
}
 800aae4:	0018      	movs	r0, r3
 800aae6:	46bd      	mov	sp, r7
 800aae8:	b006      	add	sp, #24
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	40021000 	.word	0x40021000
 800aaf0:	40007000 	.word	0x40007000
 800aaf4:	fffffcff 	.word	0xfffffcff
 800aaf8:	fffeffff 	.word	0xfffeffff
 800aafc:	00001388 	.word	0x00001388
 800ab00:	efffffff 	.word	0xefffffff
 800ab04:	ffffcfff 	.word	0xffffcfff
 800ab08:	ffff3fff 	.word	0xffff3fff

0800ab0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ab0c:	b5b0      	push	{r4, r5, r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab14:	230f      	movs	r3, #15
 800ab16:	18fb      	adds	r3, r7, r3
 800ab18:	2201      	movs	r2, #1
 800ab1a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d100      	bne.n	800ab24 <HAL_RTC_Init+0x18>
 800ab22:	e080      	b.n	800ac26 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2229      	movs	r2, #41	; 0x29
 800ab28:	5c9b      	ldrb	r3, [r3, r2]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10b      	bne.n	800ab48 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2228      	movs	r2, #40	; 0x28
 800ab34:	2100      	movs	r1, #0
 800ab36:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2288      	movs	r2, #136	; 0x88
 800ab3c:	0212      	lsls	r2, r2, #8
 800ab3e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	0018      	movs	r0, r3
 800ab44:	f7fe fb14 	bl	8009170 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2229      	movs	r2, #41	; 0x29
 800ab4c:	2102      	movs	r1, #2
 800ab4e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	22ca      	movs	r2, #202	; 0xca
 800ab56:	625a      	str	r2, [r3, #36]	; 0x24
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2253      	movs	r2, #83	; 0x53
 800ab5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ab60:	250f      	movs	r5, #15
 800ab62:	197c      	adds	r4, r7, r5
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	0018      	movs	r0, r3
 800ab68:	f000 f88d 	bl	800ac86 <RTC_EnterInitMode>
 800ab6c:	0003      	movs	r3, r0
 800ab6e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800ab70:	0028      	movs	r0, r5
 800ab72:	183b      	adds	r3, r7, r0
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d148      	bne.n	800ac0c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	699a      	ldr	r2, [r3, #24]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	492b      	ldr	r1, [pc, #172]	; (800ac34 <HAL_RTC_Init+0x128>)
 800ab86:	400a      	ands	r2, r1
 800ab88:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6999      	ldr	r1, [r3, #24]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6912      	ldr	r2, [r2, #16]
 800abb0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	6919      	ldr	r1, [r3, #16]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	041a      	lsls	r2, r3, #16
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800abc6:	0005      	movs	r5, r0
 800abc8:	183c      	adds	r4, r7, r0
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	0018      	movs	r0, r3
 800abce:	f000 f89d 	bl	800ad0c <RTC_ExitInitMode>
 800abd2:	0003      	movs	r3, r0
 800abd4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800abd6:	197b      	adds	r3, r7, r5
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d116      	bne.n	800ac0c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	00d2      	lsls	r2, r2, #3
 800abea:	08d2      	lsrs	r2, r2, #3
 800abec:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6999      	ldr	r1, [r3, #24]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	431a      	orrs	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	22ff      	movs	r2, #255	; 0xff
 800ac12:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800ac14:	230f      	movs	r3, #15
 800ac16:	18fb      	adds	r3, r7, r3
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d103      	bne.n	800ac26 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2229      	movs	r2, #41	; 0x29
 800ac22:	2101      	movs	r1, #1
 800ac24:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800ac26:	230f      	movs	r3, #15
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	781b      	ldrb	r3, [r3, #0]
}
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	b004      	add	sp, #16
 800ac32:	bdb0      	pop	{r4, r5, r7, pc}
 800ac34:	fb8fffbf 	.word	0xfb8fffbf

0800ac38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	21a0      	movs	r1, #160	; 0xa0
 800ac4c:	438a      	bics	r2, r1
 800ac4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ac50:	f7fe fd74 	bl	800973c <HAL_GetTick>
 800ac54:	0003      	movs	r3, r0
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac58:	e00a      	b.n	800ac70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac5a:	f7fe fd6f 	bl	800973c <HAL_GetTick>
 800ac5e:	0002      	movs	r2, r0
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	23fa      	movs	r3, #250	; 0xfa
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d901      	bls.n	800ac70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e006      	b.n	800ac7e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	2220      	movs	r2, #32
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d0ee      	beq.n	800ac5a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	0018      	movs	r0, r3
 800ac80:	46bd      	mov	sp, r7
 800ac82:	b004      	add	sp, #16
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b084      	sub	sp, #16
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800ac8e:	230f      	movs	r3, #15
 800ac90:	18fb      	adds	r3, r7, r3
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	2240      	movs	r2, #64	; 0x40
 800ac9e:	4013      	ands	r3, r2
 800aca0:	d12c      	bne.n	800acfc <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2180      	movs	r1, #128	; 0x80
 800acae:	430a      	orrs	r2, r1
 800acb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800acb2:	f7fe fd43 	bl	800973c <HAL_GetTick>
 800acb6:	0003      	movs	r3, r0
 800acb8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800acba:	e014      	b.n	800ace6 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800acbc:	f7fe fd3e 	bl	800973c <HAL_GetTick>
 800acc0:	0002      	movs	r2, r0
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	1ad2      	subs	r2, r2, r3
 800acc6:	200f      	movs	r0, #15
 800acc8:	183b      	adds	r3, r7, r0
 800acca:	1839      	adds	r1, r7, r0
 800accc:	7809      	ldrb	r1, [r1, #0]
 800acce:	7019      	strb	r1, [r3, #0]
 800acd0:	23fa      	movs	r3, #250	; 0xfa
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d906      	bls.n	800ace6 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800acd8:	183b      	adds	r3, r7, r0
 800acda:	2203      	movs	r2, #3
 800acdc:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2229      	movs	r2, #41	; 0x29
 800ace2:	2103      	movs	r1, #3
 800ace4:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	2240      	movs	r2, #64	; 0x40
 800acee:	4013      	ands	r3, r2
 800acf0:	d104      	bne.n	800acfc <RTC_EnterInitMode+0x76>
 800acf2:	230f      	movs	r3, #15
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d1df      	bne.n	800acbc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800acfc:	230f      	movs	r3, #15
 800acfe:	18fb      	adds	r3, r7, r3
 800ad00:	781b      	ldrb	r3, [r3, #0]
}
 800ad02:	0018      	movs	r0, r3
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b004      	add	sp, #16
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad0c:	b590      	push	{r4, r7, lr}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad14:	240f      	movs	r4, #15
 800ad16:	193b      	adds	r3, r7, r4
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ad1c:	4b1c      	ldr	r3, [pc, #112]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad22:	2180      	movs	r1, #128	; 0x80
 800ad24:	438a      	bics	r2, r1
 800ad26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ad28:	4b19      	ldr	r3, [pc, #100]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	4013      	ands	r3, r2
 800ad30:	d10d      	bne.n	800ad4e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	0018      	movs	r0, r3
 800ad36:	f7ff ff7f 	bl	800ac38 <HAL_RTC_WaitForSynchro>
 800ad3a:	1e03      	subs	r3, r0, #0
 800ad3c:	d021      	beq.n	800ad82 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2229      	movs	r2, #41	; 0x29
 800ad42:	2103      	movs	r1, #3
 800ad44:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad46:	193b      	adds	r3, r7, r4
 800ad48:	2203      	movs	r2, #3
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	e019      	b.n	800ad82 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad4e:	4b10      	ldr	r3, [pc, #64]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	4b0f      	ldr	r3, [pc, #60]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad54:	2120      	movs	r1, #32
 800ad56:	438a      	bics	r2, r1
 800ad58:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f7ff ff6b 	bl	800ac38 <HAL_RTC_WaitForSynchro>
 800ad62:	1e03      	subs	r3, r0, #0
 800ad64:	d007      	beq.n	800ad76 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2229      	movs	r2, #41	; 0x29
 800ad6a:	2103      	movs	r1, #3
 800ad6c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad6e:	230f      	movs	r3, #15
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	2203      	movs	r2, #3
 800ad74:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad76:	4b06      	ldr	r3, [pc, #24]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad78:	699a      	ldr	r2, [r3, #24]
 800ad7a:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <RTC_ExitInitMode+0x84>)
 800ad7c:	2120      	movs	r1, #32
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ad82:	230f      	movs	r3, #15
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	781b      	ldrb	r3, [r3, #0]
}
 800ad88:	0018      	movs	r0, r3
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	b005      	add	sp, #20
 800ad8e:	bd90      	pop	{r4, r7, pc}
 800ad90:	40002800 	.word	0x40002800

0800ad94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e0a8      	b.n	800aef8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d109      	bne.n	800adc2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	2382      	movs	r3, #130	; 0x82
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d009      	beq.n	800adce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	61da      	str	r2, [r3, #28]
 800adc0:	e005      	b.n	800adce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	225d      	movs	r2, #93	; 0x5d
 800add8:	5c9b      	ldrb	r3, [r3, r2]
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	225c      	movs	r2, #92	; 0x5c
 800ade4:	2100      	movs	r1, #0
 800ade6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	0018      	movs	r0, r3
 800adec:	f7fe f9fe 	bl	80091ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	225d      	movs	r2, #93	; 0x5d
 800adf4:	2102      	movs	r1, #2
 800adf6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2140      	movs	r1, #64	; 0x40
 800ae04:	438a      	bics	r2, r1
 800ae06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68da      	ldr	r2, [r3, #12]
 800ae0c:	23e0      	movs	r3, #224	; 0xe0
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d902      	bls.n	800ae1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	e002      	b.n	800ae20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae1a:	2380      	movs	r3, #128	; 0x80
 800ae1c:	015b      	lsls	r3, r3, #5
 800ae1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68da      	ldr	r2, [r3, #12]
 800ae24:	23f0      	movs	r3, #240	; 0xf0
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d008      	beq.n	800ae3e <HAL_SPI_Init+0xaa>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	23e0      	movs	r3, #224	; 0xe0
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d002      	beq.n	800ae3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	2382      	movs	r3, #130	; 0x82
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	401a      	ands	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6899      	ldr	r1, [r3, #8]
 800ae4c:	2384      	movs	r3, #132	; 0x84
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	400b      	ands	r3, r1
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2102      	movs	r1, #2
 800ae5a:	400b      	ands	r3, r1
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	2101      	movs	r1, #1
 800ae64:	400b      	ands	r3, r1
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6999      	ldr	r1, [r3, #24]
 800ae6c:	2380      	movs	r3, #128	; 0x80
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	400b      	ands	r3, r1
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	2138      	movs	r1, #56	; 0x38
 800ae7a:	400b      	ands	r3, r1
 800ae7c:	431a      	orrs	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	2180      	movs	r1, #128	; 0x80
 800ae84:	400b      	ands	r3, r1
 800ae86:	431a      	orrs	r2, r3
 800ae88:	0011      	movs	r1, r2
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae8e:	2380      	movs	r3, #128	; 0x80
 800ae90:	019b      	lsls	r3, r3, #6
 800ae92:	401a      	ands	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	0c1b      	lsrs	r3, r3, #16
 800aea2:	2204      	movs	r2, #4
 800aea4:	401a      	ands	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeaa:	2110      	movs	r1, #16
 800aeac:	400b      	ands	r3, r1
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb4:	2108      	movs	r1, #8
 800aeb6:	400b      	ands	r3, r1
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68d9      	ldr	r1, [r3, #12]
 800aebe:	23f0      	movs	r3, #240	; 0xf0
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	400b      	ands	r3, r1
 800aec4:	431a      	orrs	r2, r3
 800aec6:	0011      	movs	r1, r2
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	2380      	movs	r3, #128	; 0x80
 800aecc:	015b      	lsls	r3, r3, #5
 800aece:	401a      	ands	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	430a      	orrs	r2, r1
 800aed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69da      	ldr	r2, [r3, #28]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4907      	ldr	r1, [pc, #28]	; (800af00 <HAL_SPI_Init+0x16c>)
 800aee4:	400a      	ands	r2, r1
 800aee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	225d      	movs	r2, #93	; 0x5d
 800aef2:	2101      	movs	r1, #1
 800aef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	0018      	movs	r0, r3
 800aefa:	46bd      	mov	sp, r7
 800aefc:	b004      	add	sp, #16
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	fffff7ff 	.word	0xfffff7ff

0800af04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	1dbb      	adds	r3, r7, #6
 800af12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af14:	231f      	movs	r3, #31
 800af16:	18fb      	adds	r3, r7, r3
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	225c      	movs	r2, #92	; 0x5c
 800af20:	5c9b      	ldrb	r3, [r3, r2]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d101      	bne.n	800af2a <HAL_SPI_Transmit+0x26>
 800af26:	2302      	movs	r3, #2
 800af28:	e140      	b.n	800b1ac <HAL_SPI_Transmit+0x2a8>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	225c      	movs	r2, #92	; 0x5c
 800af2e:	2101      	movs	r1, #1
 800af30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af32:	f7fe fc03 	bl	800973c <HAL_GetTick>
 800af36:	0003      	movs	r3, r0
 800af38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af3a:	2316      	movs	r3, #22
 800af3c:	18fb      	adds	r3, r7, r3
 800af3e:	1dba      	adds	r2, r7, #6
 800af40:	8812      	ldrh	r2, [r2, #0]
 800af42:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	225d      	movs	r2, #93	; 0x5d
 800af48:	5c9b      	ldrb	r3, [r3, r2]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d004      	beq.n	800af5a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800af50:	231f      	movs	r3, #31
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	2202      	movs	r2, #2
 800af56:	701a      	strb	r2, [r3, #0]
    goto error;
 800af58:	e11d      	b.n	800b196 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_SPI_Transmit+0x64>
 800af60:	1dbb      	adds	r3, r7, #6
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800af68:	231f      	movs	r3, #31
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2201      	movs	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
    goto error;
 800af70:	e111      	b.n	800b196 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	225d      	movs	r2, #93	; 0x5d
 800af76:	2103      	movs	r1, #3
 800af78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	1dba      	adds	r2, r7, #6
 800af8a:	8812      	ldrh	r2, [r2, #0]
 800af8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1dba      	adds	r2, r7, #6
 800af92:	8812      	ldrh	r2, [r2, #0]
 800af94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2244      	movs	r2, #68	; 0x44
 800afa0:	2100      	movs	r1, #0
 800afa2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2246      	movs	r2, #70	; 0x46
 800afa8:	2100      	movs	r1, #0
 800afaa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d110      	bne.n	800afe6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2140      	movs	r1, #64	; 0x40
 800afd0:	438a      	bics	r2, r1
 800afd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2180      	movs	r1, #128	; 0x80
 800afe0:	01c9      	lsls	r1, r1, #7
 800afe2:	430a      	orrs	r2, r1
 800afe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2240      	movs	r2, #64	; 0x40
 800afee:	4013      	ands	r3, r2
 800aff0:	2b40      	cmp	r3, #64	; 0x40
 800aff2:	d007      	beq.n	800b004 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2140      	movs	r1, #64	; 0x40
 800b000:	430a      	orrs	r2, r1
 800b002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	23e0      	movs	r3, #224	; 0xe0
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d94e      	bls.n	800b0ae <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <HAL_SPI_Transmit+0x11e>
 800b018:	2316      	movs	r3, #22
 800b01a:	18fb      	adds	r3, r7, r3
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d13f      	bne.n	800b0a2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	881a      	ldrh	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	1c9a      	adds	r2, r3, #2
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	3b01      	subs	r3, #1
 800b040:	b29a      	uxth	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b046:	e02c      	b.n	800b0a2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	2202      	movs	r2, #2
 800b050:	4013      	ands	r3, r2
 800b052:	2b02      	cmp	r3, #2
 800b054:	d112      	bne.n	800b07c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	881a      	ldrh	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	1c9a      	adds	r2, r3, #2
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b070:	b29b      	uxth	r3, r3
 800b072:	3b01      	subs	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b07a:	e012      	b.n	800b0a2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b07c:	f7fe fb5e 	bl	800973c <HAL_GetTick>
 800b080:	0002      	movs	r2, r0
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d802      	bhi.n	800b092 <HAL_SPI_Transmit+0x18e>
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	3301      	adds	r3, #1
 800b090:	d102      	bne.n	800b098 <HAL_SPI_Transmit+0x194>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b098:	231f      	movs	r3, #31
 800b09a:	18fb      	adds	r3, r7, r3
 800b09c:	2203      	movs	r2, #3
 800b09e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b0a0:	e079      	b.n	800b196 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1cd      	bne.n	800b048 <HAL_SPI_Transmit+0x144>
 800b0ac:	e04f      	b.n	800b14e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d004      	beq.n	800b0c0 <HAL_SPI_Transmit+0x1bc>
 800b0b6:	2316      	movs	r3, #22
 800b0b8:	18fb      	adds	r3, r7, r3
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d141      	bne.n	800b144 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	7812      	ldrb	r2, [r2, #0]
 800b0cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b0e6:	e02d      	b.n	800b144 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d113      	bne.n	800b11e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	7812      	ldrb	r2, [r2, #0]
 800b102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b112:	b29b      	uxth	r3, r3
 800b114:	3b01      	subs	r3, #1
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b11c:	e012      	b.n	800b144 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b11e:	f7fe fb0d 	bl	800973c <HAL_GetTick>
 800b122:	0002      	movs	r2, r0
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d802      	bhi.n	800b134 <HAL_SPI_Transmit+0x230>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	3301      	adds	r3, #1
 800b132:	d102      	bne.n	800b13a <HAL_SPI_Transmit+0x236>
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d104      	bne.n	800b144 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b13a:	231f      	movs	r3, #31
 800b13c:	18fb      	adds	r3, r7, r3
 800b13e:	2203      	movs	r2, #3
 800b140:	701a      	strb	r2, [r3, #0]
          goto error;
 800b142:	e028      	b.n	800b196 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1cc      	bne.n	800b0e8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	0018      	movs	r0, r3
 800b156:	f000 fce5 	bl	800bb24 <SPI_EndRxTxTransaction>
 800b15a:	1e03      	subs	r3, r0, #0
 800b15c:	d002      	beq.n	800b164 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2220      	movs	r2, #32
 800b162:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	613b      	str	r3, [r7, #16]
 800b180:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b18a:	231f      	movs	r3, #31
 800b18c:	18fb      	adds	r3, r7, r3
 800b18e:	2201      	movs	r2, #1
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	e000      	b.n	800b196 <HAL_SPI_Transmit+0x292>
  }

error:
 800b194:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	225d      	movs	r2, #93	; 0x5d
 800b19a:	2101      	movs	r1, #1
 800b19c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	225c      	movs	r2, #92	; 0x5c
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b1a6:	231f      	movs	r3, #31
 800b1a8:	18fb      	adds	r3, r7, r3
 800b1aa:	781b      	ldrb	r3, [r3, #0]
}
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	b008      	add	sp, #32
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b4:	b590      	push	{r4, r7, lr}
 800b1b6:	b089      	sub	sp, #36	; 0x24
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	1dbb      	adds	r3, r7, #6
 800b1c2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1c4:	2317      	movs	r3, #23
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	685a      	ldr	r2, [r3, #4]
 800b1d0:	2382      	movs	r3, #130	; 0x82
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d113      	bne.n	800b200 <HAL_SPI_Receive+0x4c>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10f      	bne.n	800b200 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	225d      	movs	r2, #93	; 0x5d
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b1e8:	1dbb      	adds	r3, r7, #6
 800b1ea:	881c      	ldrh	r4, [r3, #0]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	0023      	movs	r3, r4
 800b1f8:	f000 f928 	bl	800b44c <HAL_SPI_TransmitReceive>
 800b1fc:	0003      	movs	r3, r0
 800b1fe:	e11c      	b.n	800b43a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	225c      	movs	r2, #92	; 0x5c
 800b204:	5c9b      	ldrb	r3, [r3, r2]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <HAL_SPI_Receive+0x5a>
 800b20a:	2302      	movs	r3, #2
 800b20c:	e115      	b.n	800b43a <HAL_SPI_Receive+0x286>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	225c      	movs	r2, #92	; 0x5c
 800b212:	2101      	movs	r1, #1
 800b214:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b216:	f7fe fa91 	bl	800973c <HAL_GetTick>
 800b21a:	0003      	movs	r3, r0
 800b21c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	225d      	movs	r2, #93	; 0x5d
 800b222:	5c9b      	ldrb	r3, [r3, r2]
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b01      	cmp	r3, #1
 800b228:	d004      	beq.n	800b234 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b22a:	2317      	movs	r3, #23
 800b22c:	18fb      	adds	r3, r7, r3
 800b22e:	2202      	movs	r2, #2
 800b230:	701a      	strb	r2, [r3, #0]
    goto error;
 800b232:	e0f7      	b.n	800b424 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <HAL_SPI_Receive+0x8e>
 800b23a:	1dbb      	adds	r3, r7, #6
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d104      	bne.n	800b24c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b242:	2317      	movs	r3, #23
 800b244:	18fb      	adds	r3, r7, r3
 800b246:	2201      	movs	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
    goto error;
 800b24a:	e0eb      	b.n	800b424 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	225d      	movs	r2, #93	; 0x5d
 800b250:	2104      	movs	r1, #4
 800b252:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	1dba      	adds	r2, r7, #6
 800b264:	2144      	movs	r1, #68	; 0x44
 800b266:	8812      	ldrh	r2, [r2, #0]
 800b268:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	1dba      	adds	r2, r7, #6
 800b26e:	2146      	movs	r1, #70	; 0x46
 800b270:	8812      	ldrh	r2, [r2, #0]
 800b272:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	23e0      	movs	r3, #224	; 0xe0
 800b298:	00db      	lsls	r3, r3, #3
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d908      	bls.n	800b2b0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4966      	ldr	r1, [pc, #408]	; (800b444 <HAL_SPI_Receive+0x290>)
 800b2aa:	400a      	ands	r2, r1
 800b2ac:	605a      	str	r2, [r3, #4]
 800b2ae:	e008      	b.n	800b2c2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2180      	movs	r1, #128	; 0x80
 800b2bc:	0149      	lsls	r1, r1, #5
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	2380      	movs	r3, #128	; 0x80
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d10f      	bne.n	800b2ee <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2140      	movs	r1, #64	; 0x40
 800b2da:	438a      	bics	r2, r1
 800b2dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4957      	ldr	r1, [pc, #348]	; (800b448 <HAL_SPI_Receive+0x294>)
 800b2ea:	400a      	ands	r2, r1
 800b2ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2240      	movs	r2, #64	; 0x40
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	2b40      	cmp	r3, #64	; 0x40
 800b2fa:	d007      	beq.n	800b30c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2140      	movs	r1, #64	; 0x40
 800b308:	430a      	orrs	r2, r1
 800b30a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	23e0      	movs	r3, #224	; 0xe0
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	429a      	cmp	r2, r3
 800b316:	d900      	bls.n	800b31a <HAL_SPI_Receive+0x166>
 800b318:	e069      	b.n	800b3ee <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b31a:	e031      	b.n	800b380 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	2201      	movs	r2, #1
 800b324:	4013      	ands	r3, r2
 800b326:	2b01      	cmp	r3, #1
 800b328:	d117      	bne.n	800b35a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	330c      	adds	r3, #12
 800b330:	001a      	movs	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b336:	7812      	ldrb	r2, [r2, #0]
 800b338:	b2d2      	uxtb	r2, r2
 800b33a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2246      	movs	r2, #70	; 0x46
 800b34a:	5a9b      	ldrh	r3, [r3, r2]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	3b01      	subs	r3, #1
 800b350:	b299      	uxth	r1, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2246      	movs	r2, #70	; 0x46
 800b356:	5299      	strh	r1, [r3, r2]
 800b358:	e012      	b.n	800b380 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b35a:	f7fe f9ef 	bl	800973c <HAL_GetTick>
 800b35e:	0002      	movs	r2, r0
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d802      	bhi.n	800b370 <HAL_SPI_Receive+0x1bc>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	d102      	bne.n	800b376 <HAL_SPI_Receive+0x1c2>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d104      	bne.n	800b380 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b376:	2317      	movs	r3, #23
 800b378:	18fb      	adds	r3, r7, r3
 800b37a:	2203      	movs	r2, #3
 800b37c:	701a      	strb	r2, [r3, #0]
          goto error;
 800b37e:	e051      	b.n	800b424 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2246      	movs	r2, #70	; 0x46
 800b384:	5a9b      	ldrh	r3, [r3, r2]
 800b386:	b29b      	uxth	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1c7      	bne.n	800b31c <HAL_SPI_Receive+0x168>
 800b38c:	e035      	b.n	800b3fa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	2201      	movs	r2, #1
 800b396:	4013      	ands	r3, r2
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d115      	bne.n	800b3c8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a6:	b292      	uxth	r2, r2
 800b3a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	1c9a      	adds	r2, r3, #2
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2246      	movs	r2, #70	; 0x46
 800b3b8:	5a9b      	ldrh	r3, [r3, r2]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b299      	uxth	r1, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2246      	movs	r2, #70	; 0x46
 800b3c4:	5299      	strh	r1, [r3, r2]
 800b3c6:	e012      	b.n	800b3ee <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3c8:	f7fe f9b8 	bl	800973c <HAL_GetTick>
 800b3cc:	0002      	movs	r2, r0
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d802      	bhi.n	800b3de <HAL_SPI_Receive+0x22a>
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	d102      	bne.n	800b3e4 <HAL_SPI_Receive+0x230>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b3e4:	2317      	movs	r3, #23
 800b3e6:	18fb      	adds	r3, r7, r3
 800b3e8:	2203      	movs	r2, #3
 800b3ea:	701a      	strb	r2, [r3, #0]
          goto error;
 800b3ec:	e01a      	b.n	800b424 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2246      	movs	r2, #70	; 0x46
 800b3f2:	5a9b      	ldrh	r3, [r3, r2]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1c9      	bne.n	800b38e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	0018      	movs	r0, r3
 800b402:	f000 fb31 	bl	800ba68 <SPI_EndRxTransaction>
 800b406:	1e03      	subs	r3, r0, #0
 800b408:	d002      	beq.n	800b410 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2220      	movs	r2, #32
 800b40e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b418:	2317      	movs	r3, #23
 800b41a:	18fb      	adds	r3, r7, r3
 800b41c:	2201      	movs	r2, #1
 800b41e:	701a      	strb	r2, [r3, #0]
 800b420:	e000      	b.n	800b424 <HAL_SPI_Receive+0x270>
  }

error :
 800b422:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	225d      	movs	r2, #93	; 0x5d
 800b428:	2101      	movs	r1, #1
 800b42a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	225c      	movs	r2, #92	; 0x5c
 800b430:	2100      	movs	r1, #0
 800b432:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b434:	2317      	movs	r3, #23
 800b436:	18fb      	adds	r3, r7, r3
 800b438:	781b      	ldrb	r3, [r3, #0]
}
 800b43a:	0018      	movs	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	b007      	add	sp, #28
 800b440:	bd90      	pop	{r4, r7, pc}
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	ffffefff 	.word	0xffffefff
 800b448:	ffffbfff 	.word	0xffffbfff

0800b44c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08a      	sub	sp, #40	; 0x28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	001a      	movs	r2, r3
 800b45a:	1cbb      	adds	r3, r7, #2
 800b45c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b45e:	2301      	movs	r3, #1
 800b460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b462:	2323      	movs	r3, #35	; 0x23
 800b464:	18fb      	adds	r3, r7, r3
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	225c      	movs	r2, #92	; 0x5c
 800b46e:	5c9b      	ldrb	r3, [r3, r2]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_SPI_TransmitReceive+0x2c>
 800b474:	2302      	movs	r3, #2
 800b476:	e1b5      	b.n	800b7e4 <HAL_SPI_TransmitReceive+0x398>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	225c      	movs	r2, #92	; 0x5c
 800b47c:	2101      	movs	r1, #1
 800b47e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b480:	f7fe f95c 	bl	800973c <HAL_GetTick>
 800b484:	0003      	movs	r3, r0
 800b486:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b488:	201b      	movs	r0, #27
 800b48a:	183b      	adds	r3, r7, r0
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	215d      	movs	r1, #93	; 0x5d
 800b490:	5c52      	ldrb	r2, [r2, r1]
 800b492:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b49a:	2312      	movs	r3, #18
 800b49c:	18fb      	adds	r3, r7, r3
 800b49e:	1cba      	adds	r2, r7, #2
 800b4a0:	8812      	ldrh	r2, [r2, #0]
 800b4a2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4a4:	183b      	adds	r3, r7, r0
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d011      	beq.n	800b4d0 <HAL_SPI_TransmitReceive+0x84>
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	2382      	movs	r3, #130	; 0x82
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d107      	bne.n	800b4c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <HAL_SPI_TransmitReceive+0x7a>
 800b4be:	183b      	adds	r3, r7, r0
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d004      	beq.n	800b4d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b4c6:	2323      	movs	r3, #35	; 0x23
 800b4c8:	18fb      	adds	r3, r7, r3
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4ce:	e17e      	b.n	800b7ce <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <HAL_SPI_TransmitReceive+0x98>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <HAL_SPI_TransmitReceive+0x98>
 800b4dc:	1cbb      	adds	r3, r7, #2
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d104      	bne.n	800b4ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b4e4:	2323      	movs	r3, #35	; 0x23
 800b4e6:	18fb      	adds	r3, r7, r3
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4ec:	e16f      	b.n	800b7ce <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	225d      	movs	r2, #93	; 0x5d
 800b4f2:	5c9b      	ldrb	r3, [r3, r2]
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d003      	beq.n	800b502 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	225d      	movs	r2, #93	; 0x5d
 800b4fe:	2105      	movs	r1, #5
 800b500:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	1cba      	adds	r2, r7, #2
 800b512:	2146      	movs	r1, #70	; 0x46
 800b514:	8812      	ldrh	r2, [r2, #0]
 800b516:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	1cba      	adds	r2, r7, #2
 800b51c:	2144      	movs	r1, #68	; 0x44
 800b51e:	8812      	ldrh	r2, [r2, #0]
 800b520:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	1cba      	adds	r2, r7, #2
 800b52c:	8812      	ldrh	r2, [r2, #0]
 800b52e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	1cba      	adds	r2, r7, #2
 800b534:	8812      	ldrh	r2, [r2, #0]
 800b536:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2200      	movs	r2, #0
 800b542:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	23e0      	movs	r3, #224	; 0xe0
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d908      	bls.n	800b562 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685a      	ldr	r2, [r3, #4]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	49a4      	ldr	r1, [pc, #656]	; (800b7ec <HAL_SPI_TransmitReceive+0x3a0>)
 800b55c:	400a      	ands	r2, r1
 800b55e:	605a      	str	r2, [r3, #4]
 800b560:	e008      	b.n	800b574 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2180      	movs	r1, #128	; 0x80
 800b56e:	0149      	lsls	r1, r1, #5
 800b570:	430a      	orrs	r2, r1
 800b572:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2240      	movs	r2, #64	; 0x40
 800b57c:	4013      	ands	r3, r2
 800b57e:	2b40      	cmp	r3, #64	; 0x40
 800b580:	d007      	beq.n	800b592 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2140      	movs	r1, #64	; 0x40
 800b58e:	430a      	orrs	r2, r1
 800b590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	23e0      	movs	r3, #224	; 0xe0
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d800      	bhi.n	800b5a0 <HAL_SPI_TransmitReceive+0x154>
 800b59e:	e07f      	b.n	800b6a0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <HAL_SPI_TransmitReceive+0x168>
 800b5a8:	2312      	movs	r3, #18
 800b5aa:	18fb      	adds	r3, r7, r3
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d000      	beq.n	800b5b4 <HAL_SPI_TransmitReceive+0x168>
 800b5b2:	e069      	b.n	800b688 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	881a      	ldrh	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	1c9a      	adds	r2, r3, #2
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5d8:	e056      	b.n	800b688 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d11b      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x1d4>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d016      	beq.n	800b620 <HAL_SPI_TransmitReceive+0x1d4>
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d113      	bne.n	800b620 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	881a      	ldrh	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	1c9a      	adds	r2, r3, #2
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b612:	b29b      	uxth	r3, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	2201      	movs	r2, #1
 800b628:	4013      	ands	r3, r2
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d11c      	bne.n	800b668 <HAL_SPI_TransmitReceive+0x21c>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2246      	movs	r2, #70	; 0x46
 800b632:	5a9b      	ldrh	r3, [r3, r2]
 800b634:	b29b      	uxth	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d016      	beq.n	800b668 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	b292      	uxth	r2, r2
 800b646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64c:	1c9a      	adds	r2, r3, #2
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2246      	movs	r2, #70	; 0x46
 800b656:	5a9b      	ldrh	r3, [r3, r2]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b299      	uxth	r1, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2246      	movs	r2, #70	; 0x46
 800b662:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b664:	2301      	movs	r3, #1
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b668:	f7fe f868 	bl	800973c <HAL_GetTick>
 800b66c:	0002      	movs	r2, r0
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b674:	429a      	cmp	r2, r3
 800b676:	d807      	bhi.n	800b688 <HAL_SPI_TransmitReceive+0x23c>
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	3301      	adds	r3, #1
 800b67c:	d004      	beq.n	800b688 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b67e:	2323      	movs	r3, #35	; 0x23
 800b680:	18fb      	adds	r3, r7, r3
 800b682:	2203      	movs	r2, #3
 800b684:	701a      	strb	r2, [r3, #0]
        goto error;
 800b686:	e0a2      	b.n	800b7ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1a3      	bne.n	800b5da <HAL_SPI_TransmitReceive+0x18e>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2246      	movs	r2, #70	; 0x46
 800b696:	5a9b      	ldrh	r3, [r3, r2]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d19d      	bne.n	800b5da <HAL_SPI_TransmitReceive+0x18e>
 800b69e:	e085      	b.n	800b7ac <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d005      	beq.n	800b6b4 <HAL_SPI_TransmitReceive+0x268>
 800b6a8:	2312      	movs	r3, #18
 800b6aa:	18fb      	adds	r3, r7, r3
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d000      	beq.n	800b6b4 <HAL_SPI_TransmitReceive+0x268>
 800b6b2:	e070      	b.n	800b796 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	330c      	adds	r3, #12
 800b6be:	7812      	ldrb	r2, [r2, #0]
 800b6c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6da:	e05c      	b.n	800b796 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d11c      	bne.n	800b724 <HAL_SPI_TransmitReceive+0x2d8>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d017      	beq.n	800b724 <HAL_SPI_TransmitReceive+0x2d8>
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d114      	bne.n	800b724 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	330c      	adds	r3, #12
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b716:	b29b      	uxth	r3, r3
 800b718:	3b01      	subs	r3, #1
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2201      	movs	r2, #1
 800b72c:	4013      	ands	r3, r2
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d11e      	bne.n	800b770 <HAL_SPI_TransmitReceive+0x324>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2246      	movs	r2, #70	; 0x46
 800b736:	5a9b      	ldrh	r3, [r3, r2]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d018      	beq.n	800b770 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	330c      	adds	r3, #12
 800b744:	001a      	movs	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2246      	movs	r2, #70	; 0x46
 800b75e:	5a9b      	ldrh	r3, [r3, r2]
 800b760:	b29b      	uxth	r3, r3
 800b762:	3b01      	subs	r3, #1
 800b764:	b299      	uxth	r1, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2246      	movs	r2, #70	; 0x46
 800b76a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b76c:	2301      	movs	r3, #1
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b770:	f7fd ffe4 	bl	800973c <HAL_GetTick>
 800b774:	0002      	movs	r2, r0
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d802      	bhi.n	800b786 <HAL_SPI_TransmitReceive+0x33a>
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	3301      	adds	r3, #1
 800b784:	d102      	bne.n	800b78c <HAL_SPI_TransmitReceive+0x340>
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d104      	bne.n	800b796 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800b78c:	2323      	movs	r3, #35	; 0x23
 800b78e:	18fb      	adds	r3, r7, r3
 800b790:	2203      	movs	r2, #3
 800b792:	701a      	strb	r2, [r3, #0]
        goto error;
 800b794:	e01b      	b.n	800b7ce <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d19d      	bne.n	800b6dc <HAL_SPI_TransmitReceive+0x290>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2246      	movs	r2, #70	; 0x46
 800b7a4:	5a9b      	ldrh	r3, [r3, r2]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d197      	bne.n	800b6dc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	f000 f9b6 	bl	800bb24 <SPI_EndRxTxTransaction>
 800b7b8:	1e03      	subs	r3, r0, #0
 800b7ba:	d007      	beq.n	800b7cc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800b7bc:	2323      	movs	r3, #35	; 0x23
 800b7be:	18fb      	adds	r3, r7, r3
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	661a      	str	r2, [r3, #96]	; 0x60
 800b7ca:	e000      	b.n	800b7ce <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800b7cc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	225d      	movs	r2, #93	; 0x5d
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	225c      	movs	r2, #92	; 0x5c
 800b7da:	2100      	movs	r1, #0
 800b7dc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b7de:	2323      	movs	r3, #35	; 0x23
 800b7e0:	18fb      	adds	r3, r7, r3
 800b7e2:	781b      	ldrb	r3, [r3, #0]
}
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b00a      	add	sp, #40	; 0x28
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	ffffefff 	.word	0xffffefff

0800b7f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	225d      	movs	r2, #93	; 0x5d
 800b7fc:	5c9b      	ldrb	r3, [r3, r2]
 800b7fe:	b2db      	uxtb	r3, r3
}
 800b800:	0018      	movs	r0, r3
 800b802:	46bd      	mov	sp, r7
 800b804:	b002      	add	sp, #8
 800b806:	bd80      	pop	{r7, pc}

0800b808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	1dfb      	adds	r3, r7, #7
 800b816:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b818:	f7fd ff90 	bl	800973c <HAL_GetTick>
 800b81c:	0002      	movs	r2, r0
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	18d3      	adds	r3, r2, r3
 800b826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b828:	f7fd ff88 	bl	800973c <HAL_GetTick>
 800b82c:	0003      	movs	r3, r0
 800b82e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b830:	4b3a      	ldr	r3, [pc, #232]	; (800b91c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	015b      	lsls	r3, r3, #5
 800b836:	0d1b      	lsrs	r3, r3, #20
 800b838:	69fa      	ldr	r2, [r7, #28]
 800b83a:	4353      	muls	r3, r2
 800b83c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b83e:	e058      	b.n	800b8f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	d055      	beq.n	800b8f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b846:	f7fd ff79 	bl	800973c <HAL_GetTick>
 800b84a:	0002      	movs	r2, r0
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	429a      	cmp	r2, r3
 800b854:	d902      	bls.n	800b85c <SPI_WaitFlagStateUntilTimeout+0x54>
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d142      	bne.n	800b8e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	21e0      	movs	r1, #224	; 0xe0
 800b868:	438a      	bics	r2, r1
 800b86a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	2382      	movs	r3, #130	; 0x82
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	d113      	bne.n	800b8a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	2380      	movs	r3, #128	; 0x80
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	429a      	cmp	r2, r3
 800b882:	d005      	beq.n	800b890 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	2380      	movs	r3, #128	; 0x80
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d107      	bne.n	800b8a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2140      	movs	r1, #64	; 0x40
 800b89c:	438a      	bics	r2, r1
 800b89e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8a4:	2380      	movs	r3, #128	; 0x80
 800b8a6:	019b      	lsls	r3, r3, #6
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d110      	bne.n	800b8ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	491a      	ldr	r1, [pc, #104]	; (800b920 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b8b8:	400a      	ands	r2, r1
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2180      	movs	r1, #128	; 0x80
 800b8c8:	0189      	lsls	r1, r1, #6
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	225d      	movs	r2, #93	; 0x5d
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	225c      	movs	r2, #92	; 0x5c
 800b8da:	2100      	movs	r1, #0
 800b8dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e017      	b.n	800b912 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	425a      	negs	r2, r3
 800b902:	4153      	adcs	r3, r2
 800b904:	b2db      	uxtb	r3, r3
 800b906:	001a      	movs	r2, r3
 800b908:	1dfb      	adds	r3, r7, #7
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d197      	bne.n	800b840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	0018      	movs	r0, r3
 800b914:	46bd      	mov	sp, r7
 800b916:	b008      	add	sp, #32
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	20000004 	.word	0x20000004
 800b920:	ffffdfff 	.word	0xffffdfff

0800b924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b08a      	sub	sp, #40	; 0x28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b932:	2317      	movs	r3, #23
 800b934:	18fb      	adds	r3, r7, r3
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b93a:	f7fd feff 	bl	800973c <HAL_GetTick>
 800b93e:	0002      	movs	r2, r0
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	18d3      	adds	r3, r2, r3
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b94a:	f7fd fef7 	bl	800973c <HAL_GetTick>
 800b94e:	0003      	movs	r3, r0
 800b950:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	330c      	adds	r3, #12
 800b958:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b95a:	4b41      	ldr	r3, [pc, #260]	; (800ba60 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	0013      	movs	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	189b      	adds	r3, r3, r2
 800b964:	00da      	lsls	r2, r3, #3
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	0d1b      	lsrs	r3, r3, #20
 800b96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96c:	4353      	muls	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b970:	e068      	b.n	800ba44 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	23c0      	movs	r3, #192	; 0xc0
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	429a      	cmp	r2, r3
 800b97a:	d10a      	bne.n	800b992 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d107      	bne.n	800b992 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	b2da      	uxtb	r2, r3
 800b988:	2117      	movs	r1, #23
 800b98a:	187b      	adds	r3, r7, r1
 800b98c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b98e:	187b      	adds	r3, r7, r1
 800b990:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	3301      	adds	r3, #1
 800b996:	d055      	beq.n	800ba44 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b998:	f7fd fed0 	bl	800973c <HAL_GetTick>
 800b99c:	0002      	movs	r2, r0
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d902      	bls.n	800b9ae <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d142      	bne.n	800ba34 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	21e0      	movs	r1, #224	; 0xe0
 800b9ba:	438a      	bics	r2, r1
 800b9bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	2382      	movs	r3, #130	; 0x82
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d113      	bne.n	800b9f2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	689a      	ldr	r2, [r3, #8]
 800b9ce:	2380      	movs	r3, #128	; 0x80
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d005      	beq.n	800b9e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	689a      	ldr	r2, [r3, #8]
 800b9da:	2380      	movs	r3, #128	; 0x80
 800b9dc:	00db      	lsls	r3, r3, #3
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d107      	bne.n	800b9f2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2140      	movs	r1, #64	; 0x40
 800b9ee:	438a      	bics	r2, r1
 800b9f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f6:	2380      	movs	r3, #128	; 0x80
 800b9f8:	019b      	lsls	r3, r3, #6
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d110      	bne.n	800ba20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4916      	ldr	r1, [pc, #88]	; (800ba64 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800ba0a:	400a      	ands	r2, r1
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	0189      	lsls	r1, r1, #6
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	225d      	movs	r2, #93	; 0x5d
 800ba24:	2101      	movs	r1, #1
 800ba26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	225c      	movs	r2, #92	; 0x5c
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e010      	b.n	800ba56 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d18e      	bne.n	800b972 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	0018      	movs	r0, r3
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	b00a      	add	sp, #40	; 0x28
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	20000004 	.word	0x20000004
 800ba64:	ffffdfff 	.word	0xffffdfff

0800ba68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af02      	add	r7, sp, #8
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	2382      	movs	r3, #130	; 0x82
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d113      	bne.n	800baa8 <SPI_EndRxTransaction+0x40>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	2380      	movs	r3, #128	; 0x80
 800ba86:	021b      	lsls	r3, r3, #8
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d005      	beq.n	800ba98 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	689a      	ldr	r2, [r3, #8]
 800ba90:	2380      	movs	r3, #128	; 0x80
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d107      	bne.n	800baa8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2140      	movs	r1, #64	; 0x40
 800baa4:	438a      	bics	r2, r1
 800baa6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	0013      	movs	r3, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	2180      	movs	r1, #128	; 0x80
 800bab6:	f7ff fea7 	bl	800b808 <SPI_WaitFlagStateUntilTimeout>
 800baba:	1e03      	subs	r3, r0, #0
 800babc:	d007      	beq.n	800bace <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bac2:	2220      	movs	r2, #32
 800bac4:	431a      	orrs	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e026      	b.n	800bb1c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	2382      	movs	r3, #130	; 0x82
 800bad4:	005b      	lsls	r3, r3, #1
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d11f      	bne.n	800bb1a <SPI_EndRxTransaction+0xb2>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	689a      	ldr	r2, [r3, #8]
 800bade:	2380      	movs	r3, #128	; 0x80
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d005      	beq.n	800baf2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	2380      	movs	r3, #128	; 0x80
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	429a      	cmp	r2, r3
 800baf0:	d113      	bne.n	800bb1a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	23c0      	movs	r3, #192	; 0xc0
 800baf6:	00d9      	lsls	r1, r3, #3
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	0013      	movs	r3, r2
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7ff ff0f 	bl	800b924 <SPI_WaitFifoStateUntilTimeout>
 800bb06:	1e03      	subs	r3, r0, #0
 800bb08:	d007      	beq.n	800bb1a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb0e:	2220      	movs	r2, #32
 800bb10:	431a      	orrs	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e000      	b.n	800bb1c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b004      	add	sp, #16
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	23c0      	movs	r3, #192	; 0xc0
 800bb34:	0159      	lsls	r1, r3, #5
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	0013      	movs	r3, r2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f7ff fef0 	bl	800b924 <SPI_WaitFifoStateUntilTimeout>
 800bb44:	1e03      	subs	r3, r0, #0
 800bb46:	d007      	beq.n	800bb58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb4c:	2220      	movs	r2, #32
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e027      	b.n	800bba8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	0013      	movs	r3, r2
 800bb62:	2200      	movs	r2, #0
 800bb64:	2180      	movs	r1, #128	; 0x80
 800bb66:	f7ff fe4f 	bl	800b808 <SPI_WaitFlagStateUntilTimeout>
 800bb6a:	1e03      	subs	r3, r0, #0
 800bb6c:	d007      	beq.n	800bb7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb72:	2220      	movs	r2, #32
 800bb74:	431a      	orrs	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e014      	b.n	800bba8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	23c0      	movs	r3, #192	; 0xc0
 800bb82:	00d9      	lsls	r1, r3, #3
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	0013      	movs	r3, r2
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f7ff fec9 	bl	800b924 <SPI_WaitFifoStateUntilTimeout>
 800bb92:	1e03      	subs	r3, r0, #0
 800bb94:	d007      	beq.n	800bba6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e000      	b.n	800bba8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	0018      	movs	r0, r3
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	b004      	add	sp, #16
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e04a      	b.n	800bc58 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	223d      	movs	r2, #61	; 0x3d
 800bbc6:	5c9b      	ldrb	r3, [r3, r2]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d107      	bne.n	800bbde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	223c      	movs	r2, #60	; 0x3c
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f7fd fbaf 	bl	800933c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	223d      	movs	r2, #61	; 0x3d
 800bbe2:	2102      	movs	r1, #2
 800bbe4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3304      	adds	r3, #4
 800bbee:	0019      	movs	r1, r3
 800bbf0:	0010      	movs	r0, r2
 800bbf2:	f000 f883 	bl	800bcfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2248      	movs	r2, #72	; 0x48
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	223e      	movs	r2, #62	; 0x3e
 800bc02:	2101      	movs	r1, #1
 800bc04:	5499      	strb	r1, [r3, r2]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	223f      	movs	r2, #63	; 0x3f
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2240      	movs	r2, #64	; 0x40
 800bc12:	2101      	movs	r1, #1
 800bc14:	5499      	strb	r1, [r3, r2]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2241      	movs	r2, #65	; 0x41
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	5499      	strb	r1, [r3, r2]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2242      	movs	r2, #66	; 0x42
 800bc22:	2101      	movs	r1, #1
 800bc24:	5499      	strb	r1, [r3, r2]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2243      	movs	r2, #67	; 0x43
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2244      	movs	r2, #68	; 0x44
 800bc32:	2101      	movs	r1, #1
 800bc34:	5499      	strb	r1, [r3, r2]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2245      	movs	r2, #69	; 0x45
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	5499      	strb	r1, [r3, r2]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2246      	movs	r2, #70	; 0x46
 800bc42:	2101      	movs	r1, #1
 800bc44:	5499      	strb	r1, [r3, r2]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2247      	movs	r2, #71	; 0x47
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	223d      	movs	r2, #61	; 0x3d
 800bc52:	2101      	movs	r1, #1
 800bc54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	0018      	movs	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b002      	add	sp, #8
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	223d      	movs	r2, #61	; 0x3d
 800bc6c:	5c9b      	ldrb	r3, [r3, r2]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d001      	beq.n	800bc78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e034      	b.n	800bce2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	223d      	movs	r2, #61	; 0x3d
 800bc7c:	2102      	movs	r1, #2
 800bc7e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <HAL_TIM_Base_Start+0x8c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d009      	beq.n	800bc9e <HAL_TIM_Base_Start+0x3e>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <HAL_TIM_Base_Start+0x90>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d004      	beq.n	800bc9e <HAL_TIM_Base_Start+0x3e>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a16      	ldr	r2, [pc, #88]	; (800bcf4 <HAL_TIM_Base_Start+0x94>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d116      	bne.n	800bccc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	4a14      	ldr	r2, [pc, #80]	; (800bcf8 <HAL_TIM_Base_Start+0x98>)
 800bca6:	4013      	ands	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b06      	cmp	r3, #6
 800bcae:	d016      	beq.n	800bcde <HAL_TIM_Base_Start+0x7e>
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	2380      	movs	r3, #128	; 0x80
 800bcb4:	025b      	lsls	r3, r3, #9
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d011      	beq.n	800bcde <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcca:	e008      	b.n	800bcde <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	e000      	b.n	800bce0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcde:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	0018      	movs	r0, r3
 800bce4:	46bd      	mov	sp, r7
 800bce6:	b004      	add	sp, #16
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	40012c00 	.word	0x40012c00
 800bcf0:	40000400 	.word	0x40000400
 800bcf4:	40014000 	.word	0x40014000
 800bcf8:	00010007 	.word	0x00010007

0800bcfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a2f      	ldr	r2, [pc, #188]	; (800bdcc <TIM_Base_SetConfig+0xd0>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <TIM_Base_SetConfig+0x20>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a2e      	ldr	r2, [pc, #184]	; (800bdd0 <TIM_Base_SetConfig+0xd4>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d108      	bne.n	800bd2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2270      	movs	r2, #112	; 0x70
 800bd20:	4393      	bics	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a26      	ldr	r2, [pc, #152]	; (800bdcc <TIM_Base_SetConfig+0xd0>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d013      	beq.n	800bd5e <TIM_Base_SetConfig+0x62>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a25      	ldr	r2, [pc, #148]	; (800bdd0 <TIM_Base_SetConfig+0xd4>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d00f      	beq.n	800bd5e <TIM_Base_SetConfig+0x62>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a24      	ldr	r2, [pc, #144]	; (800bdd4 <TIM_Base_SetConfig+0xd8>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d00b      	beq.n	800bd5e <TIM_Base_SetConfig+0x62>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a23      	ldr	r2, [pc, #140]	; (800bdd8 <TIM_Base_SetConfig+0xdc>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d007      	beq.n	800bd5e <TIM_Base_SetConfig+0x62>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a22      	ldr	r2, [pc, #136]	; (800bddc <TIM_Base_SetConfig+0xe0>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d003      	beq.n	800bd5e <TIM_Base_SetConfig+0x62>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a21      	ldr	r2, [pc, #132]	; (800bde0 <TIM_Base_SetConfig+0xe4>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d108      	bne.n	800bd70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4a20      	ldr	r2, [pc, #128]	; (800bde4 <TIM_Base_SetConfig+0xe8>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2280      	movs	r2, #128	; 0x80
 800bd74:	4393      	bics	r3, r2
 800bd76:	001a      	movs	r2, r3
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <TIM_Base_SetConfig+0xd0>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d00b      	beq.n	800bdb6 <TIM_Base_SetConfig+0xba>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a0d      	ldr	r2, [pc, #52]	; (800bdd8 <TIM_Base_SetConfig+0xdc>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d007      	beq.n	800bdb6 <TIM_Base_SetConfig+0xba>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a0c      	ldr	r2, [pc, #48]	; (800bddc <TIM_Base_SetConfig+0xe0>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d003      	beq.n	800bdb6 <TIM_Base_SetConfig+0xba>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a0b      	ldr	r2, [pc, #44]	; (800bde0 <TIM_Base_SetConfig+0xe4>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d103      	bne.n	800bdbe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	691a      	ldr	r2, [r3, #16]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	615a      	str	r2, [r3, #20]
}
 800bdc4:	46c0      	nop			; (mov r8, r8)
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	b004      	add	sp, #16
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	40012c00 	.word	0x40012c00
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40002000 	.word	0x40002000
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800
 800bde4:	fffffcff 	.word	0xfffffcff

0800bde8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e046      	b.n	800be88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2284      	movs	r2, #132	; 0x84
 800bdfe:	589b      	ldr	r3, [r3, r2]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d107      	bne.n	800be14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2280      	movs	r2, #128	; 0x80
 800be08:	2100      	movs	r1, #0
 800be0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	0018      	movs	r0, r3
 800be10:	f7fd fab4 	bl	800937c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2284      	movs	r2, #132	; 0x84
 800be18:	2124      	movs	r1, #36	; 0x24
 800be1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2101      	movs	r1, #1
 800be28:	438a      	bics	r2, r1
 800be2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	0018      	movs	r0, r3
 800be30:	f000 f8dc 	bl	800bfec <UART_SetConfig>
 800be34:	0003      	movs	r3, r0
 800be36:	2b01      	cmp	r3, #1
 800be38:	d101      	bne.n	800be3e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e024      	b.n	800be88 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	0018      	movs	r0, r3
 800be4a:	f000 fa75 	bl	800c338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	490d      	ldr	r1, [pc, #52]	; (800be90 <HAL_UART_Init+0xa8>)
 800be5a:	400a      	ands	r2, r1
 800be5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689a      	ldr	r2, [r3, #8]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	212a      	movs	r1, #42	; 0x2a
 800be6a:	438a      	bics	r2, r1
 800be6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2101      	movs	r1, #1
 800be7a:	430a      	orrs	r2, r1
 800be7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	0018      	movs	r0, r3
 800be82:	f000 fb0d 	bl	800c4a0 <UART_CheckIdleState>
 800be86:	0003      	movs	r3, r0
}
 800be88:	0018      	movs	r0, r3
 800be8a:	46bd      	mov	sp, r7
 800be8c:	b002      	add	sp, #8
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	ffffb7ff 	.word	0xffffb7ff

0800be94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af02      	add	r7, sp, #8
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	1dbb      	adds	r3, r7, #6
 800bea2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2284      	movs	r2, #132	; 0x84
 800bea8:	589b      	ldr	r3, [r3, r2]
 800beaa:	2b20      	cmp	r3, #32
 800beac:	d000      	beq.n	800beb0 <HAL_UART_Transmit+0x1c>
 800beae:	e097      	b.n	800bfe0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_UART_Transmit+0x2a>
 800beb6:	1dbb      	adds	r3, r7, #6
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e08f      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	2380      	movs	r3, #128	; 0x80
 800bec8:	015b      	lsls	r3, r3, #5
 800beca:	429a      	cmp	r2, r3
 800becc:	d109      	bne.n	800bee2 <HAL_UART_Transmit+0x4e>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d105      	bne.n	800bee2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2201      	movs	r2, #1
 800beda:	4013      	ands	r3, r2
 800bedc:	d001      	beq.n	800bee2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e07f      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2280      	movs	r2, #128	; 0x80
 800bee6:	5c9b      	ldrb	r3, [r3, r2]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d101      	bne.n	800bef0 <HAL_UART_Transmit+0x5c>
 800beec:	2302      	movs	r3, #2
 800beee:	e078      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2280      	movs	r2, #128	; 0x80
 800bef4:	2101      	movs	r1, #1
 800bef6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	228c      	movs	r2, #140	; 0x8c
 800befc:	2100      	movs	r1, #0
 800befe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2284      	movs	r2, #132	; 0x84
 800bf04:	2121      	movs	r1, #33	; 0x21
 800bf06:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf08:	f7fd fc18 	bl	800973c <HAL_GetTick>
 800bf0c:	0003      	movs	r3, r0
 800bf0e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	1dba      	adds	r2, r7, #6
 800bf14:	2154      	movs	r1, #84	; 0x54
 800bf16:	8812      	ldrh	r2, [r2, #0]
 800bf18:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1dba      	adds	r2, r7, #6
 800bf1e:	2156      	movs	r1, #86	; 0x56
 800bf20:	8812      	ldrh	r2, [r2, #0]
 800bf22:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	2380      	movs	r3, #128	; 0x80
 800bf2a:	015b      	lsls	r3, r3, #5
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d108      	bne.n	800bf42 <HAL_UART_Transmit+0xae>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d104      	bne.n	800bf42 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	61bb      	str	r3, [r7, #24]
 800bf40:	e003      	b.n	800bf4a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2280      	movs	r2, #128	; 0x80
 800bf4e:	2100      	movs	r1, #0
 800bf50:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800bf52:	e02c      	b.n	800bfae <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	68f8      	ldr	r0, [r7, #12]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	0013      	movs	r3, r2
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2180      	movs	r1, #128	; 0x80
 800bf62:	f000 fae7 	bl	800c534 <UART_WaitOnFlagUntilTimeout>
 800bf66:	1e03      	subs	r3, r0, #0
 800bf68:	d001      	beq.n	800bf6e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e039      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10b      	bne.n	800bf8c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	001a      	movs	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	05d2      	lsls	r2, r2, #23
 800bf80:	0dd2      	lsrs	r2, r2, #23
 800bf82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	3302      	adds	r3, #2
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	e007      	b.n	800bf9c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	781a      	ldrb	r2, [r3, #0]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2256      	movs	r2, #86	; 0x56
 800bfa0:	5a9b      	ldrh	r3, [r3, r2]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	b299      	uxth	r1, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2256      	movs	r2, #86	; 0x56
 800bfac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2256      	movs	r2, #86	; 0x56
 800bfb2:	5a9b      	ldrh	r3, [r3, r2]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1cc      	bne.n	800bf54 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	0013      	movs	r3, r2
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2140      	movs	r1, #64	; 0x40
 800bfc8:	f000 fab4 	bl	800c534 <UART_WaitOnFlagUntilTimeout>
 800bfcc:	1e03      	subs	r3, r0, #0
 800bfce:	d001      	beq.n	800bfd4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	e006      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2284      	movs	r2, #132	; 0x84
 800bfd8:	2120      	movs	r1, #32
 800bfda:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e000      	b.n	800bfe2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800bfe0:	2302      	movs	r3, #2
  }
}
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	b008      	add	sp, #32
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bff4:	231a      	movs	r3, #26
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	689a      	ldr	r2, [r3, #8]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	431a      	orrs	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	4313      	orrs	r3, r2
 800c012:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4abd      	ldr	r2, [pc, #756]	; (800c310 <UART_SetConfig+0x324>)
 800c01c:	4013      	ands	r3, r2
 800c01e:	0019      	movs	r1, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	430a      	orrs	r2, r1
 800c028:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4ab8      	ldr	r2, [pc, #736]	; (800c314 <UART_SetConfig+0x328>)
 800c032:	4013      	ands	r3, r2
 800c034:	0019      	movs	r1, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	4313      	orrs	r3, r2
 800c050:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	4aaf      	ldr	r2, [pc, #700]	; (800c318 <UART_SetConfig+0x32c>)
 800c05a:	4013      	ands	r3, r2
 800c05c:	0019      	movs	r1, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	430a      	orrs	r2, r1
 800c066:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	220f      	movs	r2, #15
 800c070:	4393      	bics	r3, r2
 800c072:	0019      	movs	r1, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	430a      	orrs	r2, r1
 800c07e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4aa5      	ldr	r2, [pc, #660]	; (800c31c <UART_SetConfig+0x330>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d127      	bne.n	800c0da <UART_SetConfig+0xee>
 800c08a:	4ba5      	ldr	r3, [pc, #660]	; (800c320 <UART_SetConfig+0x334>)
 800c08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08e:	2203      	movs	r2, #3
 800c090:	4013      	ands	r3, r2
 800c092:	2b03      	cmp	r3, #3
 800c094:	d017      	beq.n	800c0c6 <UART_SetConfig+0xda>
 800c096:	d81b      	bhi.n	800c0d0 <UART_SetConfig+0xe4>
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d00a      	beq.n	800c0b2 <UART_SetConfig+0xc6>
 800c09c:	d818      	bhi.n	800c0d0 <UART_SetConfig+0xe4>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <UART_SetConfig+0xbc>
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d00a      	beq.n	800c0bc <UART_SetConfig+0xd0>
 800c0a6:	e013      	b.n	800c0d0 <UART_SetConfig+0xe4>
 800c0a8:	231b      	movs	r3, #27
 800c0aa:	18fb      	adds	r3, r7, r3
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e058      	b.n	800c164 <UART_SetConfig+0x178>
 800c0b2:	231b      	movs	r3, #27
 800c0b4:	18fb      	adds	r3, r7, r3
 800c0b6:	2202      	movs	r2, #2
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	e053      	b.n	800c164 <UART_SetConfig+0x178>
 800c0bc:	231b      	movs	r3, #27
 800c0be:	18fb      	adds	r3, r7, r3
 800c0c0:	2204      	movs	r2, #4
 800c0c2:	701a      	strb	r2, [r3, #0]
 800c0c4:	e04e      	b.n	800c164 <UART_SetConfig+0x178>
 800c0c6:	231b      	movs	r3, #27
 800c0c8:	18fb      	adds	r3, r7, r3
 800c0ca:	2208      	movs	r2, #8
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	e049      	b.n	800c164 <UART_SetConfig+0x178>
 800c0d0:	231b      	movs	r3, #27
 800c0d2:	18fb      	adds	r3, r7, r3
 800c0d4:	2210      	movs	r2, #16
 800c0d6:	701a      	strb	r2, [r3, #0]
 800c0d8:	e044      	b.n	800c164 <UART_SetConfig+0x178>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a91      	ldr	r2, [pc, #580]	; (800c324 <UART_SetConfig+0x338>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d127      	bne.n	800c134 <UART_SetConfig+0x148>
 800c0e4:	4b8e      	ldr	r3, [pc, #568]	; (800c320 <UART_SetConfig+0x334>)
 800c0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e8:	220c      	movs	r2, #12
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2b0c      	cmp	r3, #12
 800c0ee:	d017      	beq.n	800c120 <UART_SetConfig+0x134>
 800c0f0:	d81b      	bhi.n	800c12a <UART_SetConfig+0x13e>
 800c0f2:	2b08      	cmp	r3, #8
 800c0f4:	d00a      	beq.n	800c10c <UART_SetConfig+0x120>
 800c0f6:	d818      	bhi.n	800c12a <UART_SetConfig+0x13e>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <UART_SetConfig+0x116>
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d00a      	beq.n	800c116 <UART_SetConfig+0x12a>
 800c100:	e013      	b.n	800c12a <UART_SetConfig+0x13e>
 800c102:	231b      	movs	r3, #27
 800c104:	18fb      	adds	r3, r7, r3
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e02b      	b.n	800c164 <UART_SetConfig+0x178>
 800c10c:	231b      	movs	r3, #27
 800c10e:	18fb      	adds	r3, r7, r3
 800c110:	2202      	movs	r2, #2
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	e026      	b.n	800c164 <UART_SetConfig+0x178>
 800c116:	231b      	movs	r3, #27
 800c118:	18fb      	adds	r3, r7, r3
 800c11a:	2204      	movs	r2, #4
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	e021      	b.n	800c164 <UART_SetConfig+0x178>
 800c120:	231b      	movs	r3, #27
 800c122:	18fb      	adds	r3, r7, r3
 800c124:	2208      	movs	r2, #8
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	e01c      	b.n	800c164 <UART_SetConfig+0x178>
 800c12a:	231b      	movs	r3, #27
 800c12c:	18fb      	adds	r3, r7, r3
 800c12e:	2210      	movs	r2, #16
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e017      	b.n	800c164 <UART_SetConfig+0x178>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a7b      	ldr	r2, [pc, #492]	; (800c328 <UART_SetConfig+0x33c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d104      	bne.n	800c148 <UART_SetConfig+0x15c>
 800c13e:	231b      	movs	r3, #27
 800c140:	18fb      	adds	r3, r7, r3
 800c142:	2200      	movs	r2, #0
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	e00d      	b.n	800c164 <UART_SetConfig+0x178>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a77      	ldr	r2, [pc, #476]	; (800c32c <UART_SetConfig+0x340>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d104      	bne.n	800c15c <UART_SetConfig+0x170>
 800c152:	231b      	movs	r3, #27
 800c154:	18fb      	adds	r3, r7, r3
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	e003      	b.n	800c164 <UART_SetConfig+0x178>
 800c15c:	231b      	movs	r3, #27
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	2210      	movs	r2, #16
 800c162:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	69da      	ldr	r2, [r3, #28]
 800c168:	2380      	movs	r3, #128	; 0x80
 800c16a:	021b      	lsls	r3, r3, #8
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d000      	beq.n	800c172 <UART_SetConfig+0x186>
 800c170:	e066      	b.n	800c240 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 800c172:	231b      	movs	r3, #27
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d015      	beq.n	800c1a8 <UART_SetConfig+0x1bc>
 800c17c:	dc18      	bgt.n	800c1b0 <UART_SetConfig+0x1c4>
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d00d      	beq.n	800c19e <UART_SetConfig+0x1b2>
 800c182:	dc15      	bgt.n	800c1b0 <UART_SetConfig+0x1c4>
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <UART_SetConfig+0x1a2>
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d005      	beq.n	800c198 <UART_SetConfig+0x1ac>
 800c18c:	e010      	b.n	800c1b0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c18e:	f7fe fb73 	bl	800a878 <HAL_RCC_GetPCLK1Freq>
 800c192:	0003      	movs	r3, r0
 800c194:	617b      	str	r3, [r7, #20]
        break;
 800c196:	e012      	b.n	800c1be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c198:	4b65      	ldr	r3, [pc, #404]	; (800c330 <UART_SetConfig+0x344>)
 800c19a:	617b      	str	r3, [r7, #20]
        break;
 800c19c:	e00f      	b.n	800c1be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c19e:	f7fe fadf 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800c1a2:	0003      	movs	r3, r0
 800c1a4:	617b      	str	r3, [r7, #20]
        break;
 800c1a6:	e00a      	b.n	800c1be <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1a8:	2380      	movs	r3, #128	; 0x80
 800c1aa:	021b      	lsls	r3, r3, #8
 800c1ac:	617b      	str	r3, [r7, #20]
        break;
 800c1ae:	e006      	b.n	800c1be <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c1b4:	231a      	movs	r3, #26
 800c1b6:	18fb      	adds	r3, r7, r3
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	701a      	strb	r2, [r3, #0]
        break;
 800c1bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d100      	bne.n	800c1c6 <UART_SetConfig+0x1da>
 800c1c4:	e08e      	b.n	800c2e4 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ca:	4b5a      	ldr	r3, [pc, #360]	; (800c334 <UART_SetConfig+0x348>)
 800c1cc:	0052      	lsls	r2, r2, #1
 800c1ce:	5ad3      	ldrh	r3, [r2, r3]
 800c1d0:	0019      	movs	r1, r3
 800c1d2:	6978      	ldr	r0, [r7, #20]
 800c1d4:	f7f3 ffb0 	bl	8000138 <__udivsi3>
 800c1d8:	0003      	movs	r3, r0
 800c1da:	005a      	lsls	r2, r3, #1
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	085b      	lsrs	r3, r3, #1
 800c1e2:	18d2      	adds	r2, r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	0019      	movs	r1, r3
 800c1ea:	0010      	movs	r0, r2
 800c1ec:	f7f3 ffa4 	bl	8000138 <__udivsi3>
 800c1f0:	0003      	movs	r3, r0
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2b0f      	cmp	r3, #15
 800c1fa:	d91c      	bls.n	800c236 <UART_SetConfig+0x24a>
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	2380      	movs	r3, #128	; 0x80
 800c200:	025b      	lsls	r3, r3, #9
 800c202:	429a      	cmp	r2, r3
 800c204:	d217      	bcs.n	800c236 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	b29a      	uxth	r2, r3
 800c20a:	200e      	movs	r0, #14
 800c20c:	183b      	adds	r3, r7, r0
 800c20e:	210f      	movs	r1, #15
 800c210:	438a      	bics	r2, r1
 800c212:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	085b      	lsrs	r3, r3, #1
 800c218:	b29b      	uxth	r3, r3
 800c21a:	2207      	movs	r2, #7
 800c21c:	4013      	ands	r3, r2
 800c21e:	b299      	uxth	r1, r3
 800c220:	183b      	adds	r3, r7, r0
 800c222:	183a      	adds	r2, r7, r0
 800c224:	8812      	ldrh	r2, [r2, #0]
 800c226:	430a      	orrs	r2, r1
 800c228:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	183a      	adds	r2, r7, r0
 800c230:	8812      	ldrh	r2, [r2, #0]
 800c232:	60da      	str	r2, [r3, #12]
 800c234:	e056      	b.n	800c2e4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c236:	231a      	movs	r3, #26
 800c238:	18fb      	adds	r3, r7, r3
 800c23a:	2201      	movs	r2, #1
 800c23c:	701a      	strb	r2, [r3, #0]
 800c23e:	e051      	b.n	800c2e4 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c240:	231b      	movs	r3, #27
 800c242:	18fb      	adds	r3, r7, r3
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b08      	cmp	r3, #8
 800c248:	d015      	beq.n	800c276 <UART_SetConfig+0x28a>
 800c24a:	dc18      	bgt.n	800c27e <UART_SetConfig+0x292>
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d00d      	beq.n	800c26c <UART_SetConfig+0x280>
 800c250:	dc15      	bgt.n	800c27e <UART_SetConfig+0x292>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <UART_SetConfig+0x270>
 800c256:	2b02      	cmp	r3, #2
 800c258:	d005      	beq.n	800c266 <UART_SetConfig+0x27a>
 800c25a:	e010      	b.n	800c27e <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c25c:	f7fe fb0c 	bl	800a878 <HAL_RCC_GetPCLK1Freq>
 800c260:	0003      	movs	r3, r0
 800c262:	617b      	str	r3, [r7, #20]
        break;
 800c264:	e012      	b.n	800c28c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c266:	4b32      	ldr	r3, [pc, #200]	; (800c330 <UART_SetConfig+0x344>)
 800c268:	617b      	str	r3, [r7, #20]
        break;
 800c26a:	e00f      	b.n	800c28c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c26c:	f7fe fa78 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800c270:	0003      	movs	r3, r0
 800c272:	617b      	str	r3, [r7, #20]
        break;
 800c274:	e00a      	b.n	800c28c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c276:	2380      	movs	r3, #128	; 0x80
 800c278:	021b      	lsls	r3, r3, #8
 800c27a:	617b      	str	r3, [r7, #20]
        break;
 800c27c:	e006      	b.n	800c28c <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c282:	231a      	movs	r3, #26
 800c284:	18fb      	adds	r3, r7, r3
 800c286:	2201      	movs	r2, #1
 800c288:	701a      	strb	r2, [r3, #0]
        break;
 800c28a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d028      	beq.n	800c2e4 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c296:	4b27      	ldr	r3, [pc, #156]	; (800c334 <UART_SetConfig+0x348>)
 800c298:	0052      	lsls	r2, r2, #1
 800c29a:	5ad3      	ldrh	r3, [r2, r3]
 800c29c:	0019      	movs	r1, r3
 800c29e:	6978      	ldr	r0, [r7, #20]
 800c2a0:	f7f3 ff4a 	bl	8000138 <__udivsi3>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	001a      	movs	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	085b      	lsrs	r3, r3, #1
 800c2ae:	18d2      	adds	r2, r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	0019      	movs	r1, r3
 800c2b6:	0010      	movs	r0, r2
 800c2b8:	f7f3 ff3e 	bl	8000138 <__udivsi3>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b0f      	cmp	r3, #15
 800c2c6:	d909      	bls.n	800c2dc <UART_SetConfig+0x2f0>
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	2380      	movs	r3, #128	; 0x80
 800c2cc:	025b      	lsls	r3, r3, #9
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d204      	bcs.n	800c2dc <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	60da      	str	r2, [r3, #12]
 800c2da:	e003      	b.n	800c2e4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800c2dc:	231a      	movs	r3, #26
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	226a      	movs	r2, #106	; 0x6a
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2268      	movs	r2, #104	; 0x68
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c300:	231a      	movs	r3, #26
 800c302:	18fb      	adds	r3, r7, r3
 800c304:	781b      	ldrb	r3, [r3, #0]
}
 800c306:	0018      	movs	r0, r3
 800c308:	46bd      	mov	sp, r7
 800c30a:	b008      	add	sp, #32
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	46c0      	nop			; (mov r8, r8)
 800c310:	cfff69f3 	.word	0xcfff69f3
 800c314:	ffffcfff 	.word	0xffffcfff
 800c318:	11fff4ff 	.word	0x11fff4ff
 800c31c:	40013800 	.word	0x40013800
 800c320:	40021000 	.word	0x40021000
 800c324:	40004400 	.word	0x40004400
 800c328:	40004800 	.word	0x40004800
 800c32c:	40004c00 	.word	0x40004c00
 800c330:	00f42400 	.word	0x00f42400
 800c334:	08012444 	.word	0x08012444

0800c338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c344:	2201      	movs	r2, #1
 800c346:	4013      	ands	r3, r2
 800c348:	d00b      	beq.n	800c362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4a4a      	ldr	r2, [pc, #296]	; (800c47c <UART_AdvFeatureConfig+0x144>)
 800c352:	4013      	ands	r3, r2
 800c354:	0019      	movs	r1, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	2202      	movs	r2, #2
 800c368:	4013      	ands	r3, r2
 800c36a:	d00b      	beq.n	800c384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4a43      	ldr	r2, [pc, #268]	; (800c480 <UART_AdvFeatureConfig+0x148>)
 800c374:	4013      	ands	r3, r2
 800c376:	0019      	movs	r1, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c388:	2204      	movs	r2, #4
 800c38a:	4013      	ands	r3, r2
 800c38c:	d00b      	beq.n	800c3a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4a3b      	ldr	r2, [pc, #236]	; (800c484 <UART_AdvFeatureConfig+0x14c>)
 800c396:	4013      	ands	r3, r2
 800c398:	0019      	movs	r1, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3aa:	2208      	movs	r2, #8
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	4a34      	ldr	r2, [pc, #208]	; (800c488 <UART_AdvFeatureConfig+0x150>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3cc:	2210      	movs	r2, #16
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	d00b      	beq.n	800c3ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	4a2c      	ldr	r2, [pc, #176]	; (800c48c <UART_AdvFeatureConfig+0x154>)
 800c3da:	4013      	ands	r3, r2
 800c3dc:	0019      	movs	r1, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	d00b      	beq.n	800c40c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	4a25      	ldr	r2, [pc, #148]	; (800c490 <UART_AdvFeatureConfig+0x158>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	0019      	movs	r1, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c410:	2240      	movs	r2, #64	; 0x40
 800c412:	4013      	ands	r3, r2
 800c414:	d01d      	beq.n	800c452 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4a1d      	ldr	r2, [pc, #116]	; (800c494 <UART_AdvFeatureConfig+0x15c>)
 800c41e:	4013      	ands	r3, r2
 800c420:	0019      	movs	r1, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c432:	2380      	movs	r3, #128	; 0x80
 800c434:	035b      	lsls	r3, r3, #13
 800c436:	429a      	cmp	r2, r3
 800c438:	d10b      	bne.n	800c452 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	4a15      	ldr	r2, [pc, #84]	; (800c498 <UART_AdvFeatureConfig+0x160>)
 800c442:	4013      	ands	r3, r2
 800c444:	0019      	movs	r1, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	430a      	orrs	r2, r1
 800c450:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c456:	2280      	movs	r2, #128	; 0x80
 800c458:	4013      	ands	r3, r2
 800c45a:	d00b      	beq.n	800c474 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <UART_AdvFeatureConfig+0x164>)
 800c464:	4013      	ands	r3, r2
 800c466:	0019      	movs	r1, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	605a      	str	r2, [r3, #4]
  }
}
 800c474:	46c0      	nop			; (mov r8, r8)
 800c476:	46bd      	mov	sp, r7
 800c478:	b002      	add	sp, #8
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	fffdffff 	.word	0xfffdffff
 800c480:	fffeffff 	.word	0xfffeffff
 800c484:	fffbffff 	.word	0xfffbffff
 800c488:	ffff7fff 	.word	0xffff7fff
 800c48c:	ffffefff 	.word	0xffffefff
 800c490:	ffffdfff 	.word	0xffffdfff
 800c494:	ffefffff 	.word	0xffefffff
 800c498:	ff9fffff 	.word	0xff9fffff
 800c49c:	fff7ffff 	.word	0xfff7ffff

0800c4a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af02      	add	r7, sp, #8
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	228c      	movs	r2, #140	; 0x8c
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4b0:	f7fd f944 	bl	800973c <HAL_GetTick>
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2208      	movs	r2, #8
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	2b08      	cmp	r3, #8
 800c4c4:	d10c      	bne.n	800c4e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2280      	movs	r2, #128	; 0x80
 800c4ca:	0391      	lsls	r1, r2, #14
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	4a18      	ldr	r2, [pc, #96]	; (800c530 <UART_CheckIdleState+0x90>)
 800c4d0:	9200      	str	r2, [sp, #0]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f000 f82e 	bl	800c534 <UART_WaitOnFlagUntilTimeout>
 800c4d8:	1e03      	subs	r3, r0, #0
 800c4da:	d001      	beq.n	800c4e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e023      	b.n	800c528 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d10c      	bne.n	800c508 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2280      	movs	r2, #128	; 0x80
 800c4f2:	03d1      	lsls	r1, r2, #15
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	4a0e      	ldr	r2, [pc, #56]	; (800c530 <UART_CheckIdleState+0x90>)
 800c4f8:	9200      	str	r2, [sp, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f000 f81a 	bl	800c534 <UART_WaitOnFlagUntilTimeout>
 800c500:	1e03      	subs	r3, r0, #0
 800c502:	d001      	beq.n	800c508 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e00f      	b.n	800c528 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2284      	movs	r2, #132	; 0x84
 800c50c:	2120      	movs	r1, #32
 800c50e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2288      	movs	r2, #136	; 0x88
 800c514:	2120      	movs	r1, #32
 800c516:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2280      	movs	r2, #128	; 0x80
 800c522:	2100      	movs	r1, #0
 800c524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	0018      	movs	r0, r3
 800c52a:	46bd      	mov	sp, r7
 800c52c:	b004      	add	sp, #16
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	01ffffff 	.word	0x01ffffff

0800c534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b094      	sub	sp, #80	; 0x50
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	1dfb      	adds	r3, r7, #7
 800c542:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c544:	e0a7      	b.n	800c696 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c548:	3301      	adds	r3, #1
 800c54a:	d100      	bne.n	800c54e <UART_WaitOnFlagUntilTimeout+0x1a>
 800c54c:	e0a3      	b.n	800c696 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c54e:	f7fd f8f5 	bl	800973c <HAL_GetTick>
 800c552:	0002      	movs	r2, r0
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d302      	bcc.n	800c564 <UART_WaitOnFlagUntilTimeout+0x30>
 800c55e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c560:	2b00      	cmp	r3, #0
 800c562:	d13f      	bne.n	800c5e4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c564:	f3ef 8310 	mrs	r3, PRIMASK
 800c568:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c56c:	647b      	str	r3, [r7, #68]	; 0x44
 800c56e:	2301      	movs	r3, #1
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	f383 8810 	msr	PRIMASK, r3
}
 800c578:	46c0      	nop			; (mov r8, r8)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	494e      	ldr	r1, [pc, #312]	; (800c6c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c586:	400a      	ands	r2, r1
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c58c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	f383 8810 	msr	PRIMASK, r3
}
 800c594:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c596:	f3ef 8310 	mrs	r3, PRIMASK
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800c59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	643b      	str	r3, [r7, #64]	; 0x40
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f383 8810 	msr	PRIMASK, r3
}
 800c5aa:	46c0      	nop			; (mov r8, r8)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	689a      	ldr	r2, [r3, #8]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	438a      	bics	r2, r1
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c2:	f383 8810 	msr	PRIMASK, r3
}
 800c5c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2284      	movs	r2, #132	; 0x84
 800c5cc:	2120      	movs	r1, #32
 800c5ce:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2288      	movs	r2, #136	; 0x88
 800c5d4:	2120      	movs	r1, #32
 800c5d6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2280      	movs	r2, #128	; 0x80
 800c5dc:	2100      	movs	r1, #0
 800c5de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e069      	b.n	800c6b8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2204      	movs	r2, #4
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	d052      	beq.n	800c696 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	69da      	ldr	r2, [r3, #28]
 800c5f6:	2380      	movs	r3, #128	; 0x80
 800c5f8:	011b      	lsls	r3, r3, #4
 800c5fa:	401a      	ands	r2, r3
 800c5fc:	2380      	movs	r3, #128	; 0x80
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	429a      	cmp	r2, r3
 800c602:	d148      	bne.n	800c696 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2280      	movs	r2, #128	; 0x80
 800c60a:	0112      	lsls	r2, r2, #4
 800c60c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c60e:	f3ef 8310 	mrs	r3, PRIMASK
 800c612:	613b      	str	r3, [r7, #16]
  return(result);
 800c614:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c618:	2301      	movs	r3, #1
 800c61a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f383 8810 	msr	PRIMASK, r3
}
 800c622:	46c0      	nop			; (mov r8, r8)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4924      	ldr	r1, [pc, #144]	; (800c6c0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800c630:	400a      	ands	r2, r1
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c636:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	f383 8810 	msr	PRIMASK, r3
}
 800c63e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c640:	f3ef 8310 	mrs	r3, PRIMASK
 800c644:	61fb      	str	r3, [r7, #28]
  return(result);
 800c646:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c648:	64bb      	str	r3, [r7, #72]	; 0x48
 800c64a:	2301      	movs	r3, #1
 800c64c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	f383 8810 	msr	PRIMASK, r3
}
 800c654:	46c0      	nop			; (mov r8, r8)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2101      	movs	r1, #1
 800c662:	438a      	bics	r2, r1
 800c664:	609a      	str	r2, [r3, #8]
 800c666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	f383 8810 	msr	PRIMASK, r3
}
 800c670:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2284      	movs	r2, #132	; 0x84
 800c676:	2120      	movs	r1, #32
 800c678:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2288      	movs	r2, #136	; 0x88
 800c67e:	2120      	movs	r1, #32
 800c680:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	228c      	movs	r2, #140	; 0x8c
 800c686:	2120      	movs	r1, #32
 800c688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2280      	movs	r2, #128	; 0x80
 800c68e:	2100      	movs	r1, #0
 800c690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e010      	b.n	800c6b8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	69db      	ldr	r3, [r3, #28]
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	4013      	ands	r3, r2
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	425a      	negs	r2, r3
 800c6a6:	4153      	adcs	r3, r2
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	001a      	movs	r2, r3
 800c6ac:	1dfb      	adds	r3, r7, #7
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d100      	bne.n	800c6b6 <UART_WaitOnFlagUntilTimeout+0x182>
 800c6b4:	e747      	b.n	800c546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	0018      	movs	r0, r3
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	b014      	add	sp, #80	; 0x50
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	fffffe5f 	.word	0xfffffe5f

0800c6c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2280      	movs	r2, #128	; 0x80
 800c6d0:	5c9b      	ldrb	r3, [r3, r2]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_UARTEx_DisableFifoMode+0x16>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e027      	b.n	800c72a <HAL_UARTEx_DisableFifoMode+0x66>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2280      	movs	r2, #128	; 0x80
 800c6de:	2101      	movs	r1, #1
 800c6e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2284      	movs	r2, #132	; 0x84
 800c6e6:	2124      	movs	r1, #36	; 0x24
 800c6e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	438a      	bics	r2, r1
 800c700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4a0b      	ldr	r2, [pc, #44]	; (800c734 <HAL_UARTEx_DisableFifoMode+0x70>)
 800c706:	4013      	ands	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2284      	movs	r2, #132	; 0x84
 800c71c:	2120      	movs	r1, #32
 800c71e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2280      	movs	r2, #128	; 0x80
 800c724:	2100      	movs	r1, #0
 800c726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	0018      	movs	r0, r3
 800c72c:	46bd      	mov	sp, r7
 800c72e:	b004      	add	sp, #16
 800c730:	bd80      	pop	{r7, pc}
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	dfffffff 	.word	0xdfffffff

0800c738 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2280      	movs	r2, #128	; 0x80
 800c746:	5c9b      	ldrb	r3, [r3, r2]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d101      	bne.n	800c750 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c74c:	2302      	movs	r3, #2
 800c74e:	e02e      	b.n	800c7ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2280      	movs	r2, #128	; 0x80
 800c754:	2101      	movs	r1, #1
 800c756:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2284      	movs	r2, #132	; 0x84
 800c75c:	2124      	movs	r1, #36	; 0x24
 800c75e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2101      	movs	r1, #1
 800c774:	438a      	bics	r2, r1
 800c776:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	08d9      	lsrs	r1, r3, #3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	430a      	orrs	r2, r1
 800c78a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	0018      	movs	r0, r3
 800c790:	f000 f854 	bl	800c83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2284      	movs	r2, #132	; 0x84
 800c7a0:	2120      	movs	r1, #32
 800c7a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2280      	movs	r2, #128	; 0x80
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	b004      	add	sp, #16
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2280      	movs	r2, #128	; 0x80
 800c7c6:	5c9b      	ldrb	r3, [r3, r2]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e02f      	b.n	800c830 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2280      	movs	r2, #128	; 0x80
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2284      	movs	r2, #132	; 0x84
 800c7dc:	2124      	movs	r1, #36	; 0x24
 800c7de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2101      	movs	r1, #1
 800c7f4:	438a      	bics	r2, r1
 800c7f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	4a0e      	ldr	r2, [pc, #56]	; (800c838 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c800:	4013      	ands	r3, r2
 800c802:	0019      	movs	r1, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	0018      	movs	r0, r3
 800c812:	f000 f813 	bl	800c83c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2284      	movs	r2, #132	; 0x84
 800c822:	2120      	movs	r1, #32
 800c824:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2280      	movs	r2, #128	; 0x80
 800c82a:	2100      	movs	r1, #0
 800c82c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	0018      	movs	r0, r3
 800c832:	46bd      	mov	sp, r7
 800c834:	b004      	add	sp, #16
 800c836:	bd80      	pop	{r7, pc}
 800c838:	f1ffffff 	.word	0xf1ffffff

0800c83c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d108      	bne.n	800c85e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	226a      	movs	r2, #106	; 0x6a
 800c850:	2101      	movs	r1, #1
 800c852:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2268      	movs	r2, #104	; 0x68
 800c858:	2101      	movs	r1, #1
 800c85a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c85c:	e043      	b.n	800c8e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c85e:	260f      	movs	r6, #15
 800c860:	19bb      	adds	r3, r7, r6
 800c862:	2208      	movs	r2, #8
 800c864:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c866:	200e      	movs	r0, #14
 800c868:	183b      	adds	r3, r7, r0
 800c86a:	2208      	movs	r2, #8
 800c86c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	0e5b      	lsrs	r3, r3, #25
 800c876:	b2da      	uxtb	r2, r3
 800c878:	240d      	movs	r4, #13
 800c87a:	193b      	adds	r3, r7, r4
 800c87c:	2107      	movs	r1, #7
 800c87e:	400a      	ands	r2, r1
 800c880:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	0f5b      	lsrs	r3, r3, #29
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	250c      	movs	r5, #12
 800c88e:	197b      	adds	r3, r7, r5
 800c890:	2107      	movs	r1, #7
 800c892:	400a      	ands	r2, r1
 800c894:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c896:	183b      	adds	r3, r7, r0
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	197a      	adds	r2, r7, r5
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	4914      	ldr	r1, [pc, #80]	; (800c8f0 <UARTEx_SetNbDataToProcess+0xb4>)
 800c8a0:	5c8a      	ldrb	r2, [r1, r2]
 800c8a2:	435a      	muls	r2, r3
 800c8a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8a6:	197b      	adds	r3, r7, r5
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	4a12      	ldr	r2, [pc, #72]	; (800c8f4 <UARTEx_SetNbDataToProcess+0xb8>)
 800c8ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8ae:	0019      	movs	r1, r3
 800c8b0:	f7f3 fccc 	bl	800024c <__divsi3>
 800c8b4:	0003      	movs	r3, r0
 800c8b6:	b299      	uxth	r1, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	226a      	movs	r2, #106	; 0x6a
 800c8bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8be:	19bb      	adds	r3, r7, r6
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	193a      	adds	r2, r7, r4
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	490a      	ldr	r1, [pc, #40]	; (800c8f0 <UARTEx_SetNbDataToProcess+0xb4>)
 800c8c8:	5c8a      	ldrb	r2, [r1, r2]
 800c8ca:	435a      	muls	r2, r3
 800c8cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8ce:	193b      	adds	r3, r7, r4
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	4a08      	ldr	r2, [pc, #32]	; (800c8f4 <UARTEx_SetNbDataToProcess+0xb8>)
 800c8d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8d6:	0019      	movs	r1, r3
 800c8d8:	f7f3 fcb8 	bl	800024c <__divsi3>
 800c8dc:	0003      	movs	r3, r0
 800c8de:	b299      	uxth	r1, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2268      	movs	r2, #104	; 0x68
 800c8e4:	5299      	strh	r1, [r3, r2]
}
 800c8e6:	46c0      	nop			; (mov r8, r8)
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	b005      	add	sp, #20
 800c8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ee:	46c0      	nop			; (mov r8, r8)
 800c8f0:	0801245c 	.word	0x0801245c
 800c8f4:	08012464 	.word	0x08012464

0800c8f8 <__errno>:
 800c8f8:	4b01      	ldr	r3, [pc, #4]	; (800c900 <__errno+0x8>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	4770      	bx	lr
 800c8fe:	46c0      	nop			; (mov r8, r8)
 800c900:	20000010 	.word	0x20000010

0800c904 <__libc_init_array>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	2600      	movs	r6, #0
 800c908:	4d0c      	ldr	r5, [pc, #48]	; (800c93c <__libc_init_array+0x38>)
 800c90a:	4c0d      	ldr	r4, [pc, #52]	; (800c940 <__libc_init_array+0x3c>)
 800c90c:	1b64      	subs	r4, r4, r5
 800c90e:	10a4      	asrs	r4, r4, #2
 800c910:	42a6      	cmp	r6, r4
 800c912:	d109      	bne.n	800c928 <__libc_init_array+0x24>
 800c914:	2600      	movs	r6, #0
 800c916:	f005 fb2d 	bl	8011f74 <_init>
 800c91a:	4d0a      	ldr	r5, [pc, #40]	; (800c944 <__libc_init_array+0x40>)
 800c91c:	4c0a      	ldr	r4, [pc, #40]	; (800c948 <__libc_init_array+0x44>)
 800c91e:	1b64      	subs	r4, r4, r5
 800c920:	10a4      	asrs	r4, r4, #2
 800c922:	42a6      	cmp	r6, r4
 800c924:	d105      	bne.n	800c932 <__libc_init_array+0x2e>
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	00b3      	lsls	r3, r6, #2
 800c92a:	58eb      	ldr	r3, [r5, r3]
 800c92c:	4798      	blx	r3
 800c92e:	3601      	adds	r6, #1
 800c930:	e7ee      	b.n	800c910 <__libc_init_array+0xc>
 800c932:	00b3      	lsls	r3, r6, #2
 800c934:	58eb      	ldr	r3, [r5, r3]
 800c936:	4798      	blx	r3
 800c938:	3601      	adds	r6, #1
 800c93a:	e7f2      	b.n	800c922 <__libc_init_array+0x1e>
 800c93c:	08012ad8 	.word	0x08012ad8
 800c940:	08012ad8 	.word	0x08012ad8
 800c944:	08012ad8 	.word	0x08012ad8
 800c948:	08012adc 	.word	0x08012adc

0800c94c <memset>:
 800c94c:	0003      	movs	r3, r0
 800c94e:	1882      	adds	r2, r0, r2
 800c950:	4293      	cmp	r3, r2
 800c952:	d100      	bne.n	800c956 <memset+0xa>
 800c954:	4770      	bx	lr
 800c956:	7019      	strb	r1, [r3, #0]
 800c958:	3301      	adds	r3, #1
 800c95a:	e7f9      	b.n	800c950 <memset+0x4>

0800c95c <__cvt>:
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	001e      	movs	r6, r3
 800c960:	2300      	movs	r3, #0
 800c962:	0014      	movs	r4, r2
 800c964:	b08b      	sub	sp, #44	; 0x2c
 800c966:	429e      	cmp	r6, r3
 800c968:	da04      	bge.n	800c974 <__cvt+0x18>
 800c96a:	2180      	movs	r1, #128	; 0x80
 800c96c:	0609      	lsls	r1, r1, #24
 800c96e:	1873      	adds	r3, r6, r1
 800c970:	001e      	movs	r6, r3
 800c972:	232d      	movs	r3, #45	; 0x2d
 800c974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c976:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c978:	7013      	strb	r3, [r2, #0]
 800c97a:	2320      	movs	r3, #32
 800c97c:	2203      	movs	r2, #3
 800c97e:	439f      	bics	r7, r3
 800c980:	2f46      	cmp	r7, #70	; 0x46
 800c982:	d007      	beq.n	800c994 <__cvt+0x38>
 800c984:	003b      	movs	r3, r7
 800c986:	3b45      	subs	r3, #69	; 0x45
 800c988:	4259      	negs	r1, r3
 800c98a:	414b      	adcs	r3, r1
 800c98c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c98e:	3a01      	subs	r2, #1
 800c990:	18cb      	adds	r3, r1, r3
 800c992:	9310      	str	r3, [sp, #64]	; 0x40
 800c994:	ab09      	add	r3, sp, #36	; 0x24
 800c996:	9304      	str	r3, [sp, #16]
 800c998:	ab08      	add	r3, sp, #32
 800c99a:	9303      	str	r3, [sp, #12]
 800c99c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c99e:	9200      	str	r2, [sp, #0]
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a4:	0022      	movs	r2, r4
 800c9a6:	9301      	str	r3, [sp, #4]
 800c9a8:	0033      	movs	r3, r6
 800c9aa:	f000 fcfd 	bl	800d3a8 <_dtoa_r>
 800c9ae:	0005      	movs	r5, r0
 800c9b0:	2f47      	cmp	r7, #71	; 0x47
 800c9b2:	d102      	bne.n	800c9ba <__cvt+0x5e>
 800c9b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d528      	bpl.n	800ca0c <__cvt+0xb0>
 800c9ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9bc:	18eb      	adds	r3, r5, r3
 800c9be:	9307      	str	r3, [sp, #28]
 800c9c0:	2f46      	cmp	r7, #70	; 0x46
 800c9c2:	d114      	bne.n	800c9ee <__cvt+0x92>
 800c9c4:	782b      	ldrb	r3, [r5, #0]
 800c9c6:	2b30      	cmp	r3, #48	; 0x30
 800c9c8:	d10c      	bne.n	800c9e4 <__cvt+0x88>
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	0020      	movs	r0, r4
 800c9d0:	0031      	movs	r1, r6
 800c9d2:	f7f3 fd37 	bl	8000444 <__aeabi_dcmpeq>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d104      	bne.n	800c9e4 <__cvt+0x88>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c9de:	1a9b      	subs	r3, r3, r2
 800c9e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9e6:	9a07      	ldr	r2, [sp, #28]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	18d3      	adds	r3, r2, r3
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	0020      	movs	r0, r4
 800c9f4:	0031      	movs	r1, r6
 800c9f6:	f7f3 fd25 	bl	8000444 <__aeabi_dcmpeq>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d001      	beq.n	800ca02 <__cvt+0xa6>
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	9309      	str	r3, [sp, #36]	; 0x24
 800ca02:	2230      	movs	r2, #48	; 0x30
 800ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca06:	9907      	ldr	r1, [sp, #28]
 800ca08:	428b      	cmp	r3, r1
 800ca0a:	d306      	bcc.n	800ca1a <__cvt+0xbe>
 800ca0c:	0028      	movs	r0, r5
 800ca0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ca12:	1b5b      	subs	r3, r3, r5
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	b00b      	add	sp, #44	; 0x2c
 800ca18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca1a:	1c59      	adds	r1, r3, #1
 800ca1c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca1e:	701a      	strb	r2, [r3, #0]
 800ca20:	e7f0      	b.n	800ca04 <__cvt+0xa8>

0800ca22 <__exponent>:
 800ca22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca24:	1c83      	adds	r3, r0, #2
 800ca26:	b087      	sub	sp, #28
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	0005      	movs	r5, r0
 800ca2c:	000c      	movs	r4, r1
 800ca2e:	232b      	movs	r3, #43	; 0x2b
 800ca30:	7002      	strb	r2, [r0, #0]
 800ca32:	2900      	cmp	r1, #0
 800ca34:	da01      	bge.n	800ca3a <__exponent+0x18>
 800ca36:	424c      	negs	r4, r1
 800ca38:	3302      	adds	r3, #2
 800ca3a:	706b      	strb	r3, [r5, #1]
 800ca3c:	2c09      	cmp	r4, #9
 800ca3e:	dd31      	ble.n	800caa4 <__exponent+0x82>
 800ca40:	270a      	movs	r7, #10
 800ca42:	ab04      	add	r3, sp, #16
 800ca44:	1dde      	adds	r6, r3, #7
 800ca46:	0020      	movs	r0, r4
 800ca48:	0039      	movs	r1, r7
 800ca4a:	9601      	str	r6, [sp, #4]
 800ca4c:	f7f3 fce4 	bl	8000418 <__aeabi_idivmod>
 800ca50:	3e01      	subs	r6, #1
 800ca52:	3130      	adds	r1, #48	; 0x30
 800ca54:	0020      	movs	r0, r4
 800ca56:	7031      	strb	r1, [r6, #0]
 800ca58:	0039      	movs	r1, r7
 800ca5a:	9402      	str	r4, [sp, #8]
 800ca5c:	f7f3 fbf6 	bl	800024c <__divsi3>
 800ca60:	9b02      	ldr	r3, [sp, #8]
 800ca62:	0004      	movs	r4, r0
 800ca64:	2b63      	cmp	r3, #99	; 0x63
 800ca66:	dcee      	bgt.n	800ca46 <__exponent+0x24>
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	3430      	adds	r4, #48	; 0x30
 800ca6c:	1e9a      	subs	r2, r3, #2
 800ca6e:	0013      	movs	r3, r2
 800ca70:	9903      	ldr	r1, [sp, #12]
 800ca72:	7014      	strb	r4, [r2, #0]
 800ca74:	a804      	add	r0, sp, #16
 800ca76:	3007      	adds	r0, #7
 800ca78:	4298      	cmp	r0, r3
 800ca7a:	d80e      	bhi.n	800ca9a <__exponent+0x78>
 800ca7c:	ab04      	add	r3, sp, #16
 800ca7e:	3307      	adds	r3, #7
 800ca80:	2000      	movs	r0, #0
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d804      	bhi.n	800ca90 <__exponent+0x6e>
 800ca86:	ab04      	add	r3, sp, #16
 800ca88:	3009      	adds	r0, #9
 800ca8a:	18c0      	adds	r0, r0, r3
 800ca8c:	9b01      	ldr	r3, [sp, #4]
 800ca8e:	1ac0      	subs	r0, r0, r3
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	1818      	adds	r0, r3, r0
 800ca94:	1b40      	subs	r0, r0, r5
 800ca96:	b007      	add	sp, #28
 800ca98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca9a:	7818      	ldrb	r0, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	7008      	strb	r0, [r1, #0]
 800caa0:	3101      	adds	r1, #1
 800caa2:	e7e7      	b.n	800ca74 <__exponent+0x52>
 800caa4:	2330      	movs	r3, #48	; 0x30
 800caa6:	18e4      	adds	r4, r4, r3
 800caa8:	70ab      	strb	r3, [r5, #2]
 800caaa:	1d28      	adds	r0, r5, #4
 800caac:	70ec      	strb	r4, [r5, #3]
 800caae:	e7f1      	b.n	800ca94 <__exponent+0x72>

0800cab0 <_printf_float>:
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b095      	sub	sp, #84	; 0x54
 800cab4:	000c      	movs	r4, r1
 800cab6:	9208      	str	r2, [sp, #32]
 800cab8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800caba:	9309      	str	r3, [sp, #36]	; 0x24
 800cabc:	0007      	movs	r7, r0
 800cabe:	f001 fa91 	bl	800dfe4 <_localeconv_r>
 800cac2:	6803      	ldr	r3, [r0, #0]
 800cac4:	0018      	movs	r0, r3
 800cac6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac8:	f7f3 fb1a 	bl	8000100 <strlen>
 800cacc:	2300      	movs	r3, #0
 800cace:	9312      	str	r3, [sp, #72]	; 0x48
 800cad0:	7e23      	ldrb	r3, [r4, #24]
 800cad2:	2207      	movs	r2, #7
 800cad4:	001e      	movs	r6, r3
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	900d      	str	r0, [sp, #52]	; 0x34
 800cada:	930c      	str	r3, [sp, #48]	; 0x30
 800cadc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cade:	682b      	ldr	r3, [r5, #0]
 800cae0:	05c9      	lsls	r1, r1, #23
 800cae2:	d547      	bpl.n	800cb74 <_printf_float+0xc4>
 800cae4:	189b      	adds	r3, r3, r2
 800cae6:	4393      	bics	r3, r2
 800cae8:	001a      	movs	r2, r3
 800caea:	3208      	adds	r2, #8
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	64a2      	str	r2, [r4, #72]	; 0x48
 800caf4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800caf6:	2201      	movs	r2, #1
 800caf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cafa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800cafc:	930a      	str	r3, [sp, #40]	; 0x28
 800cafe:	006b      	lsls	r3, r5, #1
 800cb00:	085b      	lsrs	r3, r3, #1
 800cb02:	930e      	str	r3, [sp, #56]	; 0x38
 800cb04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb06:	4ba8      	ldr	r3, [pc, #672]	; (800cda8 <_printf_float+0x2f8>)
 800cb08:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb0a:	4252      	negs	r2, r2
 800cb0c:	f7f6 f936 	bl	8002d7c <__aeabi_dcmpun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d131      	bne.n	800cb78 <_printf_float+0xc8>
 800cb14:	2201      	movs	r2, #1
 800cb16:	4ba4      	ldr	r3, [pc, #656]	; (800cda8 <_printf_float+0x2f8>)
 800cb18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cb1c:	4252      	negs	r2, r2
 800cb1e:	f7f3 fca1 	bl	8000464 <__aeabi_dcmple>
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d128      	bne.n	800cb78 <_printf_float+0xc8>
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	0029      	movs	r1, r5
 800cb2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cb2e:	f7f3 fc8f 	bl	8000450 <__aeabi_dcmplt>
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d003      	beq.n	800cb3e <_printf_float+0x8e>
 800cb36:	0023      	movs	r3, r4
 800cb38:	222d      	movs	r2, #45	; 0x2d
 800cb3a:	3343      	adds	r3, #67	; 0x43
 800cb3c:	701a      	strb	r2, [r3, #0]
 800cb3e:	4d9b      	ldr	r5, [pc, #620]	; (800cdac <_printf_float+0x2fc>)
 800cb40:	2e47      	cmp	r6, #71	; 0x47
 800cb42:	d900      	bls.n	800cb46 <_printf_float+0x96>
 800cb44:	4d9a      	ldr	r5, [pc, #616]	; (800cdb0 <_printf_float+0x300>)
 800cb46:	2303      	movs	r3, #3
 800cb48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb4a:	6123      	str	r3, [r4, #16]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	439a      	bics	r2, r3
 800cb50:	2300      	movs	r3, #0
 800cb52:	6022      	str	r2, [r4, #0]
 800cb54:	930a      	str	r3, [sp, #40]	; 0x28
 800cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb58:	0021      	movs	r1, r4
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	0038      	movs	r0, r7
 800cb5e:	9b08      	ldr	r3, [sp, #32]
 800cb60:	aa13      	add	r2, sp, #76	; 0x4c
 800cb62:	f000 f9f3 	bl	800cf4c <_printf_common>
 800cb66:	1c43      	adds	r3, r0, #1
 800cb68:	d000      	beq.n	800cb6c <_printf_float+0xbc>
 800cb6a:	e09e      	b.n	800ccaa <_printf_float+0x1fa>
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	4240      	negs	r0, r0
 800cb70:	b015      	add	sp, #84	; 0x54
 800cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb74:	3307      	adds	r3, #7
 800cb76:	e7b6      	b.n	800cae6 <_printf_float+0x36>
 800cb78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb7a:	002b      	movs	r3, r5
 800cb7c:	0010      	movs	r0, r2
 800cb7e:	0029      	movs	r1, r5
 800cb80:	f7f6 f8fc 	bl	8002d7c <__aeabi_dcmpun>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d00a      	beq.n	800cb9e <_printf_float+0xee>
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	da03      	bge.n	800cb94 <_printf_float+0xe4>
 800cb8c:	0023      	movs	r3, r4
 800cb8e:	222d      	movs	r2, #45	; 0x2d
 800cb90:	3343      	adds	r3, #67	; 0x43
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	4d87      	ldr	r5, [pc, #540]	; (800cdb4 <_printf_float+0x304>)
 800cb96:	2e47      	cmp	r6, #71	; 0x47
 800cb98:	d9d5      	bls.n	800cb46 <_printf_float+0x96>
 800cb9a:	4d87      	ldr	r5, [pc, #540]	; (800cdb8 <_printf_float+0x308>)
 800cb9c:	e7d3      	b.n	800cb46 <_printf_float+0x96>
 800cb9e:	2220      	movs	r2, #32
 800cba0:	0031      	movs	r1, r6
 800cba2:	6863      	ldr	r3, [r4, #4]
 800cba4:	4391      	bics	r1, r2
 800cba6:	910e      	str	r1, [sp, #56]	; 0x38
 800cba8:	1c5a      	adds	r2, r3, #1
 800cbaa:	d147      	bne.n	800cc3c <_printf_float+0x18c>
 800cbac:	3307      	adds	r3, #7
 800cbae:	6063      	str	r3, [r4, #4]
 800cbb0:	2380      	movs	r3, #128	; 0x80
 800cbb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	2200      	movs	r2, #0
 800cbba:	9206      	str	r2, [sp, #24]
 800cbbc:	aa12      	add	r2, sp, #72	; 0x48
 800cbbe:	9205      	str	r2, [sp, #20]
 800cbc0:	aa11      	add	r2, sp, #68	; 0x44
 800cbc2:	9203      	str	r2, [sp, #12]
 800cbc4:	2223      	movs	r2, #35	; 0x23
 800cbc6:	a908      	add	r1, sp, #32
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	6863      	ldr	r3, [r4, #4]
 800cbce:	1852      	adds	r2, r2, r1
 800cbd0:	9202      	str	r2, [sp, #8]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	0038      	movs	r0, r7
 800cbd6:	002b      	movs	r3, r5
 800cbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbda:	9604      	str	r6, [sp, #16]
 800cbdc:	f7ff febe 	bl	800c95c <__cvt>
 800cbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbe2:	0005      	movs	r5, r0
 800cbe4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cbe6:	2b47      	cmp	r3, #71	; 0x47
 800cbe8:	d108      	bne.n	800cbfc <_printf_float+0x14c>
 800cbea:	1ccb      	adds	r3, r1, #3
 800cbec:	db02      	blt.n	800cbf4 <_printf_float+0x144>
 800cbee:	6863      	ldr	r3, [r4, #4]
 800cbf0:	4299      	cmp	r1, r3
 800cbf2:	dd46      	ble.n	800cc82 <_printf_float+0x1d2>
 800cbf4:	0033      	movs	r3, r6
 800cbf6:	3b02      	subs	r3, #2
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	001e      	movs	r6, r3
 800cbfc:	2e65      	cmp	r6, #101	; 0x65
 800cbfe:	d824      	bhi.n	800cc4a <_printf_float+0x19a>
 800cc00:	0020      	movs	r0, r4
 800cc02:	0032      	movs	r2, r6
 800cc04:	3901      	subs	r1, #1
 800cc06:	3050      	adds	r0, #80	; 0x50
 800cc08:	9111      	str	r1, [sp, #68]	; 0x44
 800cc0a:	f7ff ff0a 	bl	800ca22 <__exponent>
 800cc0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc10:	900a      	str	r0, [sp, #40]	; 0x28
 800cc12:	1813      	adds	r3, r2, r0
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	2a01      	cmp	r2, #1
 800cc18:	dc02      	bgt.n	800cc20 <_printf_float+0x170>
 800cc1a:	6822      	ldr	r2, [r4, #0]
 800cc1c:	07d2      	lsls	r2, r2, #31
 800cc1e:	d501      	bpl.n	800cc24 <_printf_float+0x174>
 800cc20:	3301      	adds	r3, #1
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	2323      	movs	r3, #35	; 0x23
 800cc26:	aa08      	add	r2, sp, #32
 800cc28:	189b      	adds	r3, r3, r2
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d100      	bne.n	800cc32 <_printf_float+0x182>
 800cc30:	e791      	b.n	800cb56 <_printf_float+0xa6>
 800cc32:	0023      	movs	r3, r4
 800cc34:	222d      	movs	r2, #45	; 0x2d
 800cc36:	3343      	adds	r3, #67	; 0x43
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	e78c      	b.n	800cb56 <_printf_float+0xa6>
 800cc3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc3e:	2a47      	cmp	r2, #71	; 0x47
 800cc40:	d1b6      	bne.n	800cbb0 <_printf_float+0x100>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1b4      	bne.n	800cbb0 <_printf_float+0x100>
 800cc46:	3301      	adds	r3, #1
 800cc48:	e7b1      	b.n	800cbae <_printf_float+0xfe>
 800cc4a:	2e66      	cmp	r6, #102	; 0x66
 800cc4c:	d11b      	bne.n	800cc86 <_printf_float+0x1d6>
 800cc4e:	6863      	ldr	r3, [r4, #4]
 800cc50:	2900      	cmp	r1, #0
 800cc52:	dd0d      	ble.n	800cc70 <_printf_float+0x1c0>
 800cc54:	6121      	str	r1, [r4, #16]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <_printf_float+0x1b0>
 800cc5a:	6822      	ldr	r2, [r4, #0]
 800cc5c:	07d2      	lsls	r2, r2, #31
 800cc5e:	d502      	bpl.n	800cc66 <_printf_float+0x1b6>
 800cc60:	3301      	adds	r3, #1
 800cc62:	1859      	adds	r1, r3, r1
 800cc64:	6121      	str	r1, [r4, #16]
 800cc66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc68:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	930a      	str	r3, [sp, #40]	; 0x28
 800cc6e:	e7d9      	b.n	800cc24 <_printf_float+0x174>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d103      	bne.n	800cc7c <_printf_float+0x1cc>
 800cc74:	2201      	movs	r2, #1
 800cc76:	6821      	ldr	r1, [r4, #0]
 800cc78:	4211      	tst	r1, r2
 800cc7a:	d000      	beq.n	800cc7e <_printf_float+0x1ce>
 800cc7c:	1c9a      	adds	r2, r3, #2
 800cc7e:	6122      	str	r2, [r4, #16]
 800cc80:	e7f1      	b.n	800cc66 <_printf_float+0x1b6>
 800cc82:	2367      	movs	r3, #103	; 0x67
 800cc84:	001e      	movs	r6, r3
 800cc86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	db06      	blt.n	800cc9c <_printf_float+0x1ec>
 800cc8e:	6822      	ldr	r2, [r4, #0]
 800cc90:	6123      	str	r3, [r4, #16]
 800cc92:	07d2      	lsls	r2, r2, #31
 800cc94:	d5e7      	bpl.n	800cc66 <_printf_float+0x1b6>
 800cc96:	3301      	adds	r3, #1
 800cc98:	6123      	str	r3, [r4, #16]
 800cc9a:	e7e4      	b.n	800cc66 <_printf_float+0x1b6>
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc01      	bgt.n	800cca6 <_printf_float+0x1f6>
 800cca2:	1849      	adds	r1, r1, r1
 800cca4:	1ac9      	subs	r1, r1, r3
 800cca6:	1852      	adds	r2, r2, r1
 800cca8:	e7e9      	b.n	800cc7e <_printf_float+0x1ce>
 800ccaa:	6822      	ldr	r2, [r4, #0]
 800ccac:	0553      	lsls	r3, r2, #21
 800ccae:	d408      	bmi.n	800ccc2 <_printf_float+0x212>
 800ccb0:	6923      	ldr	r3, [r4, #16]
 800ccb2:	002a      	movs	r2, r5
 800ccb4:	0038      	movs	r0, r7
 800ccb6:	9908      	ldr	r1, [sp, #32]
 800ccb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ccba:	47a8      	blx	r5
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d129      	bne.n	800cd14 <_printf_float+0x264>
 800ccc0:	e754      	b.n	800cb6c <_printf_float+0xbc>
 800ccc2:	2e65      	cmp	r6, #101	; 0x65
 800ccc4:	d800      	bhi.n	800ccc8 <_printf_float+0x218>
 800ccc6:	e0ec      	b.n	800cea2 <_printf_float+0x3f2>
 800ccc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ccca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800cccc:	2200      	movs	r2, #0
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f7f3 fbb8 	bl	8000444 <__aeabi_dcmpeq>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d034      	beq.n	800cd42 <_printf_float+0x292>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	0038      	movs	r0, r7
 800ccdc:	4a37      	ldr	r2, [pc, #220]	; (800cdbc <_printf_float+0x30c>)
 800ccde:	9908      	ldr	r1, [sp, #32]
 800cce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cce2:	47a8      	blx	r5
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d100      	bne.n	800ccea <_printf_float+0x23a>
 800cce8:	e740      	b.n	800cb6c <_printf_float+0xbc>
 800ccea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	db02      	blt.n	800ccf8 <_printf_float+0x248>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	07db      	lsls	r3, r3, #31
 800ccf6:	d50d      	bpl.n	800cd14 <_printf_float+0x264>
 800ccf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ccfa:	0038      	movs	r0, r7
 800ccfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd00:	9908      	ldr	r1, [sp, #32]
 800cd02:	47a8      	blx	r5
 800cd04:	2500      	movs	r5, #0
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	d100      	bne.n	800cd0c <_printf_float+0x25c>
 800cd0a:	e72f      	b.n	800cb6c <_printf_float+0xbc>
 800cd0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	42ab      	cmp	r3, r5
 800cd12:	dc0a      	bgt.n	800cd2a <_printf_float+0x27a>
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	079b      	lsls	r3, r3, #30
 800cd18:	d500      	bpl.n	800cd1c <_printf_float+0x26c>
 800cd1a:	e114      	b.n	800cf46 <_printf_float+0x496>
 800cd1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd1e:	68e0      	ldr	r0, [r4, #12]
 800cd20:	4298      	cmp	r0, r3
 800cd22:	db00      	blt.n	800cd26 <_printf_float+0x276>
 800cd24:	e724      	b.n	800cb70 <_printf_float+0xc0>
 800cd26:	0018      	movs	r0, r3
 800cd28:	e722      	b.n	800cb70 <_printf_float+0xc0>
 800cd2a:	0022      	movs	r2, r4
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	0038      	movs	r0, r7
 800cd30:	9908      	ldr	r1, [sp, #32]
 800cd32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cd34:	321a      	adds	r2, #26
 800cd36:	47b0      	blx	r6
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d100      	bne.n	800cd3e <_printf_float+0x28e>
 800cd3c:	e716      	b.n	800cb6c <_printf_float+0xbc>
 800cd3e:	3501      	adds	r5, #1
 800cd40:	e7e4      	b.n	800cd0c <_printf_float+0x25c>
 800cd42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dc3b      	bgt.n	800cdc0 <_printf_float+0x310>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	0038      	movs	r0, r7
 800cd4c:	4a1b      	ldr	r2, [pc, #108]	; (800cdbc <_printf_float+0x30c>)
 800cd4e:	9908      	ldr	r1, [sp, #32]
 800cd50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cd52:	47b0      	blx	r6
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d100      	bne.n	800cd5a <_printf_float+0x2aa>
 800cd58:	e708      	b.n	800cb6c <_printf_float+0xbc>
 800cd5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	d102      	bne.n	800cd68 <_printf_float+0x2b8>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	07db      	lsls	r3, r3, #31
 800cd66:	d5d5      	bpl.n	800cd14 <_printf_float+0x264>
 800cd68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd6a:	0038      	movs	r0, r7
 800cd6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd6e:	9908      	ldr	r1, [sp, #32]
 800cd70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cd72:	47b0      	blx	r6
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d100      	bne.n	800cd7a <_printf_float+0x2ca>
 800cd78:	e6f8      	b.n	800cb6c <_printf_float+0xbc>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd82:	425b      	negs	r3, r3
 800cd84:	4293      	cmp	r3, r2
 800cd86:	dc01      	bgt.n	800cd8c <_printf_float+0x2dc>
 800cd88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd8a:	e792      	b.n	800ccb2 <_printf_float+0x202>
 800cd8c:	0022      	movs	r2, r4
 800cd8e:	2301      	movs	r3, #1
 800cd90:	0038      	movs	r0, r7
 800cd92:	9908      	ldr	r1, [sp, #32]
 800cd94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cd96:	321a      	adds	r2, #26
 800cd98:	47b0      	blx	r6
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	d100      	bne.n	800cda0 <_printf_float+0x2f0>
 800cd9e:	e6e5      	b.n	800cb6c <_printf_float+0xbc>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	3301      	adds	r3, #1
 800cda4:	e7ea      	b.n	800cd7c <_printf_float+0x2cc>
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	7fefffff 	.word	0x7fefffff
 800cdac:	08012470 	.word	0x08012470
 800cdb0:	08012474 	.word	0x08012474
 800cdb4:	08012478 	.word	0x08012478
 800cdb8:	0801247c 	.word	0x0801247c
 800cdbc:	08012480 	.word	0x08012480
 800cdc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdc4:	920a      	str	r2, [sp, #40]	; 0x28
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	dd00      	ble.n	800cdcc <_printf_float+0x31c>
 800cdca:	930a      	str	r3, [sp, #40]	; 0x28
 800cdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dc3d      	bgt.n	800ce4e <_printf_float+0x39e>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	930e      	str	r3, [sp, #56]	; 0x38
 800cdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd8:	43db      	mvns	r3, r3
 800cdda:	17db      	asrs	r3, r3, #31
 800cddc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cde0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cde2:	930c      	str	r3, [sp, #48]	; 0x30
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	4013      	ands	r3, r2
 800cde8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	dc36      	bgt.n	800ce60 <_printf_float+0x3b0>
 800cdf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	db40      	blt.n	800ce7c <_printf_float+0x3cc>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	07db      	lsls	r3, r3, #31
 800cdfe:	d43d      	bmi.n	800ce7c <_printf_float+0x3cc>
 800ce00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce04:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	1a52      	subs	r2, r2, r1
 800ce0a:	920a      	str	r2, [sp, #40]	; 0x28
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	dd00      	ble.n	800ce12 <_printf_float+0x362>
 800ce10:	930a      	str	r3, [sp, #40]	; 0x28
 800ce12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dc3a      	bgt.n	800ce8e <_printf_float+0x3de>
 800ce18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	43db      	mvns	r3, r3
 800ce1e:	17db      	asrs	r3, r3, #31
 800ce20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce2c:	400a      	ands	r2, r1
 800ce2e:	1a9b      	subs	r3, r3, r2
 800ce30:	42ab      	cmp	r3, r5
 800ce32:	dc00      	bgt.n	800ce36 <_printf_float+0x386>
 800ce34:	e76e      	b.n	800cd14 <_printf_float+0x264>
 800ce36:	0022      	movs	r2, r4
 800ce38:	2301      	movs	r3, #1
 800ce3a:	0038      	movs	r0, r7
 800ce3c:	9908      	ldr	r1, [sp, #32]
 800ce3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ce40:	321a      	adds	r2, #26
 800ce42:	47b0      	blx	r6
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d100      	bne.n	800ce4a <_printf_float+0x39a>
 800ce48:	e690      	b.n	800cb6c <_printf_float+0xbc>
 800ce4a:	3501      	adds	r5, #1
 800ce4c:	e7e9      	b.n	800ce22 <_printf_float+0x372>
 800ce4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce50:	002a      	movs	r2, r5
 800ce52:	0038      	movs	r0, r7
 800ce54:	9908      	ldr	r1, [sp, #32]
 800ce56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ce58:	47b0      	blx	r6
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d1b9      	bne.n	800cdd2 <_printf_float+0x322>
 800ce5e:	e685      	b.n	800cb6c <_printf_float+0xbc>
 800ce60:	0022      	movs	r2, r4
 800ce62:	2301      	movs	r3, #1
 800ce64:	0038      	movs	r0, r7
 800ce66:	9908      	ldr	r1, [sp, #32]
 800ce68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ce6a:	321a      	adds	r2, #26
 800ce6c:	47b0      	blx	r6
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d100      	bne.n	800ce74 <_printf_float+0x3c4>
 800ce72:	e67b      	b.n	800cb6c <_printf_float+0xbc>
 800ce74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce76:	3301      	adds	r3, #1
 800ce78:	930e      	str	r3, [sp, #56]	; 0x38
 800ce7a:	e7b0      	b.n	800cdde <_printf_float+0x32e>
 800ce7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce7e:	0038      	movs	r0, r7
 800ce80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce82:	9908      	ldr	r1, [sp, #32]
 800ce84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ce86:	47b0      	blx	r6
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d1b9      	bne.n	800ce00 <_printf_float+0x350>
 800ce8c:	e66e      	b.n	800cb6c <_printf_float+0xbc>
 800ce8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce90:	0038      	movs	r0, r7
 800ce92:	18ea      	adds	r2, r5, r3
 800ce94:	9908      	ldr	r1, [sp, #32]
 800ce96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ce9a:	47a8      	blx	r5
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d1bb      	bne.n	800ce18 <_printf_float+0x368>
 800cea0:	e664      	b.n	800cb6c <_printf_float+0xbc>
 800cea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	dc02      	bgt.n	800ceae <_printf_float+0x3fe>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	421a      	tst	r2, r3
 800ceac:	d038      	beq.n	800cf20 <_printf_float+0x470>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	002a      	movs	r2, r5
 800ceb2:	0038      	movs	r0, r7
 800ceb4:	9908      	ldr	r1, [sp, #32]
 800ceb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ceb8:	47b0      	blx	r6
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	d100      	bne.n	800cec0 <_printf_float+0x410>
 800cebe:	e655      	b.n	800cb6c <_printf_float+0xbc>
 800cec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cec2:	0038      	movs	r0, r7
 800cec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cec6:	9908      	ldr	r1, [sp, #32]
 800cec8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ceca:	47b0      	blx	r6
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d100      	bne.n	800ced2 <_printf_float+0x422>
 800ced0:	e64c      	b.n	800cb6c <_printf_float+0xbc>
 800ced2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ced4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ced6:	2200      	movs	r2, #0
 800ced8:	2300      	movs	r3, #0
 800ceda:	f7f3 fab3 	bl	8000444 <__aeabi_dcmpeq>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d11c      	bne.n	800cf1c <_printf_float+0x46c>
 800cee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cee4:	1c6a      	adds	r2, r5, #1
 800cee6:	3b01      	subs	r3, #1
 800cee8:	0038      	movs	r0, r7
 800ceea:	9908      	ldr	r1, [sp, #32]
 800ceec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ceee:	47a8      	blx	r5
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d10f      	bne.n	800cf14 <_printf_float+0x464>
 800cef4:	e63a      	b.n	800cb6c <_printf_float+0xbc>
 800cef6:	0022      	movs	r2, r4
 800cef8:	2301      	movs	r3, #1
 800cefa:	0038      	movs	r0, r7
 800cefc:	9908      	ldr	r1, [sp, #32]
 800cefe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cf00:	321a      	adds	r2, #26
 800cf02:	47b0      	blx	r6
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d100      	bne.n	800cf0a <_printf_float+0x45a>
 800cf08:	e630      	b.n	800cb6c <_printf_float+0xbc>
 800cf0a:	3501      	adds	r5, #1
 800cf0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	42ab      	cmp	r3, r5
 800cf12:	dcf0      	bgt.n	800cef6 <_printf_float+0x446>
 800cf14:	0022      	movs	r2, r4
 800cf16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf18:	3250      	adds	r2, #80	; 0x50
 800cf1a:	e6cb      	b.n	800ccb4 <_printf_float+0x204>
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	e7f5      	b.n	800cf0c <_printf_float+0x45c>
 800cf20:	002a      	movs	r2, r5
 800cf22:	e7e1      	b.n	800cee8 <_printf_float+0x438>
 800cf24:	0022      	movs	r2, r4
 800cf26:	2301      	movs	r3, #1
 800cf28:	0038      	movs	r0, r7
 800cf2a:	9908      	ldr	r1, [sp, #32]
 800cf2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cf2e:	3219      	adds	r2, #25
 800cf30:	47b0      	blx	r6
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d100      	bne.n	800cf38 <_printf_float+0x488>
 800cf36:	e619      	b.n	800cb6c <_printf_float+0xbc>
 800cf38:	3501      	adds	r5, #1
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	42ab      	cmp	r3, r5
 800cf42:	dcef      	bgt.n	800cf24 <_printf_float+0x474>
 800cf44:	e6ea      	b.n	800cd1c <_printf_float+0x26c>
 800cf46:	2500      	movs	r5, #0
 800cf48:	e7f7      	b.n	800cf3a <_printf_float+0x48a>
 800cf4a:	46c0      	nop			; (mov r8, r8)

0800cf4c <_printf_common>:
 800cf4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf4e:	0015      	movs	r5, r2
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	688a      	ldr	r2, [r1, #8]
 800cf54:	690b      	ldr	r3, [r1, #16]
 800cf56:	000c      	movs	r4, r1
 800cf58:	9000      	str	r0, [sp, #0]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	da00      	bge.n	800cf60 <_printf_common+0x14>
 800cf5e:	0013      	movs	r3, r2
 800cf60:	0022      	movs	r2, r4
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	3243      	adds	r2, #67	; 0x43
 800cf66:	7812      	ldrb	r2, [r2, #0]
 800cf68:	2a00      	cmp	r2, #0
 800cf6a:	d001      	beq.n	800cf70 <_printf_common+0x24>
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	602b      	str	r3, [r5, #0]
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	069b      	lsls	r3, r3, #26
 800cf74:	d502      	bpl.n	800cf7c <_printf_common+0x30>
 800cf76:	682b      	ldr	r3, [r5, #0]
 800cf78:	3302      	adds	r3, #2
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	2306      	movs	r3, #6
 800cf80:	0017      	movs	r7, r2
 800cf82:	401f      	ands	r7, r3
 800cf84:	421a      	tst	r2, r3
 800cf86:	d027      	beq.n	800cfd8 <_printf_common+0x8c>
 800cf88:	0023      	movs	r3, r4
 800cf8a:	3343      	adds	r3, #67	; 0x43
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	1e5a      	subs	r2, r3, #1
 800cf90:	4193      	sbcs	r3, r2
 800cf92:	6822      	ldr	r2, [r4, #0]
 800cf94:	0692      	lsls	r2, r2, #26
 800cf96:	d430      	bmi.n	800cffa <_printf_common+0xae>
 800cf98:	0022      	movs	r2, r4
 800cf9a:	9901      	ldr	r1, [sp, #4]
 800cf9c:	9800      	ldr	r0, [sp, #0]
 800cf9e:	9e08      	ldr	r6, [sp, #32]
 800cfa0:	3243      	adds	r2, #67	; 0x43
 800cfa2:	47b0      	blx	r6
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d025      	beq.n	800cff4 <_printf_common+0xa8>
 800cfa8:	2306      	movs	r3, #6
 800cfaa:	6820      	ldr	r0, [r4, #0]
 800cfac:	682a      	ldr	r2, [r5, #0]
 800cfae:	68e1      	ldr	r1, [r4, #12]
 800cfb0:	2500      	movs	r5, #0
 800cfb2:	4003      	ands	r3, r0
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d103      	bne.n	800cfc0 <_printf_common+0x74>
 800cfb8:	1a8d      	subs	r5, r1, r2
 800cfba:	43eb      	mvns	r3, r5
 800cfbc:	17db      	asrs	r3, r3, #31
 800cfbe:	401d      	ands	r5, r3
 800cfc0:	68a3      	ldr	r3, [r4, #8]
 800cfc2:	6922      	ldr	r2, [r4, #16]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	dd01      	ble.n	800cfcc <_printf_common+0x80>
 800cfc8:	1a9b      	subs	r3, r3, r2
 800cfca:	18ed      	adds	r5, r5, r3
 800cfcc:	2700      	movs	r7, #0
 800cfce:	42bd      	cmp	r5, r7
 800cfd0:	d120      	bne.n	800d014 <_printf_common+0xc8>
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e010      	b.n	800cff8 <_printf_common+0xac>
 800cfd6:	3701      	adds	r7, #1
 800cfd8:	68e3      	ldr	r3, [r4, #12]
 800cfda:	682a      	ldr	r2, [r5, #0]
 800cfdc:	1a9b      	subs	r3, r3, r2
 800cfde:	42bb      	cmp	r3, r7
 800cfe0:	ddd2      	ble.n	800cf88 <_printf_common+0x3c>
 800cfe2:	0022      	movs	r2, r4
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	9901      	ldr	r1, [sp, #4]
 800cfe8:	9800      	ldr	r0, [sp, #0]
 800cfea:	9e08      	ldr	r6, [sp, #32]
 800cfec:	3219      	adds	r2, #25
 800cfee:	47b0      	blx	r6
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d1f0      	bne.n	800cfd6 <_printf_common+0x8a>
 800cff4:	2001      	movs	r0, #1
 800cff6:	4240      	negs	r0, r0
 800cff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cffa:	2030      	movs	r0, #48	; 0x30
 800cffc:	18e1      	adds	r1, r4, r3
 800cffe:	3143      	adds	r1, #67	; 0x43
 800d000:	7008      	strb	r0, [r1, #0]
 800d002:	0021      	movs	r1, r4
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	3145      	adds	r1, #69	; 0x45
 800d008:	7809      	ldrb	r1, [r1, #0]
 800d00a:	18a2      	adds	r2, r4, r2
 800d00c:	3243      	adds	r2, #67	; 0x43
 800d00e:	3302      	adds	r3, #2
 800d010:	7011      	strb	r1, [r2, #0]
 800d012:	e7c1      	b.n	800cf98 <_printf_common+0x4c>
 800d014:	0022      	movs	r2, r4
 800d016:	2301      	movs	r3, #1
 800d018:	9901      	ldr	r1, [sp, #4]
 800d01a:	9800      	ldr	r0, [sp, #0]
 800d01c:	9e08      	ldr	r6, [sp, #32]
 800d01e:	321a      	adds	r2, #26
 800d020:	47b0      	blx	r6
 800d022:	1c43      	adds	r3, r0, #1
 800d024:	d0e6      	beq.n	800cff4 <_printf_common+0xa8>
 800d026:	3701      	adds	r7, #1
 800d028:	e7d1      	b.n	800cfce <_printf_common+0x82>
	...

0800d02c <_printf_i>:
 800d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02e:	b08b      	sub	sp, #44	; 0x2c
 800d030:	9206      	str	r2, [sp, #24]
 800d032:	000a      	movs	r2, r1
 800d034:	3243      	adds	r2, #67	; 0x43
 800d036:	9307      	str	r3, [sp, #28]
 800d038:	9005      	str	r0, [sp, #20]
 800d03a:	9204      	str	r2, [sp, #16]
 800d03c:	7e0a      	ldrb	r2, [r1, #24]
 800d03e:	000c      	movs	r4, r1
 800d040:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d042:	2a78      	cmp	r2, #120	; 0x78
 800d044:	d806      	bhi.n	800d054 <_printf_i+0x28>
 800d046:	2a62      	cmp	r2, #98	; 0x62
 800d048:	d808      	bhi.n	800d05c <_printf_i+0x30>
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d100      	bne.n	800d050 <_printf_i+0x24>
 800d04e:	e0c0      	b.n	800d1d2 <_printf_i+0x1a6>
 800d050:	2a58      	cmp	r2, #88	; 0x58
 800d052:	d052      	beq.n	800d0fa <_printf_i+0xce>
 800d054:	0026      	movs	r6, r4
 800d056:	3642      	adds	r6, #66	; 0x42
 800d058:	7032      	strb	r2, [r6, #0]
 800d05a:	e022      	b.n	800d0a2 <_printf_i+0x76>
 800d05c:	0010      	movs	r0, r2
 800d05e:	3863      	subs	r0, #99	; 0x63
 800d060:	2815      	cmp	r0, #21
 800d062:	d8f7      	bhi.n	800d054 <_printf_i+0x28>
 800d064:	f7f3 f85e 	bl	8000124 <__gnu_thumb1_case_shi>
 800d068:	001f0016 	.word	0x001f0016
 800d06c:	fff6fff6 	.word	0xfff6fff6
 800d070:	fff6fff6 	.word	0xfff6fff6
 800d074:	fff6001f 	.word	0xfff6001f
 800d078:	fff6fff6 	.word	0xfff6fff6
 800d07c:	00a8fff6 	.word	0x00a8fff6
 800d080:	009a0036 	.word	0x009a0036
 800d084:	fff6fff6 	.word	0xfff6fff6
 800d088:	fff600b9 	.word	0xfff600b9
 800d08c:	fff60036 	.word	0xfff60036
 800d090:	009efff6 	.word	0x009efff6
 800d094:	0026      	movs	r6, r4
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	3642      	adds	r6, #66	; 0x42
 800d09a:	1d11      	adds	r1, r2, #4
 800d09c:	6019      	str	r1, [r3, #0]
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	7033      	strb	r3, [r6, #0]
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e0a7      	b.n	800d1f6 <_printf_i+0x1ca>
 800d0a6:	6808      	ldr	r0, [r1, #0]
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	1d0a      	adds	r2, r1, #4
 800d0ac:	0605      	lsls	r5, r0, #24
 800d0ae:	d50b      	bpl.n	800d0c8 <_printf_i+0x9c>
 800d0b0:	680d      	ldr	r5, [r1, #0]
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	da03      	bge.n	800d0c0 <_printf_i+0x94>
 800d0b8:	232d      	movs	r3, #45	; 0x2d
 800d0ba:	9a04      	ldr	r2, [sp, #16]
 800d0bc:	426d      	negs	r5, r5
 800d0be:	7013      	strb	r3, [r2, #0]
 800d0c0:	4b61      	ldr	r3, [pc, #388]	; (800d248 <_printf_i+0x21c>)
 800d0c2:	270a      	movs	r7, #10
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	e032      	b.n	800d12e <_printf_i+0x102>
 800d0c8:	680d      	ldr	r5, [r1, #0]
 800d0ca:	601a      	str	r2, [r3, #0]
 800d0cc:	0641      	lsls	r1, r0, #25
 800d0ce:	d5f1      	bpl.n	800d0b4 <_printf_i+0x88>
 800d0d0:	b22d      	sxth	r5, r5
 800d0d2:	e7ef      	b.n	800d0b4 <_printf_i+0x88>
 800d0d4:	680d      	ldr	r5, [r1, #0]
 800d0d6:	6819      	ldr	r1, [r3, #0]
 800d0d8:	1d08      	adds	r0, r1, #4
 800d0da:	6018      	str	r0, [r3, #0]
 800d0dc:	062e      	lsls	r6, r5, #24
 800d0de:	d501      	bpl.n	800d0e4 <_printf_i+0xb8>
 800d0e0:	680d      	ldr	r5, [r1, #0]
 800d0e2:	e003      	b.n	800d0ec <_printf_i+0xc0>
 800d0e4:	066d      	lsls	r5, r5, #25
 800d0e6:	d5fb      	bpl.n	800d0e0 <_printf_i+0xb4>
 800d0e8:	680d      	ldr	r5, [r1, #0]
 800d0ea:	b2ad      	uxth	r5, r5
 800d0ec:	4b56      	ldr	r3, [pc, #344]	; (800d248 <_printf_i+0x21c>)
 800d0ee:	270a      	movs	r7, #10
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	2a6f      	cmp	r2, #111	; 0x6f
 800d0f4:	d117      	bne.n	800d126 <_printf_i+0xfa>
 800d0f6:	2708      	movs	r7, #8
 800d0f8:	e015      	b.n	800d126 <_printf_i+0xfa>
 800d0fa:	3145      	adds	r1, #69	; 0x45
 800d0fc:	700a      	strb	r2, [r1, #0]
 800d0fe:	4a52      	ldr	r2, [pc, #328]	; (800d248 <_printf_i+0x21c>)
 800d100:	9203      	str	r2, [sp, #12]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	6821      	ldr	r1, [r4, #0]
 800d106:	ca20      	ldmia	r2!, {r5}
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	0608      	lsls	r0, r1, #24
 800d10c:	d550      	bpl.n	800d1b0 <_printf_i+0x184>
 800d10e:	07cb      	lsls	r3, r1, #31
 800d110:	d502      	bpl.n	800d118 <_printf_i+0xec>
 800d112:	2320      	movs	r3, #32
 800d114:	4319      	orrs	r1, r3
 800d116:	6021      	str	r1, [r4, #0]
 800d118:	2710      	movs	r7, #16
 800d11a:	2d00      	cmp	r5, #0
 800d11c:	d103      	bne.n	800d126 <_printf_i+0xfa>
 800d11e:	2320      	movs	r3, #32
 800d120:	6822      	ldr	r2, [r4, #0]
 800d122:	439a      	bics	r2, r3
 800d124:	6022      	str	r2, [r4, #0]
 800d126:	0023      	movs	r3, r4
 800d128:	2200      	movs	r2, #0
 800d12a:	3343      	adds	r3, #67	; 0x43
 800d12c:	701a      	strb	r2, [r3, #0]
 800d12e:	6863      	ldr	r3, [r4, #4]
 800d130:	60a3      	str	r3, [r4, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	db03      	blt.n	800d13e <_printf_i+0x112>
 800d136:	2204      	movs	r2, #4
 800d138:	6821      	ldr	r1, [r4, #0]
 800d13a:	4391      	bics	r1, r2
 800d13c:	6021      	str	r1, [r4, #0]
 800d13e:	2d00      	cmp	r5, #0
 800d140:	d102      	bne.n	800d148 <_printf_i+0x11c>
 800d142:	9e04      	ldr	r6, [sp, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00c      	beq.n	800d162 <_printf_i+0x136>
 800d148:	9e04      	ldr	r6, [sp, #16]
 800d14a:	0028      	movs	r0, r5
 800d14c:	0039      	movs	r1, r7
 800d14e:	f7f3 f879 	bl	8000244 <__aeabi_uidivmod>
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	3e01      	subs	r6, #1
 800d156:	5c5b      	ldrb	r3, [r3, r1]
 800d158:	7033      	strb	r3, [r6, #0]
 800d15a:	002b      	movs	r3, r5
 800d15c:	0005      	movs	r5, r0
 800d15e:	429f      	cmp	r7, r3
 800d160:	d9f3      	bls.n	800d14a <_printf_i+0x11e>
 800d162:	2f08      	cmp	r7, #8
 800d164:	d109      	bne.n	800d17a <_printf_i+0x14e>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	07db      	lsls	r3, r3, #31
 800d16a:	d506      	bpl.n	800d17a <_printf_i+0x14e>
 800d16c:	6863      	ldr	r3, [r4, #4]
 800d16e:	6922      	ldr	r2, [r4, #16]
 800d170:	4293      	cmp	r3, r2
 800d172:	dc02      	bgt.n	800d17a <_printf_i+0x14e>
 800d174:	2330      	movs	r3, #48	; 0x30
 800d176:	3e01      	subs	r6, #1
 800d178:	7033      	strb	r3, [r6, #0]
 800d17a:	9b04      	ldr	r3, [sp, #16]
 800d17c:	1b9b      	subs	r3, r3, r6
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	9b07      	ldr	r3, [sp, #28]
 800d182:	0021      	movs	r1, r4
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	9805      	ldr	r0, [sp, #20]
 800d188:	9b06      	ldr	r3, [sp, #24]
 800d18a:	aa09      	add	r2, sp, #36	; 0x24
 800d18c:	f7ff fede 	bl	800cf4c <_printf_common>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d135      	bne.n	800d200 <_printf_i+0x1d4>
 800d194:	2001      	movs	r0, #1
 800d196:	4240      	negs	r0, r0
 800d198:	b00b      	add	sp, #44	; 0x2c
 800d19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d19c:	2220      	movs	r2, #32
 800d19e:	6809      	ldr	r1, [r1, #0]
 800d1a0:	430a      	orrs	r2, r1
 800d1a2:	6022      	str	r2, [r4, #0]
 800d1a4:	0022      	movs	r2, r4
 800d1a6:	2178      	movs	r1, #120	; 0x78
 800d1a8:	3245      	adds	r2, #69	; 0x45
 800d1aa:	7011      	strb	r1, [r2, #0]
 800d1ac:	4a27      	ldr	r2, [pc, #156]	; (800d24c <_printf_i+0x220>)
 800d1ae:	e7a7      	b.n	800d100 <_printf_i+0xd4>
 800d1b0:	0648      	lsls	r0, r1, #25
 800d1b2:	d5ac      	bpl.n	800d10e <_printf_i+0xe2>
 800d1b4:	b2ad      	uxth	r5, r5
 800d1b6:	e7aa      	b.n	800d10e <_printf_i+0xe2>
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	680d      	ldr	r5, [r1, #0]
 800d1bc:	1d10      	adds	r0, r2, #4
 800d1be:	6949      	ldr	r1, [r1, #20]
 800d1c0:	6018      	str	r0, [r3, #0]
 800d1c2:	6813      	ldr	r3, [r2, #0]
 800d1c4:	062e      	lsls	r6, r5, #24
 800d1c6:	d501      	bpl.n	800d1cc <_printf_i+0x1a0>
 800d1c8:	6019      	str	r1, [r3, #0]
 800d1ca:	e002      	b.n	800d1d2 <_printf_i+0x1a6>
 800d1cc:	066d      	lsls	r5, r5, #25
 800d1ce:	d5fb      	bpl.n	800d1c8 <_printf_i+0x19c>
 800d1d0:	8019      	strh	r1, [r3, #0]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9e04      	ldr	r6, [sp, #16]
 800d1d6:	6123      	str	r3, [r4, #16]
 800d1d8:	e7d2      	b.n	800d180 <_printf_i+0x154>
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	1d11      	adds	r1, r2, #4
 800d1de:	6019      	str	r1, [r3, #0]
 800d1e0:	6816      	ldr	r6, [r2, #0]
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	0030      	movs	r0, r6
 800d1e6:	6862      	ldr	r2, [r4, #4]
 800d1e8:	f000 ff0a 	bl	800e000 <memchr>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d001      	beq.n	800d1f4 <_printf_i+0x1c8>
 800d1f0:	1b80      	subs	r0, r0, r6
 800d1f2:	6060      	str	r0, [r4, #4]
 800d1f4:	6863      	ldr	r3, [r4, #4]
 800d1f6:	6123      	str	r3, [r4, #16]
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9a04      	ldr	r2, [sp, #16]
 800d1fc:	7013      	strb	r3, [r2, #0]
 800d1fe:	e7bf      	b.n	800d180 <_printf_i+0x154>
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	0032      	movs	r2, r6
 800d204:	9906      	ldr	r1, [sp, #24]
 800d206:	9805      	ldr	r0, [sp, #20]
 800d208:	9d07      	ldr	r5, [sp, #28]
 800d20a:	47a8      	blx	r5
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d0c1      	beq.n	800d194 <_printf_i+0x168>
 800d210:	6823      	ldr	r3, [r4, #0]
 800d212:	079b      	lsls	r3, r3, #30
 800d214:	d415      	bmi.n	800d242 <_printf_i+0x216>
 800d216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d218:	68e0      	ldr	r0, [r4, #12]
 800d21a:	4298      	cmp	r0, r3
 800d21c:	dabc      	bge.n	800d198 <_printf_i+0x16c>
 800d21e:	0018      	movs	r0, r3
 800d220:	e7ba      	b.n	800d198 <_printf_i+0x16c>
 800d222:	0022      	movs	r2, r4
 800d224:	2301      	movs	r3, #1
 800d226:	9906      	ldr	r1, [sp, #24]
 800d228:	9805      	ldr	r0, [sp, #20]
 800d22a:	9e07      	ldr	r6, [sp, #28]
 800d22c:	3219      	adds	r2, #25
 800d22e:	47b0      	blx	r6
 800d230:	1c43      	adds	r3, r0, #1
 800d232:	d0af      	beq.n	800d194 <_printf_i+0x168>
 800d234:	3501      	adds	r5, #1
 800d236:	68e3      	ldr	r3, [r4, #12]
 800d238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d23a:	1a9b      	subs	r3, r3, r2
 800d23c:	42ab      	cmp	r3, r5
 800d23e:	dcf0      	bgt.n	800d222 <_printf_i+0x1f6>
 800d240:	e7e9      	b.n	800d216 <_printf_i+0x1ea>
 800d242:	2500      	movs	r5, #0
 800d244:	e7f7      	b.n	800d236 <_printf_i+0x20a>
 800d246:	46c0      	nop			; (mov r8, r8)
 800d248:	08012482 	.word	0x08012482
 800d24c:	08012493 	.word	0x08012493

0800d250 <siprintf>:
 800d250:	b40e      	push	{r1, r2, r3}
 800d252:	b500      	push	{lr}
 800d254:	490b      	ldr	r1, [pc, #44]	; (800d284 <siprintf+0x34>)
 800d256:	b09c      	sub	sp, #112	; 0x70
 800d258:	ab1d      	add	r3, sp, #116	; 0x74
 800d25a:	9002      	str	r0, [sp, #8]
 800d25c:	9006      	str	r0, [sp, #24]
 800d25e:	9107      	str	r1, [sp, #28]
 800d260:	9104      	str	r1, [sp, #16]
 800d262:	4809      	ldr	r0, [pc, #36]	; (800d288 <siprintf+0x38>)
 800d264:	4909      	ldr	r1, [pc, #36]	; (800d28c <siprintf+0x3c>)
 800d266:	cb04      	ldmia	r3!, {r2}
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	6800      	ldr	r0, [r0, #0]
 800d26c:	a902      	add	r1, sp, #8
 800d26e:	9301      	str	r3, [sp, #4]
 800d270:	f001 fb90 	bl	800e994 <_svfiprintf_r>
 800d274:	2300      	movs	r3, #0
 800d276:	9a02      	ldr	r2, [sp, #8]
 800d278:	7013      	strb	r3, [r2, #0]
 800d27a:	b01c      	add	sp, #112	; 0x70
 800d27c:	bc08      	pop	{r3}
 800d27e:	b003      	add	sp, #12
 800d280:	4718      	bx	r3
 800d282:	46c0      	nop			; (mov r8, r8)
 800d284:	7fffffff 	.word	0x7fffffff
 800d288:	20000010 	.word	0x20000010
 800d28c:	ffff0208 	.word	0xffff0208

0800d290 <quorem>:
 800d290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d292:	0006      	movs	r6, r0
 800d294:	690d      	ldr	r5, [r1, #16]
 800d296:	6933      	ldr	r3, [r6, #16]
 800d298:	b087      	sub	sp, #28
 800d29a:	2000      	movs	r0, #0
 800d29c:	9102      	str	r1, [sp, #8]
 800d29e:	42ab      	cmp	r3, r5
 800d2a0:	db6b      	blt.n	800d37a <quorem+0xea>
 800d2a2:	000b      	movs	r3, r1
 800d2a4:	3d01      	subs	r5, #1
 800d2a6:	00ac      	lsls	r4, r5, #2
 800d2a8:	3314      	adds	r3, #20
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	191b      	adds	r3, r3, r4
 800d2ae:	9303      	str	r3, [sp, #12]
 800d2b0:	0033      	movs	r3, r6
 800d2b2:	3314      	adds	r3, #20
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	191c      	adds	r4, r3, r4
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	6827      	ldr	r7, [r4, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	0038      	movs	r0, r7
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	0019      	movs	r1, r3
 800d2c6:	9304      	str	r3, [sp, #16]
 800d2c8:	f7f2 ff36 	bl	8000138 <__udivsi3>
 800d2cc:	9b04      	ldr	r3, [sp, #16]
 800d2ce:	9000      	str	r0, [sp, #0]
 800d2d0:	429f      	cmp	r7, r3
 800d2d2:	d329      	bcc.n	800d328 <quorem+0x98>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	469c      	mov	ip, r3
 800d2d8:	9801      	ldr	r0, [sp, #4]
 800d2da:	9f05      	ldr	r7, [sp, #20]
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	cf08      	ldmia	r7!, {r3}
 800d2e0:	9a00      	ldr	r2, [sp, #0]
 800d2e2:	b299      	uxth	r1, r3
 800d2e4:	4351      	muls	r1, r2
 800d2e6:	0c1b      	lsrs	r3, r3, #16
 800d2e8:	4353      	muls	r3, r2
 800d2ea:	4461      	add	r1, ip
 800d2ec:	0c0a      	lsrs	r2, r1, #16
 800d2ee:	189b      	adds	r3, r3, r2
 800d2f0:	0c1a      	lsrs	r2, r3, #16
 800d2f2:	9305      	str	r3, [sp, #20]
 800d2f4:	6803      	ldr	r3, [r0, #0]
 800d2f6:	4694      	mov	ip, r2
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	9b04      	ldr	r3, [sp, #16]
 800d2fc:	b289      	uxth	r1, r1
 800d2fe:	18d2      	adds	r2, r2, r3
 800d300:	6803      	ldr	r3, [r0, #0]
 800d302:	1a52      	subs	r2, r2, r1
 800d304:	0c19      	lsrs	r1, r3, #16
 800d306:	466b      	mov	r3, sp
 800d308:	8a9b      	ldrh	r3, [r3, #20]
 800d30a:	1acb      	subs	r3, r1, r3
 800d30c:	1411      	asrs	r1, r2, #16
 800d30e:	185b      	adds	r3, r3, r1
 800d310:	1419      	asrs	r1, r3, #16
 800d312:	b292      	uxth	r2, r2
 800d314:	041b      	lsls	r3, r3, #16
 800d316:	431a      	orrs	r2, r3
 800d318:	9b03      	ldr	r3, [sp, #12]
 800d31a:	9104      	str	r1, [sp, #16]
 800d31c:	c004      	stmia	r0!, {r2}
 800d31e:	42bb      	cmp	r3, r7
 800d320:	d2dd      	bcs.n	800d2de <quorem+0x4e>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d02e      	beq.n	800d386 <quorem+0xf6>
 800d328:	0030      	movs	r0, r6
 800d32a:	9902      	ldr	r1, [sp, #8]
 800d32c:	f001 f902 	bl	800e534 <__mcmp>
 800d330:	2800      	cmp	r0, #0
 800d332:	db21      	blt.n	800d378 <quorem+0xe8>
 800d334:	0030      	movs	r0, r6
 800d336:	2400      	movs	r4, #0
 800d338:	9b00      	ldr	r3, [sp, #0]
 800d33a:	9902      	ldr	r1, [sp, #8]
 800d33c:	3301      	adds	r3, #1
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	3014      	adds	r0, #20
 800d342:	3114      	adds	r1, #20
 800d344:	6802      	ldr	r2, [r0, #0]
 800d346:	c908      	ldmia	r1!, {r3}
 800d348:	b292      	uxth	r2, r2
 800d34a:	1914      	adds	r4, r2, r4
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	1aa2      	subs	r2, r4, r2
 800d350:	6804      	ldr	r4, [r0, #0]
 800d352:	0c1b      	lsrs	r3, r3, #16
 800d354:	0c24      	lsrs	r4, r4, #16
 800d356:	1ae3      	subs	r3, r4, r3
 800d358:	1414      	asrs	r4, r2, #16
 800d35a:	191b      	adds	r3, r3, r4
 800d35c:	141c      	asrs	r4, r3, #16
 800d35e:	b292      	uxth	r2, r2
 800d360:	041b      	lsls	r3, r3, #16
 800d362:	4313      	orrs	r3, r2
 800d364:	c008      	stmia	r0!, {r3}
 800d366:	9b03      	ldr	r3, [sp, #12]
 800d368:	428b      	cmp	r3, r1
 800d36a:	d2eb      	bcs.n	800d344 <quorem+0xb4>
 800d36c:	9a01      	ldr	r2, [sp, #4]
 800d36e:	00ab      	lsls	r3, r5, #2
 800d370:	18d3      	adds	r3, r2, r3
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	2a00      	cmp	r2, #0
 800d376:	d010      	beq.n	800d39a <quorem+0x10a>
 800d378:	9800      	ldr	r0, [sp, #0]
 800d37a:	b007      	add	sp, #28
 800d37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d104      	bne.n	800d38e <quorem+0xfe>
 800d384:	3d01      	subs	r5, #1
 800d386:	9b01      	ldr	r3, [sp, #4]
 800d388:	3c04      	subs	r4, #4
 800d38a:	42a3      	cmp	r3, r4
 800d38c:	d3f7      	bcc.n	800d37e <quorem+0xee>
 800d38e:	6135      	str	r5, [r6, #16]
 800d390:	e7ca      	b.n	800d328 <quorem+0x98>
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	2a00      	cmp	r2, #0
 800d396:	d104      	bne.n	800d3a2 <quorem+0x112>
 800d398:	3d01      	subs	r5, #1
 800d39a:	9a01      	ldr	r2, [sp, #4]
 800d39c:	3b04      	subs	r3, #4
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d3f7      	bcc.n	800d392 <quorem+0x102>
 800d3a2:	6135      	str	r5, [r6, #16]
 800d3a4:	e7e8      	b.n	800d378 <quorem+0xe8>
	...

0800d3a8 <_dtoa_r>:
 800d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3aa:	b09d      	sub	sp, #116	; 0x74
 800d3ac:	9202      	str	r2, [sp, #8]
 800d3ae:	9303      	str	r3, [sp, #12]
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	9c03      	ldr	r4, [sp, #12]
 800d3b4:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800d3b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d3ba:	0007      	movs	r7, r0
 800d3bc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d3be:	2c00      	cmp	r4, #0
 800d3c0:	d10e      	bne.n	800d3e0 <_dtoa_r+0x38>
 800d3c2:	2010      	movs	r0, #16
 800d3c4:	f000 fe12 	bl	800dfec <malloc>
 800d3c8:	1e02      	subs	r2, r0, #0
 800d3ca:	6278      	str	r0, [r7, #36]	; 0x24
 800d3cc:	d104      	bne.n	800d3d8 <_dtoa_r+0x30>
 800d3ce:	21ea      	movs	r1, #234	; 0xea
 800d3d0:	4bc0      	ldr	r3, [pc, #768]	; (800d6d4 <_dtoa_r+0x32c>)
 800d3d2:	48c1      	ldr	r0, [pc, #772]	; (800d6d8 <_dtoa_r+0x330>)
 800d3d4:	f001 fbf0 	bl	800ebb8 <__assert_func>
 800d3d8:	6044      	str	r4, [r0, #4]
 800d3da:	6084      	str	r4, [r0, #8]
 800d3dc:	6004      	str	r4, [r0, #0]
 800d3de:	60c4      	str	r4, [r0, #12]
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	6819      	ldr	r1, [r3, #0]
 800d3e4:	2900      	cmp	r1, #0
 800d3e6:	d00a      	beq.n	800d3fe <_dtoa_r+0x56>
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4093      	lsls	r3, r2
 800d3ee:	604a      	str	r2, [r1, #4]
 800d3f0:	608b      	str	r3, [r1, #8]
 800d3f2:	0038      	movs	r0, r7
 800d3f4:	f000 fe5c 	bl	800e0b0 <_Bfree>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	2b00      	cmp	r3, #0
 800d402:	da21      	bge.n	800d448 <_dtoa_r+0xa0>
 800d404:	2301      	movs	r3, #1
 800d406:	602b      	str	r3, [r5, #0]
 800d408:	9b03      	ldr	r3, [sp, #12]
 800d40a:	005b      	lsls	r3, r3, #1
 800d40c:	085b      	lsrs	r3, r3, #1
 800d40e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d410:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d412:	4bb2      	ldr	r3, [pc, #712]	; (800d6dc <_dtoa_r+0x334>)
 800d414:	002a      	movs	r2, r5
 800d416:	9318      	str	r3, [sp, #96]	; 0x60
 800d418:	401a      	ands	r2, r3
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d117      	bne.n	800d44e <_dtoa_r+0xa6>
 800d41e:	4bb0      	ldr	r3, [pc, #704]	; (800d6e0 <_dtoa_r+0x338>)
 800d420:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d422:	0328      	lsls	r0, r5, #12
 800d424:	6013      	str	r3, [r2, #0]
 800d426:	9b02      	ldr	r3, [sp, #8]
 800d428:	0b00      	lsrs	r0, r0, #12
 800d42a:	4318      	orrs	r0, r3
 800d42c:	d101      	bne.n	800d432 <_dtoa_r+0x8a>
 800d42e:	f000 fdc3 	bl	800dfb8 <_dtoa_r+0xc10>
 800d432:	48ac      	ldr	r0, [pc, #688]	; (800d6e4 <_dtoa_r+0x33c>)
 800d434:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d436:	9005      	str	r0, [sp, #20]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <_dtoa_r+0x9a>
 800d43c:	4baa      	ldr	r3, [pc, #680]	; (800d6e8 <_dtoa_r+0x340>)
 800d43e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	9805      	ldr	r0, [sp, #20]
 800d444:	b01d      	add	sp, #116	; 0x74
 800d446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d448:	2300      	movs	r3, #0
 800d44a:	602b      	str	r3, [r5, #0]
 800d44c:	e7e0      	b.n	800d410 <_dtoa_r+0x68>
 800d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d450:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d452:	9312      	str	r3, [sp, #72]	; 0x48
 800d454:	9413      	str	r4, [sp, #76]	; 0x4c
 800d456:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d458:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d45a:	2200      	movs	r2, #0
 800d45c:	2300      	movs	r3, #0
 800d45e:	f7f2 fff1 	bl	8000444 <__aeabi_dcmpeq>
 800d462:	1e04      	subs	r4, r0, #0
 800d464:	d00b      	beq.n	800d47e <_dtoa_r+0xd6>
 800d466:	2301      	movs	r3, #1
 800d468:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d46a:	6013      	str	r3, [r2, #0]
 800d46c:	4b9f      	ldr	r3, [pc, #636]	; (800d6ec <_dtoa_r+0x344>)
 800d46e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	2a00      	cmp	r2, #0
 800d474:	d0e5      	beq.n	800d442 <_dtoa_r+0x9a>
 800d476:	4a9e      	ldr	r2, [pc, #632]	; (800d6f0 <_dtoa_r+0x348>)
 800d478:	9926      	ldr	r1, [sp, #152]	; 0x98
 800d47a:	600a      	str	r2, [r1, #0]
 800d47c:	e7e1      	b.n	800d442 <_dtoa_r+0x9a>
 800d47e:	ab1a      	add	r3, sp, #104	; 0x68
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	ab1b      	add	r3, sp, #108	; 0x6c
 800d484:	9300      	str	r3, [sp, #0]
 800d486:	0038      	movs	r0, r7
 800d488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d48a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d48c:	f001 f906 	bl	800e69c <__d2b>
 800d490:	006e      	lsls	r6, r5, #1
 800d492:	9004      	str	r0, [sp, #16]
 800d494:	0d76      	lsrs	r6, r6, #21
 800d496:	d100      	bne.n	800d49a <_dtoa_r+0xf2>
 800d498:	e07c      	b.n	800d594 <_dtoa_r+0x1ec>
 800d49a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d49c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d49e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d4a0:	4a94      	ldr	r2, [pc, #592]	; (800d6f4 <_dtoa_r+0x34c>)
 800d4a2:	031b      	lsls	r3, r3, #12
 800d4a4:	0b1b      	lsrs	r3, r3, #12
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	0011      	movs	r1, r2
 800d4aa:	4b93      	ldr	r3, [pc, #588]	; (800d6f8 <_dtoa_r+0x350>)
 800d4ac:	9416      	str	r4, [sp, #88]	; 0x58
 800d4ae:	18f6      	adds	r6, r6, r3
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4b92      	ldr	r3, [pc, #584]	; (800d6fc <_dtoa_r+0x354>)
 800d4b4:	f7f5 f8d0 	bl	8002658 <__aeabi_dsub>
 800d4b8:	4a91      	ldr	r2, [pc, #580]	; (800d700 <_dtoa_r+0x358>)
 800d4ba:	4b92      	ldr	r3, [pc, #584]	; (800d704 <_dtoa_r+0x35c>)
 800d4bc:	f7f4 fe60 	bl	8002180 <__aeabi_dmul>
 800d4c0:	4a91      	ldr	r2, [pc, #580]	; (800d708 <_dtoa_r+0x360>)
 800d4c2:	4b92      	ldr	r3, [pc, #584]	; (800d70c <_dtoa_r+0x364>)
 800d4c4:	f7f3 feec 	bl	80012a0 <__aeabi_dadd>
 800d4c8:	0004      	movs	r4, r0
 800d4ca:	0030      	movs	r0, r6
 800d4cc:	000d      	movs	r5, r1
 800d4ce:	f7f5 fca9 	bl	8002e24 <__aeabi_i2d>
 800d4d2:	4a8f      	ldr	r2, [pc, #572]	; (800d710 <_dtoa_r+0x368>)
 800d4d4:	4b8f      	ldr	r3, [pc, #572]	; (800d714 <_dtoa_r+0x36c>)
 800d4d6:	f7f4 fe53 	bl	8002180 <__aeabi_dmul>
 800d4da:	0002      	movs	r2, r0
 800d4dc:	000b      	movs	r3, r1
 800d4de:	0020      	movs	r0, r4
 800d4e0:	0029      	movs	r1, r5
 800d4e2:	f7f3 fedd 	bl	80012a0 <__aeabi_dadd>
 800d4e6:	0004      	movs	r4, r0
 800d4e8:	000d      	movs	r5, r1
 800d4ea:	f7f5 fc65 	bl	8002db8 <__aeabi_d2iz>
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	9002      	str	r0, [sp, #8]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	0020      	movs	r0, r4
 800d4f6:	0029      	movs	r1, r5
 800d4f8:	f7f2 ffaa 	bl	8000450 <__aeabi_dcmplt>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d00b      	beq.n	800d518 <_dtoa_r+0x170>
 800d500:	9802      	ldr	r0, [sp, #8]
 800d502:	f7f5 fc8f 	bl	8002e24 <__aeabi_i2d>
 800d506:	002b      	movs	r3, r5
 800d508:	0022      	movs	r2, r4
 800d50a:	f7f2 ff9b 	bl	8000444 <__aeabi_dcmpeq>
 800d50e:	4243      	negs	r3, r0
 800d510:	4158      	adcs	r0, r3
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	1a1b      	subs	r3, r3, r0
 800d516:	9302      	str	r3, [sp, #8]
 800d518:	2301      	movs	r3, #1
 800d51a:	9315      	str	r3, [sp, #84]	; 0x54
 800d51c:	9b02      	ldr	r3, [sp, #8]
 800d51e:	2b16      	cmp	r3, #22
 800d520:	d80f      	bhi.n	800d542 <_dtoa_r+0x19a>
 800d522:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d524:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d526:	00da      	lsls	r2, r3, #3
 800d528:	4b7b      	ldr	r3, [pc, #492]	; (800d718 <_dtoa_r+0x370>)
 800d52a:	189b      	adds	r3, r3, r2
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	f7f2 ff8e 	bl	8000450 <__aeabi_dcmplt>
 800d534:	2800      	cmp	r0, #0
 800d536:	d049      	beq.n	800d5cc <_dtoa_r+0x224>
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	9302      	str	r3, [sp, #8]
 800d53e:	2300      	movs	r3, #0
 800d540:	9315      	str	r3, [sp, #84]	; 0x54
 800d542:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d544:	1b9e      	subs	r6, r3, r6
 800d546:	2300      	movs	r3, #0
 800d548:	9308      	str	r3, [sp, #32]
 800d54a:	0033      	movs	r3, r6
 800d54c:	3b01      	subs	r3, #1
 800d54e:	930d      	str	r3, [sp, #52]	; 0x34
 800d550:	d504      	bpl.n	800d55c <_dtoa_r+0x1b4>
 800d552:	2301      	movs	r3, #1
 800d554:	1b9b      	subs	r3, r3, r6
 800d556:	9308      	str	r3, [sp, #32]
 800d558:	2300      	movs	r3, #0
 800d55a:	930d      	str	r3, [sp, #52]	; 0x34
 800d55c:	9b02      	ldr	r3, [sp, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	db36      	blt.n	800d5d0 <_dtoa_r+0x228>
 800d562:	9a02      	ldr	r2, [sp, #8]
 800d564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d566:	4694      	mov	ip, r2
 800d568:	4463      	add	r3, ip
 800d56a:	930d      	str	r3, [sp, #52]	; 0x34
 800d56c:	2300      	movs	r3, #0
 800d56e:	9214      	str	r2, [sp, #80]	; 0x50
 800d570:	930e      	str	r3, [sp, #56]	; 0x38
 800d572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d574:	2401      	movs	r4, #1
 800d576:	2b09      	cmp	r3, #9
 800d578:	d862      	bhi.n	800d640 <_dtoa_r+0x298>
 800d57a:	2b05      	cmp	r3, #5
 800d57c:	dd02      	ble.n	800d584 <_dtoa_r+0x1dc>
 800d57e:	2400      	movs	r4, #0
 800d580:	3b04      	subs	r3, #4
 800d582:	9322      	str	r3, [sp, #136]	; 0x88
 800d584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d586:	1e98      	subs	r0, r3, #2
 800d588:	2803      	cmp	r0, #3
 800d58a:	d862      	bhi.n	800d652 <_dtoa_r+0x2aa>
 800d58c:	f7f2 fdc0 	bl	8000110 <__gnu_thumb1_case_uqi>
 800d590:	56343629 	.word	0x56343629
 800d594:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d596:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d598:	189e      	adds	r6, r3, r2
 800d59a:	4b60      	ldr	r3, [pc, #384]	; (800d71c <_dtoa_r+0x374>)
 800d59c:	18f2      	adds	r2, r6, r3
 800d59e:	2a20      	cmp	r2, #32
 800d5a0:	dd0f      	ble.n	800d5c2 <_dtoa_r+0x21a>
 800d5a2:	2340      	movs	r3, #64	; 0x40
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	409d      	lsls	r5, r3
 800d5a8:	4b5d      	ldr	r3, [pc, #372]	; (800d720 <_dtoa_r+0x378>)
 800d5aa:	9802      	ldr	r0, [sp, #8]
 800d5ac:	18f3      	adds	r3, r6, r3
 800d5ae:	40d8      	lsrs	r0, r3
 800d5b0:	4328      	orrs	r0, r5
 800d5b2:	f7f5 fc67 	bl	8002e84 <__aeabi_ui2d>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4c5a      	ldr	r4, [pc, #360]	; (800d724 <_dtoa_r+0x37c>)
 800d5ba:	3e01      	subs	r6, #1
 800d5bc:	1909      	adds	r1, r1, r4
 800d5be:	9316      	str	r3, [sp, #88]	; 0x58
 800d5c0:	e776      	b.n	800d4b0 <_dtoa_r+0x108>
 800d5c2:	2320      	movs	r3, #32
 800d5c4:	9802      	ldr	r0, [sp, #8]
 800d5c6:	1a9b      	subs	r3, r3, r2
 800d5c8:	4098      	lsls	r0, r3
 800d5ca:	e7f2      	b.n	800d5b2 <_dtoa_r+0x20a>
 800d5cc:	9015      	str	r0, [sp, #84]	; 0x54
 800d5ce:	e7b8      	b.n	800d542 <_dtoa_r+0x19a>
 800d5d0:	9b08      	ldr	r3, [sp, #32]
 800d5d2:	9a02      	ldr	r2, [sp, #8]
 800d5d4:	1a9b      	subs	r3, r3, r2
 800d5d6:	9308      	str	r3, [sp, #32]
 800d5d8:	4253      	negs	r3, r2
 800d5da:	930e      	str	r3, [sp, #56]	; 0x38
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9314      	str	r3, [sp, #80]	; 0x50
 800d5e0:	e7c7      	b.n	800d572 <_dtoa_r+0x1ca>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	dc36      	bgt.n	800d65a <_dtoa_r+0x2b2>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	001a      	movs	r2, r3
 800d5f0:	930c      	str	r3, [sp, #48]	; 0x30
 800d5f2:	9306      	str	r3, [sp, #24]
 800d5f4:	9223      	str	r2, [sp, #140]	; 0x8c
 800d5f6:	e00d      	b.n	800d614 <_dtoa_r+0x26c>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e7f3      	b.n	800d5e4 <_dtoa_r+0x23c>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d600:	930f      	str	r3, [sp, #60]	; 0x3c
 800d602:	4694      	mov	ip, r2
 800d604:	9b02      	ldr	r3, [sp, #8]
 800d606:	4463      	add	r3, ip
 800d608:	930c      	str	r3, [sp, #48]	; 0x30
 800d60a:	3301      	adds	r3, #1
 800d60c:	9306      	str	r3, [sp, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	dc00      	bgt.n	800d614 <_dtoa_r+0x26c>
 800d612:	2301      	movs	r3, #1
 800d614:	2200      	movs	r2, #0
 800d616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d618:	6042      	str	r2, [r0, #4]
 800d61a:	3204      	adds	r2, #4
 800d61c:	0015      	movs	r5, r2
 800d61e:	3514      	adds	r5, #20
 800d620:	6841      	ldr	r1, [r0, #4]
 800d622:	429d      	cmp	r5, r3
 800d624:	d91d      	bls.n	800d662 <_dtoa_r+0x2ba>
 800d626:	0038      	movs	r0, r7
 800d628:	f000 fcfe 	bl	800e028 <_Balloc>
 800d62c:	9005      	str	r0, [sp, #20]
 800d62e:	2800      	cmp	r0, #0
 800d630:	d11b      	bne.n	800d66a <_dtoa_r+0x2c2>
 800d632:	21d5      	movs	r1, #213	; 0xd5
 800d634:	0002      	movs	r2, r0
 800d636:	4b3c      	ldr	r3, [pc, #240]	; (800d728 <_dtoa_r+0x380>)
 800d638:	0049      	lsls	r1, r1, #1
 800d63a:	e6ca      	b.n	800d3d2 <_dtoa_r+0x2a>
 800d63c:	2301      	movs	r3, #1
 800d63e:	e7de      	b.n	800d5fe <_dtoa_r+0x256>
 800d640:	2300      	movs	r3, #0
 800d642:	940f      	str	r4, [sp, #60]	; 0x3c
 800d644:	9322      	str	r3, [sp, #136]	; 0x88
 800d646:	3b01      	subs	r3, #1
 800d648:	930c      	str	r3, [sp, #48]	; 0x30
 800d64a:	9306      	str	r3, [sp, #24]
 800d64c:	2200      	movs	r2, #0
 800d64e:	3313      	adds	r3, #19
 800d650:	e7d0      	b.n	800d5f4 <_dtoa_r+0x24c>
 800d652:	2301      	movs	r3, #1
 800d654:	930f      	str	r3, [sp, #60]	; 0x3c
 800d656:	3b02      	subs	r3, #2
 800d658:	e7f6      	b.n	800d648 <_dtoa_r+0x2a0>
 800d65a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d65c:	930c      	str	r3, [sp, #48]	; 0x30
 800d65e:	9306      	str	r3, [sp, #24]
 800d660:	e7d8      	b.n	800d614 <_dtoa_r+0x26c>
 800d662:	3101      	adds	r1, #1
 800d664:	6041      	str	r1, [r0, #4]
 800d666:	0052      	lsls	r2, r2, #1
 800d668:	e7d8      	b.n	800d61c <_dtoa_r+0x274>
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	9a05      	ldr	r2, [sp, #20]
 800d66e:	601a      	str	r2, [r3, #0]
 800d670:	9b06      	ldr	r3, [sp, #24]
 800d672:	2b0e      	cmp	r3, #14
 800d674:	d900      	bls.n	800d678 <_dtoa_r+0x2d0>
 800d676:	e0eb      	b.n	800d850 <_dtoa_r+0x4a8>
 800d678:	2c00      	cmp	r4, #0
 800d67a:	d100      	bne.n	800d67e <_dtoa_r+0x2d6>
 800d67c:	e0e8      	b.n	800d850 <_dtoa_r+0x4a8>
 800d67e:	9b02      	ldr	r3, [sp, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	dd68      	ble.n	800d756 <_dtoa_r+0x3ae>
 800d684:	001a      	movs	r2, r3
 800d686:	210f      	movs	r1, #15
 800d688:	4b23      	ldr	r3, [pc, #140]	; (800d718 <_dtoa_r+0x370>)
 800d68a:	400a      	ands	r2, r1
 800d68c:	00d2      	lsls	r2, r2, #3
 800d68e:	189b      	adds	r3, r3, r2
 800d690:	681d      	ldr	r5, [r3, #0]
 800d692:	685e      	ldr	r6, [r3, #4]
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	111c      	asrs	r4, r3, #4
 800d698:	2302      	movs	r3, #2
 800d69a:	9310      	str	r3, [sp, #64]	; 0x40
 800d69c:	9b02      	ldr	r3, [sp, #8]
 800d69e:	05db      	lsls	r3, r3, #23
 800d6a0:	d50b      	bpl.n	800d6ba <_dtoa_r+0x312>
 800d6a2:	4b22      	ldr	r3, [pc, #136]	; (800d72c <_dtoa_r+0x384>)
 800d6a4:	400c      	ands	r4, r1
 800d6a6:	6a1a      	ldr	r2, [r3, #32]
 800d6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d6ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d6ae:	f7f4 f961 	bl	8001974 <__aeabi_ddiv>
 800d6b2:	2303      	movs	r3, #3
 800d6b4:	900a      	str	r0, [sp, #40]	; 0x28
 800d6b6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6b8:	9310      	str	r3, [sp, #64]	; 0x40
 800d6ba:	4b1c      	ldr	r3, [pc, #112]	; (800d72c <_dtoa_r+0x384>)
 800d6bc:	9307      	str	r3, [sp, #28]
 800d6be:	2c00      	cmp	r4, #0
 800d6c0:	d136      	bne.n	800d730 <_dtoa_r+0x388>
 800d6c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6c6:	002a      	movs	r2, r5
 800d6c8:	0033      	movs	r3, r6
 800d6ca:	f7f4 f953 	bl	8001974 <__aeabi_ddiv>
 800d6ce:	900a      	str	r0, [sp, #40]	; 0x28
 800d6d0:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6d2:	e05c      	b.n	800d78e <_dtoa_r+0x3e6>
 800d6d4:	080124b1 	.word	0x080124b1
 800d6d8:	080124c8 	.word	0x080124c8
 800d6dc:	7ff00000 	.word	0x7ff00000
 800d6e0:	0000270f 	.word	0x0000270f
 800d6e4:	080124ad 	.word	0x080124ad
 800d6e8:	080124b0 	.word	0x080124b0
 800d6ec:	08012480 	.word	0x08012480
 800d6f0:	08012481 	.word	0x08012481
 800d6f4:	3ff00000 	.word	0x3ff00000
 800d6f8:	fffffc01 	.word	0xfffffc01
 800d6fc:	3ff80000 	.word	0x3ff80000
 800d700:	636f4361 	.word	0x636f4361
 800d704:	3fd287a7 	.word	0x3fd287a7
 800d708:	8b60c8b3 	.word	0x8b60c8b3
 800d70c:	3fc68a28 	.word	0x3fc68a28
 800d710:	509f79fb 	.word	0x509f79fb
 800d714:	3fd34413 	.word	0x3fd34413
 800d718:	080125c0 	.word	0x080125c0
 800d71c:	00000432 	.word	0x00000432
 800d720:	00000412 	.word	0x00000412
 800d724:	fe100000 	.word	0xfe100000
 800d728:	08012527 	.word	0x08012527
 800d72c:	08012598 	.word	0x08012598
 800d730:	2301      	movs	r3, #1
 800d732:	421c      	tst	r4, r3
 800d734:	d00b      	beq.n	800d74e <_dtoa_r+0x3a6>
 800d736:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d738:	0028      	movs	r0, r5
 800d73a:	3301      	adds	r3, #1
 800d73c:	9310      	str	r3, [sp, #64]	; 0x40
 800d73e:	9b07      	ldr	r3, [sp, #28]
 800d740:	0031      	movs	r1, r6
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f7f4 fd1b 	bl	8002180 <__aeabi_dmul>
 800d74a:	0005      	movs	r5, r0
 800d74c:	000e      	movs	r6, r1
 800d74e:	9b07      	ldr	r3, [sp, #28]
 800d750:	1064      	asrs	r4, r4, #1
 800d752:	3308      	adds	r3, #8
 800d754:	e7b2      	b.n	800d6bc <_dtoa_r+0x314>
 800d756:	2302      	movs	r3, #2
 800d758:	9310      	str	r3, [sp, #64]	; 0x40
 800d75a:	9b02      	ldr	r3, [sp, #8]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d016      	beq.n	800d78e <_dtoa_r+0x3e6>
 800d760:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d762:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d764:	425c      	negs	r4, r3
 800d766:	230f      	movs	r3, #15
 800d768:	4ab5      	ldr	r2, [pc, #724]	; (800da40 <_dtoa_r+0x698>)
 800d76a:	4023      	ands	r3, r4
 800d76c:	00db      	lsls	r3, r3, #3
 800d76e:	18d3      	adds	r3, r2, r3
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	f7f4 fd04 	bl	8002180 <__aeabi_dmul>
 800d778:	2601      	movs	r6, #1
 800d77a:	2300      	movs	r3, #0
 800d77c:	900a      	str	r0, [sp, #40]	; 0x28
 800d77e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d780:	4db0      	ldr	r5, [pc, #704]	; (800da44 <_dtoa_r+0x69c>)
 800d782:	1124      	asrs	r4, r4, #4
 800d784:	2c00      	cmp	r4, #0
 800d786:	d000      	beq.n	800d78a <_dtoa_r+0x3e2>
 800d788:	e094      	b.n	800d8b4 <_dtoa_r+0x50c>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d19f      	bne.n	800d6ce <_dtoa_r+0x326>
 800d78e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d790:	2b00      	cmp	r3, #0
 800d792:	d100      	bne.n	800d796 <_dtoa_r+0x3ee>
 800d794:	e09b      	b.n	800d8ce <_dtoa_r+0x526>
 800d796:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d798:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d79a:	2200      	movs	r2, #0
 800d79c:	0020      	movs	r0, r4
 800d79e:	0029      	movs	r1, r5
 800d7a0:	4ba9      	ldr	r3, [pc, #676]	; (800da48 <_dtoa_r+0x6a0>)
 800d7a2:	f7f2 fe55 	bl	8000450 <__aeabi_dcmplt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d100      	bne.n	800d7ac <_dtoa_r+0x404>
 800d7aa:	e090      	b.n	800d8ce <_dtoa_r+0x526>
 800d7ac:	9b06      	ldr	r3, [sp, #24]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d100      	bne.n	800d7b4 <_dtoa_r+0x40c>
 800d7b2:	e08c      	b.n	800d8ce <_dtoa_r+0x526>
 800d7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dd46      	ble.n	800d848 <_dtoa_r+0x4a0>
 800d7ba:	9b02      	ldr	r3, [sp, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	0020      	movs	r0, r4
 800d7c0:	0029      	movs	r1, r5
 800d7c2:	1e5e      	subs	r6, r3, #1
 800d7c4:	4ba1      	ldr	r3, [pc, #644]	; (800da4c <_dtoa_r+0x6a4>)
 800d7c6:	f7f4 fcdb 	bl	8002180 <__aeabi_dmul>
 800d7ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7cc:	900a      	str	r0, [sp, #40]	; 0x28
 800d7ce:	910b      	str	r1, [sp, #44]	; 0x2c
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	9310      	str	r3, [sp, #64]	; 0x40
 800d7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d7d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d7da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d7dc:	9307      	str	r3, [sp, #28]
 800d7de:	f7f5 fb21 	bl	8002e24 <__aeabi_i2d>
 800d7e2:	0022      	movs	r2, r4
 800d7e4:	002b      	movs	r3, r5
 800d7e6:	f7f4 fccb 	bl	8002180 <__aeabi_dmul>
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	4b98      	ldr	r3, [pc, #608]	; (800da50 <_dtoa_r+0x6a8>)
 800d7ee:	f7f3 fd57 	bl	80012a0 <__aeabi_dadd>
 800d7f2:	9010      	str	r0, [sp, #64]	; 0x40
 800d7f4:	9111      	str	r1, [sp, #68]	; 0x44
 800d7f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7fa:	920a      	str	r2, [sp, #40]	; 0x28
 800d7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7fe:	4a95      	ldr	r2, [pc, #596]	; (800da54 <_dtoa_r+0x6ac>)
 800d800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d802:	4694      	mov	ip, r2
 800d804:	4463      	add	r3, ip
 800d806:	9317      	str	r3, [sp, #92]	; 0x5c
 800d808:	930b      	str	r3, [sp, #44]	; 0x2c
 800d80a:	9b07      	ldr	r3, [sp, #28]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d161      	bne.n	800d8d4 <_dtoa_r+0x52c>
 800d810:	2200      	movs	r2, #0
 800d812:	0020      	movs	r0, r4
 800d814:	0029      	movs	r1, r5
 800d816:	4b90      	ldr	r3, [pc, #576]	; (800da58 <_dtoa_r+0x6b0>)
 800d818:	f7f4 ff1e 	bl	8002658 <__aeabi_dsub>
 800d81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d81e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d820:	0004      	movs	r4, r0
 800d822:	000d      	movs	r5, r1
 800d824:	f7f2 fe28 	bl	8000478 <__aeabi_dcmpgt>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d000      	beq.n	800d82e <_dtoa_r+0x486>
 800d82c:	e2b5      	b.n	800dd9a <_dtoa_r+0x9f2>
 800d82e:	488b      	ldr	r0, [pc, #556]	; (800da5c <_dtoa_r+0x6b4>)
 800d830:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d832:	4684      	mov	ip, r0
 800d834:	4461      	add	r1, ip
 800d836:	000b      	movs	r3, r1
 800d838:	0020      	movs	r0, r4
 800d83a:	0029      	movs	r1, r5
 800d83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d83e:	f7f2 fe07 	bl	8000450 <__aeabi_dcmplt>
 800d842:	2800      	cmp	r0, #0
 800d844:	d000      	beq.n	800d848 <_dtoa_r+0x4a0>
 800d846:	e2a5      	b.n	800dd94 <_dtoa_r+0x9ec>
 800d848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d84a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d84c:	930a      	str	r3, [sp, #40]	; 0x28
 800d84e:	940b      	str	r4, [sp, #44]	; 0x2c
 800d850:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d852:	2b00      	cmp	r3, #0
 800d854:	da00      	bge.n	800d858 <_dtoa_r+0x4b0>
 800d856:	e171      	b.n	800db3c <_dtoa_r+0x794>
 800d858:	9a02      	ldr	r2, [sp, #8]
 800d85a:	2a0e      	cmp	r2, #14
 800d85c:	dd00      	ble.n	800d860 <_dtoa_r+0x4b8>
 800d85e:	e16d      	b.n	800db3c <_dtoa_r+0x794>
 800d860:	4b77      	ldr	r3, [pc, #476]	; (800da40 <_dtoa_r+0x698>)
 800d862:	00d2      	lsls	r2, r2, #3
 800d864:	189b      	adds	r3, r3, r2
 800d866:	685c      	ldr	r4, [r3, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	9308      	str	r3, [sp, #32]
 800d86c:	9409      	str	r4, [sp, #36]	; 0x24
 800d86e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d870:	2b00      	cmp	r3, #0
 800d872:	db00      	blt.n	800d876 <_dtoa_r+0x4ce>
 800d874:	e0f6      	b.n	800da64 <_dtoa_r+0x6bc>
 800d876:	9b06      	ldr	r3, [sp, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dd00      	ble.n	800d87e <_dtoa_r+0x4d6>
 800d87c:	e0f2      	b.n	800da64 <_dtoa_r+0x6bc>
 800d87e:	d000      	beq.n	800d882 <_dtoa_r+0x4da>
 800d880:	e288      	b.n	800dd94 <_dtoa_r+0x9ec>
 800d882:	9808      	ldr	r0, [sp, #32]
 800d884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d886:	2200      	movs	r2, #0
 800d888:	4b73      	ldr	r3, [pc, #460]	; (800da58 <_dtoa_r+0x6b0>)
 800d88a:	f7f4 fc79 	bl	8002180 <__aeabi_dmul>
 800d88e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d892:	f7f2 fdfb 	bl	800048c <__aeabi_dcmpge>
 800d896:	9e06      	ldr	r6, [sp, #24]
 800d898:	0035      	movs	r5, r6
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d000      	beq.n	800d8a0 <_dtoa_r+0x4f8>
 800d89e:	e25f      	b.n	800dd60 <_dtoa_r+0x9b8>
 800d8a0:	9b05      	ldr	r3, [sp, #20]
 800d8a2:	9a05      	ldr	r2, [sp, #20]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	9307      	str	r3, [sp, #28]
 800d8a8:	2331      	movs	r3, #49	; 0x31
 800d8aa:	7013      	strb	r3, [r2, #0]
 800d8ac:	9b02      	ldr	r3, [sp, #8]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	9302      	str	r3, [sp, #8]
 800d8b2:	e25a      	b.n	800dd6a <_dtoa_r+0x9c2>
 800d8b4:	4234      	tst	r4, r6
 800d8b6:	d007      	beq.n	800d8c8 <_dtoa_r+0x520>
 800d8b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	9310      	str	r3, [sp, #64]	; 0x40
 800d8be:	682a      	ldr	r2, [r5, #0]
 800d8c0:	686b      	ldr	r3, [r5, #4]
 800d8c2:	f7f4 fc5d 	bl	8002180 <__aeabi_dmul>
 800d8c6:	0033      	movs	r3, r6
 800d8c8:	1064      	asrs	r4, r4, #1
 800d8ca:	3508      	adds	r5, #8
 800d8cc:	e75a      	b.n	800d784 <_dtoa_r+0x3dc>
 800d8ce:	9e02      	ldr	r6, [sp, #8]
 800d8d0:	9b06      	ldr	r3, [sp, #24]
 800d8d2:	e780      	b.n	800d7d6 <_dtoa_r+0x42e>
 800d8d4:	9b07      	ldr	r3, [sp, #28]
 800d8d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8d8:	1e5a      	subs	r2, r3, #1
 800d8da:	4b59      	ldr	r3, [pc, #356]	; (800da40 <_dtoa_r+0x698>)
 800d8dc:	00d2      	lsls	r2, r2, #3
 800d8de:	189b      	adds	r3, r3, r2
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	d051      	beq.n	800d98c <_dtoa_r+0x5e4>
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	495d      	ldr	r1, [pc, #372]	; (800da60 <_dtoa_r+0x6b8>)
 800d8ec:	f7f4 f842 	bl	8001974 <__aeabi_ddiv>
 800d8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8f4:	f7f4 feb0 	bl	8002658 <__aeabi_dsub>
 800d8f8:	9a05      	ldr	r2, [sp, #20]
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	4694      	mov	ip, r2
 800d8fe:	9310      	str	r3, [sp, #64]	; 0x40
 800d900:	9b07      	ldr	r3, [sp, #28]
 800d902:	900a      	str	r0, [sp, #40]	; 0x28
 800d904:	910b      	str	r1, [sp, #44]	; 0x2c
 800d906:	4463      	add	r3, ip
 800d908:	9319      	str	r3, [sp, #100]	; 0x64
 800d90a:	0029      	movs	r1, r5
 800d90c:	0020      	movs	r0, r4
 800d90e:	f7f5 fa53 	bl	8002db8 <__aeabi_d2iz>
 800d912:	9017      	str	r0, [sp, #92]	; 0x5c
 800d914:	f7f5 fa86 	bl	8002e24 <__aeabi_i2d>
 800d918:	0002      	movs	r2, r0
 800d91a:	000b      	movs	r3, r1
 800d91c:	0020      	movs	r0, r4
 800d91e:	0029      	movs	r1, r5
 800d920:	f7f4 fe9a 	bl	8002658 <__aeabi_dsub>
 800d924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d928:	3301      	adds	r3, #1
 800d92a:	9307      	str	r3, [sp, #28]
 800d92c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d92e:	0004      	movs	r4, r0
 800d930:	3330      	adds	r3, #48	; 0x30
 800d932:	7013      	strb	r3, [r2, #0]
 800d934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d938:	000d      	movs	r5, r1
 800d93a:	f7f2 fd89 	bl	8000450 <__aeabi_dcmplt>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d175      	bne.n	800da2e <_dtoa_r+0x686>
 800d942:	0022      	movs	r2, r4
 800d944:	002b      	movs	r3, r5
 800d946:	2000      	movs	r0, #0
 800d948:	493f      	ldr	r1, [pc, #252]	; (800da48 <_dtoa_r+0x6a0>)
 800d94a:	f7f4 fe85 	bl	8002658 <__aeabi_dsub>
 800d94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d952:	f7f2 fd7d 	bl	8000450 <__aeabi_dcmplt>
 800d956:	2800      	cmp	r0, #0
 800d958:	d000      	beq.n	800d95c <_dtoa_r+0x5b4>
 800d95a:	e0d1      	b.n	800db00 <_dtoa_r+0x758>
 800d95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d95e:	9a07      	ldr	r2, [sp, #28]
 800d960:	4293      	cmp	r3, r2
 800d962:	d100      	bne.n	800d966 <_dtoa_r+0x5be>
 800d964:	e770      	b.n	800d848 <_dtoa_r+0x4a0>
 800d966:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d96a:	2200      	movs	r2, #0
 800d96c:	4b37      	ldr	r3, [pc, #220]	; (800da4c <_dtoa_r+0x6a4>)
 800d96e:	f7f4 fc07 	bl	8002180 <__aeabi_dmul>
 800d972:	4b36      	ldr	r3, [pc, #216]	; (800da4c <_dtoa_r+0x6a4>)
 800d974:	900a      	str	r0, [sp, #40]	; 0x28
 800d976:	910b      	str	r1, [sp, #44]	; 0x2c
 800d978:	2200      	movs	r2, #0
 800d97a:	0020      	movs	r0, r4
 800d97c:	0029      	movs	r1, r5
 800d97e:	f7f4 fbff 	bl	8002180 <__aeabi_dmul>
 800d982:	9b07      	ldr	r3, [sp, #28]
 800d984:	0004      	movs	r4, r0
 800d986:	000d      	movs	r5, r1
 800d988:	9310      	str	r3, [sp, #64]	; 0x40
 800d98a:	e7be      	b.n	800d90a <_dtoa_r+0x562>
 800d98c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d98e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d990:	f7f4 fbf6 	bl	8002180 <__aeabi_dmul>
 800d994:	9a05      	ldr	r2, [sp, #20]
 800d996:	9b05      	ldr	r3, [sp, #20]
 800d998:	4694      	mov	ip, r2
 800d99a:	930a      	str	r3, [sp, #40]	; 0x28
 800d99c:	9b07      	ldr	r3, [sp, #28]
 800d99e:	9010      	str	r0, [sp, #64]	; 0x40
 800d9a0:	9111      	str	r1, [sp, #68]	; 0x44
 800d9a2:	4463      	add	r3, ip
 800d9a4:	9319      	str	r3, [sp, #100]	; 0x64
 800d9a6:	0029      	movs	r1, r5
 800d9a8:	0020      	movs	r0, r4
 800d9aa:	f7f5 fa05 	bl	8002db8 <__aeabi_d2iz>
 800d9ae:	9017      	str	r0, [sp, #92]	; 0x5c
 800d9b0:	f7f5 fa38 	bl	8002e24 <__aeabi_i2d>
 800d9b4:	0002      	movs	r2, r0
 800d9b6:	000b      	movs	r3, r1
 800d9b8:	0020      	movs	r0, r4
 800d9ba:	0029      	movs	r1, r5
 800d9bc:	f7f4 fe4c 	bl	8002658 <__aeabi_dsub>
 800d9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9c4:	3330      	adds	r3, #48	; 0x30
 800d9c6:	7013      	strb	r3, [r2, #0]
 800d9c8:	0013      	movs	r3, r2
 800d9ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	0004      	movs	r4, r0
 800d9d0:	000d      	movs	r5, r1
 800d9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d12c      	bne.n	800da32 <_dtoa_r+0x68a>
 800d9d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9dc:	9a05      	ldr	r2, [sp, #20]
 800d9de:	9b07      	ldr	r3, [sp, #28]
 800d9e0:	4694      	mov	ip, r2
 800d9e2:	4463      	add	r3, ip
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	4b1d      	ldr	r3, [pc, #116]	; (800da60 <_dtoa_r+0x6b8>)
 800d9ea:	f7f3 fc59 	bl	80012a0 <__aeabi_dadd>
 800d9ee:	0002      	movs	r2, r0
 800d9f0:	000b      	movs	r3, r1
 800d9f2:	0020      	movs	r0, r4
 800d9f4:	0029      	movs	r1, r5
 800d9f6:	f7f2 fd3f 	bl	8000478 <__aeabi_dcmpgt>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d000      	beq.n	800da00 <_dtoa_r+0x658>
 800d9fe:	e07f      	b.n	800db00 <_dtoa_r+0x758>
 800da00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da04:	2000      	movs	r0, #0
 800da06:	4916      	ldr	r1, [pc, #88]	; (800da60 <_dtoa_r+0x6b8>)
 800da08:	f7f4 fe26 	bl	8002658 <__aeabi_dsub>
 800da0c:	0002      	movs	r2, r0
 800da0e:	000b      	movs	r3, r1
 800da10:	0020      	movs	r0, r4
 800da12:	0029      	movs	r1, r5
 800da14:	f7f2 fd1c 	bl	8000450 <__aeabi_dcmplt>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d100      	bne.n	800da1e <_dtoa_r+0x676>
 800da1c:	e714      	b.n	800d848 <_dtoa_r+0x4a0>
 800da1e:	9b07      	ldr	r3, [sp, #28]
 800da20:	001a      	movs	r2, r3
 800da22:	3a01      	subs	r2, #1
 800da24:	9207      	str	r2, [sp, #28]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	2a30      	cmp	r2, #48	; 0x30
 800da2a:	d0f8      	beq.n	800da1e <_dtoa_r+0x676>
 800da2c:	9307      	str	r3, [sp, #28]
 800da2e:	9602      	str	r6, [sp, #8]
 800da30:	e054      	b.n	800dadc <_dtoa_r+0x734>
 800da32:	2200      	movs	r2, #0
 800da34:	4b05      	ldr	r3, [pc, #20]	; (800da4c <_dtoa_r+0x6a4>)
 800da36:	f7f4 fba3 	bl	8002180 <__aeabi_dmul>
 800da3a:	0004      	movs	r4, r0
 800da3c:	000d      	movs	r5, r1
 800da3e:	e7b2      	b.n	800d9a6 <_dtoa_r+0x5fe>
 800da40:	080125c0 	.word	0x080125c0
 800da44:	08012598 	.word	0x08012598
 800da48:	3ff00000 	.word	0x3ff00000
 800da4c:	40240000 	.word	0x40240000
 800da50:	401c0000 	.word	0x401c0000
 800da54:	fcc00000 	.word	0xfcc00000
 800da58:	40140000 	.word	0x40140000
 800da5c:	7cc00000 	.word	0x7cc00000
 800da60:	3fe00000 	.word	0x3fe00000
 800da64:	9b06      	ldr	r3, [sp, #24]
 800da66:	9e05      	ldr	r6, [sp, #20]
 800da68:	3b01      	subs	r3, #1
 800da6a:	199b      	adds	r3, r3, r6
 800da6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800da6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800da70:	930a      	str	r3, [sp, #40]	; 0x28
 800da72:	9a08      	ldr	r2, [sp, #32]
 800da74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da76:	0020      	movs	r0, r4
 800da78:	0029      	movs	r1, r5
 800da7a:	f7f3 ff7b 	bl	8001974 <__aeabi_ddiv>
 800da7e:	f7f5 f99b 	bl	8002db8 <__aeabi_d2iz>
 800da82:	9006      	str	r0, [sp, #24]
 800da84:	f7f5 f9ce 	bl	8002e24 <__aeabi_i2d>
 800da88:	9a08      	ldr	r2, [sp, #32]
 800da8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8c:	f7f4 fb78 	bl	8002180 <__aeabi_dmul>
 800da90:	0002      	movs	r2, r0
 800da92:	000b      	movs	r3, r1
 800da94:	0020      	movs	r0, r4
 800da96:	0029      	movs	r1, r5
 800da98:	f7f4 fdde 	bl	8002658 <__aeabi_dsub>
 800da9c:	0033      	movs	r3, r6
 800da9e:	9a06      	ldr	r2, [sp, #24]
 800daa0:	3601      	adds	r6, #1
 800daa2:	3230      	adds	r2, #48	; 0x30
 800daa4:	701a      	strb	r2, [r3, #0]
 800daa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daa8:	9607      	str	r6, [sp, #28]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d139      	bne.n	800db22 <_dtoa_r+0x77a>
 800daae:	0002      	movs	r2, r0
 800dab0:	000b      	movs	r3, r1
 800dab2:	f7f3 fbf5 	bl	80012a0 <__aeabi_dadd>
 800dab6:	9a08      	ldr	r2, [sp, #32]
 800dab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daba:	0004      	movs	r4, r0
 800dabc:	000d      	movs	r5, r1
 800dabe:	f7f2 fcdb 	bl	8000478 <__aeabi_dcmpgt>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d11b      	bne.n	800dafe <_dtoa_r+0x756>
 800dac6:	9a08      	ldr	r2, [sp, #32]
 800dac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daca:	0020      	movs	r0, r4
 800dacc:	0029      	movs	r1, r5
 800dace:	f7f2 fcb9 	bl	8000444 <__aeabi_dcmpeq>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d002      	beq.n	800dadc <_dtoa_r+0x734>
 800dad6:	9b06      	ldr	r3, [sp, #24]
 800dad8:	07db      	lsls	r3, r3, #31
 800dada:	d410      	bmi.n	800dafe <_dtoa_r+0x756>
 800dadc:	0038      	movs	r0, r7
 800dade:	9904      	ldr	r1, [sp, #16]
 800dae0:	f000 fae6 	bl	800e0b0 <_Bfree>
 800dae4:	2300      	movs	r3, #0
 800dae6:	9a07      	ldr	r2, [sp, #28]
 800dae8:	9802      	ldr	r0, [sp, #8]
 800daea:	7013      	strb	r3, [r2, #0]
 800daec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800daee:	3001      	adds	r0, #1
 800daf0:	6018      	str	r0, [r3, #0]
 800daf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d100      	bne.n	800dafa <_dtoa_r+0x752>
 800daf8:	e4a3      	b.n	800d442 <_dtoa_r+0x9a>
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	e4a1      	b.n	800d442 <_dtoa_r+0x9a>
 800dafe:	9e02      	ldr	r6, [sp, #8]
 800db00:	9b07      	ldr	r3, [sp, #28]
 800db02:	9307      	str	r3, [sp, #28]
 800db04:	3b01      	subs	r3, #1
 800db06:	781a      	ldrb	r2, [r3, #0]
 800db08:	2a39      	cmp	r2, #57	; 0x39
 800db0a:	d106      	bne.n	800db1a <_dtoa_r+0x772>
 800db0c:	9a05      	ldr	r2, [sp, #20]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d1f7      	bne.n	800db02 <_dtoa_r+0x75a>
 800db12:	2230      	movs	r2, #48	; 0x30
 800db14:	9905      	ldr	r1, [sp, #20]
 800db16:	3601      	adds	r6, #1
 800db18:	700a      	strb	r2, [r1, #0]
 800db1a:	781a      	ldrb	r2, [r3, #0]
 800db1c:	3201      	adds	r2, #1
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	e785      	b.n	800da2e <_dtoa_r+0x686>
 800db22:	2200      	movs	r2, #0
 800db24:	4bad      	ldr	r3, [pc, #692]	; (800dddc <_dtoa_r+0xa34>)
 800db26:	f7f4 fb2b 	bl	8002180 <__aeabi_dmul>
 800db2a:	2200      	movs	r2, #0
 800db2c:	2300      	movs	r3, #0
 800db2e:	0004      	movs	r4, r0
 800db30:	000d      	movs	r5, r1
 800db32:	f7f2 fc87 	bl	8000444 <__aeabi_dcmpeq>
 800db36:	2800      	cmp	r0, #0
 800db38:	d09b      	beq.n	800da72 <_dtoa_r+0x6ca>
 800db3a:	e7cf      	b.n	800dadc <_dtoa_r+0x734>
 800db3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db3e:	2a00      	cmp	r2, #0
 800db40:	d100      	bne.n	800db44 <_dtoa_r+0x79c>
 800db42:	e082      	b.n	800dc4a <_dtoa_r+0x8a2>
 800db44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800db46:	2a01      	cmp	r2, #1
 800db48:	dc66      	bgt.n	800dc18 <_dtoa_r+0x870>
 800db4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800db4c:	2a00      	cmp	r2, #0
 800db4e:	d05f      	beq.n	800dc10 <_dtoa_r+0x868>
 800db50:	4aa3      	ldr	r2, [pc, #652]	; (800dde0 <_dtoa_r+0xa38>)
 800db52:	189b      	adds	r3, r3, r2
 800db54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800db56:	9c08      	ldr	r4, [sp, #32]
 800db58:	9a08      	ldr	r2, [sp, #32]
 800db5a:	2101      	movs	r1, #1
 800db5c:	18d2      	adds	r2, r2, r3
 800db5e:	9208      	str	r2, [sp, #32]
 800db60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db62:	0038      	movs	r0, r7
 800db64:	18d3      	adds	r3, r2, r3
 800db66:	930d      	str	r3, [sp, #52]	; 0x34
 800db68:	f000 fb52 	bl	800e210 <__i2b>
 800db6c:	0005      	movs	r5, r0
 800db6e:	2c00      	cmp	r4, #0
 800db70:	dd0e      	ble.n	800db90 <_dtoa_r+0x7e8>
 800db72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db74:	2b00      	cmp	r3, #0
 800db76:	dd0b      	ble.n	800db90 <_dtoa_r+0x7e8>
 800db78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db7a:	0023      	movs	r3, r4
 800db7c:	4294      	cmp	r4, r2
 800db7e:	dd00      	ble.n	800db82 <_dtoa_r+0x7da>
 800db80:	0013      	movs	r3, r2
 800db82:	9a08      	ldr	r2, [sp, #32]
 800db84:	1ae4      	subs	r4, r4, r3
 800db86:	1ad2      	subs	r2, r2, r3
 800db88:	9208      	str	r2, [sp, #32]
 800db8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	930d      	str	r3, [sp, #52]	; 0x34
 800db90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db92:	2b00      	cmp	r3, #0
 800db94:	d01f      	beq.n	800dbd6 <_dtoa_r+0x82e>
 800db96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d05a      	beq.n	800dc52 <_dtoa_r+0x8aa>
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	dd11      	ble.n	800dbc4 <_dtoa_r+0x81c>
 800dba0:	0029      	movs	r1, r5
 800dba2:	0032      	movs	r2, r6
 800dba4:	0038      	movs	r0, r7
 800dba6:	f000 fbf9 	bl	800e39c <__pow5mult>
 800dbaa:	9a04      	ldr	r2, [sp, #16]
 800dbac:	0001      	movs	r1, r0
 800dbae:	0005      	movs	r5, r0
 800dbb0:	0038      	movs	r0, r7
 800dbb2:	f000 fb43 	bl	800e23c <__multiply>
 800dbb6:	9904      	ldr	r1, [sp, #16]
 800dbb8:	9007      	str	r0, [sp, #28]
 800dbba:	0038      	movs	r0, r7
 800dbbc:	f000 fa78 	bl	800e0b0 <_Bfree>
 800dbc0:	9b07      	ldr	r3, [sp, #28]
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc6:	1b9a      	subs	r2, r3, r6
 800dbc8:	42b3      	cmp	r3, r6
 800dbca:	d004      	beq.n	800dbd6 <_dtoa_r+0x82e>
 800dbcc:	0038      	movs	r0, r7
 800dbce:	9904      	ldr	r1, [sp, #16]
 800dbd0:	f000 fbe4 	bl	800e39c <__pow5mult>
 800dbd4:	9004      	str	r0, [sp, #16]
 800dbd6:	2101      	movs	r1, #1
 800dbd8:	0038      	movs	r0, r7
 800dbda:	f000 fb19 	bl	800e210 <__i2b>
 800dbde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dbe0:	0006      	movs	r6, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dd37      	ble.n	800dc56 <_dtoa_r+0x8ae>
 800dbe6:	001a      	movs	r2, r3
 800dbe8:	0001      	movs	r1, r0
 800dbea:	0038      	movs	r0, r7
 800dbec:	f000 fbd6 	bl	800e39c <__pow5mult>
 800dbf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbf2:	0006      	movs	r6, r0
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	dd33      	ble.n	800dc60 <_dtoa_r+0x8b8>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	9307      	str	r3, [sp, #28]
 800dbfc:	6933      	ldr	r3, [r6, #16]
 800dbfe:	3303      	adds	r3, #3
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	18f3      	adds	r3, r6, r3
 800dc04:	6858      	ldr	r0, [r3, #4]
 800dc06:	f000 fabb 	bl	800e180 <__hi0bits>
 800dc0a:	2320      	movs	r3, #32
 800dc0c:	1a18      	subs	r0, r3, r0
 800dc0e:	e03f      	b.n	800dc90 <_dtoa_r+0x8e8>
 800dc10:	2336      	movs	r3, #54	; 0x36
 800dc12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc14:	1a9b      	subs	r3, r3, r2
 800dc16:	e79d      	b.n	800db54 <_dtoa_r+0x7ac>
 800dc18:	9b06      	ldr	r3, [sp, #24]
 800dc1a:	1e5e      	subs	r6, r3, #1
 800dc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc1e:	42b3      	cmp	r3, r6
 800dc20:	db08      	blt.n	800dc34 <_dtoa_r+0x88c>
 800dc22:	1b9e      	subs	r6, r3, r6
 800dc24:	9b06      	ldr	r3, [sp, #24]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	da0c      	bge.n	800dc44 <_dtoa_r+0x89c>
 800dc2a:	9b08      	ldr	r3, [sp, #32]
 800dc2c:	9a06      	ldr	r2, [sp, #24]
 800dc2e:	1a9c      	subs	r4, r3, r2
 800dc30:	2300      	movs	r3, #0
 800dc32:	e791      	b.n	800db58 <_dtoa_r+0x7b0>
 800dc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc38:	1af3      	subs	r3, r6, r3
 800dc3a:	18d3      	adds	r3, r2, r3
 800dc3c:	960e      	str	r6, [sp, #56]	; 0x38
 800dc3e:	9314      	str	r3, [sp, #80]	; 0x50
 800dc40:	2600      	movs	r6, #0
 800dc42:	e7ef      	b.n	800dc24 <_dtoa_r+0x87c>
 800dc44:	9c08      	ldr	r4, [sp, #32]
 800dc46:	9b06      	ldr	r3, [sp, #24]
 800dc48:	e786      	b.n	800db58 <_dtoa_r+0x7b0>
 800dc4a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800dc4c:	9c08      	ldr	r4, [sp, #32]
 800dc4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc50:	e78d      	b.n	800db6e <_dtoa_r+0x7c6>
 800dc52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc54:	e7ba      	b.n	800dbcc <_dtoa_r+0x824>
 800dc56:	2300      	movs	r3, #0
 800dc58:	9307      	str	r3, [sp, #28]
 800dc5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	dc13      	bgt.n	800dc88 <_dtoa_r+0x8e0>
 800dc60:	2300      	movs	r3, #0
 800dc62:	9307      	str	r3, [sp, #28]
 800dc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10e      	bne.n	800dc88 <_dtoa_r+0x8e0>
 800dc6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc6c:	031b      	lsls	r3, r3, #12
 800dc6e:	d10b      	bne.n	800dc88 <_dtoa_r+0x8e0>
 800dc70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dc72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc74:	4213      	tst	r3, r2
 800dc76:	d007      	beq.n	800dc88 <_dtoa_r+0x8e0>
 800dc78:	9b08      	ldr	r3, [sp, #32]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	9308      	str	r3, [sp, #32]
 800dc7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc80:	3301      	adds	r3, #1
 800dc82:	930d      	str	r3, [sp, #52]	; 0x34
 800dc84:	2301      	movs	r3, #1
 800dc86:	9307      	str	r3, [sp, #28]
 800dc88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1b5      	bne.n	800dbfc <_dtoa_r+0x854>
 800dc90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc92:	221f      	movs	r2, #31
 800dc94:	1818      	adds	r0, r3, r0
 800dc96:	0003      	movs	r3, r0
 800dc98:	4013      	ands	r3, r2
 800dc9a:	4210      	tst	r0, r2
 800dc9c:	d046      	beq.n	800dd2c <_dtoa_r+0x984>
 800dc9e:	3201      	adds	r2, #1
 800dca0:	1ad2      	subs	r2, r2, r3
 800dca2:	2a04      	cmp	r2, #4
 800dca4:	dd3f      	ble.n	800dd26 <_dtoa_r+0x97e>
 800dca6:	221c      	movs	r2, #28
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	9a08      	ldr	r2, [sp, #32]
 800dcac:	18e4      	adds	r4, r4, r3
 800dcae:	18d2      	adds	r2, r2, r3
 800dcb0:	9208      	str	r2, [sp, #32]
 800dcb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcb4:	18d3      	adds	r3, r2, r3
 800dcb6:	930d      	str	r3, [sp, #52]	; 0x34
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd05      	ble.n	800dcca <_dtoa_r+0x922>
 800dcbe:	001a      	movs	r2, r3
 800dcc0:	0038      	movs	r0, r7
 800dcc2:	9904      	ldr	r1, [sp, #16]
 800dcc4:	f000 fbc6 	bl	800e454 <__lshift>
 800dcc8:	9004      	str	r0, [sp, #16]
 800dcca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	dd05      	ble.n	800dcdc <_dtoa_r+0x934>
 800dcd0:	0031      	movs	r1, r6
 800dcd2:	001a      	movs	r2, r3
 800dcd4:	0038      	movs	r0, r7
 800dcd6:	f000 fbbd 	bl	800e454 <__lshift>
 800dcda:	0006      	movs	r6, r0
 800dcdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d026      	beq.n	800dd30 <_dtoa_r+0x988>
 800dce2:	0031      	movs	r1, r6
 800dce4:	9804      	ldr	r0, [sp, #16]
 800dce6:	f000 fc25 	bl	800e534 <__mcmp>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	da20      	bge.n	800dd30 <_dtoa_r+0x988>
 800dcee:	9b02      	ldr	r3, [sp, #8]
 800dcf0:	220a      	movs	r2, #10
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	0038      	movs	r0, r7
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9904      	ldr	r1, [sp, #16]
 800dcfc:	f000 f9fc 	bl	800e0f8 <__multadd>
 800dd00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd02:	9004      	str	r0, [sp, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d100      	bne.n	800dd0a <_dtoa_r+0x962>
 800dd08:	e160      	b.n	800dfcc <_dtoa_r+0xc24>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	0029      	movs	r1, r5
 800dd0e:	220a      	movs	r2, #10
 800dd10:	0038      	movs	r0, r7
 800dd12:	f000 f9f1 	bl	800e0f8 <__multadd>
 800dd16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd18:	0005      	movs	r5, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dc47      	bgt.n	800ddae <_dtoa_r+0xa06>
 800dd1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	dc0d      	bgt.n	800dd40 <_dtoa_r+0x998>
 800dd24:	e043      	b.n	800ddae <_dtoa_r+0xa06>
 800dd26:	2a04      	cmp	r2, #4
 800dd28:	d0c6      	beq.n	800dcb8 <_dtoa_r+0x910>
 800dd2a:	0013      	movs	r3, r2
 800dd2c:	331c      	adds	r3, #28
 800dd2e:	e7bc      	b.n	800dcaa <_dtoa_r+0x902>
 800dd30:	9b06      	ldr	r3, [sp, #24]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dc35      	bgt.n	800dda2 <_dtoa_r+0x9fa>
 800dd36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	dd32      	ble.n	800dda2 <_dtoa_r+0x9fa>
 800dd3c:	9b06      	ldr	r3, [sp, #24]
 800dd3e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10c      	bne.n	800dd60 <_dtoa_r+0x9b8>
 800dd46:	0031      	movs	r1, r6
 800dd48:	2205      	movs	r2, #5
 800dd4a:	0038      	movs	r0, r7
 800dd4c:	f000 f9d4 	bl	800e0f8 <__multadd>
 800dd50:	0006      	movs	r6, r0
 800dd52:	0001      	movs	r1, r0
 800dd54:	9804      	ldr	r0, [sp, #16]
 800dd56:	f000 fbed 	bl	800e534 <__mcmp>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	dd00      	ble.n	800dd60 <_dtoa_r+0x9b8>
 800dd5e:	e59f      	b.n	800d8a0 <_dtoa_r+0x4f8>
 800dd60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd62:	43db      	mvns	r3, r3
 800dd64:	9302      	str	r3, [sp, #8]
 800dd66:	9b05      	ldr	r3, [sp, #20]
 800dd68:	9307      	str	r3, [sp, #28]
 800dd6a:	2400      	movs	r4, #0
 800dd6c:	0031      	movs	r1, r6
 800dd6e:	0038      	movs	r0, r7
 800dd70:	f000 f99e 	bl	800e0b0 <_Bfree>
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	d100      	bne.n	800dd7a <_dtoa_r+0x9d2>
 800dd78:	e6b0      	b.n	800dadc <_dtoa_r+0x734>
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	d005      	beq.n	800dd8a <_dtoa_r+0x9e2>
 800dd7e:	42ac      	cmp	r4, r5
 800dd80:	d003      	beq.n	800dd8a <_dtoa_r+0x9e2>
 800dd82:	0021      	movs	r1, r4
 800dd84:	0038      	movs	r0, r7
 800dd86:	f000 f993 	bl	800e0b0 <_Bfree>
 800dd8a:	0029      	movs	r1, r5
 800dd8c:	0038      	movs	r0, r7
 800dd8e:	f000 f98f 	bl	800e0b0 <_Bfree>
 800dd92:	e6a3      	b.n	800dadc <_dtoa_r+0x734>
 800dd94:	2600      	movs	r6, #0
 800dd96:	0035      	movs	r5, r6
 800dd98:	e7e2      	b.n	800dd60 <_dtoa_r+0x9b8>
 800dd9a:	9602      	str	r6, [sp, #8]
 800dd9c:	9e07      	ldr	r6, [sp, #28]
 800dd9e:	0035      	movs	r5, r6
 800dda0:	e57e      	b.n	800d8a0 <_dtoa_r+0x4f8>
 800dda2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d100      	bne.n	800ddaa <_dtoa_r+0xa02>
 800dda8:	e0c8      	b.n	800df3c <_dtoa_r+0xb94>
 800ddaa:	9b06      	ldr	r3, [sp, #24]
 800ddac:	930c      	str	r3, [sp, #48]	; 0x30
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	dd05      	ble.n	800ddbe <_dtoa_r+0xa16>
 800ddb2:	0029      	movs	r1, r5
 800ddb4:	0022      	movs	r2, r4
 800ddb6:	0038      	movs	r0, r7
 800ddb8:	f000 fb4c 	bl	800e454 <__lshift>
 800ddbc:	0005      	movs	r5, r0
 800ddbe:	9b07      	ldr	r3, [sp, #28]
 800ddc0:	0028      	movs	r0, r5
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d01f      	beq.n	800de06 <_dtoa_r+0xa5e>
 800ddc6:	0038      	movs	r0, r7
 800ddc8:	6869      	ldr	r1, [r5, #4]
 800ddca:	f000 f92d 	bl	800e028 <_Balloc>
 800ddce:	1e04      	subs	r4, r0, #0
 800ddd0:	d10c      	bne.n	800ddec <_dtoa_r+0xa44>
 800ddd2:	0002      	movs	r2, r0
 800ddd4:	4b03      	ldr	r3, [pc, #12]	; (800dde4 <_dtoa_r+0xa3c>)
 800ddd6:	4904      	ldr	r1, [pc, #16]	; (800dde8 <_dtoa_r+0xa40>)
 800ddd8:	f7ff fafb 	bl	800d3d2 <_dtoa_r+0x2a>
 800dddc:	40240000 	.word	0x40240000
 800dde0:	00000433 	.word	0x00000433
 800dde4:	08012527 	.word	0x08012527
 800dde8:	000002ea 	.word	0x000002ea
 800ddec:	0029      	movs	r1, r5
 800ddee:	692b      	ldr	r3, [r5, #16]
 800ddf0:	310c      	adds	r1, #12
 800ddf2:	1c9a      	adds	r2, r3, #2
 800ddf4:	0092      	lsls	r2, r2, #2
 800ddf6:	300c      	adds	r0, #12
 800ddf8:	f000 f90d 	bl	800e016 <memcpy>
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	0021      	movs	r1, r4
 800de00:	0038      	movs	r0, r7
 800de02:	f000 fb27 	bl	800e454 <__lshift>
 800de06:	002c      	movs	r4, r5
 800de08:	0005      	movs	r5, r0
 800de0a:	9b05      	ldr	r3, [sp, #20]
 800de0c:	9308      	str	r3, [sp, #32]
 800de0e:	0031      	movs	r1, r6
 800de10:	9804      	ldr	r0, [sp, #16]
 800de12:	f7ff fa3d 	bl	800d290 <quorem>
 800de16:	0003      	movs	r3, r0
 800de18:	0021      	movs	r1, r4
 800de1a:	3330      	adds	r3, #48	; 0x30
 800de1c:	900e      	str	r0, [sp, #56]	; 0x38
 800de1e:	9804      	ldr	r0, [sp, #16]
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	f000 fb87 	bl	800e534 <__mcmp>
 800de26:	002a      	movs	r2, r5
 800de28:	900f      	str	r0, [sp, #60]	; 0x3c
 800de2a:	0031      	movs	r1, r6
 800de2c:	0038      	movs	r0, r7
 800de2e:	f000 fb9d 	bl	800e56c <__mdiff>
 800de32:	68c3      	ldr	r3, [r0, #12]
 800de34:	9007      	str	r0, [sp, #28]
 800de36:	9310      	str	r3, [sp, #64]	; 0x40
 800de38:	2301      	movs	r3, #1
 800de3a:	930d      	str	r3, [sp, #52]	; 0x34
 800de3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <_dtoa_r+0xaa4>
 800de42:	0001      	movs	r1, r0
 800de44:	9804      	ldr	r0, [sp, #16]
 800de46:	f000 fb75 	bl	800e534 <__mcmp>
 800de4a:	900d      	str	r0, [sp, #52]	; 0x34
 800de4c:	0038      	movs	r0, r7
 800de4e:	9907      	ldr	r1, [sp, #28]
 800de50:	f000 f92e 	bl	800e0b0 <_Bfree>
 800de54:	2301      	movs	r3, #1
 800de56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de5a:	4018      	ands	r0, r3
 800de5c:	9b08      	ldr	r3, [sp, #32]
 800de5e:	3301      	adds	r3, #1
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de64:	4313      	orrs	r3, r2
 800de66:	4303      	orrs	r3, r0
 800de68:	d10c      	bne.n	800de84 <_dtoa_r+0xadc>
 800de6a:	9b06      	ldr	r3, [sp, #24]
 800de6c:	2b39      	cmp	r3, #57	; 0x39
 800de6e:	d025      	beq.n	800debc <_dtoa_r+0xb14>
 800de70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd02      	ble.n	800de7c <_dtoa_r+0xad4>
 800de76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de78:	3331      	adds	r3, #49	; 0x31
 800de7a:	9306      	str	r3, [sp, #24]
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	9a06      	ldr	r2, [sp, #24]
 800de80:	701a      	strb	r2, [r3, #0]
 800de82:	e773      	b.n	800dd6c <_dtoa_r+0x9c4>
 800de84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	db03      	blt.n	800de92 <_dtoa_r+0xaea>
 800de8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800de8c:	4313      	orrs	r3, r2
 800de8e:	4303      	orrs	r3, r0
 800de90:	d11f      	bne.n	800ded2 <_dtoa_r+0xb2a>
 800de92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de94:	2b00      	cmp	r3, #0
 800de96:	ddf1      	ble.n	800de7c <_dtoa_r+0xad4>
 800de98:	9904      	ldr	r1, [sp, #16]
 800de9a:	2201      	movs	r2, #1
 800de9c:	0038      	movs	r0, r7
 800de9e:	f000 fad9 	bl	800e454 <__lshift>
 800dea2:	0031      	movs	r1, r6
 800dea4:	9004      	str	r0, [sp, #16]
 800dea6:	f000 fb45 	bl	800e534 <__mcmp>
 800deaa:	2800      	cmp	r0, #0
 800deac:	dc03      	bgt.n	800deb6 <_dtoa_r+0xb0e>
 800deae:	d1e5      	bne.n	800de7c <_dtoa_r+0xad4>
 800deb0:	9b06      	ldr	r3, [sp, #24]
 800deb2:	07db      	lsls	r3, r3, #31
 800deb4:	d5e2      	bpl.n	800de7c <_dtoa_r+0xad4>
 800deb6:	9b06      	ldr	r3, [sp, #24]
 800deb8:	2b39      	cmp	r3, #57	; 0x39
 800deba:	d1dc      	bne.n	800de76 <_dtoa_r+0xace>
 800debc:	2339      	movs	r3, #57	; 0x39
 800debe:	9a08      	ldr	r2, [sp, #32]
 800dec0:	7013      	strb	r3, [r2, #0]
 800dec2:	9b07      	ldr	r3, [sp, #28]
 800dec4:	9307      	str	r3, [sp, #28]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	2a39      	cmp	r2, #57	; 0x39
 800decc:	d06c      	beq.n	800dfa8 <_dtoa_r+0xc00>
 800dece:	3201      	adds	r2, #1
 800ded0:	e7d6      	b.n	800de80 <_dtoa_r+0xad8>
 800ded2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dd07      	ble.n	800dee8 <_dtoa_r+0xb40>
 800ded8:	9b06      	ldr	r3, [sp, #24]
 800deda:	2b39      	cmp	r3, #57	; 0x39
 800dedc:	d0ee      	beq.n	800debc <_dtoa_r+0xb14>
 800dede:	9b06      	ldr	r3, [sp, #24]
 800dee0:	9a08      	ldr	r2, [sp, #32]
 800dee2:	3301      	adds	r3, #1
 800dee4:	7013      	strb	r3, [r2, #0]
 800dee6:	e741      	b.n	800dd6c <_dtoa_r+0x9c4>
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	9a06      	ldr	r2, [sp, #24]
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	2301      	movs	r3, #1
 800def0:	9a05      	ldr	r2, [sp, #20]
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	9a08      	ldr	r2, [sp, #32]
 800def6:	189b      	adds	r3, r3, r2
 800def8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800defa:	429a      	cmp	r2, r3
 800defc:	d03e      	beq.n	800df7c <_dtoa_r+0xbd4>
 800defe:	2300      	movs	r3, #0
 800df00:	220a      	movs	r2, #10
 800df02:	9904      	ldr	r1, [sp, #16]
 800df04:	0038      	movs	r0, r7
 800df06:	f000 f8f7 	bl	800e0f8 <__multadd>
 800df0a:	2300      	movs	r3, #0
 800df0c:	9004      	str	r0, [sp, #16]
 800df0e:	220a      	movs	r2, #10
 800df10:	0021      	movs	r1, r4
 800df12:	0038      	movs	r0, r7
 800df14:	42ac      	cmp	r4, r5
 800df16:	d106      	bne.n	800df26 <_dtoa_r+0xb7e>
 800df18:	f000 f8ee 	bl	800e0f8 <__multadd>
 800df1c:	0004      	movs	r4, r0
 800df1e:	0005      	movs	r5, r0
 800df20:	9b07      	ldr	r3, [sp, #28]
 800df22:	9308      	str	r3, [sp, #32]
 800df24:	e773      	b.n	800de0e <_dtoa_r+0xa66>
 800df26:	f000 f8e7 	bl	800e0f8 <__multadd>
 800df2a:	0029      	movs	r1, r5
 800df2c:	0004      	movs	r4, r0
 800df2e:	2300      	movs	r3, #0
 800df30:	220a      	movs	r2, #10
 800df32:	0038      	movs	r0, r7
 800df34:	f000 f8e0 	bl	800e0f8 <__multadd>
 800df38:	0005      	movs	r5, r0
 800df3a:	e7f1      	b.n	800df20 <_dtoa_r+0xb78>
 800df3c:	9b06      	ldr	r3, [sp, #24]
 800df3e:	930c      	str	r3, [sp, #48]	; 0x30
 800df40:	2400      	movs	r4, #0
 800df42:	0031      	movs	r1, r6
 800df44:	9804      	ldr	r0, [sp, #16]
 800df46:	f7ff f9a3 	bl	800d290 <quorem>
 800df4a:	9b05      	ldr	r3, [sp, #20]
 800df4c:	3030      	adds	r0, #48	; 0x30
 800df4e:	5518      	strb	r0, [r3, r4]
 800df50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df52:	3401      	adds	r4, #1
 800df54:	9006      	str	r0, [sp, #24]
 800df56:	42a3      	cmp	r3, r4
 800df58:	dd07      	ble.n	800df6a <_dtoa_r+0xbc2>
 800df5a:	2300      	movs	r3, #0
 800df5c:	220a      	movs	r2, #10
 800df5e:	0038      	movs	r0, r7
 800df60:	9904      	ldr	r1, [sp, #16]
 800df62:	f000 f8c9 	bl	800e0f8 <__multadd>
 800df66:	9004      	str	r0, [sp, #16]
 800df68:	e7eb      	b.n	800df42 <_dtoa_r+0xb9a>
 800df6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df6c:	2001      	movs	r0, #1
 800df6e:	2b00      	cmp	r3, #0
 800df70:	dd00      	ble.n	800df74 <_dtoa_r+0xbcc>
 800df72:	0018      	movs	r0, r3
 800df74:	2400      	movs	r4, #0
 800df76:	9b05      	ldr	r3, [sp, #20]
 800df78:	181b      	adds	r3, r3, r0
 800df7a:	9307      	str	r3, [sp, #28]
 800df7c:	9904      	ldr	r1, [sp, #16]
 800df7e:	2201      	movs	r2, #1
 800df80:	0038      	movs	r0, r7
 800df82:	f000 fa67 	bl	800e454 <__lshift>
 800df86:	0031      	movs	r1, r6
 800df88:	9004      	str	r0, [sp, #16]
 800df8a:	f000 fad3 	bl	800e534 <__mcmp>
 800df8e:	2800      	cmp	r0, #0
 800df90:	dc97      	bgt.n	800dec2 <_dtoa_r+0xb1a>
 800df92:	d102      	bne.n	800df9a <_dtoa_r+0xbf2>
 800df94:	9b06      	ldr	r3, [sp, #24]
 800df96:	07db      	lsls	r3, r3, #31
 800df98:	d493      	bmi.n	800dec2 <_dtoa_r+0xb1a>
 800df9a:	9b07      	ldr	r3, [sp, #28]
 800df9c:	9307      	str	r3, [sp, #28]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	781a      	ldrb	r2, [r3, #0]
 800dfa2:	2a30      	cmp	r2, #48	; 0x30
 800dfa4:	d0fa      	beq.n	800df9c <_dtoa_r+0xbf4>
 800dfa6:	e6e1      	b.n	800dd6c <_dtoa_r+0x9c4>
 800dfa8:	9a05      	ldr	r2, [sp, #20]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d18a      	bne.n	800dec4 <_dtoa_r+0xb1c>
 800dfae:	9b02      	ldr	r3, [sp, #8]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	9302      	str	r3, [sp, #8]
 800dfb4:	2331      	movs	r3, #49	; 0x31
 800dfb6:	e795      	b.n	800dee4 <_dtoa_r+0xb3c>
 800dfb8:	4b08      	ldr	r3, [pc, #32]	; (800dfdc <_dtoa_r+0xc34>)
 800dfba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dfbc:	9305      	str	r3, [sp, #20]
 800dfbe:	4b08      	ldr	r3, [pc, #32]	; (800dfe0 <_dtoa_r+0xc38>)
 800dfc0:	2a00      	cmp	r2, #0
 800dfc2:	d001      	beq.n	800dfc8 <_dtoa_r+0xc20>
 800dfc4:	f7ff fa3b 	bl	800d43e <_dtoa_r+0x96>
 800dfc8:	f7ff fa3b 	bl	800d442 <_dtoa_r+0x9a>
 800dfcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	dcb6      	bgt.n	800df40 <_dtoa_r+0xb98>
 800dfd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	dd00      	ble.n	800dfda <_dtoa_r+0xc32>
 800dfd8:	e6b2      	b.n	800dd40 <_dtoa_r+0x998>
 800dfda:	e7b1      	b.n	800df40 <_dtoa_r+0xb98>
 800dfdc:	080124a4 	.word	0x080124a4
 800dfe0:	080124ac 	.word	0x080124ac

0800dfe4 <_localeconv_r>:
 800dfe4:	4800      	ldr	r0, [pc, #0]	; (800dfe8 <_localeconv_r+0x4>)
 800dfe6:	4770      	bx	lr
 800dfe8:	20000164 	.word	0x20000164

0800dfec <malloc>:
 800dfec:	b510      	push	{r4, lr}
 800dfee:	4b03      	ldr	r3, [pc, #12]	; (800dffc <malloc+0x10>)
 800dff0:	0001      	movs	r1, r0
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	f000 fc0e 	bl	800e814 <_malloc_r>
 800dff8:	bd10      	pop	{r4, pc}
 800dffa:	46c0      	nop			; (mov r8, r8)
 800dffc:	20000010 	.word	0x20000010

0800e000 <memchr>:
 800e000:	b2c9      	uxtb	r1, r1
 800e002:	1882      	adds	r2, r0, r2
 800e004:	4290      	cmp	r0, r2
 800e006:	d101      	bne.n	800e00c <memchr+0xc>
 800e008:	2000      	movs	r0, #0
 800e00a:	4770      	bx	lr
 800e00c:	7803      	ldrb	r3, [r0, #0]
 800e00e:	428b      	cmp	r3, r1
 800e010:	d0fb      	beq.n	800e00a <memchr+0xa>
 800e012:	3001      	adds	r0, #1
 800e014:	e7f6      	b.n	800e004 <memchr+0x4>

0800e016 <memcpy>:
 800e016:	2300      	movs	r3, #0
 800e018:	b510      	push	{r4, lr}
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d100      	bne.n	800e020 <memcpy+0xa>
 800e01e:	bd10      	pop	{r4, pc}
 800e020:	5ccc      	ldrb	r4, [r1, r3]
 800e022:	54c4      	strb	r4, [r0, r3]
 800e024:	3301      	adds	r3, #1
 800e026:	e7f8      	b.n	800e01a <memcpy+0x4>

0800e028 <_Balloc>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e02c:	0006      	movs	r6, r0
 800e02e:	000c      	movs	r4, r1
 800e030:	2d00      	cmp	r5, #0
 800e032:	d10e      	bne.n	800e052 <_Balloc+0x2a>
 800e034:	2010      	movs	r0, #16
 800e036:	f7ff ffd9 	bl	800dfec <malloc>
 800e03a:	1e02      	subs	r2, r0, #0
 800e03c:	6270      	str	r0, [r6, #36]	; 0x24
 800e03e:	d104      	bne.n	800e04a <_Balloc+0x22>
 800e040:	2166      	movs	r1, #102	; 0x66
 800e042:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <_Balloc+0x80>)
 800e044:	4819      	ldr	r0, [pc, #100]	; (800e0ac <_Balloc+0x84>)
 800e046:	f000 fdb7 	bl	800ebb8 <__assert_func>
 800e04a:	6045      	str	r5, [r0, #4]
 800e04c:	6085      	str	r5, [r0, #8]
 800e04e:	6005      	str	r5, [r0, #0]
 800e050:	60c5      	str	r5, [r0, #12]
 800e052:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800e054:	68eb      	ldr	r3, [r5, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d013      	beq.n	800e082 <_Balloc+0x5a>
 800e05a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e05c:	00a2      	lsls	r2, r4, #2
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	189b      	adds	r3, r3, r2
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	2800      	cmp	r0, #0
 800e066:	d118      	bne.n	800e09a <_Balloc+0x72>
 800e068:	2101      	movs	r1, #1
 800e06a:	000d      	movs	r5, r1
 800e06c:	40a5      	lsls	r5, r4
 800e06e:	1d6a      	adds	r2, r5, #5
 800e070:	0030      	movs	r0, r6
 800e072:	0092      	lsls	r2, r2, #2
 800e074:	f000 fb76 	bl	800e764 <_calloc_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	d00c      	beq.n	800e096 <_Balloc+0x6e>
 800e07c:	6044      	str	r4, [r0, #4]
 800e07e:	6085      	str	r5, [r0, #8]
 800e080:	e00d      	b.n	800e09e <_Balloc+0x76>
 800e082:	2221      	movs	r2, #33	; 0x21
 800e084:	2104      	movs	r1, #4
 800e086:	0030      	movs	r0, r6
 800e088:	f000 fb6c 	bl	800e764 <_calloc_r>
 800e08c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e08e:	60e8      	str	r0, [r5, #12]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1e1      	bne.n	800e05a <_Balloc+0x32>
 800e096:	2000      	movs	r0, #0
 800e098:	bd70      	pop	{r4, r5, r6, pc}
 800e09a:	6802      	ldr	r2, [r0, #0]
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	6103      	str	r3, [r0, #16]
 800e0a2:	60c3      	str	r3, [r0, #12]
 800e0a4:	e7f8      	b.n	800e098 <_Balloc+0x70>
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	080124b1 	.word	0x080124b1
 800e0ac:	08012538 	.word	0x08012538

0800e0b0 <_Bfree>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0b4:	0005      	movs	r5, r0
 800e0b6:	000c      	movs	r4, r1
 800e0b8:	2e00      	cmp	r6, #0
 800e0ba:	d10e      	bne.n	800e0da <_Bfree+0x2a>
 800e0bc:	2010      	movs	r0, #16
 800e0be:	f7ff ff95 	bl	800dfec <malloc>
 800e0c2:	1e02      	subs	r2, r0, #0
 800e0c4:	6268      	str	r0, [r5, #36]	; 0x24
 800e0c6:	d104      	bne.n	800e0d2 <_Bfree+0x22>
 800e0c8:	218a      	movs	r1, #138	; 0x8a
 800e0ca:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <_Bfree+0x40>)
 800e0cc:	4809      	ldr	r0, [pc, #36]	; (800e0f4 <_Bfree+0x44>)
 800e0ce:	f000 fd73 	bl	800ebb8 <__assert_func>
 800e0d2:	6046      	str	r6, [r0, #4]
 800e0d4:	6086      	str	r6, [r0, #8]
 800e0d6:	6006      	str	r6, [r0, #0]
 800e0d8:	60c6      	str	r6, [r0, #12]
 800e0da:	2c00      	cmp	r4, #0
 800e0dc:	d007      	beq.n	800e0ee <_Bfree+0x3e>
 800e0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0e0:	6862      	ldr	r2, [r4, #4]
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	189b      	adds	r3, r3, r2
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	6022      	str	r2, [r4, #0]
 800e0ec:	601c      	str	r4, [r3, #0]
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	080124b1 	.word	0x080124b1
 800e0f4:	08012538 	.word	0x08012538

0800e0f8 <__multadd>:
 800e0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0fa:	000e      	movs	r6, r1
 800e0fc:	9001      	str	r0, [sp, #4]
 800e0fe:	000c      	movs	r4, r1
 800e100:	001d      	movs	r5, r3
 800e102:	2000      	movs	r0, #0
 800e104:	690f      	ldr	r7, [r1, #16]
 800e106:	3614      	adds	r6, #20
 800e108:	6833      	ldr	r3, [r6, #0]
 800e10a:	3001      	adds	r0, #1
 800e10c:	b299      	uxth	r1, r3
 800e10e:	4351      	muls	r1, r2
 800e110:	0c1b      	lsrs	r3, r3, #16
 800e112:	4353      	muls	r3, r2
 800e114:	1949      	adds	r1, r1, r5
 800e116:	0c0d      	lsrs	r5, r1, #16
 800e118:	195b      	adds	r3, r3, r5
 800e11a:	0c1d      	lsrs	r5, r3, #16
 800e11c:	b289      	uxth	r1, r1
 800e11e:	041b      	lsls	r3, r3, #16
 800e120:	185b      	adds	r3, r3, r1
 800e122:	c608      	stmia	r6!, {r3}
 800e124:	4287      	cmp	r7, r0
 800e126:	dcef      	bgt.n	800e108 <__multadd+0x10>
 800e128:	2d00      	cmp	r5, #0
 800e12a:	d022      	beq.n	800e172 <__multadd+0x7a>
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	42bb      	cmp	r3, r7
 800e130:	dc19      	bgt.n	800e166 <__multadd+0x6e>
 800e132:	6863      	ldr	r3, [r4, #4]
 800e134:	9801      	ldr	r0, [sp, #4]
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	f7ff ff76 	bl	800e028 <_Balloc>
 800e13c:	1e06      	subs	r6, r0, #0
 800e13e:	d105      	bne.n	800e14c <__multadd+0x54>
 800e140:	0002      	movs	r2, r0
 800e142:	21b5      	movs	r1, #181	; 0xb5
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <__multadd+0x80>)
 800e146:	480d      	ldr	r0, [pc, #52]	; (800e17c <__multadd+0x84>)
 800e148:	f000 fd36 	bl	800ebb8 <__assert_func>
 800e14c:	0021      	movs	r1, r4
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	310c      	adds	r1, #12
 800e152:	1c9a      	adds	r2, r3, #2
 800e154:	0092      	lsls	r2, r2, #2
 800e156:	300c      	adds	r0, #12
 800e158:	f7ff ff5d 	bl	800e016 <memcpy>
 800e15c:	0021      	movs	r1, r4
 800e15e:	9801      	ldr	r0, [sp, #4]
 800e160:	f7ff ffa6 	bl	800e0b0 <_Bfree>
 800e164:	0034      	movs	r4, r6
 800e166:	1d3b      	adds	r3, r7, #4
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	18e3      	adds	r3, r4, r3
 800e16c:	605d      	str	r5, [r3, #4]
 800e16e:	1c7b      	adds	r3, r7, #1
 800e170:	6123      	str	r3, [r4, #16]
 800e172:	0020      	movs	r0, r4
 800e174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e176:	46c0      	nop			; (mov r8, r8)
 800e178:	08012527 	.word	0x08012527
 800e17c:	08012538 	.word	0x08012538

0800e180 <__hi0bits>:
 800e180:	0003      	movs	r3, r0
 800e182:	0c02      	lsrs	r2, r0, #16
 800e184:	2000      	movs	r0, #0
 800e186:	4282      	cmp	r2, r0
 800e188:	d101      	bne.n	800e18e <__hi0bits+0xe>
 800e18a:	041b      	lsls	r3, r3, #16
 800e18c:	3010      	adds	r0, #16
 800e18e:	0e1a      	lsrs	r2, r3, #24
 800e190:	d101      	bne.n	800e196 <__hi0bits+0x16>
 800e192:	3008      	adds	r0, #8
 800e194:	021b      	lsls	r3, r3, #8
 800e196:	0f1a      	lsrs	r2, r3, #28
 800e198:	d101      	bne.n	800e19e <__hi0bits+0x1e>
 800e19a:	3004      	adds	r0, #4
 800e19c:	011b      	lsls	r3, r3, #4
 800e19e:	0f9a      	lsrs	r2, r3, #30
 800e1a0:	d101      	bne.n	800e1a6 <__hi0bits+0x26>
 800e1a2:	3002      	adds	r0, #2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	db03      	blt.n	800e1b2 <__hi0bits+0x32>
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	d400      	bmi.n	800e1b2 <__hi0bits+0x32>
 800e1b0:	2020      	movs	r0, #32
 800e1b2:	4770      	bx	lr

0800e1b4 <__lo0bits>:
 800e1b4:	6803      	ldr	r3, [r0, #0]
 800e1b6:	0002      	movs	r2, r0
 800e1b8:	2107      	movs	r1, #7
 800e1ba:	0018      	movs	r0, r3
 800e1bc:	4008      	ands	r0, r1
 800e1be:	420b      	tst	r3, r1
 800e1c0:	d00d      	beq.n	800e1de <__lo0bits+0x2a>
 800e1c2:	3906      	subs	r1, #6
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	420b      	tst	r3, r1
 800e1c8:	d105      	bne.n	800e1d6 <__lo0bits+0x22>
 800e1ca:	3002      	adds	r0, #2
 800e1cc:	4203      	tst	r3, r0
 800e1ce:	d003      	beq.n	800e1d8 <__lo0bits+0x24>
 800e1d0:	40cb      	lsrs	r3, r1
 800e1d2:	0008      	movs	r0, r1
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	4770      	bx	lr
 800e1d8:	089b      	lsrs	r3, r3, #2
 800e1da:	6013      	str	r3, [r2, #0]
 800e1dc:	e7fb      	b.n	800e1d6 <__lo0bits+0x22>
 800e1de:	b299      	uxth	r1, r3
 800e1e0:	2900      	cmp	r1, #0
 800e1e2:	d101      	bne.n	800e1e8 <__lo0bits+0x34>
 800e1e4:	2010      	movs	r0, #16
 800e1e6:	0c1b      	lsrs	r3, r3, #16
 800e1e8:	b2d9      	uxtb	r1, r3
 800e1ea:	2900      	cmp	r1, #0
 800e1ec:	d101      	bne.n	800e1f2 <__lo0bits+0x3e>
 800e1ee:	3008      	adds	r0, #8
 800e1f0:	0a1b      	lsrs	r3, r3, #8
 800e1f2:	0719      	lsls	r1, r3, #28
 800e1f4:	d101      	bne.n	800e1fa <__lo0bits+0x46>
 800e1f6:	3004      	adds	r0, #4
 800e1f8:	091b      	lsrs	r3, r3, #4
 800e1fa:	0799      	lsls	r1, r3, #30
 800e1fc:	d101      	bne.n	800e202 <__lo0bits+0x4e>
 800e1fe:	3002      	adds	r0, #2
 800e200:	089b      	lsrs	r3, r3, #2
 800e202:	07d9      	lsls	r1, r3, #31
 800e204:	d4e9      	bmi.n	800e1da <__lo0bits+0x26>
 800e206:	3001      	adds	r0, #1
 800e208:	085b      	lsrs	r3, r3, #1
 800e20a:	d1e6      	bne.n	800e1da <__lo0bits+0x26>
 800e20c:	2020      	movs	r0, #32
 800e20e:	e7e2      	b.n	800e1d6 <__lo0bits+0x22>

0800e210 <__i2b>:
 800e210:	b510      	push	{r4, lr}
 800e212:	000c      	movs	r4, r1
 800e214:	2101      	movs	r1, #1
 800e216:	f7ff ff07 	bl	800e028 <_Balloc>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d106      	bne.n	800e22c <__i2b+0x1c>
 800e21e:	21a0      	movs	r1, #160	; 0xa0
 800e220:	0002      	movs	r2, r0
 800e222:	4b04      	ldr	r3, [pc, #16]	; (800e234 <__i2b+0x24>)
 800e224:	4804      	ldr	r0, [pc, #16]	; (800e238 <__i2b+0x28>)
 800e226:	0049      	lsls	r1, r1, #1
 800e228:	f000 fcc6 	bl	800ebb8 <__assert_func>
 800e22c:	2301      	movs	r3, #1
 800e22e:	6144      	str	r4, [r0, #20]
 800e230:	6103      	str	r3, [r0, #16]
 800e232:	bd10      	pop	{r4, pc}
 800e234:	08012527 	.word	0x08012527
 800e238:	08012538 	.word	0x08012538

0800e23c <__multiply>:
 800e23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23e:	690b      	ldr	r3, [r1, #16]
 800e240:	0014      	movs	r4, r2
 800e242:	6912      	ldr	r2, [r2, #16]
 800e244:	000d      	movs	r5, r1
 800e246:	b089      	sub	sp, #36	; 0x24
 800e248:	4293      	cmp	r3, r2
 800e24a:	da01      	bge.n	800e250 <__multiply+0x14>
 800e24c:	0025      	movs	r5, r4
 800e24e:	000c      	movs	r4, r1
 800e250:	692f      	ldr	r7, [r5, #16]
 800e252:	6926      	ldr	r6, [r4, #16]
 800e254:	6869      	ldr	r1, [r5, #4]
 800e256:	19bb      	adds	r3, r7, r6
 800e258:	9302      	str	r3, [sp, #8]
 800e25a:	68ab      	ldr	r3, [r5, #8]
 800e25c:	19ba      	adds	r2, r7, r6
 800e25e:	4293      	cmp	r3, r2
 800e260:	da00      	bge.n	800e264 <__multiply+0x28>
 800e262:	3101      	adds	r1, #1
 800e264:	f7ff fee0 	bl	800e028 <_Balloc>
 800e268:	9001      	str	r0, [sp, #4]
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d106      	bne.n	800e27c <__multiply+0x40>
 800e26e:	215e      	movs	r1, #94	; 0x5e
 800e270:	0002      	movs	r2, r0
 800e272:	4b48      	ldr	r3, [pc, #288]	; (800e394 <__multiply+0x158>)
 800e274:	4848      	ldr	r0, [pc, #288]	; (800e398 <__multiply+0x15c>)
 800e276:	31ff      	adds	r1, #255	; 0xff
 800e278:	f000 fc9e 	bl	800ebb8 <__assert_func>
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	3314      	adds	r3, #20
 800e282:	469c      	mov	ip, r3
 800e284:	19bb      	adds	r3, r7, r6
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4463      	add	r3, ip
 800e28a:	9303      	str	r3, [sp, #12]
 800e28c:	4663      	mov	r3, ip
 800e28e:	9903      	ldr	r1, [sp, #12]
 800e290:	428b      	cmp	r3, r1
 800e292:	d32c      	bcc.n	800e2ee <__multiply+0xb2>
 800e294:	002b      	movs	r3, r5
 800e296:	0022      	movs	r2, r4
 800e298:	3314      	adds	r3, #20
 800e29a:	00bf      	lsls	r7, r7, #2
 800e29c:	3214      	adds	r2, #20
 800e29e:	9306      	str	r3, [sp, #24]
 800e2a0:	00b6      	lsls	r6, r6, #2
 800e2a2:	19db      	adds	r3, r3, r7
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	1993      	adds	r3, r2, r6
 800e2a8:	9307      	str	r3, [sp, #28]
 800e2aa:	2304      	movs	r3, #4
 800e2ac:	9305      	str	r3, [sp, #20]
 800e2ae:	002b      	movs	r3, r5
 800e2b0:	9904      	ldr	r1, [sp, #16]
 800e2b2:	3315      	adds	r3, #21
 800e2b4:	9200      	str	r2, [sp, #0]
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	d305      	bcc.n	800e2c6 <__multiply+0x8a>
 800e2ba:	1b4b      	subs	r3, r1, r5
 800e2bc:	3b15      	subs	r3, #21
 800e2be:	089b      	lsrs	r3, r3, #2
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	9305      	str	r3, [sp, #20]
 800e2c6:	9b07      	ldr	r3, [sp, #28]
 800e2c8:	9a00      	ldr	r2, [sp, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d311      	bcc.n	800e2f2 <__multiply+0xb6>
 800e2ce:	9b02      	ldr	r3, [sp, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dd06      	ble.n	800e2e2 <__multiply+0xa6>
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	3b04      	subs	r3, #4
 800e2d8:	9303      	str	r3, [sp, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d054      	beq.n	800e38c <__multiply+0x150>
 800e2e2:	9b01      	ldr	r3, [sp, #4]
 800e2e4:	9a02      	ldr	r2, [sp, #8]
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	611a      	str	r2, [r3, #16]
 800e2ea:	b009      	add	sp, #36	; 0x24
 800e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ee:	c304      	stmia	r3!, {r2}
 800e2f0:	e7cd      	b.n	800e28e <__multiply+0x52>
 800e2f2:	9b00      	ldr	r3, [sp, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	b298      	uxth	r0, r3
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d01c      	beq.n	800e336 <__multiply+0xfa>
 800e2fc:	4667      	mov	r7, ip
 800e2fe:	2400      	movs	r4, #0
 800e300:	9e06      	ldr	r6, [sp, #24]
 800e302:	ce02      	ldmia	r6!, {r1}
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	b28b      	uxth	r3, r1
 800e308:	4343      	muls	r3, r0
 800e30a:	0c09      	lsrs	r1, r1, #16
 800e30c:	4341      	muls	r1, r0
 800e30e:	b292      	uxth	r2, r2
 800e310:	189b      	adds	r3, r3, r2
 800e312:	191b      	adds	r3, r3, r4
 800e314:	000c      	movs	r4, r1
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	0c11      	lsrs	r1, r2, #16
 800e31a:	1861      	adds	r1, r4, r1
 800e31c:	0c1c      	lsrs	r4, r3, #16
 800e31e:	1909      	adds	r1, r1, r4
 800e320:	0c0c      	lsrs	r4, r1, #16
 800e322:	b29b      	uxth	r3, r3
 800e324:	0409      	lsls	r1, r1, #16
 800e326:	430b      	orrs	r3, r1
 800e328:	c708      	stmia	r7!, {r3}
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	42b3      	cmp	r3, r6
 800e32e:	d8e8      	bhi.n	800e302 <__multiply+0xc6>
 800e330:	4663      	mov	r3, ip
 800e332:	9a05      	ldr	r2, [sp, #20]
 800e334:	509c      	str	r4, [r3, r2]
 800e336:	9b00      	ldr	r3, [sp, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	0c1e      	lsrs	r6, r3, #16
 800e33c:	d020      	beq.n	800e380 <__multiply+0x144>
 800e33e:	4663      	mov	r3, ip
 800e340:	002c      	movs	r4, r5
 800e342:	4660      	mov	r0, ip
 800e344:	2700      	movs	r7, #0
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3414      	adds	r4, #20
 800e34a:	6822      	ldr	r2, [r4, #0]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	b291      	uxth	r1, r2
 800e350:	4371      	muls	r1, r6
 800e352:	6802      	ldr	r2, [r0, #0]
 800e354:	0c12      	lsrs	r2, r2, #16
 800e356:	1889      	adds	r1, r1, r2
 800e358:	19cf      	adds	r7, r1, r7
 800e35a:	0439      	lsls	r1, r7, #16
 800e35c:	430b      	orrs	r3, r1
 800e35e:	6003      	str	r3, [r0, #0]
 800e360:	cc02      	ldmia	r4!, {r1}
 800e362:	6843      	ldr	r3, [r0, #4]
 800e364:	0c09      	lsrs	r1, r1, #16
 800e366:	4371      	muls	r1, r6
 800e368:	b29b      	uxth	r3, r3
 800e36a:	0c3f      	lsrs	r7, r7, #16
 800e36c:	18cb      	adds	r3, r1, r3
 800e36e:	9a04      	ldr	r2, [sp, #16]
 800e370:	19db      	adds	r3, r3, r7
 800e372:	0c1f      	lsrs	r7, r3, #16
 800e374:	3004      	adds	r0, #4
 800e376:	42a2      	cmp	r2, r4
 800e378:	d8e7      	bhi.n	800e34a <__multiply+0x10e>
 800e37a:	4662      	mov	r2, ip
 800e37c:	9905      	ldr	r1, [sp, #20]
 800e37e:	5053      	str	r3, [r2, r1]
 800e380:	9b00      	ldr	r3, [sp, #0]
 800e382:	3304      	adds	r3, #4
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	2304      	movs	r3, #4
 800e388:	449c      	add	ip, r3
 800e38a:	e79c      	b.n	800e2c6 <__multiply+0x8a>
 800e38c:	9b02      	ldr	r3, [sp, #8]
 800e38e:	3b01      	subs	r3, #1
 800e390:	9302      	str	r3, [sp, #8]
 800e392:	e79c      	b.n	800e2ce <__multiply+0x92>
 800e394:	08012527 	.word	0x08012527
 800e398:	08012538 	.word	0x08012538

0800e39c <__pow5mult>:
 800e39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e39e:	2303      	movs	r3, #3
 800e3a0:	0015      	movs	r5, r2
 800e3a2:	0007      	movs	r7, r0
 800e3a4:	000e      	movs	r6, r1
 800e3a6:	401a      	ands	r2, r3
 800e3a8:	421d      	tst	r5, r3
 800e3aa:	d008      	beq.n	800e3be <__pow5mult+0x22>
 800e3ac:	4925      	ldr	r1, [pc, #148]	; (800e444 <__pow5mult+0xa8>)
 800e3ae:	3a01      	subs	r2, #1
 800e3b0:	0092      	lsls	r2, r2, #2
 800e3b2:	5852      	ldr	r2, [r2, r1]
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	0031      	movs	r1, r6
 800e3b8:	f7ff fe9e 	bl	800e0f8 <__multadd>
 800e3bc:	0006      	movs	r6, r0
 800e3be:	10ad      	asrs	r5, r5, #2
 800e3c0:	d03d      	beq.n	800e43e <__pow5mult+0xa2>
 800e3c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e3c4:	2c00      	cmp	r4, #0
 800e3c6:	d10f      	bne.n	800e3e8 <__pow5mult+0x4c>
 800e3c8:	2010      	movs	r0, #16
 800e3ca:	f7ff fe0f 	bl	800dfec <malloc>
 800e3ce:	1e02      	subs	r2, r0, #0
 800e3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800e3d2:	d105      	bne.n	800e3e0 <__pow5mult+0x44>
 800e3d4:	21d7      	movs	r1, #215	; 0xd7
 800e3d6:	4b1c      	ldr	r3, [pc, #112]	; (800e448 <__pow5mult+0xac>)
 800e3d8:	481c      	ldr	r0, [pc, #112]	; (800e44c <__pow5mult+0xb0>)
 800e3da:	0049      	lsls	r1, r1, #1
 800e3dc:	f000 fbec 	bl	800ebb8 <__assert_func>
 800e3e0:	6044      	str	r4, [r0, #4]
 800e3e2:	6084      	str	r4, [r0, #8]
 800e3e4:	6004      	str	r4, [r0, #0]
 800e3e6:	60c4      	str	r4, [r0, #12]
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	689c      	ldr	r4, [r3, #8]
 800e3ec:	9301      	str	r3, [sp, #4]
 800e3ee:	2c00      	cmp	r4, #0
 800e3f0:	d108      	bne.n	800e404 <__pow5mult+0x68>
 800e3f2:	0038      	movs	r0, r7
 800e3f4:	4916      	ldr	r1, [pc, #88]	; (800e450 <__pow5mult+0xb4>)
 800e3f6:	f7ff ff0b 	bl	800e210 <__i2b>
 800e3fa:	9b01      	ldr	r3, [sp, #4]
 800e3fc:	0004      	movs	r4, r0
 800e3fe:	6098      	str	r0, [r3, #8]
 800e400:	2300      	movs	r3, #0
 800e402:	6003      	str	r3, [r0, #0]
 800e404:	2301      	movs	r3, #1
 800e406:	421d      	tst	r5, r3
 800e408:	d00a      	beq.n	800e420 <__pow5mult+0x84>
 800e40a:	0031      	movs	r1, r6
 800e40c:	0022      	movs	r2, r4
 800e40e:	0038      	movs	r0, r7
 800e410:	f7ff ff14 	bl	800e23c <__multiply>
 800e414:	0031      	movs	r1, r6
 800e416:	9001      	str	r0, [sp, #4]
 800e418:	0038      	movs	r0, r7
 800e41a:	f7ff fe49 	bl	800e0b0 <_Bfree>
 800e41e:	9e01      	ldr	r6, [sp, #4]
 800e420:	106d      	asrs	r5, r5, #1
 800e422:	d00c      	beq.n	800e43e <__pow5mult+0xa2>
 800e424:	6820      	ldr	r0, [r4, #0]
 800e426:	2800      	cmp	r0, #0
 800e428:	d107      	bne.n	800e43a <__pow5mult+0x9e>
 800e42a:	0022      	movs	r2, r4
 800e42c:	0021      	movs	r1, r4
 800e42e:	0038      	movs	r0, r7
 800e430:	f7ff ff04 	bl	800e23c <__multiply>
 800e434:	2300      	movs	r3, #0
 800e436:	6020      	str	r0, [r4, #0]
 800e438:	6003      	str	r3, [r0, #0]
 800e43a:	0004      	movs	r4, r0
 800e43c:	e7e2      	b.n	800e404 <__pow5mult+0x68>
 800e43e:	0030      	movs	r0, r6
 800e440:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	08012688 	.word	0x08012688
 800e448:	080124b1 	.word	0x080124b1
 800e44c:	08012538 	.word	0x08012538
 800e450:	00000271 	.word	0x00000271

0800e454 <__lshift>:
 800e454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e456:	000c      	movs	r4, r1
 800e458:	0017      	movs	r7, r2
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	1155      	asrs	r5, r2, #5
 800e45e:	b087      	sub	sp, #28
 800e460:	18eb      	adds	r3, r5, r3
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	3301      	adds	r3, #1
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	6849      	ldr	r1, [r1, #4]
 800e46a:	68a3      	ldr	r3, [r4, #8]
 800e46c:	9004      	str	r0, [sp, #16]
 800e46e:	9a01      	ldr	r2, [sp, #4]
 800e470:	4293      	cmp	r3, r2
 800e472:	db11      	blt.n	800e498 <__lshift+0x44>
 800e474:	9804      	ldr	r0, [sp, #16]
 800e476:	f7ff fdd7 	bl	800e028 <_Balloc>
 800e47a:	0002      	movs	r2, r0
 800e47c:	2300      	movs	r3, #0
 800e47e:	3214      	adds	r2, #20
 800e480:	0006      	movs	r6, r0
 800e482:	0011      	movs	r1, r2
 800e484:	9203      	str	r2, [sp, #12]
 800e486:	4298      	cmp	r0, r3
 800e488:	d10d      	bne.n	800e4a6 <__lshift+0x52>
 800e48a:	21da      	movs	r1, #218	; 0xda
 800e48c:	0002      	movs	r2, r0
 800e48e:	4b27      	ldr	r3, [pc, #156]	; (800e52c <__lshift+0xd8>)
 800e490:	4827      	ldr	r0, [pc, #156]	; (800e530 <__lshift+0xdc>)
 800e492:	31ff      	adds	r1, #255	; 0xff
 800e494:	f000 fb90 	bl	800ebb8 <__assert_func>
 800e498:	3101      	adds	r1, #1
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	e7e7      	b.n	800e46e <__lshift+0x1a>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	0098      	lsls	r0, r3, #2
 800e4a2:	500a      	str	r2, [r1, r0]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	42ab      	cmp	r3, r5
 800e4a8:	dbf9      	blt.n	800e49e <__lshift+0x4a>
 800e4aa:	43eb      	mvns	r3, r5
 800e4ac:	17db      	asrs	r3, r3, #31
 800e4ae:	401d      	ands	r5, r3
 800e4b0:	9b03      	ldr	r3, [sp, #12]
 800e4b2:	00ad      	lsls	r5, r5, #2
 800e4b4:	211f      	movs	r1, #31
 800e4b6:	0038      	movs	r0, r7
 800e4b8:	195d      	adds	r5, r3, r5
 800e4ba:	0023      	movs	r3, r4
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	3314      	adds	r3, #20
 800e4c0:	0092      	lsls	r2, r2, #2
 800e4c2:	4008      	ands	r0, r1
 800e4c4:	4684      	mov	ip, r0
 800e4c6:	189a      	adds	r2, r3, r2
 800e4c8:	420f      	tst	r7, r1
 800e4ca:	d02a      	beq.n	800e522 <__lshift+0xce>
 800e4cc:	3101      	adds	r1, #1
 800e4ce:	1a09      	subs	r1, r1, r0
 800e4d0:	9105      	str	r1, [sp, #20]
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	9503      	str	r5, [sp, #12]
 800e4d6:	4667      	mov	r7, ip
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	40b8      	lsls	r0, r7
 800e4dc:	4301      	orrs	r1, r0
 800e4de:	9803      	ldr	r0, [sp, #12]
 800e4e0:	c002      	stmia	r0!, {r1}
 800e4e2:	cb02      	ldmia	r3!, {r1}
 800e4e4:	9003      	str	r0, [sp, #12]
 800e4e6:	9805      	ldr	r0, [sp, #20]
 800e4e8:	40c1      	lsrs	r1, r0
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d8f3      	bhi.n	800e4d6 <__lshift+0x82>
 800e4ee:	0020      	movs	r0, r4
 800e4f0:	3015      	adds	r0, #21
 800e4f2:	2304      	movs	r3, #4
 800e4f4:	4282      	cmp	r2, r0
 800e4f6:	d304      	bcc.n	800e502 <__lshift+0xae>
 800e4f8:	1b13      	subs	r3, r2, r4
 800e4fa:	3b15      	subs	r3, #21
 800e4fc:	089b      	lsrs	r3, r3, #2
 800e4fe:	3301      	adds	r3, #1
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	50e9      	str	r1, [r5, r3]
 800e504:	2900      	cmp	r1, #0
 800e506:	d002      	beq.n	800e50e <__lshift+0xba>
 800e508:	9b02      	ldr	r3, [sp, #8]
 800e50a:	3302      	adds	r3, #2
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	9b01      	ldr	r3, [sp, #4]
 800e510:	9804      	ldr	r0, [sp, #16]
 800e512:	3b01      	subs	r3, #1
 800e514:	0021      	movs	r1, r4
 800e516:	6133      	str	r3, [r6, #16]
 800e518:	f7ff fdca 	bl	800e0b0 <_Bfree>
 800e51c:	0030      	movs	r0, r6
 800e51e:	b007      	add	sp, #28
 800e520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e522:	cb02      	ldmia	r3!, {r1}
 800e524:	c502      	stmia	r5!, {r1}
 800e526:	429a      	cmp	r2, r3
 800e528:	d8fb      	bhi.n	800e522 <__lshift+0xce>
 800e52a:	e7f0      	b.n	800e50e <__lshift+0xba>
 800e52c:	08012527 	.word	0x08012527
 800e530:	08012538 	.word	0x08012538

0800e534 <__mcmp>:
 800e534:	6902      	ldr	r2, [r0, #16]
 800e536:	690b      	ldr	r3, [r1, #16]
 800e538:	b530      	push	{r4, r5, lr}
 800e53a:	0004      	movs	r4, r0
 800e53c:	1ad0      	subs	r0, r2, r3
 800e53e:	429a      	cmp	r2, r3
 800e540:	d10d      	bne.n	800e55e <__mcmp+0x2a>
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	3414      	adds	r4, #20
 800e546:	3114      	adds	r1, #20
 800e548:	18e2      	adds	r2, r4, r3
 800e54a:	18c9      	adds	r1, r1, r3
 800e54c:	3a04      	subs	r2, #4
 800e54e:	3904      	subs	r1, #4
 800e550:	6815      	ldr	r5, [r2, #0]
 800e552:	680b      	ldr	r3, [r1, #0]
 800e554:	429d      	cmp	r5, r3
 800e556:	d003      	beq.n	800e560 <__mcmp+0x2c>
 800e558:	2001      	movs	r0, #1
 800e55a:	429d      	cmp	r5, r3
 800e55c:	d303      	bcc.n	800e566 <__mcmp+0x32>
 800e55e:	bd30      	pop	{r4, r5, pc}
 800e560:	4294      	cmp	r4, r2
 800e562:	d3f3      	bcc.n	800e54c <__mcmp+0x18>
 800e564:	e7fb      	b.n	800e55e <__mcmp+0x2a>
 800e566:	4240      	negs	r0, r0
 800e568:	e7f9      	b.n	800e55e <__mcmp+0x2a>
	...

0800e56c <__mdiff>:
 800e56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56e:	000e      	movs	r6, r1
 800e570:	0007      	movs	r7, r0
 800e572:	0011      	movs	r1, r2
 800e574:	0030      	movs	r0, r6
 800e576:	b087      	sub	sp, #28
 800e578:	0014      	movs	r4, r2
 800e57a:	f7ff ffdb 	bl	800e534 <__mcmp>
 800e57e:	1e05      	subs	r5, r0, #0
 800e580:	d110      	bne.n	800e5a4 <__mdiff+0x38>
 800e582:	0001      	movs	r1, r0
 800e584:	0038      	movs	r0, r7
 800e586:	f7ff fd4f 	bl	800e028 <_Balloc>
 800e58a:	1e02      	subs	r2, r0, #0
 800e58c:	d104      	bne.n	800e598 <__mdiff+0x2c>
 800e58e:	4b40      	ldr	r3, [pc, #256]	; (800e690 <__mdiff+0x124>)
 800e590:	4940      	ldr	r1, [pc, #256]	; (800e694 <__mdiff+0x128>)
 800e592:	4841      	ldr	r0, [pc, #260]	; (800e698 <__mdiff+0x12c>)
 800e594:	f000 fb10 	bl	800ebb8 <__assert_func>
 800e598:	2301      	movs	r3, #1
 800e59a:	6145      	str	r5, [r0, #20]
 800e59c:	6103      	str	r3, [r0, #16]
 800e59e:	0010      	movs	r0, r2
 800e5a0:	b007      	add	sp, #28
 800e5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	db04      	blt.n	800e5b6 <__mdiff+0x4a>
 800e5ac:	0023      	movs	r3, r4
 800e5ae:	0034      	movs	r4, r6
 800e5b0:	001e      	movs	r6, r3
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	9301      	str	r3, [sp, #4]
 800e5b6:	0038      	movs	r0, r7
 800e5b8:	6861      	ldr	r1, [r4, #4]
 800e5ba:	f7ff fd35 	bl	800e028 <_Balloc>
 800e5be:	1e02      	subs	r2, r0, #0
 800e5c0:	d103      	bne.n	800e5ca <__mdiff+0x5e>
 800e5c2:	2190      	movs	r1, #144	; 0x90
 800e5c4:	4b32      	ldr	r3, [pc, #200]	; (800e690 <__mdiff+0x124>)
 800e5c6:	0089      	lsls	r1, r1, #2
 800e5c8:	e7e3      	b.n	800e592 <__mdiff+0x26>
 800e5ca:	9b01      	ldr	r3, [sp, #4]
 800e5cc:	2700      	movs	r7, #0
 800e5ce:	60c3      	str	r3, [r0, #12]
 800e5d0:	6920      	ldr	r0, [r4, #16]
 800e5d2:	3414      	adds	r4, #20
 800e5d4:	9401      	str	r4, [sp, #4]
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	0084      	lsls	r4, r0, #2
 800e5da:	191b      	adds	r3, r3, r4
 800e5dc:	0034      	movs	r4, r6
 800e5de:	9302      	str	r3, [sp, #8]
 800e5e0:	6933      	ldr	r3, [r6, #16]
 800e5e2:	3414      	adds	r4, #20
 800e5e4:	0099      	lsls	r1, r3, #2
 800e5e6:	1863      	adds	r3, r4, r1
 800e5e8:	9303      	str	r3, [sp, #12]
 800e5ea:	0013      	movs	r3, r2
 800e5ec:	3314      	adds	r3, #20
 800e5ee:	469c      	mov	ip, r3
 800e5f0:	9305      	str	r3, [sp, #20]
 800e5f2:	9b01      	ldr	r3, [sp, #4]
 800e5f4:	9304      	str	r3, [sp, #16]
 800e5f6:	9b04      	ldr	r3, [sp, #16]
 800e5f8:	cc02      	ldmia	r4!, {r1}
 800e5fa:	cb20      	ldmia	r3!, {r5}
 800e5fc:	9304      	str	r3, [sp, #16]
 800e5fe:	b2ab      	uxth	r3, r5
 800e600:	19df      	adds	r7, r3, r7
 800e602:	b28b      	uxth	r3, r1
 800e604:	1afb      	subs	r3, r7, r3
 800e606:	0c2d      	lsrs	r5, r5, #16
 800e608:	0c09      	lsrs	r1, r1, #16
 800e60a:	1a69      	subs	r1, r5, r1
 800e60c:	141d      	asrs	r5, r3, #16
 800e60e:	1949      	adds	r1, r1, r5
 800e610:	140f      	asrs	r7, r1, #16
 800e612:	b29b      	uxth	r3, r3
 800e614:	0409      	lsls	r1, r1, #16
 800e616:	430b      	orrs	r3, r1
 800e618:	4661      	mov	r1, ip
 800e61a:	c108      	stmia	r1!, {r3}
 800e61c:	9b03      	ldr	r3, [sp, #12]
 800e61e:	468c      	mov	ip, r1
 800e620:	42a3      	cmp	r3, r4
 800e622:	d8e8      	bhi.n	800e5f6 <__mdiff+0x8a>
 800e624:	0031      	movs	r1, r6
 800e626:	9c03      	ldr	r4, [sp, #12]
 800e628:	3115      	adds	r1, #21
 800e62a:	2304      	movs	r3, #4
 800e62c:	428c      	cmp	r4, r1
 800e62e:	d304      	bcc.n	800e63a <__mdiff+0xce>
 800e630:	1ba3      	subs	r3, r4, r6
 800e632:	3b15      	subs	r3, #21
 800e634:	089b      	lsrs	r3, r3, #2
 800e636:	3301      	adds	r3, #1
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	9901      	ldr	r1, [sp, #4]
 800e63c:	18cc      	adds	r4, r1, r3
 800e63e:	9905      	ldr	r1, [sp, #20]
 800e640:	0026      	movs	r6, r4
 800e642:	18cb      	adds	r3, r1, r3
 800e644:	469c      	mov	ip, r3
 800e646:	9902      	ldr	r1, [sp, #8]
 800e648:	428e      	cmp	r6, r1
 800e64a:	d310      	bcc.n	800e66e <__mdiff+0x102>
 800e64c:	9e02      	ldr	r6, [sp, #8]
 800e64e:	1ee5      	subs	r5, r4, #3
 800e650:	2100      	movs	r1, #0
 800e652:	42ae      	cmp	r6, r5
 800e654:	d304      	bcc.n	800e660 <__mdiff+0xf4>
 800e656:	0031      	movs	r1, r6
 800e658:	3103      	adds	r1, #3
 800e65a:	1b09      	subs	r1, r1, r4
 800e65c:	0889      	lsrs	r1, r1, #2
 800e65e:	0089      	lsls	r1, r1, #2
 800e660:	185b      	adds	r3, r3, r1
 800e662:	3b04      	subs	r3, #4
 800e664:	6819      	ldr	r1, [r3, #0]
 800e666:	2900      	cmp	r1, #0
 800e668:	d00f      	beq.n	800e68a <__mdiff+0x11e>
 800e66a:	6110      	str	r0, [r2, #16]
 800e66c:	e797      	b.n	800e59e <__mdiff+0x32>
 800e66e:	ce02      	ldmia	r6!, {r1}
 800e670:	b28d      	uxth	r5, r1
 800e672:	19ed      	adds	r5, r5, r7
 800e674:	0c0f      	lsrs	r7, r1, #16
 800e676:	1429      	asrs	r1, r5, #16
 800e678:	1879      	adds	r1, r7, r1
 800e67a:	140f      	asrs	r7, r1, #16
 800e67c:	b2ad      	uxth	r5, r5
 800e67e:	0409      	lsls	r1, r1, #16
 800e680:	430d      	orrs	r5, r1
 800e682:	4661      	mov	r1, ip
 800e684:	c120      	stmia	r1!, {r5}
 800e686:	468c      	mov	ip, r1
 800e688:	e7dd      	b.n	800e646 <__mdiff+0xda>
 800e68a:	3801      	subs	r0, #1
 800e68c:	e7e9      	b.n	800e662 <__mdiff+0xf6>
 800e68e:	46c0      	nop			; (mov r8, r8)
 800e690:	08012527 	.word	0x08012527
 800e694:	00000232 	.word	0x00000232
 800e698:	08012538 	.word	0x08012538

0800e69c <__d2b>:
 800e69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e69e:	2101      	movs	r1, #1
 800e6a0:	0014      	movs	r4, r2
 800e6a2:	001e      	movs	r6, r3
 800e6a4:	9f08      	ldr	r7, [sp, #32]
 800e6a6:	f7ff fcbf 	bl	800e028 <_Balloc>
 800e6aa:	1e05      	subs	r5, r0, #0
 800e6ac:	d105      	bne.n	800e6ba <__d2b+0x1e>
 800e6ae:	0002      	movs	r2, r0
 800e6b0:	4b26      	ldr	r3, [pc, #152]	; (800e74c <__d2b+0xb0>)
 800e6b2:	4927      	ldr	r1, [pc, #156]	; (800e750 <__d2b+0xb4>)
 800e6b4:	4827      	ldr	r0, [pc, #156]	; (800e754 <__d2b+0xb8>)
 800e6b6:	f000 fa7f 	bl	800ebb8 <__assert_func>
 800e6ba:	0333      	lsls	r3, r6, #12
 800e6bc:	0076      	lsls	r6, r6, #1
 800e6be:	0b1b      	lsrs	r3, r3, #12
 800e6c0:	0d76      	lsrs	r6, r6, #21
 800e6c2:	d124      	bne.n	800e70e <__d2b+0x72>
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	2c00      	cmp	r4, #0
 800e6c8:	d027      	beq.n	800e71a <__d2b+0x7e>
 800e6ca:	4668      	mov	r0, sp
 800e6cc:	9400      	str	r4, [sp, #0]
 800e6ce:	f7ff fd71 	bl	800e1b4 <__lo0bits>
 800e6d2:	9c00      	ldr	r4, [sp, #0]
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d01e      	beq.n	800e716 <__d2b+0x7a>
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	2120      	movs	r1, #32
 800e6dc:	001a      	movs	r2, r3
 800e6de:	1a09      	subs	r1, r1, r0
 800e6e0:	408a      	lsls	r2, r1
 800e6e2:	40c3      	lsrs	r3, r0
 800e6e4:	4322      	orrs	r2, r4
 800e6e6:	616a      	str	r2, [r5, #20]
 800e6e8:	9301      	str	r3, [sp, #4]
 800e6ea:	9c01      	ldr	r4, [sp, #4]
 800e6ec:	61ac      	str	r4, [r5, #24]
 800e6ee:	1e63      	subs	r3, r4, #1
 800e6f0:	419c      	sbcs	r4, r3
 800e6f2:	3401      	adds	r4, #1
 800e6f4:	612c      	str	r4, [r5, #16]
 800e6f6:	2e00      	cmp	r6, #0
 800e6f8:	d018      	beq.n	800e72c <__d2b+0x90>
 800e6fa:	4b17      	ldr	r3, [pc, #92]	; (800e758 <__d2b+0xbc>)
 800e6fc:	18f6      	adds	r6, r6, r3
 800e6fe:	2335      	movs	r3, #53	; 0x35
 800e700:	1836      	adds	r6, r6, r0
 800e702:	1a18      	subs	r0, r3, r0
 800e704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e706:	603e      	str	r6, [r7, #0]
 800e708:	6018      	str	r0, [r3, #0]
 800e70a:	0028      	movs	r0, r5
 800e70c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e70e:	2280      	movs	r2, #128	; 0x80
 800e710:	0352      	lsls	r2, r2, #13
 800e712:	4313      	orrs	r3, r2
 800e714:	e7d6      	b.n	800e6c4 <__d2b+0x28>
 800e716:	616c      	str	r4, [r5, #20]
 800e718:	e7e7      	b.n	800e6ea <__d2b+0x4e>
 800e71a:	a801      	add	r0, sp, #4
 800e71c:	f7ff fd4a 	bl	800e1b4 <__lo0bits>
 800e720:	2401      	movs	r4, #1
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	612c      	str	r4, [r5, #16]
 800e726:	616b      	str	r3, [r5, #20]
 800e728:	3020      	adds	r0, #32
 800e72a:	e7e4      	b.n	800e6f6 <__d2b+0x5a>
 800e72c:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <__d2b+0xc0>)
 800e72e:	18c0      	adds	r0, r0, r3
 800e730:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <__d2b+0xc4>)
 800e732:	6038      	str	r0, [r7, #0]
 800e734:	18e3      	adds	r3, r4, r3
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	18eb      	adds	r3, r5, r3
 800e73a:	6958      	ldr	r0, [r3, #20]
 800e73c:	f7ff fd20 	bl	800e180 <__hi0bits>
 800e740:	0164      	lsls	r4, r4, #5
 800e742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e744:	1a24      	subs	r4, r4, r0
 800e746:	601c      	str	r4, [r3, #0]
 800e748:	e7df      	b.n	800e70a <__d2b+0x6e>
 800e74a:	46c0      	nop			; (mov r8, r8)
 800e74c:	08012527 	.word	0x08012527
 800e750:	0000030a 	.word	0x0000030a
 800e754:	08012538 	.word	0x08012538
 800e758:	fffffbcd 	.word	0xfffffbcd
 800e75c:	fffffbce 	.word	0xfffffbce
 800e760:	3fffffff 	.word	0x3fffffff

0800e764 <_calloc_r>:
 800e764:	434a      	muls	r2, r1
 800e766:	b570      	push	{r4, r5, r6, lr}
 800e768:	0011      	movs	r1, r2
 800e76a:	0015      	movs	r5, r2
 800e76c:	f000 f852 	bl	800e814 <_malloc_r>
 800e770:	1e04      	subs	r4, r0, #0
 800e772:	d003      	beq.n	800e77c <_calloc_r+0x18>
 800e774:	002a      	movs	r2, r5
 800e776:	2100      	movs	r1, #0
 800e778:	f7fe f8e8 	bl	800c94c <memset>
 800e77c:	0020      	movs	r0, r4
 800e77e:	bd70      	pop	{r4, r5, r6, pc}

0800e780 <_free_r>:
 800e780:	b570      	push	{r4, r5, r6, lr}
 800e782:	0005      	movs	r5, r0
 800e784:	2900      	cmp	r1, #0
 800e786:	d010      	beq.n	800e7aa <_free_r+0x2a>
 800e788:	1f0c      	subs	r4, r1, #4
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	da00      	bge.n	800e792 <_free_r+0x12>
 800e790:	18e4      	adds	r4, r4, r3
 800e792:	0028      	movs	r0, r5
 800e794:	f000 fa64 	bl	800ec60 <__malloc_lock>
 800e798:	4a1d      	ldr	r2, [pc, #116]	; (800e810 <_free_r+0x90>)
 800e79a:	6813      	ldr	r3, [r2, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d105      	bne.n	800e7ac <_free_r+0x2c>
 800e7a0:	6063      	str	r3, [r4, #4]
 800e7a2:	6014      	str	r4, [r2, #0]
 800e7a4:	0028      	movs	r0, r5
 800e7a6:	f000 fa63 	bl	800ec70 <__malloc_unlock>
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	d908      	bls.n	800e7c2 <_free_r+0x42>
 800e7b0:	6821      	ldr	r1, [r4, #0]
 800e7b2:	1860      	adds	r0, r4, r1
 800e7b4:	4283      	cmp	r3, r0
 800e7b6:	d1f3      	bne.n	800e7a0 <_free_r+0x20>
 800e7b8:	6818      	ldr	r0, [r3, #0]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	1841      	adds	r1, r0, r1
 800e7be:	6021      	str	r1, [r4, #0]
 800e7c0:	e7ee      	b.n	800e7a0 <_free_r+0x20>
 800e7c2:	001a      	movs	r2, r3
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <_free_r+0x4e>
 800e7ca:	42a3      	cmp	r3, r4
 800e7cc:	d9f9      	bls.n	800e7c2 <_free_r+0x42>
 800e7ce:	6811      	ldr	r1, [r2, #0]
 800e7d0:	1850      	adds	r0, r2, r1
 800e7d2:	42a0      	cmp	r0, r4
 800e7d4:	d10b      	bne.n	800e7ee <_free_r+0x6e>
 800e7d6:	6820      	ldr	r0, [r4, #0]
 800e7d8:	1809      	adds	r1, r1, r0
 800e7da:	1850      	adds	r0, r2, r1
 800e7dc:	6011      	str	r1, [r2, #0]
 800e7de:	4283      	cmp	r3, r0
 800e7e0:	d1e0      	bne.n	800e7a4 <_free_r+0x24>
 800e7e2:	6818      	ldr	r0, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	1841      	adds	r1, r0, r1
 800e7e8:	6011      	str	r1, [r2, #0]
 800e7ea:	6053      	str	r3, [r2, #4]
 800e7ec:	e7da      	b.n	800e7a4 <_free_r+0x24>
 800e7ee:	42a0      	cmp	r0, r4
 800e7f0:	d902      	bls.n	800e7f8 <_free_r+0x78>
 800e7f2:	230c      	movs	r3, #12
 800e7f4:	602b      	str	r3, [r5, #0]
 800e7f6:	e7d5      	b.n	800e7a4 <_free_r+0x24>
 800e7f8:	6821      	ldr	r1, [r4, #0]
 800e7fa:	1860      	adds	r0, r4, r1
 800e7fc:	4283      	cmp	r3, r0
 800e7fe:	d103      	bne.n	800e808 <_free_r+0x88>
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	1841      	adds	r1, r0, r1
 800e806:	6021      	str	r1, [r4, #0]
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	6054      	str	r4, [r2, #4]
 800e80c:	e7ca      	b.n	800e7a4 <_free_r+0x24>
 800e80e:	46c0      	nop			; (mov r8, r8)
 800e810:	20000204 	.word	0x20000204

0800e814 <_malloc_r>:
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	2303      	movs	r3, #3
 800e818:	1ccd      	adds	r5, r1, #3
 800e81a:	439d      	bics	r5, r3
 800e81c:	3508      	adds	r5, #8
 800e81e:	0006      	movs	r6, r0
 800e820:	2d0c      	cmp	r5, #12
 800e822:	d21f      	bcs.n	800e864 <_malloc_r+0x50>
 800e824:	250c      	movs	r5, #12
 800e826:	42a9      	cmp	r1, r5
 800e828:	d81e      	bhi.n	800e868 <_malloc_r+0x54>
 800e82a:	0030      	movs	r0, r6
 800e82c:	f000 fa18 	bl	800ec60 <__malloc_lock>
 800e830:	4925      	ldr	r1, [pc, #148]	; (800e8c8 <_malloc_r+0xb4>)
 800e832:	680a      	ldr	r2, [r1, #0]
 800e834:	0014      	movs	r4, r2
 800e836:	2c00      	cmp	r4, #0
 800e838:	d11a      	bne.n	800e870 <_malloc_r+0x5c>
 800e83a:	4f24      	ldr	r7, [pc, #144]	; (800e8cc <_malloc_r+0xb8>)
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d104      	bne.n	800e84c <_malloc_r+0x38>
 800e842:	0021      	movs	r1, r4
 800e844:	0030      	movs	r0, r6
 800e846:	f000 f9a5 	bl	800eb94 <_sbrk_r>
 800e84a:	6038      	str	r0, [r7, #0]
 800e84c:	0029      	movs	r1, r5
 800e84e:	0030      	movs	r0, r6
 800e850:	f000 f9a0 	bl	800eb94 <_sbrk_r>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d12b      	bne.n	800e8b0 <_malloc_r+0x9c>
 800e858:	230c      	movs	r3, #12
 800e85a:	0030      	movs	r0, r6
 800e85c:	6033      	str	r3, [r6, #0]
 800e85e:	f000 fa07 	bl	800ec70 <__malloc_unlock>
 800e862:	e003      	b.n	800e86c <_malloc_r+0x58>
 800e864:	2d00      	cmp	r5, #0
 800e866:	dade      	bge.n	800e826 <_malloc_r+0x12>
 800e868:	230c      	movs	r3, #12
 800e86a:	6033      	str	r3, [r6, #0]
 800e86c:	2000      	movs	r0, #0
 800e86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	1b5b      	subs	r3, r3, r5
 800e874:	d419      	bmi.n	800e8aa <_malloc_r+0x96>
 800e876:	2b0b      	cmp	r3, #11
 800e878:	d903      	bls.n	800e882 <_malloc_r+0x6e>
 800e87a:	6023      	str	r3, [r4, #0]
 800e87c:	18e4      	adds	r4, r4, r3
 800e87e:	6025      	str	r5, [r4, #0]
 800e880:	e003      	b.n	800e88a <_malloc_r+0x76>
 800e882:	6863      	ldr	r3, [r4, #4]
 800e884:	42a2      	cmp	r2, r4
 800e886:	d10e      	bne.n	800e8a6 <_malloc_r+0x92>
 800e888:	600b      	str	r3, [r1, #0]
 800e88a:	0030      	movs	r0, r6
 800e88c:	f000 f9f0 	bl	800ec70 <__malloc_unlock>
 800e890:	0020      	movs	r0, r4
 800e892:	2207      	movs	r2, #7
 800e894:	300b      	adds	r0, #11
 800e896:	1d23      	adds	r3, r4, #4
 800e898:	4390      	bics	r0, r2
 800e89a:	1ac2      	subs	r2, r0, r3
 800e89c:	4298      	cmp	r0, r3
 800e89e:	d0e6      	beq.n	800e86e <_malloc_r+0x5a>
 800e8a0:	1a1b      	subs	r3, r3, r0
 800e8a2:	50a3      	str	r3, [r4, r2]
 800e8a4:	e7e3      	b.n	800e86e <_malloc_r+0x5a>
 800e8a6:	6053      	str	r3, [r2, #4]
 800e8a8:	e7ef      	b.n	800e88a <_malloc_r+0x76>
 800e8aa:	0022      	movs	r2, r4
 800e8ac:	6864      	ldr	r4, [r4, #4]
 800e8ae:	e7c2      	b.n	800e836 <_malloc_r+0x22>
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	1cc4      	adds	r4, r0, #3
 800e8b4:	439c      	bics	r4, r3
 800e8b6:	42a0      	cmp	r0, r4
 800e8b8:	d0e1      	beq.n	800e87e <_malloc_r+0x6a>
 800e8ba:	1a21      	subs	r1, r4, r0
 800e8bc:	0030      	movs	r0, r6
 800e8be:	f000 f969 	bl	800eb94 <_sbrk_r>
 800e8c2:	1c43      	adds	r3, r0, #1
 800e8c4:	d1db      	bne.n	800e87e <_malloc_r+0x6a>
 800e8c6:	e7c7      	b.n	800e858 <_malloc_r+0x44>
 800e8c8:	20000204 	.word	0x20000204
 800e8cc:	20000208 	.word	0x20000208

0800e8d0 <__ssputs_r>:
 800e8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d2:	688e      	ldr	r6, [r1, #8]
 800e8d4:	b085      	sub	sp, #20
 800e8d6:	0007      	movs	r7, r0
 800e8d8:	000c      	movs	r4, r1
 800e8da:	9203      	str	r2, [sp, #12]
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	429e      	cmp	r6, r3
 800e8e0:	d83c      	bhi.n	800e95c <__ssputs_r+0x8c>
 800e8e2:	2390      	movs	r3, #144	; 0x90
 800e8e4:	898a      	ldrh	r2, [r1, #12]
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	421a      	tst	r2, r3
 800e8ea:	d034      	beq.n	800e956 <__ssputs_r+0x86>
 800e8ec:	2503      	movs	r5, #3
 800e8ee:	6909      	ldr	r1, [r1, #16]
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	1a5b      	subs	r3, r3, r1
 800e8f4:	9302      	str	r3, [sp, #8]
 800e8f6:	6963      	ldr	r3, [r4, #20]
 800e8f8:	9802      	ldr	r0, [sp, #8]
 800e8fa:	435d      	muls	r5, r3
 800e8fc:	0feb      	lsrs	r3, r5, #31
 800e8fe:	195d      	adds	r5, r3, r5
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	106d      	asrs	r5, r5, #1
 800e904:	3301      	adds	r3, #1
 800e906:	181b      	adds	r3, r3, r0
 800e908:	42ab      	cmp	r3, r5
 800e90a:	d900      	bls.n	800e90e <__ssputs_r+0x3e>
 800e90c:	001d      	movs	r5, r3
 800e90e:	0553      	lsls	r3, r2, #21
 800e910:	d532      	bpl.n	800e978 <__ssputs_r+0xa8>
 800e912:	0029      	movs	r1, r5
 800e914:	0038      	movs	r0, r7
 800e916:	f7ff ff7d 	bl	800e814 <_malloc_r>
 800e91a:	1e06      	subs	r6, r0, #0
 800e91c:	d109      	bne.n	800e932 <__ssputs_r+0x62>
 800e91e:	230c      	movs	r3, #12
 800e920:	603b      	str	r3, [r7, #0]
 800e922:	2340      	movs	r3, #64	; 0x40
 800e924:	2001      	movs	r0, #1
 800e926:	89a2      	ldrh	r2, [r4, #12]
 800e928:	4240      	negs	r0, r0
 800e92a:	4313      	orrs	r3, r2
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	b005      	add	sp, #20
 800e930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e932:	9a02      	ldr	r2, [sp, #8]
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	f7ff fb6e 	bl	800e016 <memcpy>
 800e93a:	89a3      	ldrh	r3, [r4, #12]
 800e93c:	4a14      	ldr	r2, [pc, #80]	; (800e990 <__ssputs_r+0xc0>)
 800e93e:	401a      	ands	r2, r3
 800e940:	2380      	movs	r3, #128	; 0x80
 800e942:	4313      	orrs	r3, r2
 800e944:	81a3      	strh	r3, [r4, #12]
 800e946:	9b02      	ldr	r3, [sp, #8]
 800e948:	6126      	str	r6, [r4, #16]
 800e94a:	18f6      	adds	r6, r6, r3
 800e94c:	6026      	str	r6, [r4, #0]
 800e94e:	6165      	str	r5, [r4, #20]
 800e950:	9e01      	ldr	r6, [sp, #4]
 800e952:	1aed      	subs	r5, r5, r3
 800e954:	60a5      	str	r5, [r4, #8]
 800e956:	9b01      	ldr	r3, [sp, #4]
 800e958:	429e      	cmp	r6, r3
 800e95a:	d900      	bls.n	800e95e <__ssputs_r+0x8e>
 800e95c:	9e01      	ldr	r6, [sp, #4]
 800e95e:	0032      	movs	r2, r6
 800e960:	9903      	ldr	r1, [sp, #12]
 800e962:	6820      	ldr	r0, [r4, #0]
 800e964:	f000 f968 	bl	800ec38 <memmove>
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	2000      	movs	r0, #0
 800e96c:	1b9b      	subs	r3, r3, r6
 800e96e:	60a3      	str	r3, [r4, #8]
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	199e      	adds	r6, r3, r6
 800e974:	6026      	str	r6, [r4, #0]
 800e976:	e7da      	b.n	800e92e <__ssputs_r+0x5e>
 800e978:	002a      	movs	r2, r5
 800e97a:	0038      	movs	r0, r7
 800e97c:	f000 f980 	bl	800ec80 <_realloc_r>
 800e980:	1e06      	subs	r6, r0, #0
 800e982:	d1e0      	bne.n	800e946 <__ssputs_r+0x76>
 800e984:	0038      	movs	r0, r7
 800e986:	6921      	ldr	r1, [r4, #16]
 800e988:	f7ff fefa 	bl	800e780 <_free_r>
 800e98c:	e7c7      	b.n	800e91e <__ssputs_r+0x4e>
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	fffffb7f 	.word	0xfffffb7f

0800e994 <_svfiprintf_r>:
 800e994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e996:	b0a1      	sub	sp, #132	; 0x84
 800e998:	9003      	str	r0, [sp, #12]
 800e99a:	001d      	movs	r5, r3
 800e99c:	898b      	ldrh	r3, [r1, #12]
 800e99e:	000f      	movs	r7, r1
 800e9a0:	0016      	movs	r6, r2
 800e9a2:	061b      	lsls	r3, r3, #24
 800e9a4:	d511      	bpl.n	800e9ca <_svfiprintf_r+0x36>
 800e9a6:	690b      	ldr	r3, [r1, #16]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10e      	bne.n	800e9ca <_svfiprintf_r+0x36>
 800e9ac:	2140      	movs	r1, #64	; 0x40
 800e9ae:	f7ff ff31 	bl	800e814 <_malloc_r>
 800e9b2:	6038      	str	r0, [r7, #0]
 800e9b4:	6138      	str	r0, [r7, #16]
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d105      	bne.n	800e9c6 <_svfiprintf_r+0x32>
 800e9ba:	230c      	movs	r3, #12
 800e9bc:	9a03      	ldr	r2, [sp, #12]
 800e9be:	3801      	subs	r0, #1
 800e9c0:	6013      	str	r3, [r2, #0]
 800e9c2:	b021      	add	sp, #132	; 0x84
 800e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9c6:	2340      	movs	r3, #64	; 0x40
 800e9c8:	617b      	str	r3, [r7, #20]
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	ac08      	add	r4, sp, #32
 800e9ce:	6163      	str	r3, [r4, #20]
 800e9d0:	3320      	adds	r3, #32
 800e9d2:	7663      	strb	r3, [r4, #25]
 800e9d4:	3310      	adds	r3, #16
 800e9d6:	76a3      	strb	r3, [r4, #26]
 800e9d8:	9507      	str	r5, [sp, #28]
 800e9da:	0035      	movs	r5, r6
 800e9dc:	782b      	ldrb	r3, [r5, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <_svfiprintf_r+0x52>
 800e9e2:	2b25      	cmp	r3, #37	; 0x25
 800e9e4:	d147      	bne.n	800ea76 <_svfiprintf_r+0xe2>
 800e9e6:	1bab      	subs	r3, r5, r6
 800e9e8:	9305      	str	r3, [sp, #20]
 800e9ea:	42b5      	cmp	r5, r6
 800e9ec:	d00c      	beq.n	800ea08 <_svfiprintf_r+0x74>
 800e9ee:	0032      	movs	r2, r6
 800e9f0:	0039      	movs	r1, r7
 800e9f2:	9803      	ldr	r0, [sp, #12]
 800e9f4:	f7ff ff6c 	bl	800e8d0 <__ssputs_r>
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	d100      	bne.n	800e9fe <_svfiprintf_r+0x6a>
 800e9fc:	e0ae      	b.n	800eb5c <_svfiprintf_r+0x1c8>
 800e9fe:	6962      	ldr	r2, [r4, #20]
 800ea00:	9b05      	ldr	r3, [sp, #20]
 800ea02:	4694      	mov	ip, r2
 800ea04:	4463      	add	r3, ip
 800ea06:	6163      	str	r3, [r4, #20]
 800ea08:	782b      	ldrb	r3, [r5, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d100      	bne.n	800ea10 <_svfiprintf_r+0x7c>
 800ea0e:	e0a5      	b.n	800eb5c <_svfiprintf_r+0x1c8>
 800ea10:	2201      	movs	r2, #1
 800ea12:	2300      	movs	r3, #0
 800ea14:	4252      	negs	r2, r2
 800ea16:	6062      	str	r2, [r4, #4]
 800ea18:	a904      	add	r1, sp, #16
 800ea1a:	3254      	adds	r2, #84	; 0x54
 800ea1c:	1852      	adds	r2, r2, r1
 800ea1e:	1c6e      	adds	r6, r5, #1
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	60e3      	str	r3, [r4, #12]
 800ea24:	60a3      	str	r3, [r4, #8]
 800ea26:	7013      	strb	r3, [r2, #0]
 800ea28:	65a3      	str	r3, [r4, #88]	; 0x58
 800ea2a:	2205      	movs	r2, #5
 800ea2c:	7831      	ldrb	r1, [r6, #0]
 800ea2e:	4854      	ldr	r0, [pc, #336]	; (800eb80 <_svfiprintf_r+0x1ec>)
 800ea30:	f7ff fae6 	bl	800e000 <memchr>
 800ea34:	1c75      	adds	r5, r6, #1
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d11f      	bne.n	800ea7a <_svfiprintf_r+0xe6>
 800ea3a:	6822      	ldr	r2, [r4, #0]
 800ea3c:	06d3      	lsls	r3, r2, #27
 800ea3e:	d504      	bpl.n	800ea4a <_svfiprintf_r+0xb6>
 800ea40:	2353      	movs	r3, #83	; 0x53
 800ea42:	a904      	add	r1, sp, #16
 800ea44:	185b      	adds	r3, r3, r1
 800ea46:	2120      	movs	r1, #32
 800ea48:	7019      	strb	r1, [r3, #0]
 800ea4a:	0713      	lsls	r3, r2, #28
 800ea4c:	d504      	bpl.n	800ea58 <_svfiprintf_r+0xc4>
 800ea4e:	2353      	movs	r3, #83	; 0x53
 800ea50:	a904      	add	r1, sp, #16
 800ea52:	185b      	adds	r3, r3, r1
 800ea54:	212b      	movs	r1, #43	; 0x2b
 800ea56:	7019      	strb	r1, [r3, #0]
 800ea58:	7833      	ldrb	r3, [r6, #0]
 800ea5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5c:	d016      	beq.n	800ea8c <_svfiprintf_r+0xf8>
 800ea5e:	0035      	movs	r5, r6
 800ea60:	2100      	movs	r1, #0
 800ea62:	200a      	movs	r0, #10
 800ea64:	68e3      	ldr	r3, [r4, #12]
 800ea66:	782a      	ldrb	r2, [r5, #0]
 800ea68:	1c6e      	adds	r6, r5, #1
 800ea6a:	3a30      	subs	r2, #48	; 0x30
 800ea6c:	2a09      	cmp	r2, #9
 800ea6e:	d94e      	bls.n	800eb0e <_svfiprintf_r+0x17a>
 800ea70:	2900      	cmp	r1, #0
 800ea72:	d111      	bne.n	800ea98 <_svfiprintf_r+0x104>
 800ea74:	e017      	b.n	800eaa6 <_svfiprintf_r+0x112>
 800ea76:	3501      	adds	r5, #1
 800ea78:	e7b0      	b.n	800e9dc <_svfiprintf_r+0x48>
 800ea7a:	4b41      	ldr	r3, [pc, #260]	; (800eb80 <_svfiprintf_r+0x1ec>)
 800ea7c:	6822      	ldr	r2, [r4, #0]
 800ea7e:	1ac0      	subs	r0, r0, r3
 800ea80:	2301      	movs	r3, #1
 800ea82:	4083      	lsls	r3, r0
 800ea84:	4313      	orrs	r3, r2
 800ea86:	002e      	movs	r6, r5
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	e7ce      	b.n	800ea2a <_svfiprintf_r+0x96>
 800ea8c:	9b07      	ldr	r3, [sp, #28]
 800ea8e:	1d19      	adds	r1, r3, #4
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	9107      	str	r1, [sp, #28]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	db01      	blt.n	800ea9c <_svfiprintf_r+0x108>
 800ea98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea9a:	e004      	b.n	800eaa6 <_svfiprintf_r+0x112>
 800ea9c:	425b      	negs	r3, r3
 800ea9e:	60e3      	str	r3, [r4, #12]
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	6023      	str	r3, [r4, #0]
 800eaa6:	782b      	ldrb	r3, [r5, #0]
 800eaa8:	2b2e      	cmp	r3, #46	; 0x2e
 800eaaa:	d10a      	bne.n	800eac2 <_svfiprintf_r+0x12e>
 800eaac:	786b      	ldrb	r3, [r5, #1]
 800eaae:	2b2a      	cmp	r3, #42	; 0x2a
 800eab0:	d135      	bne.n	800eb1e <_svfiprintf_r+0x18a>
 800eab2:	9b07      	ldr	r3, [sp, #28]
 800eab4:	3502      	adds	r5, #2
 800eab6:	1d1a      	adds	r2, r3, #4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	9207      	str	r2, [sp, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	db2b      	blt.n	800eb18 <_svfiprintf_r+0x184>
 800eac0:	9309      	str	r3, [sp, #36]	; 0x24
 800eac2:	4e30      	ldr	r6, [pc, #192]	; (800eb84 <_svfiprintf_r+0x1f0>)
 800eac4:	2203      	movs	r2, #3
 800eac6:	0030      	movs	r0, r6
 800eac8:	7829      	ldrb	r1, [r5, #0]
 800eaca:	f7ff fa99 	bl	800e000 <memchr>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d006      	beq.n	800eae0 <_svfiprintf_r+0x14c>
 800ead2:	2340      	movs	r3, #64	; 0x40
 800ead4:	1b80      	subs	r0, r0, r6
 800ead6:	4083      	lsls	r3, r0
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	3501      	adds	r5, #1
 800eadc:	4313      	orrs	r3, r2
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	7829      	ldrb	r1, [r5, #0]
 800eae2:	2206      	movs	r2, #6
 800eae4:	4828      	ldr	r0, [pc, #160]	; (800eb88 <_svfiprintf_r+0x1f4>)
 800eae6:	1c6e      	adds	r6, r5, #1
 800eae8:	7621      	strb	r1, [r4, #24]
 800eaea:	f7ff fa89 	bl	800e000 <memchr>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d03c      	beq.n	800eb6c <_svfiprintf_r+0x1d8>
 800eaf2:	4b26      	ldr	r3, [pc, #152]	; (800eb8c <_svfiprintf_r+0x1f8>)
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d125      	bne.n	800eb44 <_svfiprintf_r+0x1b0>
 800eaf8:	2207      	movs	r2, #7
 800eafa:	9b07      	ldr	r3, [sp, #28]
 800eafc:	3307      	adds	r3, #7
 800eafe:	4393      	bics	r3, r2
 800eb00:	3308      	adds	r3, #8
 800eb02:	9307      	str	r3, [sp, #28]
 800eb04:	6963      	ldr	r3, [r4, #20]
 800eb06:	9a04      	ldr	r2, [sp, #16]
 800eb08:	189b      	adds	r3, r3, r2
 800eb0a:	6163      	str	r3, [r4, #20]
 800eb0c:	e765      	b.n	800e9da <_svfiprintf_r+0x46>
 800eb0e:	4343      	muls	r3, r0
 800eb10:	0035      	movs	r5, r6
 800eb12:	2101      	movs	r1, #1
 800eb14:	189b      	adds	r3, r3, r2
 800eb16:	e7a6      	b.n	800ea66 <_svfiprintf_r+0xd2>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	425b      	negs	r3, r3
 800eb1c:	e7d0      	b.n	800eac0 <_svfiprintf_r+0x12c>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	200a      	movs	r0, #10
 800eb22:	001a      	movs	r2, r3
 800eb24:	3501      	adds	r5, #1
 800eb26:	6063      	str	r3, [r4, #4]
 800eb28:	7829      	ldrb	r1, [r5, #0]
 800eb2a:	1c6e      	adds	r6, r5, #1
 800eb2c:	3930      	subs	r1, #48	; 0x30
 800eb2e:	2909      	cmp	r1, #9
 800eb30:	d903      	bls.n	800eb3a <_svfiprintf_r+0x1a6>
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d0c5      	beq.n	800eac2 <_svfiprintf_r+0x12e>
 800eb36:	9209      	str	r2, [sp, #36]	; 0x24
 800eb38:	e7c3      	b.n	800eac2 <_svfiprintf_r+0x12e>
 800eb3a:	4342      	muls	r2, r0
 800eb3c:	0035      	movs	r5, r6
 800eb3e:	2301      	movs	r3, #1
 800eb40:	1852      	adds	r2, r2, r1
 800eb42:	e7f1      	b.n	800eb28 <_svfiprintf_r+0x194>
 800eb44:	ab07      	add	r3, sp, #28
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	003a      	movs	r2, r7
 800eb4a:	0021      	movs	r1, r4
 800eb4c:	4b10      	ldr	r3, [pc, #64]	; (800eb90 <_svfiprintf_r+0x1fc>)
 800eb4e:	9803      	ldr	r0, [sp, #12]
 800eb50:	f7fd ffae 	bl	800cab0 <_printf_float>
 800eb54:	9004      	str	r0, [sp, #16]
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	d1d3      	bne.n	800eb04 <_svfiprintf_r+0x170>
 800eb5c:	89bb      	ldrh	r3, [r7, #12]
 800eb5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb60:	065b      	lsls	r3, r3, #25
 800eb62:	d400      	bmi.n	800eb66 <_svfiprintf_r+0x1d2>
 800eb64:	e72d      	b.n	800e9c2 <_svfiprintf_r+0x2e>
 800eb66:	2001      	movs	r0, #1
 800eb68:	4240      	negs	r0, r0
 800eb6a:	e72a      	b.n	800e9c2 <_svfiprintf_r+0x2e>
 800eb6c:	ab07      	add	r3, sp, #28
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	003a      	movs	r2, r7
 800eb72:	0021      	movs	r1, r4
 800eb74:	4b06      	ldr	r3, [pc, #24]	; (800eb90 <_svfiprintf_r+0x1fc>)
 800eb76:	9803      	ldr	r0, [sp, #12]
 800eb78:	f7fe fa58 	bl	800d02c <_printf_i>
 800eb7c:	e7ea      	b.n	800eb54 <_svfiprintf_r+0x1c0>
 800eb7e:	46c0      	nop			; (mov r8, r8)
 800eb80:	08012694 	.word	0x08012694
 800eb84:	0801269a 	.word	0x0801269a
 800eb88:	0801269e 	.word	0x0801269e
 800eb8c:	0800cab1 	.word	0x0800cab1
 800eb90:	0800e8d1 	.word	0x0800e8d1

0800eb94 <_sbrk_r>:
 800eb94:	2300      	movs	r3, #0
 800eb96:	b570      	push	{r4, r5, r6, lr}
 800eb98:	4d06      	ldr	r5, [pc, #24]	; (800ebb4 <_sbrk_r+0x20>)
 800eb9a:	0004      	movs	r4, r0
 800eb9c:	0008      	movs	r0, r1
 800eb9e:	602b      	str	r3, [r5, #0]
 800eba0:	f7fa fcea 	bl	8009578 <_sbrk>
 800eba4:	1c43      	adds	r3, r0, #1
 800eba6:	d103      	bne.n	800ebb0 <_sbrk_r+0x1c>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d000      	beq.n	800ebb0 <_sbrk_r+0x1c>
 800ebae:	6023      	str	r3, [r4, #0]
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	46c0      	nop			; (mov r8, r8)
 800ebb4:	200005c8 	.word	0x200005c8

0800ebb8 <__assert_func>:
 800ebb8:	b530      	push	{r4, r5, lr}
 800ebba:	0014      	movs	r4, r2
 800ebbc:	001a      	movs	r2, r3
 800ebbe:	4b09      	ldr	r3, [pc, #36]	; (800ebe4 <__assert_func+0x2c>)
 800ebc0:	0005      	movs	r5, r0
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	68d8      	ldr	r0, [r3, #12]
 800ebc8:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <__assert_func+0x30>)
 800ebca:	2c00      	cmp	r4, #0
 800ebcc:	d101      	bne.n	800ebd2 <__assert_func+0x1a>
 800ebce:	4b07      	ldr	r3, [pc, #28]	; (800ebec <__assert_func+0x34>)
 800ebd0:	001c      	movs	r4, r3
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	9100      	str	r1, [sp, #0]
 800ebd6:	002b      	movs	r3, r5
 800ebd8:	4905      	ldr	r1, [pc, #20]	; (800ebf0 <__assert_func+0x38>)
 800ebda:	9402      	str	r4, [sp, #8]
 800ebdc:	f000 f80a 	bl	800ebf4 <fiprintf>
 800ebe0:	f000 fab2 	bl	800f148 <abort>
 800ebe4:	20000010 	.word	0x20000010
 800ebe8:	080126a5 	.word	0x080126a5
 800ebec:	080126e0 	.word	0x080126e0
 800ebf0:	080126b2 	.word	0x080126b2

0800ebf4 <fiprintf>:
 800ebf4:	b40e      	push	{r1, r2, r3}
 800ebf6:	b503      	push	{r0, r1, lr}
 800ebf8:	0001      	movs	r1, r0
 800ebfa:	ab03      	add	r3, sp, #12
 800ebfc:	4804      	ldr	r0, [pc, #16]	; (800ec10 <fiprintf+0x1c>)
 800ebfe:	cb04      	ldmia	r3!, {r2}
 800ec00:	6800      	ldr	r0, [r0, #0]
 800ec02:	9301      	str	r3, [sp, #4]
 800ec04:	f000 f88a 	bl	800ed1c <_vfiprintf_r>
 800ec08:	b002      	add	sp, #8
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	b003      	add	sp, #12
 800ec0e:	4718      	bx	r3
 800ec10:	20000010 	.word	0x20000010

0800ec14 <__ascii_mbtowc>:
 800ec14:	b082      	sub	sp, #8
 800ec16:	2900      	cmp	r1, #0
 800ec18:	d100      	bne.n	800ec1c <__ascii_mbtowc+0x8>
 800ec1a:	a901      	add	r1, sp, #4
 800ec1c:	1e10      	subs	r0, r2, #0
 800ec1e:	d006      	beq.n	800ec2e <__ascii_mbtowc+0x1a>
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d006      	beq.n	800ec32 <__ascii_mbtowc+0x1e>
 800ec24:	7813      	ldrb	r3, [r2, #0]
 800ec26:	600b      	str	r3, [r1, #0]
 800ec28:	7810      	ldrb	r0, [r2, #0]
 800ec2a:	1e43      	subs	r3, r0, #1
 800ec2c:	4198      	sbcs	r0, r3
 800ec2e:	b002      	add	sp, #8
 800ec30:	4770      	bx	lr
 800ec32:	2002      	movs	r0, #2
 800ec34:	4240      	negs	r0, r0
 800ec36:	e7fa      	b.n	800ec2e <__ascii_mbtowc+0x1a>

0800ec38 <memmove>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	4288      	cmp	r0, r1
 800ec3c:	d902      	bls.n	800ec44 <memmove+0xc>
 800ec3e:	188b      	adds	r3, r1, r2
 800ec40:	4298      	cmp	r0, r3
 800ec42:	d303      	bcc.n	800ec4c <memmove+0x14>
 800ec44:	2300      	movs	r3, #0
 800ec46:	e007      	b.n	800ec58 <memmove+0x20>
 800ec48:	5c8b      	ldrb	r3, [r1, r2]
 800ec4a:	5483      	strb	r3, [r0, r2]
 800ec4c:	3a01      	subs	r2, #1
 800ec4e:	d2fb      	bcs.n	800ec48 <memmove+0x10>
 800ec50:	bd10      	pop	{r4, pc}
 800ec52:	5ccc      	ldrb	r4, [r1, r3]
 800ec54:	54c4      	strb	r4, [r0, r3]
 800ec56:	3301      	adds	r3, #1
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d1fa      	bne.n	800ec52 <memmove+0x1a>
 800ec5c:	e7f8      	b.n	800ec50 <memmove+0x18>
	...

0800ec60 <__malloc_lock>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	4802      	ldr	r0, [pc, #8]	; (800ec6c <__malloc_lock+0xc>)
 800ec64:	f000 fc47 	bl	800f4f6 <__retarget_lock_acquire_recursive>
 800ec68:	bd10      	pop	{r4, pc}
 800ec6a:	46c0      	nop			; (mov r8, r8)
 800ec6c:	200005d0 	.word	0x200005d0

0800ec70 <__malloc_unlock>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	4802      	ldr	r0, [pc, #8]	; (800ec7c <__malloc_unlock+0xc>)
 800ec74:	f000 fc40 	bl	800f4f8 <__retarget_lock_release_recursive>
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	46c0      	nop			; (mov r8, r8)
 800ec7c:	200005d0 	.word	0x200005d0

0800ec80 <_realloc_r>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	0007      	movs	r7, r0
 800ec84:	000d      	movs	r5, r1
 800ec86:	0016      	movs	r6, r2
 800ec88:	2900      	cmp	r1, #0
 800ec8a:	d105      	bne.n	800ec98 <_realloc_r+0x18>
 800ec8c:	0011      	movs	r1, r2
 800ec8e:	f7ff fdc1 	bl	800e814 <_malloc_r>
 800ec92:	0004      	movs	r4, r0
 800ec94:	0020      	movs	r0, r4
 800ec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec98:	2a00      	cmp	r2, #0
 800ec9a:	d103      	bne.n	800eca4 <_realloc_r+0x24>
 800ec9c:	f7ff fd70 	bl	800e780 <_free_r>
 800eca0:	0034      	movs	r4, r6
 800eca2:	e7f7      	b.n	800ec94 <_realloc_r+0x14>
 800eca4:	f000 fc96 	bl	800f5d4 <_malloc_usable_size_r>
 800eca8:	002c      	movs	r4, r5
 800ecaa:	42b0      	cmp	r0, r6
 800ecac:	d2f2      	bcs.n	800ec94 <_realloc_r+0x14>
 800ecae:	0031      	movs	r1, r6
 800ecb0:	0038      	movs	r0, r7
 800ecb2:	f7ff fdaf 	bl	800e814 <_malloc_r>
 800ecb6:	1e04      	subs	r4, r0, #0
 800ecb8:	d0ec      	beq.n	800ec94 <_realloc_r+0x14>
 800ecba:	0029      	movs	r1, r5
 800ecbc:	0032      	movs	r2, r6
 800ecbe:	f7ff f9aa 	bl	800e016 <memcpy>
 800ecc2:	0029      	movs	r1, r5
 800ecc4:	0038      	movs	r0, r7
 800ecc6:	f7ff fd5b 	bl	800e780 <_free_r>
 800ecca:	e7e3      	b.n	800ec94 <_realloc_r+0x14>

0800eccc <__sfputc_r>:
 800eccc:	6893      	ldr	r3, [r2, #8]
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	6093      	str	r3, [r2, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	da04      	bge.n	800ece2 <__sfputc_r+0x16>
 800ecd8:	6994      	ldr	r4, [r2, #24]
 800ecda:	42a3      	cmp	r3, r4
 800ecdc:	db07      	blt.n	800ecee <__sfputc_r+0x22>
 800ecde:	290a      	cmp	r1, #10
 800ece0:	d005      	beq.n	800ecee <__sfputc_r+0x22>
 800ece2:	6813      	ldr	r3, [r2, #0]
 800ece4:	1c58      	adds	r0, r3, #1
 800ece6:	6010      	str	r0, [r2, #0]
 800ece8:	7019      	strb	r1, [r3, #0]
 800ecea:	0008      	movs	r0, r1
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	f000 f94f 	bl	800ef90 <__swbuf_r>
 800ecf2:	0001      	movs	r1, r0
 800ecf4:	e7f9      	b.n	800ecea <__sfputc_r+0x1e>

0800ecf6 <__sfputs_r>:
 800ecf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf8:	0006      	movs	r6, r0
 800ecfa:	000f      	movs	r7, r1
 800ecfc:	0014      	movs	r4, r2
 800ecfe:	18d5      	adds	r5, r2, r3
 800ed00:	42ac      	cmp	r4, r5
 800ed02:	d101      	bne.n	800ed08 <__sfputs_r+0x12>
 800ed04:	2000      	movs	r0, #0
 800ed06:	e007      	b.n	800ed18 <__sfputs_r+0x22>
 800ed08:	7821      	ldrb	r1, [r4, #0]
 800ed0a:	003a      	movs	r2, r7
 800ed0c:	0030      	movs	r0, r6
 800ed0e:	f7ff ffdd 	bl	800eccc <__sfputc_r>
 800ed12:	3401      	adds	r4, #1
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d1f3      	bne.n	800ed00 <__sfputs_r+0xa>
 800ed18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed1c <_vfiprintf_r>:
 800ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1e:	b0a1      	sub	sp, #132	; 0x84
 800ed20:	0006      	movs	r6, r0
 800ed22:	000c      	movs	r4, r1
 800ed24:	001f      	movs	r7, r3
 800ed26:	9203      	str	r2, [sp, #12]
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d004      	beq.n	800ed36 <_vfiprintf_r+0x1a>
 800ed2c:	6983      	ldr	r3, [r0, #24]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <_vfiprintf_r+0x1a>
 800ed32:	f000 fb3f 	bl	800f3b4 <__sinit>
 800ed36:	4b8e      	ldr	r3, [pc, #568]	; (800ef70 <_vfiprintf_r+0x254>)
 800ed38:	429c      	cmp	r4, r3
 800ed3a:	d11c      	bne.n	800ed76 <_vfiprintf_r+0x5a>
 800ed3c:	6874      	ldr	r4, [r6, #4]
 800ed3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed40:	07db      	lsls	r3, r3, #31
 800ed42:	d405      	bmi.n	800ed50 <_vfiprintf_r+0x34>
 800ed44:	89a3      	ldrh	r3, [r4, #12]
 800ed46:	059b      	lsls	r3, r3, #22
 800ed48:	d402      	bmi.n	800ed50 <_vfiprintf_r+0x34>
 800ed4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed4c:	f000 fbd3 	bl	800f4f6 <__retarget_lock_acquire_recursive>
 800ed50:	89a3      	ldrh	r3, [r4, #12]
 800ed52:	071b      	lsls	r3, r3, #28
 800ed54:	d502      	bpl.n	800ed5c <_vfiprintf_r+0x40>
 800ed56:	6923      	ldr	r3, [r4, #16]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d11d      	bne.n	800ed98 <_vfiprintf_r+0x7c>
 800ed5c:	0021      	movs	r1, r4
 800ed5e:	0030      	movs	r0, r6
 800ed60:	f000 f97a 	bl	800f058 <__swsetup_r>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d017      	beq.n	800ed98 <_vfiprintf_r+0x7c>
 800ed68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed6a:	07db      	lsls	r3, r3, #31
 800ed6c:	d50d      	bpl.n	800ed8a <_vfiprintf_r+0x6e>
 800ed6e:	2001      	movs	r0, #1
 800ed70:	4240      	negs	r0, r0
 800ed72:	b021      	add	sp, #132	; 0x84
 800ed74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed76:	4b7f      	ldr	r3, [pc, #508]	; (800ef74 <_vfiprintf_r+0x258>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	d101      	bne.n	800ed80 <_vfiprintf_r+0x64>
 800ed7c:	68b4      	ldr	r4, [r6, #8]
 800ed7e:	e7de      	b.n	800ed3e <_vfiprintf_r+0x22>
 800ed80:	4b7d      	ldr	r3, [pc, #500]	; (800ef78 <_vfiprintf_r+0x25c>)
 800ed82:	429c      	cmp	r4, r3
 800ed84:	d1db      	bne.n	800ed3e <_vfiprintf_r+0x22>
 800ed86:	68f4      	ldr	r4, [r6, #12]
 800ed88:	e7d9      	b.n	800ed3e <_vfiprintf_r+0x22>
 800ed8a:	89a3      	ldrh	r3, [r4, #12]
 800ed8c:	059b      	lsls	r3, r3, #22
 800ed8e:	d4ee      	bmi.n	800ed6e <_vfiprintf_r+0x52>
 800ed90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed92:	f000 fbb1 	bl	800f4f8 <__retarget_lock_release_recursive>
 800ed96:	e7ea      	b.n	800ed6e <_vfiprintf_r+0x52>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	ad08      	add	r5, sp, #32
 800ed9c:	616b      	str	r3, [r5, #20]
 800ed9e:	3320      	adds	r3, #32
 800eda0:	766b      	strb	r3, [r5, #25]
 800eda2:	3310      	adds	r3, #16
 800eda4:	76ab      	strb	r3, [r5, #26]
 800eda6:	9707      	str	r7, [sp, #28]
 800eda8:	9f03      	ldr	r7, [sp, #12]
 800edaa:	783b      	ldrb	r3, [r7, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <_vfiprintf_r+0x98>
 800edb0:	2b25      	cmp	r3, #37	; 0x25
 800edb2:	d14e      	bne.n	800ee52 <_vfiprintf_r+0x136>
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	1afb      	subs	r3, r7, r3
 800edb8:	9305      	str	r3, [sp, #20]
 800edba:	9b03      	ldr	r3, [sp, #12]
 800edbc:	429f      	cmp	r7, r3
 800edbe:	d00d      	beq.n	800eddc <_vfiprintf_r+0xc0>
 800edc0:	9b05      	ldr	r3, [sp, #20]
 800edc2:	0021      	movs	r1, r4
 800edc4:	0030      	movs	r0, r6
 800edc6:	9a03      	ldr	r2, [sp, #12]
 800edc8:	f7ff ff95 	bl	800ecf6 <__sfputs_r>
 800edcc:	1c43      	adds	r3, r0, #1
 800edce:	d100      	bne.n	800edd2 <_vfiprintf_r+0xb6>
 800edd0:	e0b5      	b.n	800ef3e <_vfiprintf_r+0x222>
 800edd2:	696a      	ldr	r2, [r5, #20]
 800edd4:	9b05      	ldr	r3, [sp, #20]
 800edd6:	4694      	mov	ip, r2
 800edd8:	4463      	add	r3, ip
 800edda:	616b      	str	r3, [r5, #20]
 800eddc:	783b      	ldrb	r3, [r7, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d100      	bne.n	800ede4 <_vfiprintf_r+0xc8>
 800ede2:	e0ac      	b.n	800ef3e <_vfiprintf_r+0x222>
 800ede4:	2201      	movs	r2, #1
 800ede6:	1c7b      	adds	r3, r7, #1
 800ede8:	9303      	str	r3, [sp, #12]
 800edea:	2300      	movs	r3, #0
 800edec:	4252      	negs	r2, r2
 800edee:	606a      	str	r2, [r5, #4]
 800edf0:	a904      	add	r1, sp, #16
 800edf2:	3254      	adds	r2, #84	; 0x54
 800edf4:	1852      	adds	r2, r2, r1
 800edf6:	602b      	str	r3, [r5, #0]
 800edf8:	60eb      	str	r3, [r5, #12]
 800edfa:	60ab      	str	r3, [r5, #8]
 800edfc:	7013      	strb	r3, [r2, #0]
 800edfe:	65ab      	str	r3, [r5, #88]	; 0x58
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	2205      	movs	r2, #5
 800ee04:	7819      	ldrb	r1, [r3, #0]
 800ee06:	485d      	ldr	r0, [pc, #372]	; (800ef7c <_vfiprintf_r+0x260>)
 800ee08:	f7ff f8fa 	bl	800e000 <memchr>
 800ee0c:	9b03      	ldr	r3, [sp, #12]
 800ee0e:	1c5f      	adds	r7, r3, #1
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d120      	bne.n	800ee56 <_vfiprintf_r+0x13a>
 800ee14:	682a      	ldr	r2, [r5, #0]
 800ee16:	06d3      	lsls	r3, r2, #27
 800ee18:	d504      	bpl.n	800ee24 <_vfiprintf_r+0x108>
 800ee1a:	2353      	movs	r3, #83	; 0x53
 800ee1c:	a904      	add	r1, sp, #16
 800ee1e:	185b      	adds	r3, r3, r1
 800ee20:	2120      	movs	r1, #32
 800ee22:	7019      	strb	r1, [r3, #0]
 800ee24:	0713      	lsls	r3, r2, #28
 800ee26:	d504      	bpl.n	800ee32 <_vfiprintf_r+0x116>
 800ee28:	2353      	movs	r3, #83	; 0x53
 800ee2a:	a904      	add	r1, sp, #16
 800ee2c:	185b      	adds	r3, r3, r1
 800ee2e:	212b      	movs	r1, #43	; 0x2b
 800ee30:	7019      	strb	r1, [r3, #0]
 800ee32:	9b03      	ldr	r3, [sp, #12]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	2b2a      	cmp	r3, #42	; 0x2a
 800ee38:	d016      	beq.n	800ee68 <_vfiprintf_r+0x14c>
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	68eb      	ldr	r3, [r5, #12]
 800ee3e:	9f03      	ldr	r7, [sp, #12]
 800ee40:	783a      	ldrb	r2, [r7, #0]
 800ee42:	1c78      	adds	r0, r7, #1
 800ee44:	3a30      	subs	r2, #48	; 0x30
 800ee46:	4684      	mov	ip, r0
 800ee48:	2a09      	cmp	r2, #9
 800ee4a:	d94f      	bls.n	800eeec <_vfiprintf_r+0x1d0>
 800ee4c:	2900      	cmp	r1, #0
 800ee4e:	d111      	bne.n	800ee74 <_vfiprintf_r+0x158>
 800ee50:	e017      	b.n	800ee82 <_vfiprintf_r+0x166>
 800ee52:	3701      	adds	r7, #1
 800ee54:	e7a9      	b.n	800edaa <_vfiprintf_r+0x8e>
 800ee56:	4b49      	ldr	r3, [pc, #292]	; (800ef7c <_vfiprintf_r+0x260>)
 800ee58:	682a      	ldr	r2, [r5, #0]
 800ee5a:	1ac0      	subs	r0, r0, r3
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	4083      	lsls	r3, r0
 800ee60:	4313      	orrs	r3, r2
 800ee62:	602b      	str	r3, [r5, #0]
 800ee64:	9703      	str	r7, [sp, #12]
 800ee66:	e7cb      	b.n	800ee00 <_vfiprintf_r+0xe4>
 800ee68:	9b07      	ldr	r3, [sp, #28]
 800ee6a:	1d19      	adds	r1, r3, #4
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	9107      	str	r1, [sp, #28]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	db01      	blt.n	800ee78 <_vfiprintf_r+0x15c>
 800ee74:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee76:	e004      	b.n	800ee82 <_vfiprintf_r+0x166>
 800ee78:	425b      	negs	r3, r3
 800ee7a:	60eb      	str	r3, [r5, #12]
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	602b      	str	r3, [r5, #0]
 800ee82:	783b      	ldrb	r3, [r7, #0]
 800ee84:	2b2e      	cmp	r3, #46	; 0x2e
 800ee86:	d10a      	bne.n	800ee9e <_vfiprintf_r+0x182>
 800ee88:	787b      	ldrb	r3, [r7, #1]
 800ee8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee8c:	d137      	bne.n	800eefe <_vfiprintf_r+0x1e2>
 800ee8e:	9b07      	ldr	r3, [sp, #28]
 800ee90:	3702      	adds	r7, #2
 800ee92:	1d1a      	adds	r2, r3, #4
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	9207      	str	r2, [sp, #28]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	db2d      	blt.n	800eef8 <_vfiprintf_r+0x1dc>
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	2203      	movs	r2, #3
 800eea0:	7839      	ldrb	r1, [r7, #0]
 800eea2:	4837      	ldr	r0, [pc, #220]	; (800ef80 <_vfiprintf_r+0x264>)
 800eea4:	f7ff f8ac 	bl	800e000 <memchr>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d007      	beq.n	800eebc <_vfiprintf_r+0x1a0>
 800eeac:	4b34      	ldr	r3, [pc, #208]	; (800ef80 <_vfiprintf_r+0x264>)
 800eeae:	682a      	ldr	r2, [r5, #0]
 800eeb0:	1ac0      	subs	r0, r0, r3
 800eeb2:	2340      	movs	r3, #64	; 0x40
 800eeb4:	4083      	lsls	r3, r0
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	3701      	adds	r7, #1
 800eeba:	602b      	str	r3, [r5, #0]
 800eebc:	7839      	ldrb	r1, [r7, #0]
 800eebe:	1c7b      	adds	r3, r7, #1
 800eec0:	2206      	movs	r2, #6
 800eec2:	4830      	ldr	r0, [pc, #192]	; (800ef84 <_vfiprintf_r+0x268>)
 800eec4:	9303      	str	r3, [sp, #12]
 800eec6:	7629      	strb	r1, [r5, #24]
 800eec8:	f7ff f89a 	bl	800e000 <memchr>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d045      	beq.n	800ef5c <_vfiprintf_r+0x240>
 800eed0:	4b2d      	ldr	r3, [pc, #180]	; (800ef88 <_vfiprintf_r+0x26c>)
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d127      	bne.n	800ef26 <_vfiprintf_r+0x20a>
 800eed6:	2207      	movs	r2, #7
 800eed8:	9b07      	ldr	r3, [sp, #28]
 800eeda:	3307      	adds	r3, #7
 800eedc:	4393      	bics	r3, r2
 800eede:	3308      	adds	r3, #8
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	696b      	ldr	r3, [r5, #20]
 800eee4:	9a04      	ldr	r2, [sp, #16]
 800eee6:	189b      	adds	r3, r3, r2
 800eee8:	616b      	str	r3, [r5, #20]
 800eeea:	e75d      	b.n	800eda8 <_vfiprintf_r+0x8c>
 800eeec:	210a      	movs	r1, #10
 800eeee:	434b      	muls	r3, r1
 800eef0:	4667      	mov	r7, ip
 800eef2:	189b      	adds	r3, r3, r2
 800eef4:	3909      	subs	r1, #9
 800eef6:	e7a3      	b.n	800ee40 <_vfiprintf_r+0x124>
 800eef8:	2301      	movs	r3, #1
 800eefa:	425b      	negs	r3, r3
 800eefc:	e7ce      	b.n	800ee9c <_vfiprintf_r+0x180>
 800eefe:	2300      	movs	r3, #0
 800ef00:	001a      	movs	r2, r3
 800ef02:	3701      	adds	r7, #1
 800ef04:	606b      	str	r3, [r5, #4]
 800ef06:	7839      	ldrb	r1, [r7, #0]
 800ef08:	1c78      	adds	r0, r7, #1
 800ef0a:	3930      	subs	r1, #48	; 0x30
 800ef0c:	4684      	mov	ip, r0
 800ef0e:	2909      	cmp	r1, #9
 800ef10:	d903      	bls.n	800ef1a <_vfiprintf_r+0x1fe>
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d0c3      	beq.n	800ee9e <_vfiprintf_r+0x182>
 800ef16:	9209      	str	r2, [sp, #36]	; 0x24
 800ef18:	e7c1      	b.n	800ee9e <_vfiprintf_r+0x182>
 800ef1a:	230a      	movs	r3, #10
 800ef1c:	435a      	muls	r2, r3
 800ef1e:	4667      	mov	r7, ip
 800ef20:	1852      	adds	r2, r2, r1
 800ef22:	3b09      	subs	r3, #9
 800ef24:	e7ef      	b.n	800ef06 <_vfiprintf_r+0x1ea>
 800ef26:	ab07      	add	r3, sp, #28
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	0022      	movs	r2, r4
 800ef2c:	0029      	movs	r1, r5
 800ef2e:	0030      	movs	r0, r6
 800ef30:	4b16      	ldr	r3, [pc, #88]	; (800ef8c <_vfiprintf_r+0x270>)
 800ef32:	f7fd fdbd 	bl	800cab0 <_printf_float>
 800ef36:	9004      	str	r0, [sp, #16]
 800ef38:	9b04      	ldr	r3, [sp, #16]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	d1d1      	bne.n	800eee2 <_vfiprintf_r+0x1c6>
 800ef3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef40:	07db      	lsls	r3, r3, #31
 800ef42:	d405      	bmi.n	800ef50 <_vfiprintf_r+0x234>
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	059b      	lsls	r3, r3, #22
 800ef48:	d402      	bmi.n	800ef50 <_vfiprintf_r+0x234>
 800ef4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef4c:	f000 fad4 	bl	800f4f8 <__retarget_lock_release_recursive>
 800ef50:	89a3      	ldrh	r3, [r4, #12]
 800ef52:	065b      	lsls	r3, r3, #25
 800ef54:	d500      	bpl.n	800ef58 <_vfiprintf_r+0x23c>
 800ef56:	e70a      	b.n	800ed6e <_vfiprintf_r+0x52>
 800ef58:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ef5a:	e70a      	b.n	800ed72 <_vfiprintf_r+0x56>
 800ef5c:	ab07      	add	r3, sp, #28
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	0022      	movs	r2, r4
 800ef62:	0029      	movs	r1, r5
 800ef64:	0030      	movs	r0, r6
 800ef66:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <_vfiprintf_r+0x270>)
 800ef68:	f7fe f860 	bl	800d02c <_printf_i>
 800ef6c:	e7e3      	b.n	800ef36 <_vfiprintf_r+0x21a>
 800ef6e:	46c0      	nop			; (mov r8, r8)
 800ef70:	0801280c 	.word	0x0801280c
 800ef74:	0801282c 	.word	0x0801282c
 800ef78:	080127ec 	.word	0x080127ec
 800ef7c:	08012694 	.word	0x08012694
 800ef80:	0801269a 	.word	0x0801269a
 800ef84:	0801269e 	.word	0x0801269e
 800ef88:	0800cab1 	.word	0x0800cab1
 800ef8c:	0800ecf7 	.word	0x0800ecf7

0800ef90 <__swbuf_r>:
 800ef90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef92:	0005      	movs	r5, r0
 800ef94:	000e      	movs	r6, r1
 800ef96:	0014      	movs	r4, r2
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d004      	beq.n	800efa6 <__swbuf_r+0x16>
 800ef9c:	6983      	ldr	r3, [r0, #24]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <__swbuf_r+0x16>
 800efa2:	f000 fa07 	bl	800f3b4 <__sinit>
 800efa6:	4b22      	ldr	r3, [pc, #136]	; (800f030 <__swbuf_r+0xa0>)
 800efa8:	429c      	cmp	r4, r3
 800efaa:	d12e      	bne.n	800f00a <__swbuf_r+0x7a>
 800efac:	686c      	ldr	r4, [r5, #4]
 800efae:	69a3      	ldr	r3, [r4, #24]
 800efb0:	60a3      	str	r3, [r4, #8]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	071b      	lsls	r3, r3, #28
 800efb6:	d532      	bpl.n	800f01e <__swbuf_r+0x8e>
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d02f      	beq.n	800f01e <__swbuf_r+0x8e>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	6922      	ldr	r2, [r4, #16]
 800efc2:	b2f7      	uxtb	r7, r6
 800efc4:	1a98      	subs	r0, r3, r2
 800efc6:	6963      	ldr	r3, [r4, #20]
 800efc8:	b2f6      	uxtb	r6, r6
 800efca:	4283      	cmp	r3, r0
 800efcc:	dc05      	bgt.n	800efda <__swbuf_r+0x4a>
 800efce:	0021      	movs	r1, r4
 800efd0:	0028      	movs	r0, r5
 800efd2:	f000 f94d 	bl	800f270 <_fflush_r>
 800efd6:	2800      	cmp	r0, #0
 800efd8:	d127      	bne.n	800f02a <__swbuf_r+0x9a>
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	3001      	adds	r0, #1
 800efde:	3b01      	subs	r3, #1
 800efe0:	60a3      	str	r3, [r4, #8]
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	701f      	strb	r7, [r3, #0]
 800efea:	6963      	ldr	r3, [r4, #20]
 800efec:	4283      	cmp	r3, r0
 800efee:	d004      	beq.n	800effa <__swbuf_r+0x6a>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	07db      	lsls	r3, r3, #31
 800eff4:	d507      	bpl.n	800f006 <__swbuf_r+0x76>
 800eff6:	2e0a      	cmp	r6, #10
 800eff8:	d105      	bne.n	800f006 <__swbuf_r+0x76>
 800effa:	0021      	movs	r1, r4
 800effc:	0028      	movs	r0, r5
 800effe:	f000 f937 	bl	800f270 <_fflush_r>
 800f002:	2800      	cmp	r0, #0
 800f004:	d111      	bne.n	800f02a <__swbuf_r+0x9a>
 800f006:	0030      	movs	r0, r6
 800f008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00a:	4b0a      	ldr	r3, [pc, #40]	; (800f034 <__swbuf_r+0xa4>)
 800f00c:	429c      	cmp	r4, r3
 800f00e:	d101      	bne.n	800f014 <__swbuf_r+0x84>
 800f010:	68ac      	ldr	r4, [r5, #8]
 800f012:	e7cc      	b.n	800efae <__swbuf_r+0x1e>
 800f014:	4b08      	ldr	r3, [pc, #32]	; (800f038 <__swbuf_r+0xa8>)
 800f016:	429c      	cmp	r4, r3
 800f018:	d1c9      	bne.n	800efae <__swbuf_r+0x1e>
 800f01a:	68ec      	ldr	r4, [r5, #12]
 800f01c:	e7c7      	b.n	800efae <__swbuf_r+0x1e>
 800f01e:	0021      	movs	r1, r4
 800f020:	0028      	movs	r0, r5
 800f022:	f000 f819 	bl	800f058 <__swsetup_r>
 800f026:	2800      	cmp	r0, #0
 800f028:	d0c9      	beq.n	800efbe <__swbuf_r+0x2e>
 800f02a:	2601      	movs	r6, #1
 800f02c:	4276      	negs	r6, r6
 800f02e:	e7ea      	b.n	800f006 <__swbuf_r+0x76>
 800f030:	0801280c 	.word	0x0801280c
 800f034:	0801282c 	.word	0x0801282c
 800f038:	080127ec 	.word	0x080127ec

0800f03c <__ascii_wctomb>:
 800f03c:	0003      	movs	r3, r0
 800f03e:	1e08      	subs	r0, r1, #0
 800f040:	d005      	beq.n	800f04e <__ascii_wctomb+0x12>
 800f042:	2aff      	cmp	r2, #255	; 0xff
 800f044:	d904      	bls.n	800f050 <__ascii_wctomb+0x14>
 800f046:	228a      	movs	r2, #138	; 0x8a
 800f048:	2001      	movs	r0, #1
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	4240      	negs	r0, r0
 800f04e:	4770      	bx	lr
 800f050:	2001      	movs	r0, #1
 800f052:	700a      	strb	r2, [r1, #0]
 800f054:	e7fb      	b.n	800f04e <__ascii_wctomb+0x12>
	...

0800f058 <__swsetup_r>:
 800f058:	4b37      	ldr	r3, [pc, #220]	; (800f138 <__swsetup_r+0xe0>)
 800f05a:	b570      	push	{r4, r5, r6, lr}
 800f05c:	681d      	ldr	r5, [r3, #0]
 800f05e:	0006      	movs	r6, r0
 800f060:	000c      	movs	r4, r1
 800f062:	2d00      	cmp	r5, #0
 800f064:	d005      	beq.n	800f072 <__swsetup_r+0x1a>
 800f066:	69ab      	ldr	r3, [r5, #24]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d102      	bne.n	800f072 <__swsetup_r+0x1a>
 800f06c:	0028      	movs	r0, r5
 800f06e:	f000 f9a1 	bl	800f3b4 <__sinit>
 800f072:	4b32      	ldr	r3, [pc, #200]	; (800f13c <__swsetup_r+0xe4>)
 800f074:	429c      	cmp	r4, r3
 800f076:	d10f      	bne.n	800f098 <__swsetup_r+0x40>
 800f078:	686c      	ldr	r4, [r5, #4]
 800f07a:	230c      	movs	r3, #12
 800f07c:	5ee2      	ldrsh	r2, [r4, r3]
 800f07e:	b293      	uxth	r3, r2
 800f080:	0711      	lsls	r1, r2, #28
 800f082:	d42d      	bmi.n	800f0e0 <__swsetup_r+0x88>
 800f084:	06d9      	lsls	r1, r3, #27
 800f086:	d411      	bmi.n	800f0ac <__swsetup_r+0x54>
 800f088:	2309      	movs	r3, #9
 800f08a:	2001      	movs	r0, #1
 800f08c:	6033      	str	r3, [r6, #0]
 800f08e:	3337      	adds	r3, #55	; 0x37
 800f090:	4313      	orrs	r3, r2
 800f092:	81a3      	strh	r3, [r4, #12]
 800f094:	4240      	negs	r0, r0
 800f096:	bd70      	pop	{r4, r5, r6, pc}
 800f098:	4b29      	ldr	r3, [pc, #164]	; (800f140 <__swsetup_r+0xe8>)
 800f09a:	429c      	cmp	r4, r3
 800f09c:	d101      	bne.n	800f0a2 <__swsetup_r+0x4a>
 800f09e:	68ac      	ldr	r4, [r5, #8]
 800f0a0:	e7eb      	b.n	800f07a <__swsetup_r+0x22>
 800f0a2:	4b28      	ldr	r3, [pc, #160]	; (800f144 <__swsetup_r+0xec>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	d1e8      	bne.n	800f07a <__swsetup_r+0x22>
 800f0a8:	68ec      	ldr	r4, [r5, #12]
 800f0aa:	e7e6      	b.n	800f07a <__swsetup_r+0x22>
 800f0ac:	075b      	lsls	r3, r3, #29
 800f0ae:	d513      	bpl.n	800f0d8 <__swsetup_r+0x80>
 800f0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0b2:	2900      	cmp	r1, #0
 800f0b4:	d008      	beq.n	800f0c8 <__swsetup_r+0x70>
 800f0b6:	0023      	movs	r3, r4
 800f0b8:	3344      	adds	r3, #68	; 0x44
 800f0ba:	4299      	cmp	r1, r3
 800f0bc:	d002      	beq.n	800f0c4 <__swsetup_r+0x6c>
 800f0be:	0030      	movs	r0, r6
 800f0c0:	f7ff fb5e 	bl	800e780 <_free_r>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	6363      	str	r3, [r4, #52]	; 0x34
 800f0c8:	2224      	movs	r2, #36	; 0x24
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	4393      	bics	r3, r2
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6063      	str	r3, [r4, #4]
 800f0d4:	6923      	ldr	r3, [r4, #16]
 800f0d6:	6023      	str	r3, [r4, #0]
 800f0d8:	2308      	movs	r3, #8
 800f0da:	89a2      	ldrh	r2, [r4, #12]
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	81a3      	strh	r3, [r4, #12]
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10b      	bne.n	800f0fe <__swsetup_r+0xa6>
 800f0e6:	21a0      	movs	r1, #160	; 0xa0
 800f0e8:	2280      	movs	r2, #128	; 0x80
 800f0ea:	89a3      	ldrh	r3, [r4, #12]
 800f0ec:	0089      	lsls	r1, r1, #2
 800f0ee:	0092      	lsls	r2, r2, #2
 800f0f0:	400b      	ands	r3, r1
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d003      	beq.n	800f0fe <__swsetup_r+0xa6>
 800f0f6:	0021      	movs	r1, r4
 800f0f8:	0030      	movs	r0, r6
 800f0fa:	f000 fa27 	bl	800f54c <__smakebuf_r>
 800f0fe:	220c      	movs	r2, #12
 800f100:	5ea3      	ldrsh	r3, [r4, r2]
 800f102:	2001      	movs	r0, #1
 800f104:	001a      	movs	r2, r3
 800f106:	b299      	uxth	r1, r3
 800f108:	4002      	ands	r2, r0
 800f10a:	4203      	tst	r3, r0
 800f10c:	d00f      	beq.n	800f12e <__swsetup_r+0xd6>
 800f10e:	2200      	movs	r2, #0
 800f110:	60a2      	str	r2, [r4, #8]
 800f112:	6962      	ldr	r2, [r4, #20]
 800f114:	4252      	negs	r2, r2
 800f116:	61a2      	str	r2, [r4, #24]
 800f118:	2000      	movs	r0, #0
 800f11a:	6922      	ldr	r2, [r4, #16]
 800f11c:	4282      	cmp	r2, r0
 800f11e:	d1ba      	bne.n	800f096 <__swsetup_r+0x3e>
 800f120:	060a      	lsls	r2, r1, #24
 800f122:	d5b8      	bpl.n	800f096 <__swsetup_r+0x3e>
 800f124:	2240      	movs	r2, #64	; 0x40
 800f126:	4313      	orrs	r3, r2
 800f128:	81a3      	strh	r3, [r4, #12]
 800f12a:	3801      	subs	r0, #1
 800f12c:	e7b3      	b.n	800f096 <__swsetup_r+0x3e>
 800f12e:	0788      	lsls	r0, r1, #30
 800f130:	d400      	bmi.n	800f134 <__swsetup_r+0xdc>
 800f132:	6962      	ldr	r2, [r4, #20]
 800f134:	60a2      	str	r2, [r4, #8]
 800f136:	e7ef      	b.n	800f118 <__swsetup_r+0xc0>
 800f138:	20000010 	.word	0x20000010
 800f13c:	0801280c 	.word	0x0801280c
 800f140:	0801282c 	.word	0x0801282c
 800f144:	080127ec 	.word	0x080127ec

0800f148 <abort>:
 800f148:	2006      	movs	r0, #6
 800f14a:	b510      	push	{r4, lr}
 800f14c:	f000 fa74 	bl	800f638 <raise>
 800f150:	2001      	movs	r0, #1
 800f152:	f7fa f9a0 	bl	8009496 <_exit>
	...

0800f158 <__sflush_r>:
 800f158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f15a:	898b      	ldrh	r3, [r1, #12]
 800f15c:	0005      	movs	r5, r0
 800f15e:	000c      	movs	r4, r1
 800f160:	071a      	lsls	r2, r3, #28
 800f162:	d45f      	bmi.n	800f224 <__sflush_r+0xcc>
 800f164:	684a      	ldr	r2, [r1, #4]
 800f166:	2a00      	cmp	r2, #0
 800f168:	dc04      	bgt.n	800f174 <__sflush_r+0x1c>
 800f16a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800f16c:	2a00      	cmp	r2, #0
 800f16e:	dc01      	bgt.n	800f174 <__sflush_r+0x1c>
 800f170:	2000      	movs	r0, #0
 800f172:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f174:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f176:	2f00      	cmp	r7, #0
 800f178:	d0fa      	beq.n	800f170 <__sflush_r+0x18>
 800f17a:	2200      	movs	r2, #0
 800f17c:	2180      	movs	r1, #128	; 0x80
 800f17e:	682e      	ldr	r6, [r5, #0]
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	001a      	movs	r2, r3
 800f184:	0149      	lsls	r1, r1, #5
 800f186:	400a      	ands	r2, r1
 800f188:	420b      	tst	r3, r1
 800f18a:	d034      	beq.n	800f1f6 <__sflush_r+0x9e>
 800f18c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	075b      	lsls	r3, r3, #29
 800f192:	d506      	bpl.n	800f1a2 <__sflush_r+0x4a>
 800f194:	6863      	ldr	r3, [r4, #4]
 800f196:	1ac0      	subs	r0, r0, r3
 800f198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d001      	beq.n	800f1a2 <__sflush_r+0x4a>
 800f19e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1a0:	1ac0      	subs	r0, r0, r3
 800f1a2:	0002      	movs	r2, r0
 800f1a4:	6a21      	ldr	r1, [r4, #32]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	0028      	movs	r0, r5
 800f1aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f1ac:	47b8      	blx	r7
 800f1ae:	89a1      	ldrh	r1, [r4, #12]
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d106      	bne.n	800f1c2 <__sflush_r+0x6a>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	2b1d      	cmp	r3, #29
 800f1b8:	d831      	bhi.n	800f21e <__sflush_r+0xc6>
 800f1ba:	4a2c      	ldr	r2, [pc, #176]	; (800f26c <__sflush_r+0x114>)
 800f1bc:	40da      	lsrs	r2, r3
 800f1be:	07d3      	lsls	r3, r2, #31
 800f1c0:	d52d      	bpl.n	800f21e <__sflush_r+0xc6>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	04cb      	lsls	r3, r1, #19
 800f1cc:	d505      	bpl.n	800f1da <__sflush_r+0x82>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	d102      	bne.n	800f1d8 <__sflush_r+0x80>
 800f1d2:	682b      	ldr	r3, [r5, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d100      	bne.n	800f1da <__sflush_r+0x82>
 800f1d8:	6560      	str	r0, [r4, #84]	; 0x54
 800f1da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1dc:	602e      	str	r6, [r5, #0]
 800f1de:	2900      	cmp	r1, #0
 800f1e0:	d0c6      	beq.n	800f170 <__sflush_r+0x18>
 800f1e2:	0023      	movs	r3, r4
 800f1e4:	3344      	adds	r3, #68	; 0x44
 800f1e6:	4299      	cmp	r1, r3
 800f1e8:	d002      	beq.n	800f1f0 <__sflush_r+0x98>
 800f1ea:	0028      	movs	r0, r5
 800f1ec:	f7ff fac8 	bl	800e780 <_free_r>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	6360      	str	r0, [r4, #52]	; 0x34
 800f1f4:	e7bd      	b.n	800f172 <__sflush_r+0x1a>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	0028      	movs	r0, r5
 800f1fa:	6a21      	ldr	r1, [r4, #32]
 800f1fc:	47b8      	blx	r7
 800f1fe:	1c43      	adds	r3, r0, #1
 800f200:	d1c5      	bne.n	800f18e <__sflush_r+0x36>
 800f202:	682b      	ldr	r3, [r5, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0c2      	beq.n	800f18e <__sflush_r+0x36>
 800f208:	2b1d      	cmp	r3, #29
 800f20a:	d001      	beq.n	800f210 <__sflush_r+0xb8>
 800f20c:	2b16      	cmp	r3, #22
 800f20e:	d101      	bne.n	800f214 <__sflush_r+0xbc>
 800f210:	602e      	str	r6, [r5, #0]
 800f212:	e7ad      	b.n	800f170 <__sflush_r+0x18>
 800f214:	2340      	movs	r3, #64	; 0x40
 800f216:	89a2      	ldrh	r2, [r4, #12]
 800f218:	4313      	orrs	r3, r2
 800f21a:	81a3      	strh	r3, [r4, #12]
 800f21c:	e7a9      	b.n	800f172 <__sflush_r+0x1a>
 800f21e:	2340      	movs	r3, #64	; 0x40
 800f220:	430b      	orrs	r3, r1
 800f222:	e7fa      	b.n	800f21a <__sflush_r+0xc2>
 800f224:	690f      	ldr	r7, [r1, #16]
 800f226:	2f00      	cmp	r7, #0
 800f228:	d0a2      	beq.n	800f170 <__sflush_r+0x18>
 800f22a:	680a      	ldr	r2, [r1, #0]
 800f22c:	600f      	str	r7, [r1, #0]
 800f22e:	1bd2      	subs	r2, r2, r7
 800f230:	9201      	str	r2, [sp, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	079b      	lsls	r3, r3, #30
 800f236:	d100      	bne.n	800f23a <__sflush_r+0xe2>
 800f238:	694a      	ldr	r2, [r1, #20]
 800f23a:	60a2      	str	r2, [r4, #8]
 800f23c:	9b01      	ldr	r3, [sp, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dc00      	bgt.n	800f244 <__sflush_r+0xec>
 800f242:	e795      	b.n	800f170 <__sflush_r+0x18>
 800f244:	003a      	movs	r2, r7
 800f246:	0028      	movs	r0, r5
 800f248:	9b01      	ldr	r3, [sp, #4]
 800f24a:	6a21      	ldr	r1, [r4, #32]
 800f24c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f24e:	47b0      	blx	r6
 800f250:	2800      	cmp	r0, #0
 800f252:	dc06      	bgt.n	800f262 <__sflush_r+0x10a>
 800f254:	2340      	movs	r3, #64	; 0x40
 800f256:	2001      	movs	r0, #1
 800f258:	89a2      	ldrh	r2, [r4, #12]
 800f25a:	4240      	negs	r0, r0
 800f25c:	4313      	orrs	r3, r2
 800f25e:	81a3      	strh	r3, [r4, #12]
 800f260:	e787      	b.n	800f172 <__sflush_r+0x1a>
 800f262:	9b01      	ldr	r3, [sp, #4]
 800f264:	183f      	adds	r7, r7, r0
 800f266:	1a1b      	subs	r3, r3, r0
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	e7e7      	b.n	800f23c <__sflush_r+0xe4>
 800f26c:	20400001 	.word	0x20400001

0800f270 <_fflush_r>:
 800f270:	690b      	ldr	r3, [r1, #16]
 800f272:	b570      	push	{r4, r5, r6, lr}
 800f274:	0005      	movs	r5, r0
 800f276:	000c      	movs	r4, r1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d102      	bne.n	800f282 <_fflush_r+0x12>
 800f27c:	2500      	movs	r5, #0
 800f27e:	0028      	movs	r0, r5
 800f280:	bd70      	pop	{r4, r5, r6, pc}
 800f282:	2800      	cmp	r0, #0
 800f284:	d004      	beq.n	800f290 <_fflush_r+0x20>
 800f286:	6983      	ldr	r3, [r0, #24]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <_fflush_r+0x20>
 800f28c:	f000 f892 	bl	800f3b4 <__sinit>
 800f290:	4b14      	ldr	r3, [pc, #80]	; (800f2e4 <_fflush_r+0x74>)
 800f292:	429c      	cmp	r4, r3
 800f294:	d11b      	bne.n	800f2ce <_fflush_r+0x5e>
 800f296:	686c      	ldr	r4, [r5, #4]
 800f298:	220c      	movs	r2, #12
 800f29a:	5ea3      	ldrsh	r3, [r4, r2]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d0ed      	beq.n	800f27c <_fflush_r+0xc>
 800f2a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2a2:	07d2      	lsls	r2, r2, #31
 800f2a4:	d404      	bmi.n	800f2b0 <_fflush_r+0x40>
 800f2a6:	059b      	lsls	r3, r3, #22
 800f2a8:	d402      	bmi.n	800f2b0 <_fflush_r+0x40>
 800f2aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ac:	f000 f923 	bl	800f4f6 <__retarget_lock_acquire_recursive>
 800f2b0:	0028      	movs	r0, r5
 800f2b2:	0021      	movs	r1, r4
 800f2b4:	f7ff ff50 	bl	800f158 <__sflush_r>
 800f2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2ba:	0005      	movs	r5, r0
 800f2bc:	07db      	lsls	r3, r3, #31
 800f2be:	d4de      	bmi.n	800f27e <_fflush_r+0xe>
 800f2c0:	89a3      	ldrh	r3, [r4, #12]
 800f2c2:	059b      	lsls	r3, r3, #22
 800f2c4:	d4db      	bmi.n	800f27e <_fflush_r+0xe>
 800f2c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2c8:	f000 f916 	bl	800f4f8 <__retarget_lock_release_recursive>
 800f2cc:	e7d7      	b.n	800f27e <_fflush_r+0xe>
 800f2ce:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <_fflush_r+0x78>)
 800f2d0:	429c      	cmp	r4, r3
 800f2d2:	d101      	bne.n	800f2d8 <_fflush_r+0x68>
 800f2d4:	68ac      	ldr	r4, [r5, #8]
 800f2d6:	e7df      	b.n	800f298 <_fflush_r+0x28>
 800f2d8:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <_fflush_r+0x7c>)
 800f2da:	429c      	cmp	r4, r3
 800f2dc:	d1dc      	bne.n	800f298 <_fflush_r+0x28>
 800f2de:	68ec      	ldr	r4, [r5, #12]
 800f2e0:	e7da      	b.n	800f298 <_fflush_r+0x28>
 800f2e2:	46c0      	nop			; (mov r8, r8)
 800f2e4:	0801280c 	.word	0x0801280c
 800f2e8:	0801282c 	.word	0x0801282c
 800f2ec:	080127ec 	.word	0x080127ec

0800f2f0 <std>:
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	b510      	push	{r4, lr}
 800f2f4:	0004      	movs	r4, r0
 800f2f6:	6003      	str	r3, [r0, #0]
 800f2f8:	6043      	str	r3, [r0, #4]
 800f2fa:	6083      	str	r3, [r0, #8]
 800f2fc:	8181      	strh	r1, [r0, #12]
 800f2fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f300:	0019      	movs	r1, r3
 800f302:	81c2      	strh	r2, [r0, #14]
 800f304:	6103      	str	r3, [r0, #16]
 800f306:	6143      	str	r3, [r0, #20]
 800f308:	6183      	str	r3, [r0, #24]
 800f30a:	2208      	movs	r2, #8
 800f30c:	305c      	adds	r0, #92	; 0x5c
 800f30e:	f7fd fb1d 	bl	800c94c <memset>
 800f312:	4b05      	ldr	r3, [pc, #20]	; (800f328 <std+0x38>)
 800f314:	6263      	str	r3, [r4, #36]	; 0x24
 800f316:	4b05      	ldr	r3, [pc, #20]	; (800f32c <std+0x3c>)
 800f318:	6224      	str	r4, [r4, #32]
 800f31a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f31c:	4b04      	ldr	r3, [pc, #16]	; (800f330 <std+0x40>)
 800f31e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f320:	4b04      	ldr	r3, [pc, #16]	; (800f334 <std+0x44>)
 800f322:	6323      	str	r3, [r4, #48]	; 0x30
 800f324:	bd10      	pop	{r4, pc}
 800f326:	46c0      	nop			; (mov r8, r8)
 800f328:	0800f679 	.word	0x0800f679
 800f32c:	0800f6a1 	.word	0x0800f6a1
 800f330:	0800f6d9 	.word	0x0800f6d9
 800f334:	0800f705 	.word	0x0800f705

0800f338 <_cleanup_r>:
 800f338:	b510      	push	{r4, lr}
 800f33a:	4902      	ldr	r1, [pc, #8]	; (800f344 <_cleanup_r+0xc>)
 800f33c:	f000 f8ba 	bl	800f4b4 <_fwalk_reent>
 800f340:	bd10      	pop	{r4, pc}
 800f342:	46c0      	nop			; (mov r8, r8)
 800f344:	0800f271 	.word	0x0800f271

0800f348 <__sfmoreglue>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	2568      	movs	r5, #104	; 0x68
 800f34c:	1e4a      	subs	r2, r1, #1
 800f34e:	4355      	muls	r5, r2
 800f350:	000e      	movs	r6, r1
 800f352:	0029      	movs	r1, r5
 800f354:	3174      	adds	r1, #116	; 0x74
 800f356:	f7ff fa5d 	bl	800e814 <_malloc_r>
 800f35a:	1e04      	subs	r4, r0, #0
 800f35c:	d008      	beq.n	800f370 <__sfmoreglue+0x28>
 800f35e:	2100      	movs	r1, #0
 800f360:	002a      	movs	r2, r5
 800f362:	6001      	str	r1, [r0, #0]
 800f364:	6046      	str	r6, [r0, #4]
 800f366:	300c      	adds	r0, #12
 800f368:	60a0      	str	r0, [r4, #8]
 800f36a:	3268      	adds	r2, #104	; 0x68
 800f36c:	f7fd faee 	bl	800c94c <memset>
 800f370:	0020      	movs	r0, r4
 800f372:	bd70      	pop	{r4, r5, r6, pc}

0800f374 <__sfp_lock_acquire>:
 800f374:	b510      	push	{r4, lr}
 800f376:	4802      	ldr	r0, [pc, #8]	; (800f380 <__sfp_lock_acquire+0xc>)
 800f378:	f000 f8bd 	bl	800f4f6 <__retarget_lock_acquire_recursive>
 800f37c:	bd10      	pop	{r4, pc}
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	200005d4 	.word	0x200005d4

0800f384 <__sfp_lock_release>:
 800f384:	b510      	push	{r4, lr}
 800f386:	4802      	ldr	r0, [pc, #8]	; (800f390 <__sfp_lock_release+0xc>)
 800f388:	f000 f8b6 	bl	800f4f8 <__retarget_lock_release_recursive>
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	46c0      	nop			; (mov r8, r8)
 800f390:	200005d4 	.word	0x200005d4

0800f394 <__sinit_lock_acquire>:
 800f394:	b510      	push	{r4, lr}
 800f396:	4802      	ldr	r0, [pc, #8]	; (800f3a0 <__sinit_lock_acquire+0xc>)
 800f398:	f000 f8ad 	bl	800f4f6 <__retarget_lock_acquire_recursive>
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	46c0      	nop			; (mov r8, r8)
 800f3a0:	200005cf 	.word	0x200005cf

0800f3a4 <__sinit_lock_release>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	4802      	ldr	r0, [pc, #8]	; (800f3b0 <__sinit_lock_release+0xc>)
 800f3a8:	f000 f8a6 	bl	800f4f8 <__retarget_lock_release_recursive>
 800f3ac:	bd10      	pop	{r4, pc}
 800f3ae:	46c0      	nop			; (mov r8, r8)
 800f3b0:	200005cf 	.word	0x200005cf

0800f3b4 <__sinit>:
 800f3b4:	b513      	push	{r0, r1, r4, lr}
 800f3b6:	0004      	movs	r4, r0
 800f3b8:	f7ff ffec 	bl	800f394 <__sinit_lock_acquire>
 800f3bc:	69a3      	ldr	r3, [r4, #24]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d002      	beq.n	800f3c8 <__sinit+0x14>
 800f3c2:	f7ff ffef 	bl	800f3a4 <__sinit_lock_release>
 800f3c6:	bd13      	pop	{r0, r1, r4, pc}
 800f3c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f3ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800f3ce:	4b13      	ldr	r3, [pc, #76]	; (800f41c <__sinit+0x68>)
 800f3d0:	4a13      	ldr	r2, [pc, #76]	; (800f420 <__sinit+0x6c>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f3d6:	9301      	str	r3, [sp, #4]
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	d101      	bne.n	800f3e0 <__sinit+0x2c>
 800f3dc:	2301      	movs	r3, #1
 800f3de:	61a3      	str	r3, [r4, #24]
 800f3e0:	0020      	movs	r0, r4
 800f3e2:	f000 f81f 	bl	800f424 <__sfp>
 800f3e6:	6060      	str	r0, [r4, #4]
 800f3e8:	0020      	movs	r0, r4
 800f3ea:	f000 f81b 	bl	800f424 <__sfp>
 800f3ee:	60a0      	str	r0, [r4, #8]
 800f3f0:	0020      	movs	r0, r4
 800f3f2:	f000 f817 	bl	800f424 <__sfp>
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	2104      	movs	r1, #4
 800f3fa:	60e0      	str	r0, [r4, #12]
 800f3fc:	6860      	ldr	r0, [r4, #4]
 800f3fe:	f7ff ff77 	bl	800f2f0 <std>
 800f402:	2201      	movs	r2, #1
 800f404:	2109      	movs	r1, #9
 800f406:	68a0      	ldr	r0, [r4, #8]
 800f408:	f7ff ff72 	bl	800f2f0 <std>
 800f40c:	2202      	movs	r2, #2
 800f40e:	2112      	movs	r1, #18
 800f410:	68e0      	ldr	r0, [r4, #12]
 800f412:	f7ff ff6d 	bl	800f2f0 <std>
 800f416:	2301      	movs	r3, #1
 800f418:	61a3      	str	r3, [r4, #24]
 800f41a:	e7d2      	b.n	800f3c2 <__sinit+0xe>
 800f41c:	0801246c 	.word	0x0801246c
 800f420:	0800f339 	.word	0x0800f339

0800f424 <__sfp>:
 800f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f426:	0007      	movs	r7, r0
 800f428:	f7ff ffa4 	bl	800f374 <__sfp_lock_acquire>
 800f42c:	4b1f      	ldr	r3, [pc, #124]	; (800f4ac <__sfp+0x88>)
 800f42e:	681e      	ldr	r6, [r3, #0]
 800f430:	69b3      	ldr	r3, [r6, #24]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <__sfp+0x18>
 800f436:	0030      	movs	r0, r6
 800f438:	f7ff ffbc 	bl	800f3b4 <__sinit>
 800f43c:	3648      	adds	r6, #72	; 0x48
 800f43e:	68b4      	ldr	r4, [r6, #8]
 800f440:	6873      	ldr	r3, [r6, #4]
 800f442:	3b01      	subs	r3, #1
 800f444:	d504      	bpl.n	800f450 <__sfp+0x2c>
 800f446:	6833      	ldr	r3, [r6, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d022      	beq.n	800f492 <__sfp+0x6e>
 800f44c:	6836      	ldr	r6, [r6, #0]
 800f44e:	e7f6      	b.n	800f43e <__sfp+0x1a>
 800f450:	220c      	movs	r2, #12
 800f452:	5ea5      	ldrsh	r5, [r4, r2]
 800f454:	2d00      	cmp	r5, #0
 800f456:	d11a      	bne.n	800f48e <__sfp+0x6a>
 800f458:	0020      	movs	r0, r4
 800f45a:	4b15      	ldr	r3, [pc, #84]	; (800f4b0 <__sfp+0x8c>)
 800f45c:	3058      	adds	r0, #88	; 0x58
 800f45e:	60e3      	str	r3, [r4, #12]
 800f460:	6665      	str	r5, [r4, #100]	; 0x64
 800f462:	f000 f847 	bl	800f4f4 <__retarget_lock_init_recursive>
 800f466:	f7ff ff8d 	bl	800f384 <__sfp_lock_release>
 800f46a:	0020      	movs	r0, r4
 800f46c:	2208      	movs	r2, #8
 800f46e:	0029      	movs	r1, r5
 800f470:	6025      	str	r5, [r4, #0]
 800f472:	60a5      	str	r5, [r4, #8]
 800f474:	6065      	str	r5, [r4, #4]
 800f476:	6125      	str	r5, [r4, #16]
 800f478:	6165      	str	r5, [r4, #20]
 800f47a:	61a5      	str	r5, [r4, #24]
 800f47c:	305c      	adds	r0, #92	; 0x5c
 800f47e:	f7fd fa65 	bl	800c94c <memset>
 800f482:	6365      	str	r5, [r4, #52]	; 0x34
 800f484:	63a5      	str	r5, [r4, #56]	; 0x38
 800f486:	64a5      	str	r5, [r4, #72]	; 0x48
 800f488:	64e5      	str	r5, [r4, #76]	; 0x4c
 800f48a:	0020      	movs	r0, r4
 800f48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f48e:	3468      	adds	r4, #104	; 0x68
 800f490:	e7d7      	b.n	800f442 <__sfp+0x1e>
 800f492:	2104      	movs	r1, #4
 800f494:	0038      	movs	r0, r7
 800f496:	f7ff ff57 	bl	800f348 <__sfmoreglue>
 800f49a:	1e04      	subs	r4, r0, #0
 800f49c:	6030      	str	r0, [r6, #0]
 800f49e:	d1d5      	bne.n	800f44c <__sfp+0x28>
 800f4a0:	f7ff ff70 	bl	800f384 <__sfp_lock_release>
 800f4a4:	230c      	movs	r3, #12
 800f4a6:	603b      	str	r3, [r7, #0]
 800f4a8:	e7ef      	b.n	800f48a <__sfp+0x66>
 800f4aa:	46c0      	nop			; (mov r8, r8)
 800f4ac:	0801246c 	.word	0x0801246c
 800f4b0:	ffff0001 	.word	0xffff0001

0800f4b4 <_fwalk_reent>:
 800f4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4b6:	0004      	movs	r4, r0
 800f4b8:	0006      	movs	r6, r0
 800f4ba:	2700      	movs	r7, #0
 800f4bc:	9101      	str	r1, [sp, #4]
 800f4be:	3448      	adds	r4, #72	; 0x48
 800f4c0:	6863      	ldr	r3, [r4, #4]
 800f4c2:	68a5      	ldr	r5, [r4, #8]
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	9b00      	ldr	r3, [sp, #0]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	d504      	bpl.n	800f4d8 <_fwalk_reent+0x24>
 800f4ce:	6824      	ldr	r4, [r4, #0]
 800f4d0:	2c00      	cmp	r4, #0
 800f4d2:	d1f5      	bne.n	800f4c0 <_fwalk_reent+0xc>
 800f4d4:	0038      	movs	r0, r7
 800f4d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4d8:	89ab      	ldrh	r3, [r5, #12]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d908      	bls.n	800f4f0 <_fwalk_reent+0x3c>
 800f4de:	220e      	movs	r2, #14
 800f4e0:	5eab      	ldrsh	r3, [r5, r2]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	d004      	beq.n	800f4f0 <_fwalk_reent+0x3c>
 800f4e6:	0029      	movs	r1, r5
 800f4e8:	0030      	movs	r0, r6
 800f4ea:	9b01      	ldr	r3, [sp, #4]
 800f4ec:	4798      	blx	r3
 800f4ee:	4307      	orrs	r7, r0
 800f4f0:	3568      	adds	r5, #104	; 0x68
 800f4f2:	e7e8      	b.n	800f4c6 <_fwalk_reent+0x12>

0800f4f4 <__retarget_lock_init_recursive>:
 800f4f4:	4770      	bx	lr

0800f4f6 <__retarget_lock_acquire_recursive>:
 800f4f6:	4770      	bx	lr

0800f4f8 <__retarget_lock_release_recursive>:
 800f4f8:	4770      	bx	lr
	...

0800f4fc <__swhatbuf_r>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	000e      	movs	r6, r1
 800f500:	001d      	movs	r5, r3
 800f502:	230e      	movs	r3, #14
 800f504:	5ec9      	ldrsh	r1, [r1, r3]
 800f506:	0014      	movs	r4, r2
 800f508:	b096      	sub	sp, #88	; 0x58
 800f50a:	2900      	cmp	r1, #0
 800f50c:	da07      	bge.n	800f51e <__swhatbuf_r+0x22>
 800f50e:	2300      	movs	r3, #0
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	89b3      	ldrh	r3, [r6, #12]
 800f514:	061b      	lsls	r3, r3, #24
 800f516:	d411      	bmi.n	800f53c <__swhatbuf_r+0x40>
 800f518:	2380      	movs	r3, #128	; 0x80
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	e00f      	b.n	800f53e <__swhatbuf_r+0x42>
 800f51e:	466a      	mov	r2, sp
 800f520:	f000 f91c 	bl	800f75c <_fstat_r>
 800f524:	2800      	cmp	r0, #0
 800f526:	dbf2      	blt.n	800f50e <__swhatbuf_r+0x12>
 800f528:	23f0      	movs	r3, #240	; 0xf0
 800f52a:	9901      	ldr	r1, [sp, #4]
 800f52c:	021b      	lsls	r3, r3, #8
 800f52e:	4019      	ands	r1, r3
 800f530:	4b05      	ldr	r3, [pc, #20]	; (800f548 <__swhatbuf_r+0x4c>)
 800f532:	18c9      	adds	r1, r1, r3
 800f534:	424b      	negs	r3, r1
 800f536:	4159      	adcs	r1, r3
 800f538:	6029      	str	r1, [r5, #0]
 800f53a:	e7ed      	b.n	800f518 <__swhatbuf_r+0x1c>
 800f53c:	2340      	movs	r3, #64	; 0x40
 800f53e:	2000      	movs	r0, #0
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	b016      	add	sp, #88	; 0x58
 800f544:	bd70      	pop	{r4, r5, r6, pc}
 800f546:	46c0      	nop			; (mov r8, r8)
 800f548:	ffffe000 	.word	0xffffe000

0800f54c <__smakebuf_r>:
 800f54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f54e:	2602      	movs	r6, #2
 800f550:	898b      	ldrh	r3, [r1, #12]
 800f552:	0005      	movs	r5, r0
 800f554:	000c      	movs	r4, r1
 800f556:	4233      	tst	r3, r6
 800f558:	d006      	beq.n	800f568 <__smakebuf_r+0x1c>
 800f55a:	0023      	movs	r3, r4
 800f55c:	3347      	adds	r3, #71	; 0x47
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	6123      	str	r3, [r4, #16]
 800f562:	2301      	movs	r3, #1
 800f564:	6163      	str	r3, [r4, #20]
 800f566:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f568:	466a      	mov	r2, sp
 800f56a:	ab01      	add	r3, sp, #4
 800f56c:	f7ff ffc6 	bl	800f4fc <__swhatbuf_r>
 800f570:	9900      	ldr	r1, [sp, #0]
 800f572:	0007      	movs	r7, r0
 800f574:	0028      	movs	r0, r5
 800f576:	f7ff f94d 	bl	800e814 <_malloc_r>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d108      	bne.n	800f590 <__smakebuf_r+0x44>
 800f57e:	220c      	movs	r2, #12
 800f580:	5ea3      	ldrsh	r3, [r4, r2]
 800f582:	059a      	lsls	r2, r3, #22
 800f584:	d4ef      	bmi.n	800f566 <__smakebuf_r+0x1a>
 800f586:	2203      	movs	r2, #3
 800f588:	4393      	bics	r3, r2
 800f58a:	431e      	orrs	r6, r3
 800f58c:	81a6      	strh	r6, [r4, #12]
 800f58e:	e7e4      	b.n	800f55a <__smakebuf_r+0xe>
 800f590:	4b0f      	ldr	r3, [pc, #60]	; (800f5d0 <__smakebuf_r+0x84>)
 800f592:	62ab      	str	r3, [r5, #40]	; 0x28
 800f594:	2380      	movs	r3, #128	; 0x80
 800f596:	89a2      	ldrh	r2, [r4, #12]
 800f598:	6020      	str	r0, [r4, #0]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	81a3      	strh	r3, [r4, #12]
 800f59e:	9b00      	ldr	r3, [sp, #0]
 800f5a0:	6120      	str	r0, [r4, #16]
 800f5a2:	6163      	str	r3, [r4, #20]
 800f5a4:	9b01      	ldr	r3, [sp, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00d      	beq.n	800f5c6 <__smakebuf_r+0x7a>
 800f5aa:	0028      	movs	r0, r5
 800f5ac:	230e      	movs	r3, #14
 800f5ae:	5ee1      	ldrsh	r1, [r4, r3]
 800f5b0:	f000 f8e6 	bl	800f780 <_isatty_r>
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d006      	beq.n	800f5c6 <__smakebuf_r+0x7a>
 800f5b8:	2203      	movs	r2, #3
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	4393      	bics	r3, r2
 800f5be:	001a      	movs	r2, r3
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	81a3      	strh	r3, [r4, #12]
 800f5c6:	89a0      	ldrh	r0, [r4, #12]
 800f5c8:	4307      	orrs	r7, r0
 800f5ca:	81a7      	strh	r7, [r4, #12]
 800f5cc:	e7cb      	b.n	800f566 <__smakebuf_r+0x1a>
 800f5ce:	46c0      	nop			; (mov r8, r8)
 800f5d0:	0800f339 	.word	0x0800f339

0800f5d4 <_malloc_usable_size_r>:
 800f5d4:	1f0b      	subs	r3, r1, #4
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	1f18      	subs	r0, r3, #4
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	da01      	bge.n	800f5e2 <_malloc_usable_size_r+0xe>
 800f5de:	580b      	ldr	r3, [r1, r0]
 800f5e0:	18c0      	adds	r0, r0, r3
 800f5e2:	4770      	bx	lr

0800f5e4 <_raise_r>:
 800f5e4:	b570      	push	{r4, r5, r6, lr}
 800f5e6:	0004      	movs	r4, r0
 800f5e8:	000d      	movs	r5, r1
 800f5ea:	291f      	cmp	r1, #31
 800f5ec:	d904      	bls.n	800f5f8 <_raise_r+0x14>
 800f5ee:	2316      	movs	r3, #22
 800f5f0:	6003      	str	r3, [r0, #0]
 800f5f2:	2001      	movs	r0, #1
 800f5f4:	4240      	negs	r0, r0
 800f5f6:	bd70      	pop	{r4, r5, r6, pc}
 800f5f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d004      	beq.n	800f608 <_raise_r+0x24>
 800f5fe:	008a      	lsls	r2, r1, #2
 800f600:	189b      	adds	r3, r3, r2
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	2a00      	cmp	r2, #0
 800f606:	d108      	bne.n	800f61a <_raise_r+0x36>
 800f608:	0020      	movs	r0, r4
 800f60a:	f000 f831 	bl	800f670 <_getpid_r>
 800f60e:	002a      	movs	r2, r5
 800f610:	0001      	movs	r1, r0
 800f612:	0020      	movs	r0, r4
 800f614:	f000 f81a 	bl	800f64c <_kill_r>
 800f618:	e7ed      	b.n	800f5f6 <_raise_r+0x12>
 800f61a:	2000      	movs	r0, #0
 800f61c:	2a01      	cmp	r2, #1
 800f61e:	d0ea      	beq.n	800f5f6 <_raise_r+0x12>
 800f620:	1c51      	adds	r1, r2, #1
 800f622:	d103      	bne.n	800f62c <_raise_r+0x48>
 800f624:	2316      	movs	r3, #22
 800f626:	3001      	adds	r0, #1
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	e7e4      	b.n	800f5f6 <_raise_r+0x12>
 800f62c:	2400      	movs	r4, #0
 800f62e:	0028      	movs	r0, r5
 800f630:	601c      	str	r4, [r3, #0]
 800f632:	4790      	blx	r2
 800f634:	0020      	movs	r0, r4
 800f636:	e7de      	b.n	800f5f6 <_raise_r+0x12>

0800f638 <raise>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	4b03      	ldr	r3, [pc, #12]	; (800f648 <raise+0x10>)
 800f63c:	0001      	movs	r1, r0
 800f63e:	6818      	ldr	r0, [r3, #0]
 800f640:	f7ff ffd0 	bl	800f5e4 <_raise_r>
 800f644:	bd10      	pop	{r4, pc}
 800f646:	46c0      	nop			; (mov r8, r8)
 800f648:	20000010 	.word	0x20000010

0800f64c <_kill_r>:
 800f64c:	2300      	movs	r3, #0
 800f64e:	b570      	push	{r4, r5, r6, lr}
 800f650:	4d06      	ldr	r5, [pc, #24]	; (800f66c <_kill_r+0x20>)
 800f652:	0004      	movs	r4, r0
 800f654:	0008      	movs	r0, r1
 800f656:	0011      	movs	r1, r2
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	f7f9 ff0c 	bl	8009476 <_kill>
 800f65e:	1c43      	adds	r3, r0, #1
 800f660:	d103      	bne.n	800f66a <_kill_r+0x1e>
 800f662:	682b      	ldr	r3, [r5, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d000      	beq.n	800f66a <_kill_r+0x1e>
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	bd70      	pop	{r4, r5, r6, pc}
 800f66c:	200005c8 	.word	0x200005c8

0800f670 <_getpid_r>:
 800f670:	b510      	push	{r4, lr}
 800f672:	f7f9 fefa 	bl	800946a <_getpid>
 800f676:	bd10      	pop	{r4, pc}

0800f678 <__sread>:
 800f678:	b570      	push	{r4, r5, r6, lr}
 800f67a:	000c      	movs	r4, r1
 800f67c:	250e      	movs	r5, #14
 800f67e:	5f49      	ldrsh	r1, [r1, r5]
 800f680:	f000 f8a4 	bl	800f7cc <_read_r>
 800f684:	2800      	cmp	r0, #0
 800f686:	db03      	blt.n	800f690 <__sread+0x18>
 800f688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f68a:	181b      	adds	r3, r3, r0
 800f68c:	6563      	str	r3, [r4, #84]	; 0x54
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	89a3      	ldrh	r3, [r4, #12]
 800f692:	4a02      	ldr	r2, [pc, #8]	; (800f69c <__sread+0x24>)
 800f694:	4013      	ands	r3, r2
 800f696:	81a3      	strh	r3, [r4, #12]
 800f698:	e7f9      	b.n	800f68e <__sread+0x16>
 800f69a:	46c0      	nop			; (mov r8, r8)
 800f69c:	ffffefff 	.word	0xffffefff

0800f6a0 <__swrite>:
 800f6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a2:	001f      	movs	r7, r3
 800f6a4:	898b      	ldrh	r3, [r1, #12]
 800f6a6:	0005      	movs	r5, r0
 800f6a8:	000c      	movs	r4, r1
 800f6aa:	0016      	movs	r6, r2
 800f6ac:	05db      	lsls	r3, r3, #23
 800f6ae:	d505      	bpl.n	800f6bc <__swrite+0x1c>
 800f6b0:	230e      	movs	r3, #14
 800f6b2:	5ec9      	ldrsh	r1, [r1, r3]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	f000 f874 	bl	800f7a4 <_lseek_r>
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	4a05      	ldr	r2, [pc, #20]	; (800f6d4 <__swrite+0x34>)
 800f6c0:	0028      	movs	r0, r5
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	81a3      	strh	r3, [r4, #12]
 800f6c6:	0032      	movs	r2, r6
 800f6c8:	230e      	movs	r3, #14
 800f6ca:	5ee1      	ldrsh	r1, [r4, r3]
 800f6cc:	003b      	movs	r3, r7
 800f6ce:	f000 f81f 	bl	800f710 <_write_r>
 800f6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6d4:	ffffefff 	.word	0xffffefff

0800f6d8 <__sseek>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	000c      	movs	r4, r1
 800f6dc:	250e      	movs	r5, #14
 800f6de:	5f49      	ldrsh	r1, [r1, r5]
 800f6e0:	f000 f860 	bl	800f7a4 <_lseek_r>
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	1c42      	adds	r2, r0, #1
 800f6e8:	d103      	bne.n	800f6f2 <__sseek+0x1a>
 800f6ea:	4a05      	ldr	r2, [pc, #20]	; (800f700 <__sseek+0x28>)
 800f6ec:	4013      	ands	r3, r2
 800f6ee:	81a3      	strh	r3, [r4, #12]
 800f6f0:	bd70      	pop	{r4, r5, r6, pc}
 800f6f2:	2280      	movs	r2, #128	; 0x80
 800f6f4:	0152      	lsls	r2, r2, #5
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	81a3      	strh	r3, [r4, #12]
 800f6fa:	6560      	str	r0, [r4, #84]	; 0x54
 800f6fc:	e7f8      	b.n	800f6f0 <__sseek+0x18>
 800f6fe:	46c0      	nop			; (mov r8, r8)
 800f700:	ffffefff 	.word	0xffffefff

0800f704 <__sclose>:
 800f704:	b510      	push	{r4, lr}
 800f706:	230e      	movs	r3, #14
 800f708:	5ec9      	ldrsh	r1, [r1, r3]
 800f70a:	f000 f815 	bl	800f738 <_close_r>
 800f70e:	bd10      	pop	{r4, pc}

0800f710 <_write_r>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	0004      	movs	r4, r0
 800f714:	0008      	movs	r0, r1
 800f716:	0011      	movs	r1, r2
 800f718:	001a      	movs	r2, r3
 800f71a:	2300      	movs	r3, #0
 800f71c:	4d05      	ldr	r5, [pc, #20]	; (800f734 <_write_r+0x24>)
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	f7f9 fee2 	bl	80094e8 <_write>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d103      	bne.n	800f730 <_write_r+0x20>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d000      	beq.n	800f730 <_write_r+0x20>
 800f72e:	6023      	str	r3, [r4, #0]
 800f730:	bd70      	pop	{r4, r5, r6, pc}
 800f732:	46c0      	nop			; (mov r8, r8)
 800f734:	200005c8 	.word	0x200005c8

0800f738 <_close_r>:
 800f738:	2300      	movs	r3, #0
 800f73a:	b570      	push	{r4, r5, r6, lr}
 800f73c:	4d06      	ldr	r5, [pc, #24]	; (800f758 <_close_r+0x20>)
 800f73e:	0004      	movs	r4, r0
 800f740:	0008      	movs	r0, r1
 800f742:	602b      	str	r3, [r5, #0]
 800f744:	f7f9 feec 	bl	8009520 <_close>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d103      	bne.n	800f754 <_close_r+0x1c>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d000      	beq.n	800f754 <_close_r+0x1c>
 800f752:	6023      	str	r3, [r4, #0]
 800f754:	bd70      	pop	{r4, r5, r6, pc}
 800f756:	46c0      	nop			; (mov r8, r8)
 800f758:	200005c8 	.word	0x200005c8

0800f75c <_fstat_r>:
 800f75c:	2300      	movs	r3, #0
 800f75e:	b570      	push	{r4, r5, r6, lr}
 800f760:	4d06      	ldr	r5, [pc, #24]	; (800f77c <_fstat_r+0x20>)
 800f762:	0004      	movs	r4, r0
 800f764:	0008      	movs	r0, r1
 800f766:	0011      	movs	r1, r2
 800f768:	602b      	str	r3, [r5, #0]
 800f76a:	f7f9 fee3 	bl	8009534 <_fstat>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	d103      	bne.n	800f77a <_fstat_r+0x1e>
 800f772:	682b      	ldr	r3, [r5, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d000      	beq.n	800f77a <_fstat_r+0x1e>
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	bd70      	pop	{r4, r5, r6, pc}
 800f77c:	200005c8 	.word	0x200005c8

0800f780 <_isatty_r>:
 800f780:	2300      	movs	r3, #0
 800f782:	b570      	push	{r4, r5, r6, lr}
 800f784:	4d06      	ldr	r5, [pc, #24]	; (800f7a0 <_isatty_r+0x20>)
 800f786:	0004      	movs	r4, r0
 800f788:	0008      	movs	r0, r1
 800f78a:	602b      	str	r3, [r5, #0]
 800f78c:	f7f9 fee0 	bl	8009550 <_isatty>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d103      	bne.n	800f79c <_isatty_r+0x1c>
 800f794:	682b      	ldr	r3, [r5, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d000      	beq.n	800f79c <_isatty_r+0x1c>
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	bd70      	pop	{r4, r5, r6, pc}
 800f79e:	46c0      	nop			; (mov r8, r8)
 800f7a0:	200005c8 	.word	0x200005c8

0800f7a4 <_lseek_r>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	0004      	movs	r4, r0
 800f7a8:	0008      	movs	r0, r1
 800f7aa:	0011      	movs	r1, r2
 800f7ac:	001a      	movs	r2, r3
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	4d05      	ldr	r5, [pc, #20]	; (800f7c8 <_lseek_r+0x24>)
 800f7b2:	602b      	str	r3, [r5, #0]
 800f7b4:	f7f9 fed5 	bl	8009562 <_lseek>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d103      	bne.n	800f7c4 <_lseek_r+0x20>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d000      	beq.n	800f7c4 <_lseek_r+0x20>
 800f7c2:	6023      	str	r3, [r4, #0]
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	46c0      	nop			; (mov r8, r8)
 800f7c8:	200005c8 	.word	0x200005c8

0800f7cc <_read_r>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	0004      	movs	r4, r0
 800f7d0:	0008      	movs	r0, r1
 800f7d2:	0011      	movs	r1, r2
 800f7d4:	001a      	movs	r2, r3
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	4d05      	ldr	r5, [pc, #20]	; (800f7f0 <_read_r+0x24>)
 800f7da:	602b      	str	r3, [r5, #0]
 800f7dc:	f7f9 fe67 	bl	80094ae <_read>
 800f7e0:	1c43      	adds	r3, r0, #1
 800f7e2:	d103      	bne.n	800f7ec <_read_r+0x20>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d000      	beq.n	800f7ec <_read_r+0x20>
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	bd70      	pop	{r4, r5, r6, pc}
 800f7ee:	46c0      	nop			; (mov r8, r8)
 800f7f0:	200005c8 	.word	0x200005c8

0800f7f4 <atan>:
 800f7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7f6:	4b98      	ldr	r3, [pc, #608]	; (800fa58 <atan+0x264>)
 800f7f8:	b085      	sub	sp, #20
 800f7fa:	004e      	lsls	r6, r1, #1
 800f7fc:	0004      	movs	r4, r0
 800f7fe:	000d      	movs	r5, r1
 800f800:	9103      	str	r1, [sp, #12]
 800f802:	0876      	lsrs	r6, r6, #1
 800f804:	429e      	cmp	r6, r3
 800f806:	dd18      	ble.n	800f83a <atan+0x46>
 800f808:	4b94      	ldr	r3, [pc, #592]	; (800fa5c <atan+0x268>)
 800f80a:	429e      	cmp	r6, r3
 800f80c:	dc02      	bgt.n	800f814 <atan+0x20>
 800f80e:	d10a      	bne.n	800f826 <atan+0x32>
 800f810:	2800      	cmp	r0, #0
 800f812:	d008      	beq.n	800f826 <atan+0x32>
 800f814:	0022      	movs	r2, r4
 800f816:	002b      	movs	r3, r5
 800f818:	0020      	movs	r0, r4
 800f81a:	0029      	movs	r1, r5
 800f81c:	f7f1 fd40 	bl	80012a0 <__aeabi_dadd>
 800f820:	0004      	movs	r4, r0
 800f822:	000d      	movs	r5, r1
 800f824:	e005      	b.n	800f832 <atan+0x3e>
 800f826:	9b03      	ldr	r3, [sp, #12]
 800f828:	4c8d      	ldr	r4, [pc, #564]	; (800fa60 <atan+0x26c>)
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	dd00      	ble.n	800f830 <atan+0x3c>
 800f82e:	e110      	b.n	800fa52 <atan+0x25e>
 800f830:	4d8c      	ldr	r5, [pc, #560]	; (800fa64 <atan+0x270>)
 800f832:	0020      	movs	r0, r4
 800f834:	0029      	movs	r1, r5
 800f836:	b005      	add	sp, #20
 800f838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f83a:	4b8b      	ldr	r3, [pc, #556]	; (800fa68 <atan+0x274>)
 800f83c:	429e      	cmp	r6, r3
 800f83e:	dc0f      	bgt.n	800f860 <atan+0x6c>
 800f840:	4b8a      	ldr	r3, [pc, #552]	; (800fa6c <atan+0x278>)
 800f842:	429e      	cmp	r6, r3
 800f844:	dc09      	bgt.n	800f85a <atan+0x66>
 800f846:	4a8a      	ldr	r2, [pc, #552]	; (800fa70 <atan+0x27c>)
 800f848:	4b8a      	ldr	r3, [pc, #552]	; (800fa74 <atan+0x280>)
 800f84a:	f7f1 fd29 	bl	80012a0 <__aeabi_dadd>
 800f84e:	2200      	movs	r2, #0
 800f850:	4b89      	ldr	r3, [pc, #548]	; (800fa78 <atan+0x284>)
 800f852:	f7f0 fe11 	bl	8000478 <__aeabi_dcmpgt>
 800f856:	2800      	cmp	r0, #0
 800f858:	d1eb      	bne.n	800f832 <atan+0x3e>
 800f85a:	2301      	movs	r3, #1
 800f85c:	425b      	negs	r3, r3
 800f85e:	e025      	b.n	800f8ac <atan+0xb8>
 800f860:	f000 f98a 	bl	800fb78 <fabs>
 800f864:	4b85      	ldr	r3, [pc, #532]	; (800fa7c <atan+0x288>)
 800f866:	0004      	movs	r4, r0
 800f868:	000d      	movs	r5, r1
 800f86a:	429e      	cmp	r6, r3
 800f86c:	dd00      	ble.n	800f870 <atan+0x7c>
 800f86e:	e0aa      	b.n	800f9c6 <atan+0x1d2>
 800f870:	4b83      	ldr	r3, [pc, #524]	; (800fa80 <atan+0x28c>)
 800f872:	429e      	cmp	r6, r3
 800f874:	dd00      	ble.n	800f878 <atan+0x84>
 800f876:	e090      	b.n	800f99a <atan+0x1a6>
 800f878:	0002      	movs	r2, r0
 800f87a:	000b      	movs	r3, r1
 800f87c:	f7f1 fd10 	bl	80012a0 <__aeabi_dadd>
 800f880:	2200      	movs	r2, #0
 800f882:	4b7d      	ldr	r3, [pc, #500]	; (800fa78 <atan+0x284>)
 800f884:	f7f2 fee8 	bl	8002658 <__aeabi_dsub>
 800f888:	2380      	movs	r3, #128	; 0x80
 800f88a:	0006      	movs	r6, r0
 800f88c:	000f      	movs	r7, r1
 800f88e:	2200      	movs	r2, #0
 800f890:	0020      	movs	r0, r4
 800f892:	0029      	movs	r1, r5
 800f894:	05db      	lsls	r3, r3, #23
 800f896:	f7f1 fd03 	bl	80012a0 <__aeabi_dadd>
 800f89a:	000b      	movs	r3, r1
 800f89c:	0002      	movs	r2, r0
 800f89e:	0039      	movs	r1, r7
 800f8a0:	0030      	movs	r0, r6
 800f8a2:	f7f2 f867 	bl	8001974 <__aeabi_ddiv>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	0004      	movs	r4, r0
 800f8aa:	000d      	movs	r5, r1
 800f8ac:	0022      	movs	r2, r4
 800f8ae:	9302      	str	r3, [sp, #8]
 800f8b0:	0020      	movs	r0, r4
 800f8b2:	002b      	movs	r3, r5
 800f8b4:	0029      	movs	r1, r5
 800f8b6:	f7f2 fc63 	bl	8002180 <__aeabi_dmul>
 800f8ba:	0002      	movs	r2, r0
 800f8bc:	000b      	movs	r3, r1
 800f8be:	9000      	str	r0, [sp, #0]
 800f8c0:	9101      	str	r1, [sp, #4]
 800f8c2:	f7f2 fc5d 	bl	8002180 <__aeabi_dmul>
 800f8c6:	0006      	movs	r6, r0
 800f8c8:	000f      	movs	r7, r1
 800f8ca:	4a6e      	ldr	r2, [pc, #440]	; (800fa84 <atan+0x290>)
 800f8cc:	4b6e      	ldr	r3, [pc, #440]	; (800fa88 <atan+0x294>)
 800f8ce:	f7f2 fc57 	bl	8002180 <__aeabi_dmul>
 800f8d2:	4a6e      	ldr	r2, [pc, #440]	; (800fa8c <atan+0x298>)
 800f8d4:	4b6e      	ldr	r3, [pc, #440]	; (800fa90 <atan+0x29c>)
 800f8d6:	f7f1 fce3 	bl	80012a0 <__aeabi_dadd>
 800f8da:	0032      	movs	r2, r6
 800f8dc:	003b      	movs	r3, r7
 800f8de:	f7f2 fc4f 	bl	8002180 <__aeabi_dmul>
 800f8e2:	4a6c      	ldr	r2, [pc, #432]	; (800fa94 <atan+0x2a0>)
 800f8e4:	4b6c      	ldr	r3, [pc, #432]	; (800fa98 <atan+0x2a4>)
 800f8e6:	f7f1 fcdb 	bl	80012a0 <__aeabi_dadd>
 800f8ea:	0032      	movs	r2, r6
 800f8ec:	003b      	movs	r3, r7
 800f8ee:	f7f2 fc47 	bl	8002180 <__aeabi_dmul>
 800f8f2:	4a6a      	ldr	r2, [pc, #424]	; (800fa9c <atan+0x2a8>)
 800f8f4:	4b6a      	ldr	r3, [pc, #424]	; (800faa0 <atan+0x2ac>)
 800f8f6:	f7f1 fcd3 	bl	80012a0 <__aeabi_dadd>
 800f8fa:	0032      	movs	r2, r6
 800f8fc:	003b      	movs	r3, r7
 800f8fe:	f7f2 fc3f 	bl	8002180 <__aeabi_dmul>
 800f902:	4a68      	ldr	r2, [pc, #416]	; (800faa4 <atan+0x2b0>)
 800f904:	4b68      	ldr	r3, [pc, #416]	; (800faa8 <atan+0x2b4>)
 800f906:	f7f1 fccb 	bl	80012a0 <__aeabi_dadd>
 800f90a:	0032      	movs	r2, r6
 800f90c:	003b      	movs	r3, r7
 800f90e:	f7f2 fc37 	bl	8002180 <__aeabi_dmul>
 800f912:	4a66      	ldr	r2, [pc, #408]	; (800faac <atan+0x2b8>)
 800f914:	4b66      	ldr	r3, [pc, #408]	; (800fab0 <atan+0x2bc>)
 800f916:	f7f1 fcc3 	bl	80012a0 <__aeabi_dadd>
 800f91a:	9a00      	ldr	r2, [sp, #0]
 800f91c:	9b01      	ldr	r3, [sp, #4]
 800f91e:	f7f2 fc2f 	bl	8002180 <__aeabi_dmul>
 800f922:	4a64      	ldr	r2, [pc, #400]	; (800fab4 <atan+0x2c0>)
 800f924:	9000      	str	r0, [sp, #0]
 800f926:	9101      	str	r1, [sp, #4]
 800f928:	4b63      	ldr	r3, [pc, #396]	; (800fab8 <atan+0x2c4>)
 800f92a:	0030      	movs	r0, r6
 800f92c:	0039      	movs	r1, r7
 800f92e:	f7f2 fc27 	bl	8002180 <__aeabi_dmul>
 800f932:	4a62      	ldr	r2, [pc, #392]	; (800fabc <atan+0x2c8>)
 800f934:	4b62      	ldr	r3, [pc, #392]	; (800fac0 <atan+0x2cc>)
 800f936:	f7f2 fe8f 	bl	8002658 <__aeabi_dsub>
 800f93a:	0032      	movs	r2, r6
 800f93c:	003b      	movs	r3, r7
 800f93e:	f7f2 fc1f 	bl	8002180 <__aeabi_dmul>
 800f942:	4a60      	ldr	r2, [pc, #384]	; (800fac4 <atan+0x2d0>)
 800f944:	4b60      	ldr	r3, [pc, #384]	; (800fac8 <atan+0x2d4>)
 800f946:	f7f2 fe87 	bl	8002658 <__aeabi_dsub>
 800f94a:	0032      	movs	r2, r6
 800f94c:	003b      	movs	r3, r7
 800f94e:	f7f2 fc17 	bl	8002180 <__aeabi_dmul>
 800f952:	4a5e      	ldr	r2, [pc, #376]	; (800facc <atan+0x2d8>)
 800f954:	4b5e      	ldr	r3, [pc, #376]	; (800fad0 <atan+0x2dc>)
 800f956:	f7f2 fe7f 	bl	8002658 <__aeabi_dsub>
 800f95a:	0032      	movs	r2, r6
 800f95c:	003b      	movs	r3, r7
 800f95e:	f7f2 fc0f 	bl	8002180 <__aeabi_dmul>
 800f962:	4a5c      	ldr	r2, [pc, #368]	; (800fad4 <atan+0x2e0>)
 800f964:	4b5c      	ldr	r3, [pc, #368]	; (800fad8 <atan+0x2e4>)
 800f966:	f7f2 fe77 	bl	8002658 <__aeabi_dsub>
 800f96a:	0032      	movs	r2, r6
 800f96c:	003b      	movs	r3, r7
 800f96e:	f7f2 fc07 	bl	8002180 <__aeabi_dmul>
 800f972:	0002      	movs	r2, r0
 800f974:	000b      	movs	r3, r1
 800f976:	9800      	ldr	r0, [sp, #0]
 800f978:	9901      	ldr	r1, [sp, #4]
 800f97a:	f7f1 fc91 	bl	80012a0 <__aeabi_dadd>
 800f97e:	002b      	movs	r3, r5
 800f980:	0022      	movs	r2, r4
 800f982:	f7f2 fbfd 	bl	8002180 <__aeabi_dmul>
 800f986:	9b02      	ldr	r3, [sp, #8]
 800f988:	3301      	adds	r3, #1
 800f98a:	d143      	bne.n	800fa14 <atan+0x220>
 800f98c:	0002      	movs	r2, r0
 800f98e:	000b      	movs	r3, r1
 800f990:	0020      	movs	r0, r4
 800f992:	0029      	movs	r1, r5
 800f994:	f7f2 fe60 	bl	8002658 <__aeabi_dsub>
 800f998:	e742      	b.n	800f820 <atan+0x2c>
 800f99a:	2200      	movs	r2, #0
 800f99c:	4b36      	ldr	r3, [pc, #216]	; (800fa78 <atan+0x284>)
 800f99e:	f7f2 fe5b 	bl	8002658 <__aeabi_dsub>
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	0006      	movs	r6, r0
 800f9a6:	000f      	movs	r7, r1
 800f9a8:	0020      	movs	r0, r4
 800f9aa:	0029      	movs	r1, r5
 800f9ac:	4b32      	ldr	r3, [pc, #200]	; (800fa78 <atan+0x284>)
 800f9ae:	f7f1 fc77 	bl	80012a0 <__aeabi_dadd>
 800f9b2:	000b      	movs	r3, r1
 800f9b4:	0002      	movs	r2, r0
 800f9b6:	0039      	movs	r1, r7
 800f9b8:	0030      	movs	r0, r6
 800f9ba:	f7f1 ffdb 	bl	8001974 <__aeabi_ddiv>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	0004      	movs	r4, r0
 800f9c2:	000d      	movs	r5, r1
 800f9c4:	e772      	b.n	800f8ac <atan+0xb8>
 800f9c6:	4b45      	ldr	r3, [pc, #276]	; (800fadc <atan+0x2e8>)
 800f9c8:	429e      	cmp	r6, r3
 800f9ca:	dc19      	bgt.n	800fa00 <atan+0x20c>
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4b44      	ldr	r3, [pc, #272]	; (800fae0 <atan+0x2ec>)
 800f9d0:	f7f2 fe42 	bl	8002658 <__aeabi_dsub>
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	0006      	movs	r6, r0
 800f9d8:	000f      	movs	r7, r1
 800f9da:	0020      	movs	r0, r4
 800f9dc:	0029      	movs	r1, r5
 800f9de:	4b40      	ldr	r3, [pc, #256]	; (800fae0 <atan+0x2ec>)
 800f9e0:	f7f2 fbce 	bl	8002180 <__aeabi_dmul>
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4b24      	ldr	r3, [pc, #144]	; (800fa78 <atan+0x284>)
 800f9e8:	f7f1 fc5a 	bl	80012a0 <__aeabi_dadd>
 800f9ec:	000b      	movs	r3, r1
 800f9ee:	0002      	movs	r2, r0
 800f9f0:	0039      	movs	r1, r7
 800f9f2:	0030      	movs	r0, r6
 800f9f4:	f7f1 ffbe 	bl	8001974 <__aeabi_ddiv>
 800f9f8:	2302      	movs	r3, #2
 800f9fa:	0004      	movs	r4, r0
 800f9fc:	000d      	movs	r5, r1
 800f9fe:	e755      	b.n	800f8ac <atan+0xb8>
 800fa00:	000b      	movs	r3, r1
 800fa02:	0002      	movs	r2, r0
 800fa04:	4937      	ldr	r1, [pc, #220]	; (800fae4 <atan+0x2f0>)
 800fa06:	2000      	movs	r0, #0
 800fa08:	f7f1 ffb4 	bl	8001974 <__aeabi_ddiv>
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	0004      	movs	r4, r0
 800fa10:	000d      	movs	r5, r1
 800fa12:	e74b      	b.n	800f8ac <atan+0xb8>
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	4f34      	ldr	r7, [pc, #208]	; (800fae8 <atan+0x2f4>)
 800fa18:	00de      	lsls	r6, r3, #3
 800fa1a:	4b34      	ldr	r3, [pc, #208]	; (800faec <atan+0x2f8>)
 800fa1c:	19bf      	adds	r7, r7, r6
 800fa1e:	199e      	adds	r6, r3, r6
 800fa20:	6832      	ldr	r2, [r6, #0]
 800fa22:	6873      	ldr	r3, [r6, #4]
 800fa24:	f7f2 fe18 	bl	8002658 <__aeabi_dsub>
 800fa28:	0022      	movs	r2, r4
 800fa2a:	002b      	movs	r3, r5
 800fa2c:	f7f2 fe14 	bl	8002658 <__aeabi_dsub>
 800fa30:	000b      	movs	r3, r1
 800fa32:	0002      	movs	r2, r0
 800fa34:	6838      	ldr	r0, [r7, #0]
 800fa36:	6879      	ldr	r1, [r7, #4]
 800fa38:	f7f2 fe0e 	bl	8002658 <__aeabi_dsub>
 800fa3c:	9b03      	ldr	r3, [sp, #12]
 800fa3e:	0004      	movs	r4, r0
 800fa40:	000d      	movs	r5, r1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	db00      	blt.n	800fa48 <atan+0x254>
 800fa46:	e6f4      	b.n	800f832 <atan+0x3e>
 800fa48:	2180      	movs	r1, #128	; 0x80
 800fa4a:	0609      	lsls	r1, r1, #24
 800fa4c:	186b      	adds	r3, r5, r1
 800fa4e:	001d      	movs	r5, r3
 800fa50:	e6ef      	b.n	800f832 <atan+0x3e>
 800fa52:	4d27      	ldr	r5, [pc, #156]	; (800faf0 <atan+0x2fc>)
 800fa54:	e6ed      	b.n	800f832 <atan+0x3e>
 800fa56:	46c0      	nop			; (mov r8, r8)
 800fa58:	440fffff 	.word	0x440fffff
 800fa5c:	7ff00000 	.word	0x7ff00000
 800fa60:	54442d18 	.word	0x54442d18
 800fa64:	bff921fb 	.word	0xbff921fb
 800fa68:	3fdbffff 	.word	0x3fdbffff
 800fa6c:	3e1fffff 	.word	0x3e1fffff
 800fa70:	8800759c 	.word	0x8800759c
 800fa74:	7e37e43c 	.word	0x7e37e43c
 800fa78:	3ff00000 	.word	0x3ff00000
 800fa7c:	3ff2ffff 	.word	0x3ff2ffff
 800fa80:	3fe5ffff 	.word	0x3fe5ffff
 800fa84:	e322da11 	.word	0xe322da11
 800fa88:	3f90ad3a 	.word	0x3f90ad3a
 800fa8c:	24760deb 	.word	0x24760deb
 800fa90:	3fa97b4b 	.word	0x3fa97b4b
 800fa94:	a0d03d51 	.word	0xa0d03d51
 800fa98:	3fb10d66 	.word	0x3fb10d66
 800fa9c:	c54c206e 	.word	0xc54c206e
 800faa0:	3fb745cd 	.word	0x3fb745cd
 800faa4:	920083ff 	.word	0x920083ff
 800faa8:	3fc24924 	.word	0x3fc24924
 800faac:	5555550d 	.word	0x5555550d
 800fab0:	3fd55555 	.word	0x3fd55555
 800fab4:	2c6a6c2f 	.word	0x2c6a6c2f
 800fab8:	bfa2b444 	.word	0xbfa2b444
 800fabc:	52defd9a 	.word	0x52defd9a
 800fac0:	3fadde2d 	.word	0x3fadde2d
 800fac4:	af749a6d 	.word	0xaf749a6d
 800fac8:	3fb3b0f2 	.word	0x3fb3b0f2
 800facc:	fe231671 	.word	0xfe231671
 800fad0:	3fbc71c6 	.word	0x3fbc71c6
 800fad4:	9998ebc4 	.word	0x9998ebc4
 800fad8:	3fc99999 	.word	0x3fc99999
 800fadc:	40037fff 	.word	0x40037fff
 800fae0:	3ff80000 	.word	0x3ff80000
 800fae4:	bff00000 	.word	0xbff00000
 800fae8:	08012850 	.word	0x08012850
 800faec:	08012870 	.word	0x08012870
 800faf0:	3ff921fb 	.word	0x3ff921fb

0800faf4 <cos>:
 800faf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faf6:	4a1e      	ldr	r2, [pc, #120]	; (800fb70 <cos+0x7c>)
 800faf8:	004b      	lsls	r3, r1, #1
 800fafa:	b087      	sub	sp, #28
 800fafc:	085b      	lsrs	r3, r3, #1
 800fafe:	4293      	cmp	r3, r2
 800fb00:	dc04      	bgt.n	800fb0c <cos+0x18>
 800fb02:	2200      	movs	r2, #0
 800fb04:	2300      	movs	r3, #0
 800fb06:	f001 fbbf 	bl	8011288 <__kernel_cos>
 800fb0a:	e006      	b.n	800fb1a <cos+0x26>
 800fb0c:	4a19      	ldr	r2, [pc, #100]	; (800fb74 <cos+0x80>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	dd05      	ble.n	800fb1e <cos+0x2a>
 800fb12:	0002      	movs	r2, r0
 800fb14:	000b      	movs	r3, r1
 800fb16:	f7f2 fd9f 	bl	8002658 <__aeabi_dsub>
 800fb1a:	b007      	add	sp, #28
 800fb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb1e:	aa02      	add	r2, sp, #8
 800fb20:	f001 f912 	bl	8010d48 <__ieee754_rem_pio2>
 800fb24:	9c04      	ldr	r4, [sp, #16]
 800fb26:	9d05      	ldr	r5, [sp, #20]
 800fb28:	2303      	movs	r3, #3
 800fb2a:	4003      	ands	r3, r0
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d008      	beq.n	800fb42 <cos+0x4e>
 800fb30:	9802      	ldr	r0, [sp, #8]
 800fb32:	9903      	ldr	r1, [sp, #12]
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d00f      	beq.n	800fb58 <cos+0x64>
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d112      	bne.n	800fb62 <cos+0x6e>
 800fb3c:	0022      	movs	r2, r4
 800fb3e:	002b      	movs	r3, r5
 800fb40:	e7e1      	b.n	800fb06 <cos+0x12>
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	0022      	movs	r2, r4
 800fb46:	9802      	ldr	r0, [sp, #8]
 800fb48:	9903      	ldr	r1, [sp, #12]
 800fb4a:	002b      	movs	r3, r5
 800fb4c:	f001 ffd2 	bl	8011af4 <__kernel_sin>
 800fb50:	2380      	movs	r3, #128	; 0x80
 800fb52:	061b      	lsls	r3, r3, #24
 800fb54:	18c9      	adds	r1, r1, r3
 800fb56:	e7e0      	b.n	800fb1a <cos+0x26>
 800fb58:	0022      	movs	r2, r4
 800fb5a:	002b      	movs	r3, r5
 800fb5c:	f001 fb94 	bl	8011288 <__kernel_cos>
 800fb60:	e7f6      	b.n	800fb50 <cos+0x5c>
 800fb62:	2301      	movs	r3, #1
 800fb64:	0022      	movs	r2, r4
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	002b      	movs	r3, r5
 800fb6a:	f001 ffc3 	bl	8011af4 <__kernel_sin>
 800fb6e:	e7d4      	b.n	800fb1a <cos+0x26>
 800fb70:	3fe921fb 	.word	0x3fe921fb
 800fb74:	7fefffff 	.word	0x7fefffff

0800fb78 <fabs>:
 800fb78:	004b      	lsls	r3, r1, #1
 800fb7a:	0859      	lsrs	r1, r3, #1
 800fb7c:	4770      	bx	lr
	...

0800fb80 <sin>:
 800fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb82:	4a20      	ldr	r2, [pc, #128]	; (800fc04 <sin+0x84>)
 800fb84:	004b      	lsls	r3, r1, #1
 800fb86:	b087      	sub	sp, #28
 800fb88:	085b      	lsrs	r3, r3, #1
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	dc06      	bgt.n	800fb9c <sin+0x1c>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	2200      	movs	r2, #0
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	f001 ffad 	bl	8011af4 <__kernel_sin>
 800fb9a:	e006      	b.n	800fbaa <sin+0x2a>
 800fb9c:	4a1a      	ldr	r2, [pc, #104]	; (800fc08 <sin+0x88>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	dd05      	ble.n	800fbae <sin+0x2e>
 800fba2:	0002      	movs	r2, r0
 800fba4:	000b      	movs	r3, r1
 800fba6:	f7f2 fd57 	bl	8002658 <__aeabi_dsub>
 800fbaa:	b007      	add	sp, #28
 800fbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbae:	aa02      	add	r2, sp, #8
 800fbb0:	f001 f8ca 	bl	8010d48 <__ieee754_rem_pio2>
 800fbb4:	9c04      	ldr	r4, [sp, #16]
 800fbb6:	9d05      	ldr	r5, [sp, #20]
 800fbb8:	2303      	movs	r3, #3
 800fbba:	4003      	ands	r3, r0
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d00a      	beq.n	800fbd6 <sin+0x56>
 800fbc0:	9802      	ldr	r0, [sp, #8]
 800fbc2:	9903      	ldr	r1, [sp, #12]
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d00d      	beq.n	800fbe4 <sin+0x64>
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d115      	bne.n	800fbf8 <sin+0x78>
 800fbcc:	3301      	adds	r3, #1
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	0022      	movs	r2, r4
 800fbd2:	002b      	movs	r3, r5
 800fbd4:	e7df      	b.n	800fb96 <sin+0x16>
 800fbd6:	0022      	movs	r2, r4
 800fbd8:	9802      	ldr	r0, [sp, #8]
 800fbda:	9903      	ldr	r1, [sp, #12]
 800fbdc:	002b      	movs	r3, r5
 800fbde:	f001 fb53 	bl	8011288 <__kernel_cos>
 800fbe2:	e7e2      	b.n	800fbaa <sin+0x2a>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	0022      	movs	r2, r4
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	002b      	movs	r3, r5
 800fbec:	f001 ff82 	bl	8011af4 <__kernel_sin>
 800fbf0:	2380      	movs	r3, #128	; 0x80
 800fbf2:	061b      	lsls	r3, r3, #24
 800fbf4:	18c9      	adds	r1, r1, r3
 800fbf6:	e7d8      	b.n	800fbaa <sin+0x2a>
 800fbf8:	0022      	movs	r2, r4
 800fbfa:	002b      	movs	r3, r5
 800fbfc:	f001 fb44 	bl	8011288 <__kernel_cos>
 800fc00:	e7f6      	b.n	800fbf0 <sin+0x70>
 800fc02:	46c0      	nop			; (mov r8, r8)
 800fc04:	3fe921fb 	.word	0x3fe921fb
 800fc08:	7fefffff 	.word	0x7fefffff

0800fc0c <asin>:
 800fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0e:	0004      	movs	r4, r0
 800fc10:	000d      	movs	r5, r1
 800fc12:	f000 f915 	bl	800fe40 <__ieee754_asin>
 800fc16:	4b12      	ldr	r3, [pc, #72]	; (800fc60 <asin+0x54>)
 800fc18:	0006      	movs	r6, r0
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	000f      	movs	r7, r1
 800fc1e:	b25b      	sxtb	r3, r3
 800fc20:	3301      	adds	r3, #1
 800fc22:	d01a      	beq.n	800fc5a <asin+0x4e>
 800fc24:	0022      	movs	r2, r4
 800fc26:	002b      	movs	r3, r5
 800fc28:	0020      	movs	r0, r4
 800fc2a:	0029      	movs	r1, r5
 800fc2c:	f7f3 f8a6 	bl	8002d7c <__aeabi_dcmpun>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d112      	bne.n	800fc5a <asin+0x4e>
 800fc34:	0020      	movs	r0, r4
 800fc36:	0029      	movs	r1, r5
 800fc38:	f7ff ff9e 	bl	800fb78 <fabs>
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	4b09      	ldr	r3, [pc, #36]	; (800fc64 <asin+0x58>)
 800fc40:	f7f0 fc1a 	bl	8000478 <__aeabi_dcmpgt>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d008      	beq.n	800fc5a <asin+0x4e>
 800fc48:	f7fc fe56 	bl	800c8f8 <__errno>
 800fc4c:	2321      	movs	r3, #33	; 0x21
 800fc4e:	6003      	str	r3, [r0, #0]
 800fc50:	4805      	ldr	r0, [pc, #20]	; (800fc68 <asin+0x5c>)
 800fc52:	f002 f88d 	bl	8011d70 <nan>
 800fc56:	0006      	movs	r6, r0
 800fc58:	000f      	movs	r7, r1
 800fc5a:	0030      	movs	r0, r6
 800fc5c:	0039      	movs	r1, r7
 800fc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc60:	200001e0 	.word	0x200001e0
 800fc64:	3ff00000 	.word	0x3ff00000
 800fc68:	080126e0 	.word	0x080126e0

0800fc6c <atan2>:
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	f000 fabf 	bl	80101f0 <__ieee754_atan2>
 800fc72:	bd10      	pop	{r4, pc}

0800fc74 <pow>:
 800fc74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc76:	001d      	movs	r5, r3
 800fc78:	0014      	movs	r4, r2
 800fc7a:	9000      	str	r0, [sp, #0]
 800fc7c:	9101      	str	r1, [sp, #4]
 800fc7e:	f000 fb63 	bl	8010348 <__ieee754_pow>
 800fc82:	4b54      	ldr	r3, [pc, #336]	; (800fdd4 <pow+0x160>)
 800fc84:	0006      	movs	r6, r0
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	000f      	movs	r7, r1
 800fc8a:	b25b      	sxtb	r3, r3
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	d018      	beq.n	800fcc2 <pow+0x4e>
 800fc90:	0022      	movs	r2, r4
 800fc92:	002b      	movs	r3, r5
 800fc94:	0020      	movs	r0, r4
 800fc96:	0029      	movs	r1, r5
 800fc98:	f7f3 f870 	bl	8002d7c <__aeabi_dcmpun>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d110      	bne.n	800fcc2 <pow+0x4e>
 800fca0:	9a00      	ldr	r2, [sp, #0]
 800fca2:	9b01      	ldr	r3, [sp, #4]
 800fca4:	0010      	movs	r0, r2
 800fca6:	0019      	movs	r1, r3
 800fca8:	f7f3 f868 	bl	8002d7c <__aeabi_dcmpun>
 800fcac:	2200      	movs	r2, #0
 800fcae:	2300      	movs	r3, #0
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d00a      	beq.n	800fcca <pow+0x56>
 800fcb4:	0020      	movs	r0, r4
 800fcb6:	0029      	movs	r1, r5
 800fcb8:	f7f0 fbc4 	bl	8000444 <__aeabi_dcmpeq>
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d000      	beq.n	800fcc2 <pow+0x4e>
 800fcc0:	e084      	b.n	800fdcc <pow+0x158>
 800fcc2:	0030      	movs	r0, r6
 800fcc4:	0039      	movs	r1, r7
 800fcc6:	b003      	add	sp, #12
 800fcc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcca:	9800      	ldr	r0, [sp, #0]
 800fccc:	9901      	ldr	r1, [sp, #4]
 800fcce:	f7f0 fbb9 	bl	8000444 <__aeabi_dcmpeq>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d01c      	beq.n	800fd10 <pow+0x9c>
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	2300      	movs	r3, #0
 800fcda:	0020      	movs	r0, r4
 800fcdc:	0029      	movs	r1, r5
 800fcde:	f7f0 fbb1 	bl	8000444 <__aeabi_dcmpeq>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	d172      	bne.n	800fdcc <pow+0x158>
 800fce6:	0020      	movs	r0, r4
 800fce8:	0029      	movs	r1, r5
 800fcea:	f001 ffaf 	bl	8011c4c <finite>
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d0e7      	beq.n	800fcc2 <pow+0x4e>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	0020      	movs	r0, r4
 800fcf8:	0029      	movs	r1, r5
 800fcfa:	f7f0 fba9 	bl	8000450 <__aeabi_dcmplt>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d0df      	beq.n	800fcc2 <pow+0x4e>
 800fd02:	f7fc fdf9 	bl	800c8f8 <__errno>
 800fd06:	2321      	movs	r3, #33	; 0x21
 800fd08:	2600      	movs	r6, #0
 800fd0a:	6003      	str	r3, [r0, #0]
 800fd0c:	4f32      	ldr	r7, [pc, #200]	; (800fdd8 <pow+0x164>)
 800fd0e:	e7d8      	b.n	800fcc2 <pow+0x4e>
 800fd10:	0030      	movs	r0, r6
 800fd12:	0039      	movs	r1, r7
 800fd14:	f001 ff9a 	bl	8011c4c <finite>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d139      	bne.n	800fd90 <pow+0x11c>
 800fd1c:	9800      	ldr	r0, [sp, #0]
 800fd1e:	9901      	ldr	r1, [sp, #4]
 800fd20:	f001 ff94 	bl	8011c4c <finite>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d033      	beq.n	800fd90 <pow+0x11c>
 800fd28:	0020      	movs	r0, r4
 800fd2a:	0029      	movs	r1, r5
 800fd2c:	f001 ff8e 	bl	8011c4c <finite>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d02d      	beq.n	800fd90 <pow+0x11c>
 800fd34:	0032      	movs	r2, r6
 800fd36:	003b      	movs	r3, r7
 800fd38:	0030      	movs	r0, r6
 800fd3a:	0039      	movs	r1, r7
 800fd3c:	f7f3 f81e 	bl	8002d7c <__aeabi_dcmpun>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d00c      	beq.n	800fd5e <pow+0xea>
 800fd44:	f7fc fdd8 	bl	800c8f8 <__errno>
 800fd48:	2321      	movs	r3, #33	; 0x21
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	6003      	str	r3, [r0, #0]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	0010      	movs	r0, r2
 800fd52:	0019      	movs	r1, r3
 800fd54:	f7f1 fe0e 	bl	8001974 <__aeabi_ddiv>
 800fd58:	0006      	movs	r6, r0
 800fd5a:	000f      	movs	r7, r1
 800fd5c:	e7b1      	b.n	800fcc2 <pow+0x4e>
 800fd5e:	f7fc fdcb 	bl	800c8f8 <__errno>
 800fd62:	2322      	movs	r3, #34	; 0x22
 800fd64:	2200      	movs	r2, #0
 800fd66:	6003      	str	r3, [r0, #0]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9800      	ldr	r0, [sp, #0]
 800fd6c:	9901      	ldr	r1, [sp, #4]
 800fd6e:	f7f0 fb6f 	bl	8000450 <__aeabi_dcmplt>
 800fd72:	2600      	movs	r6, #0
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d009      	beq.n	800fd8c <pow+0x118>
 800fd78:	0020      	movs	r0, r4
 800fd7a:	0029      	movs	r1, r5
 800fd7c:	f001 fffe 	bl	8011d7c <rint>
 800fd80:	0022      	movs	r2, r4
 800fd82:	002b      	movs	r3, r5
 800fd84:	f7f0 fb5e 	bl	8000444 <__aeabi_dcmpeq>
 800fd88:	2800      	cmp	r0, #0
 800fd8a:	d0bf      	beq.n	800fd0c <pow+0x98>
 800fd8c:	4f13      	ldr	r7, [pc, #76]	; (800fddc <pow+0x168>)
 800fd8e:	e798      	b.n	800fcc2 <pow+0x4e>
 800fd90:	2200      	movs	r2, #0
 800fd92:	2300      	movs	r3, #0
 800fd94:	0030      	movs	r0, r6
 800fd96:	0039      	movs	r1, r7
 800fd98:	f7f0 fb54 	bl	8000444 <__aeabi_dcmpeq>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d100      	bne.n	800fda2 <pow+0x12e>
 800fda0:	e78f      	b.n	800fcc2 <pow+0x4e>
 800fda2:	9800      	ldr	r0, [sp, #0]
 800fda4:	9901      	ldr	r1, [sp, #4]
 800fda6:	f001 ff51 	bl	8011c4c <finite>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d100      	bne.n	800fdb0 <pow+0x13c>
 800fdae:	e788      	b.n	800fcc2 <pow+0x4e>
 800fdb0:	0020      	movs	r0, r4
 800fdb2:	0029      	movs	r1, r5
 800fdb4:	f001 ff4a 	bl	8011c4c <finite>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d100      	bne.n	800fdbe <pow+0x14a>
 800fdbc:	e781      	b.n	800fcc2 <pow+0x4e>
 800fdbe:	f7fc fd9b 	bl	800c8f8 <__errno>
 800fdc2:	2322      	movs	r3, #34	; 0x22
 800fdc4:	2600      	movs	r6, #0
 800fdc6:	2700      	movs	r7, #0
 800fdc8:	6003      	str	r3, [r0, #0]
 800fdca:	e77a      	b.n	800fcc2 <pow+0x4e>
 800fdcc:	2600      	movs	r6, #0
 800fdce:	4f04      	ldr	r7, [pc, #16]	; (800fde0 <pow+0x16c>)
 800fdd0:	e777      	b.n	800fcc2 <pow+0x4e>
 800fdd2:	46c0      	nop			; (mov r8, r8)
 800fdd4:	200001e0 	.word	0x200001e0
 800fdd8:	fff00000 	.word	0xfff00000
 800fddc:	7ff00000 	.word	0x7ff00000
 800fde0:	3ff00000 	.word	0x3ff00000

0800fde4 <sqrt>:
 800fde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde6:	0004      	movs	r4, r0
 800fde8:	000d      	movs	r5, r1
 800fdea:	f001 f999 	bl	8011120 <__ieee754_sqrt>
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <sqrt+0x58>)
 800fdf0:	0006      	movs	r6, r0
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	000f      	movs	r7, r1
 800fdf6:	b25b      	sxtb	r3, r3
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	d01b      	beq.n	800fe34 <sqrt+0x50>
 800fdfc:	0022      	movs	r2, r4
 800fdfe:	002b      	movs	r3, r5
 800fe00:	0020      	movs	r0, r4
 800fe02:	0029      	movs	r1, r5
 800fe04:	f7f2 ffba 	bl	8002d7c <__aeabi_dcmpun>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d113      	bne.n	800fe34 <sqrt+0x50>
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	2300      	movs	r3, #0
 800fe10:	0020      	movs	r0, r4
 800fe12:	0029      	movs	r1, r5
 800fe14:	f7f0 fb1c 	bl	8000450 <__aeabi_dcmplt>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d00b      	beq.n	800fe34 <sqrt+0x50>
 800fe1c:	f7fc fd6c 	bl	800c8f8 <__errno>
 800fe20:	2321      	movs	r3, #33	; 0x21
 800fe22:	2200      	movs	r2, #0
 800fe24:	6003      	str	r3, [r0, #0]
 800fe26:	2300      	movs	r3, #0
 800fe28:	0010      	movs	r0, r2
 800fe2a:	0019      	movs	r1, r3
 800fe2c:	f7f1 fda2 	bl	8001974 <__aeabi_ddiv>
 800fe30:	0006      	movs	r6, r0
 800fe32:	000f      	movs	r7, r1
 800fe34:	0030      	movs	r0, r6
 800fe36:	0039      	movs	r1, r7
 800fe38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe3a:	46c0      	nop			; (mov r8, r8)
 800fe3c:	200001e0 	.word	0x200001e0

0800fe40 <__ieee754_asin>:
 800fe40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe42:	4bca      	ldr	r3, [pc, #808]	; (801016c <__ieee754_asin+0x32c>)
 800fe44:	b08b      	sub	sp, #44	; 0x2c
 800fe46:	004e      	lsls	r6, r1, #1
 800fe48:	0004      	movs	r4, r0
 800fe4a:	000d      	movs	r5, r1
 800fe4c:	9107      	str	r1, [sp, #28]
 800fe4e:	0876      	lsrs	r6, r6, #1
 800fe50:	429e      	cmp	r6, r3
 800fe52:	dd24      	ble.n	800fe9e <__ieee754_asin+0x5e>
 800fe54:	4bc6      	ldr	r3, [pc, #792]	; (8010170 <__ieee754_asin+0x330>)
 800fe56:	18f6      	adds	r6, r6, r3
 800fe58:	4306      	orrs	r6, r0
 800fe5a:	d112      	bne.n	800fe82 <__ieee754_asin+0x42>
 800fe5c:	4ac5      	ldr	r2, [pc, #788]	; (8010174 <__ieee754_asin+0x334>)
 800fe5e:	4bc6      	ldr	r3, [pc, #792]	; (8010178 <__ieee754_asin+0x338>)
 800fe60:	f7f2 f98e 	bl	8002180 <__aeabi_dmul>
 800fe64:	4ac5      	ldr	r2, [pc, #788]	; (801017c <__ieee754_asin+0x33c>)
 800fe66:	0006      	movs	r6, r0
 800fe68:	000f      	movs	r7, r1
 800fe6a:	4bc5      	ldr	r3, [pc, #788]	; (8010180 <__ieee754_asin+0x340>)
 800fe6c:	0020      	movs	r0, r4
 800fe6e:	0029      	movs	r1, r5
 800fe70:	f7f2 f986 	bl	8002180 <__aeabi_dmul>
 800fe74:	0002      	movs	r2, r0
 800fe76:	000b      	movs	r3, r1
 800fe78:	0030      	movs	r0, r6
 800fe7a:	0039      	movs	r1, r7
 800fe7c:	f7f1 fa10 	bl	80012a0 <__aeabi_dadd>
 800fe80:	e007      	b.n	800fe92 <__ieee754_asin+0x52>
 800fe82:	0002      	movs	r2, r0
 800fe84:	000b      	movs	r3, r1
 800fe86:	f7f2 fbe7 	bl	8002658 <__aeabi_dsub>
 800fe8a:	0002      	movs	r2, r0
 800fe8c:	000b      	movs	r3, r1
 800fe8e:	f7f1 fd71 	bl	8001974 <__aeabi_ddiv>
 800fe92:	0004      	movs	r4, r0
 800fe94:	000d      	movs	r5, r1
 800fe96:	0020      	movs	r0, r4
 800fe98:	0029      	movs	r1, r5
 800fe9a:	b00b      	add	sp, #44	; 0x2c
 800fe9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe9e:	4bb9      	ldr	r3, [pc, #740]	; (8010184 <__ieee754_asin+0x344>)
 800fea0:	429e      	cmp	r6, r3
 800fea2:	dc0e      	bgt.n	800fec2 <__ieee754_asin+0x82>
 800fea4:	23f9      	movs	r3, #249	; 0xf9
 800fea6:	059b      	lsls	r3, r3, #22
 800fea8:	429e      	cmp	r6, r3
 800feaa:	db00      	blt.n	800feae <__ieee754_asin+0x6e>
 800feac:	e09c      	b.n	800ffe8 <__ieee754_asin+0x1a8>
 800feae:	4ab6      	ldr	r2, [pc, #728]	; (8010188 <__ieee754_asin+0x348>)
 800feb0:	4bb6      	ldr	r3, [pc, #728]	; (801018c <__ieee754_asin+0x34c>)
 800feb2:	f7f1 f9f5 	bl	80012a0 <__aeabi_dadd>
 800feb6:	2200      	movs	r2, #0
 800feb8:	4bb5      	ldr	r3, [pc, #724]	; (8010190 <__ieee754_asin+0x350>)
 800feba:	f7f0 fadd 	bl	8000478 <__aeabi_dcmpgt>
 800febe:	2800      	cmp	r0, #0
 800fec0:	d1e9      	bne.n	800fe96 <__ieee754_asin+0x56>
 800fec2:	0020      	movs	r0, r4
 800fec4:	0029      	movs	r1, r5
 800fec6:	f7ff fe57 	bl	800fb78 <fabs>
 800feca:	0002      	movs	r2, r0
 800fecc:	000b      	movs	r3, r1
 800fece:	2000      	movs	r0, #0
 800fed0:	49af      	ldr	r1, [pc, #700]	; (8010190 <__ieee754_asin+0x350>)
 800fed2:	f7f2 fbc1 	bl	8002658 <__aeabi_dsub>
 800fed6:	2200      	movs	r2, #0
 800fed8:	4bae      	ldr	r3, [pc, #696]	; (8010194 <__ieee754_asin+0x354>)
 800feda:	f7f2 f951 	bl	8002180 <__aeabi_dmul>
 800fede:	0004      	movs	r4, r0
 800fee0:	000d      	movs	r5, r1
 800fee2:	4aad      	ldr	r2, [pc, #692]	; (8010198 <__ieee754_asin+0x358>)
 800fee4:	4bad      	ldr	r3, [pc, #692]	; (801019c <__ieee754_asin+0x35c>)
 800fee6:	f7f2 f94b 	bl	8002180 <__aeabi_dmul>
 800feea:	4aad      	ldr	r2, [pc, #692]	; (80101a0 <__ieee754_asin+0x360>)
 800feec:	4bad      	ldr	r3, [pc, #692]	; (80101a4 <__ieee754_asin+0x364>)
 800feee:	f7f1 f9d7 	bl	80012a0 <__aeabi_dadd>
 800fef2:	0022      	movs	r2, r4
 800fef4:	002b      	movs	r3, r5
 800fef6:	f7f2 f943 	bl	8002180 <__aeabi_dmul>
 800fefa:	4aab      	ldr	r2, [pc, #684]	; (80101a8 <__ieee754_asin+0x368>)
 800fefc:	4bab      	ldr	r3, [pc, #684]	; (80101ac <__ieee754_asin+0x36c>)
 800fefe:	f7f2 fbab 	bl	8002658 <__aeabi_dsub>
 800ff02:	0022      	movs	r2, r4
 800ff04:	002b      	movs	r3, r5
 800ff06:	f7f2 f93b 	bl	8002180 <__aeabi_dmul>
 800ff0a:	4aa9      	ldr	r2, [pc, #676]	; (80101b0 <__ieee754_asin+0x370>)
 800ff0c:	4ba9      	ldr	r3, [pc, #676]	; (80101b4 <__ieee754_asin+0x374>)
 800ff0e:	f7f1 f9c7 	bl	80012a0 <__aeabi_dadd>
 800ff12:	0022      	movs	r2, r4
 800ff14:	002b      	movs	r3, r5
 800ff16:	f7f2 f933 	bl	8002180 <__aeabi_dmul>
 800ff1a:	4aa7      	ldr	r2, [pc, #668]	; (80101b8 <__ieee754_asin+0x378>)
 800ff1c:	4ba7      	ldr	r3, [pc, #668]	; (80101bc <__ieee754_asin+0x37c>)
 800ff1e:	f7f2 fb9b 	bl	8002658 <__aeabi_dsub>
 800ff22:	0022      	movs	r2, r4
 800ff24:	002b      	movs	r3, r5
 800ff26:	f7f2 f92b 	bl	8002180 <__aeabi_dmul>
 800ff2a:	4aa5      	ldr	r2, [pc, #660]	; (80101c0 <__ieee754_asin+0x380>)
 800ff2c:	4ba5      	ldr	r3, [pc, #660]	; (80101c4 <__ieee754_asin+0x384>)
 800ff2e:	f7f1 f9b7 	bl	80012a0 <__aeabi_dadd>
 800ff32:	0022      	movs	r2, r4
 800ff34:	002b      	movs	r3, r5
 800ff36:	f7f2 f923 	bl	8002180 <__aeabi_dmul>
 800ff3a:	4aa3      	ldr	r2, [pc, #652]	; (80101c8 <__ieee754_asin+0x388>)
 800ff3c:	9002      	str	r0, [sp, #8]
 800ff3e:	9103      	str	r1, [sp, #12]
 800ff40:	4ba2      	ldr	r3, [pc, #648]	; (80101cc <__ieee754_asin+0x38c>)
 800ff42:	0020      	movs	r0, r4
 800ff44:	0029      	movs	r1, r5
 800ff46:	f7f2 f91b 	bl	8002180 <__aeabi_dmul>
 800ff4a:	4aa1      	ldr	r2, [pc, #644]	; (80101d0 <__ieee754_asin+0x390>)
 800ff4c:	4ba1      	ldr	r3, [pc, #644]	; (80101d4 <__ieee754_asin+0x394>)
 800ff4e:	f7f2 fb83 	bl	8002658 <__aeabi_dsub>
 800ff52:	0022      	movs	r2, r4
 800ff54:	002b      	movs	r3, r5
 800ff56:	f7f2 f913 	bl	8002180 <__aeabi_dmul>
 800ff5a:	4a9f      	ldr	r2, [pc, #636]	; (80101d8 <__ieee754_asin+0x398>)
 800ff5c:	4b9f      	ldr	r3, [pc, #636]	; (80101dc <__ieee754_asin+0x39c>)
 800ff5e:	f7f1 f99f 	bl	80012a0 <__aeabi_dadd>
 800ff62:	0022      	movs	r2, r4
 800ff64:	002b      	movs	r3, r5
 800ff66:	f7f2 f90b 	bl	8002180 <__aeabi_dmul>
 800ff6a:	4a9d      	ldr	r2, [pc, #628]	; (80101e0 <__ieee754_asin+0x3a0>)
 800ff6c:	4b9d      	ldr	r3, [pc, #628]	; (80101e4 <__ieee754_asin+0x3a4>)
 800ff6e:	f7f2 fb73 	bl	8002658 <__aeabi_dsub>
 800ff72:	0022      	movs	r2, r4
 800ff74:	002b      	movs	r3, r5
 800ff76:	f7f2 f903 	bl	8002180 <__aeabi_dmul>
 800ff7a:	4b85      	ldr	r3, [pc, #532]	; (8010190 <__ieee754_asin+0x350>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	f7f1 f98f 	bl	80012a0 <__aeabi_dadd>
 800ff82:	9004      	str	r0, [sp, #16]
 800ff84:	9105      	str	r1, [sp, #20]
 800ff86:	0020      	movs	r0, r4
 800ff88:	0029      	movs	r1, r5
 800ff8a:	f001 f8c9 	bl	8011120 <__ieee754_sqrt>
 800ff8e:	4b96      	ldr	r3, [pc, #600]	; (80101e8 <__ieee754_asin+0x3a8>)
 800ff90:	9000      	str	r0, [sp, #0]
 800ff92:	9101      	str	r1, [sp, #4]
 800ff94:	429e      	cmp	r6, r3
 800ff96:	dc00      	bgt.n	800ff9a <__ieee754_asin+0x15a>
 800ff98:	e08b      	b.n	80100b2 <__ieee754_asin+0x272>
 800ff9a:	9a04      	ldr	r2, [sp, #16]
 800ff9c:	9b05      	ldr	r3, [sp, #20]
 800ff9e:	9802      	ldr	r0, [sp, #8]
 800ffa0:	9903      	ldr	r1, [sp, #12]
 800ffa2:	f7f1 fce7 	bl	8001974 <__aeabi_ddiv>
 800ffa6:	9a00      	ldr	r2, [sp, #0]
 800ffa8:	9b01      	ldr	r3, [sp, #4]
 800ffaa:	f7f2 f8e9 	bl	8002180 <__aeabi_dmul>
 800ffae:	9a00      	ldr	r2, [sp, #0]
 800ffb0:	9b01      	ldr	r3, [sp, #4]
 800ffb2:	f7f1 f975 	bl	80012a0 <__aeabi_dadd>
 800ffb6:	0002      	movs	r2, r0
 800ffb8:	000b      	movs	r3, r1
 800ffba:	f7f1 f971 	bl	80012a0 <__aeabi_dadd>
 800ffbe:	4a6f      	ldr	r2, [pc, #444]	; (801017c <__ieee754_asin+0x33c>)
 800ffc0:	4b6f      	ldr	r3, [pc, #444]	; (8010180 <__ieee754_asin+0x340>)
 800ffc2:	f7f2 fb49 	bl	8002658 <__aeabi_dsub>
 800ffc6:	0002      	movs	r2, r0
 800ffc8:	000b      	movs	r3, r1
 800ffca:	486a      	ldr	r0, [pc, #424]	; (8010174 <__ieee754_asin+0x334>)
 800ffcc:	496a      	ldr	r1, [pc, #424]	; (8010178 <__ieee754_asin+0x338>)
 800ffce:	f7f2 fb43 	bl	8002658 <__aeabi_dsub>
 800ffd2:	9b07      	ldr	r3, [sp, #28]
 800ffd4:	0004      	movs	r4, r0
 800ffd6:	000d      	movs	r5, r1
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dd00      	ble.n	800ffde <__ieee754_asin+0x19e>
 800ffdc:	e75b      	b.n	800fe96 <__ieee754_asin+0x56>
 800ffde:	2180      	movs	r1, #128	; 0x80
 800ffe0:	0609      	lsls	r1, r1, #24
 800ffe2:	186b      	adds	r3, r5, r1
 800ffe4:	001d      	movs	r5, r3
 800ffe6:	e756      	b.n	800fe96 <__ieee754_asin+0x56>
 800ffe8:	0002      	movs	r2, r0
 800ffea:	000b      	movs	r3, r1
 800ffec:	f7f2 f8c8 	bl	8002180 <__aeabi_dmul>
 800fff0:	0006      	movs	r6, r0
 800fff2:	000f      	movs	r7, r1
 800fff4:	4a68      	ldr	r2, [pc, #416]	; (8010198 <__ieee754_asin+0x358>)
 800fff6:	4b69      	ldr	r3, [pc, #420]	; (801019c <__ieee754_asin+0x35c>)
 800fff8:	f7f2 f8c2 	bl	8002180 <__aeabi_dmul>
 800fffc:	4a68      	ldr	r2, [pc, #416]	; (80101a0 <__ieee754_asin+0x360>)
 800fffe:	4b69      	ldr	r3, [pc, #420]	; (80101a4 <__ieee754_asin+0x364>)
 8010000:	f7f1 f94e 	bl	80012a0 <__aeabi_dadd>
 8010004:	0032      	movs	r2, r6
 8010006:	003b      	movs	r3, r7
 8010008:	f7f2 f8ba 	bl	8002180 <__aeabi_dmul>
 801000c:	4a66      	ldr	r2, [pc, #408]	; (80101a8 <__ieee754_asin+0x368>)
 801000e:	4b67      	ldr	r3, [pc, #412]	; (80101ac <__ieee754_asin+0x36c>)
 8010010:	f7f2 fb22 	bl	8002658 <__aeabi_dsub>
 8010014:	0032      	movs	r2, r6
 8010016:	003b      	movs	r3, r7
 8010018:	f7f2 f8b2 	bl	8002180 <__aeabi_dmul>
 801001c:	4a64      	ldr	r2, [pc, #400]	; (80101b0 <__ieee754_asin+0x370>)
 801001e:	4b65      	ldr	r3, [pc, #404]	; (80101b4 <__ieee754_asin+0x374>)
 8010020:	f7f1 f93e 	bl	80012a0 <__aeabi_dadd>
 8010024:	0032      	movs	r2, r6
 8010026:	003b      	movs	r3, r7
 8010028:	f7f2 f8aa 	bl	8002180 <__aeabi_dmul>
 801002c:	4a62      	ldr	r2, [pc, #392]	; (80101b8 <__ieee754_asin+0x378>)
 801002e:	4b63      	ldr	r3, [pc, #396]	; (80101bc <__ieee754_asin+0x37c>)
 8010030:	f7f2 fb12 	bl	8002658 <__aeabi_dsub>
 8010034:	0032      	movs	r2, r6
 8010036:	003b      	movs	r3, r7
 8010038:	f7f2 f8a2 	bl	8002180 <__aeabi_dmul>
 801003c:	4a60      	ldr	r2, [pc, #384]	; (80101c0 <__ieee754_asin+0x380>)
 801003e:	4b61      	ldr	r3, [pc, #388]	; (80101c4 <__ieee754_asin+0x384>)
 8010040:	f7f1 f92e 	bl	80012a0 <__aeabi_dadd>
 8010044:	0032      	movs	r2, r6
 8010046:	003b      	movs	r3, r7
 8010048:	f7f2 f89a 	bl	8002180 <__aeabi_dmul>
 801004c:	4a5e      	ldr	r2, [pc, #376]	; (80101c8 <__ieee754_asin+0x388>)
 801004e:	9000      	str	r0, [sp, #0]
 8010050:	9101      	str	r1, [sp, #4]
 8010052:	4b5e      	ldr	r3, [pc, #376]	; (80101cc <__ieee754_asin+0x38c>)
 8010054:	0030      	movs	r0, r6
 8010056:	0039      	movs	r1, r7
 8010058:	f7f2 f892 	bl	8002180 <__aeabi_dmul>
 801005c:	4a5c      	ldr	r2, [pc, #368]	; (80101d0 <__ieee754_asin+0x390>)
 801005e:	4b5d      	ldr	r3, [pc, #372]	; (80101d4 <__ieee754_asin+0x394>)
 8010060:	f7f2 fafa 	bl	8002658 <__aeabi_dsub>
 8010064:	0032      	movs	r2, r6
 8010066:	003b      	movs	r3, r7
 8010068:	f7f2 f88a 	bl	8002180 <__aeabi_dmul>
 801006c:	4a5a      	ldr	r2, [pc, #360]	; (80101d8 <__ieee754_asin+0x398>)
 801006e:	4b5b      	ldr	r3, [pc, #364]	; (80101dc <__ieee754_asin+0x39c>)
 8010070:	f7f1 f916 	bl	80012a0 <__aeabi_dadd>
 8010074:	0032      	movs	r2, r6
 8010076:	003b      	movs	r3, r7
 8010078:	f7f2 f882 	bl	8002180 <__aeabi_dmul>
 801007c:	4a58      	ldr	r2, [pc, #352]	; (80101e0 <__ieee754_asin+0x3a0>)
 801007e:	4b59      	ldr	r3, [pc, #356]	; (80101e4 <__ieee754_asin+0x3a4>)
 8010080:	f7f2 faea 	bl	8002658 <__aeabi_dsub>
 8010084:	0032      	movs	r2, r6
 8010086:	003b      	movs	r3, r7
 8010088:	f7f2 f87a 	bl	8002180 <__aeabi_dmul>
 801008c:	2200      	movs	r2, #0
 801008e:	4b40      	ldr	r3, [pc, #256]	; (8010190 <__ieee754_asin+0x350>)
 8010090:	f7f1 f906 	bl	80012a0 <__aeabi_dadd>
 8010094:	0002      	movs	r2, r0
 8010096:	000b      	movs	r3, r1
 8010098:	9800      	ldr	r0, [sp, #0]
 801009a:	9901      	ldr	r1, [sp, #4]
 801009c:	f7f1 fc6a 	bl	8001974 <__aeabi_ddiv>
 80100a0:	0022      	movs	r2, r4
 80100a2:	002b      	movs	r3, r5
 80100a4:	f7f2 f86c 	bl	8002180 <__aeabi_dmul>
 80100a8:	0002      	movs	r2, r0
 80100aa:	000b      	movs	r3, r1
 80100ac:	0020      	movs	r0, r4
 80100ae:	0029      	movs	r1, r5
 80100b0:	e6e4      	b.n	800fe7c <__ieee754_asin+0x3c>
 80100b2:	9a00      	ldr	r2, [sp, #0]
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	0010      	movs	r0, r2
 80100b8:	9e00      	ldr	r6, [sp, #0]
 80100ba:	9f01      	ldr	r7, [sp, #4]
 80100bc:	0019      	movs	r1, r3
 80100be:	f7f1 f8ef 	bl	80012a0 <__aeabi_dadd>
 80100c2:	9a04      	ldr	r2, [sp, #16]
 80100c4:	9b05      	ldr	r3, [sp, #20]
 80100c6:	9008      	str	r0, [sp, #32]
 80100c8:	9109      	str	r1, [sp, #36]	; 0x24
 80100ca:	9802      	ldr	r0, [sp, #8]
 80100cc:	9903      	ldr	r1, [sp, #12]
 80100ce:	f7f1 fc51 	bl	8001974 <__aeabi_ddiv>
 80100d2:	0002      	movs	r2, r0
 80100d4:	000b      	movs	r3, r1
 80100d6:	9808      	ldr	r0, [sp, #32]
 80100d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100da:	f7f2 f851 	bl	8002180 <__aeabi_dmul>
 80100de:	2600      	movs	r6, #0
 80100e0:	9002      	str	r0, [sp, #8]
 80100e2:	9103      	str	r1, [sp, #12]
 80100e4:	0032      	movs	r2, r6
 80100e6:	003b      	movs	r3, r7
 80100e8:	0030      	movs	r0, r6
 80100ea:	0039      	movs	r1, r7
 80100ec:	f7f2 f848 	bl	8002180 <__aeabi_dmul>
 80100f0:	0002      	movs	r2, r0
 80100f2:	000b      	movs	r3, r1
 80100f4:	0020      	movs	r0, r4
 80100f6:	0029      	movs	r1, r5
 80100f8:	f7f2 faae 	bl	8002658 <__aeabi_dsub>
 80100fc:	0032      	movs	r2, r6
 80100fe:	0004      	movs	r4, r0
 8010100:	000d      	movs	r5, r1
 8010102:	9800      	ldr	r0, [sp, #0]
 8010104:	9901      	ldr	r1, [sp, #4]
 8010106:	003b      	movs	r3, r7
 8010108:	f7f1 f8ca 	bl	80012a0 <__aeabi_dadd>
 801010c:	0002      	movs	r2, r0
 801010e:	000b      	movs	r3, r1
 8010110:	0020      	movs	r0, r4
 8010112:	0029      	movs	r1, r5
 8010114:	f7f1 fc2e 	bl	8001974 <__aeabi_ddiv>
 8010118:	0002      	movs	r2, r0
 801011a:	000b      	movs	r3, r1
 801011c:	f7f1 f8c0 	bl	80012a0 <__aeabi_dadd>
 8010120:	0002      	movs	r2, r0
 8010122:	000b      	movs	r3, r1
 8010124:	4815      	ldr	r0, [pc, #84]	; (801017c <__ieee754_asin+0x33c>)
 8010126:	4916      	ldr	r1, [pc, #88]	; (8010180 <__ieee754_asin+0x340>)
 8010128:	f7f2 fa96 	bl	8002658 <__aeabi_dsub>
 801012c:	0002      	movs	r2, r0
 801012e:	000b      	movs	r3, r1
 8010130:	9802      	ldr	r0, [sp, #8]
 8010132:	9903      	ldr	r1, [sp, #12]
 8010134:	f7f2 fa90 	bl	8002658 <__aeabi_dsub>
 8010138:	0032      	movs	r2, r6
 801013a:	0004      	movs	r4, r0
 801013c:	000d      	movs	r5, r1
 801013e:	003b      	movs	r3, r7
 8010140:	0030      	movs	r0, r6
 8010142:	0039      	movs	r1, r7
 8010144:	f7f1 f8ac 	bl	80012a0 <__aeabi_dadd>
 8010148:	0002      	movs	r2, r0
 801014a:	000b      	movs	r3, r1
 801014c:	4809      	ldr	r0, [pc, #36]	; (8010174 <__ieee754_asin+0x334>)
 801014e:	4927      	ldr	r1, [pc, #156]	; (80101ec <__ieee754_asin+0x3ac>)
 8010150:	f7f2 fa82 	bl	8002658 <__aeabi_dsub>
 8010154:	0002      	movs	r2, r0
 8010156:	000b      	movs	r3, r1
 8010158:	0020      	movs	r0, r4
 801015a:	0029      	movs	r1, r5
 801015c:	f7f2 fa7c 	bl	8002658 <__aeabi_dsub>
 8010160:	0002      	movs	r2, r0
 8010162:	000b      	movs	r3, r1
 8010164:	4803      	ldr	r0, [pc, #12]	; (8010174 <__ieee754_asin+0x334>)
 8010166:	4921      	ldr	r1, [pc, #132]	; (80101ec <__ieee754_asin+0x3ac>)
 8010168:	e731      	b.n	800ffce <__ieee754_asin+0x18e>
 801016a:	46c0      	nop			; (mov r8, r8)
 801016c:	3fefffff 	.word	0x3fefffff
 8010170:	c0100000 	.word	0xc0100000
 8010174:	54442d18 	.word	0x54442d18
 8010178:	3ff921fb 	.word	0x3ff921fb
 801017c:	33145c07 	.word	0x33145c07
 8010180:	3c91a626 	.word	0x3c91a626
 8010184:	3fdfffff 	.word	0x3fdfffff
 8010188:	8800759c 	.word	0x8800759c
 801018c:	7e37e43c 	.word	0x7e37e43c
 8010190:	3ff00000 	.word	0x3ff00000
 8010194:	3fe00000 	.word	0x3fe00000
 8010198:	0dfdf709 	.word	0x0dfdf709
 801019c:	3f023de1 	.word	0x3f023de1
 80101a0:	7501b288 	.word	0x7501b288
 80101a4:	3f49efe0 	.word	0x3f49efe0
 80101a8:	b5688f3b 	.word	0xb5688f3b
 80101ac:	3fa48228 	.word	0x3fa48228
 80101b0:	0e884455 	.word	0x0e884455
 80101b4:	3fc9c155 	.word	0x3fc9c155
 80101b8:	03eb6f7d 	.word	0x03eb6f7d
 80101bc:	3fd4d612 	.word	0x3fd4d612
 80101c0:	55555555 	.word	0x55555555
 80101c4:	3fc55555 	.word	0x3fc55555
 80101c8:	b12e9282 	.word	0xb12e9282
 80101cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80101d0:	1b8d0159 	.word	0x1b8d0159
 80101d4:	3fe6066c 	.word	0x3fe6066c
 80101d8:	9c598ac8 	.word	0x9c598ac8
 80101dc:	40002ae5 	.word	0x40002ae5
 80101e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80101e4:	40033a27 	.word	0x40033a27
 80101e8:	3fef3332 	.word	0x3fef3332
 80101ec:	3fe921fb 	.word	0x3fe921fb

080101f0 <__ieee754_atan2>:
 80101f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101f2:	0016      	movs	r6, r2
 80101f4:	001d      	movs	r5, r3
 80101f6:	005a      	lsls	r2, r3, #1
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	4273      	negs	r3, r6
 80101fc:	4333      	orrs	r3, r6
 80101fe:	4f46      	ldr	r7, [pc, #280]	; (8010318 <__ieee754_atan2+0x128>)
 8010200:	0852      	lsrs	r2, r2, #1
 8010202:	0fdb      	lsrs	r3, r3, #31
 8010204:	4313      	orrs	r3, r2
 8010206:	42bb      	cmp	r3, r7
 8010208:	d809      	bhi.n	801021e <__ieee754_atan2+0x2e>
 801020a:	4244      	negs	r4, r0
 801020c:	004b      	lsls	r3, r1, #1
 801020e:	4304      	orrs	r4, r0
 8010210:	085b      	lsrs	r3, r3, #1
 8010212:	0fe4      	lsrs	r4, r4, #31
 8010214:	9100      	str	r1, [sp, #0]
 8010216:	9001      	str	r0, [sp, #4]
 8010218:	431c      	orrs	r4, r3
 801021a:	42bc      	cmp	r4, r7
 801021c:	d905      	bls.n	801022a <__ieee754_atan2+0x3a>
 801021e:	0032      	movs	r2, r6
 8010220:	002b      	movs	r3, r5
 8010222:	f7f1 f83d 	bl	80012a0 <__aeabi_dadd>
 8010226:	b003      	add	sp, #12
 8010228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801022a:	4c3c      	ldr	r4, [pc, #240]	; (801031c <__ieee754_atan2+0x12c>)
 801022c:	192c      	adds	r4, r5, r4
 801022e:	4334      	orrs	r4, r6
 8010230:	d102      	bne.n	8010238 <__ieee754_atan2+0x48>
 8010232:	f7ff fadf 	bl	800f7f4 <atan>
 8010236:	e7f6      	b.n	8010226 <__ieee754_atan2+0x36>
 8010238:	17ac      	asrs	r4, r5, #30
 801023a:	46a4      	mov	ip, r4
 801023c:	2402      	movs	r4, #2
 801023e:	4667      	mov	r7, ip
 8010240:	403c      	ands	r4, r7
 8010242:	9f00      	ldr	r7, [sp, #0]
 8010244:	0fff      	lsrs	r7, r7, #31
 8010246:	433c      	orrs	r4, r7
 8010248:	9f01      	ldr	r7, [sp, #4]
 801024a:	431f      	orrs	r7, r3
 801024c:	d106      	bne.n	801025c <__ieee754_atan2+0x6c>
 801024e:	2c02      	cmp	r4, #2
 8010250:	d056      	beq.n	8010300 <__ieee754_atan2+0x110>
 8010252:	2c03      	cmp	r4, #3
 8010254:	d1e7      	bne.n	8010226 <__ieee754_atan2+0x36>
 8010256:	4832      	ldr	r0, [pc, #200]	; (8010320 <__ieee754_atan2+0x130>)
 8010258:	4932      	ldr	r1, [pc, #200]	; (8010324 <__ieee754_atan2+0x134>)
 801025a:	e7e4      	b.n	8010226 <__ieee754_atan2+0x36>
 801025c:	0017      	movs	r7, r2
 801025e:	4337      	orrs	r7, r6
 8010260:	d105      	bne.n	801026e <__ieee754_atan2+0x7e>
 8010262:	9b00      	ldr	r3, [sp, #0]
 8010264:	482e      	ldr	r0, [pc, #184]	; (8010320 <__ieee754_atan2+0x130>)
 8010266:	2b00      	cmp	r3, #0
 8010268:	da53      	bge.n	8010312 <__ieee754_atan2+0x122>
 801026a:	492f      	ldr	r1, [pc, #188]	; (8010328 <__ieee754_atan2+0x138>)
 801026c:	e7db      	b.n	8010226 <__ieee754_atan2+0x36>
 801026e:	4f2a      	ldr	r7, [pc, #168]	; (8010318 <__ieee754_atan2+0x128>)
 8010270:	42ba      	cmp	r2, r7
 8010272:	d10f      	bne.n	8010294 <__ieee754_atan2+0xa4>
 8010274:	3c01      	subs	r4, #1
 8010276:	4293      	cmp	r3, r2
 8010278:	d107      	bne.n	801028a <__ieee754_atan2+0x9a>
 801027a:	2c02      	cmp	r4, #2
 801027c:	d843      	bhi.n	8010306 <__ieee754_atan2+0x116>
 801027e:	4b2b      	ldr	r3, [pc, #172]	; (801032c <__ieee754_atan2+0x13c>)
 8010280:	00e4      	lsls	r4, r4, #3
 8010282:	191c      	adds	r4, r3, r4
 8010284:	6820      	ldr	r0, [r4, #0]
 8010286:	6861      	ldr	r1, [r4, #4]
 8010288:	e7cd      	b.n	8010226 <__ieee754_atan2+0x36>
 801028a:	2c02      	cmp	r4, #2
 801028c:	d83e      	bhi.n	801030c <__ieee754_atan2+0x11c>
 801028e:	4b28      	ldr	r3, [pc, #160]	; (8010330 <__ieee754_atan2+0x140>)
 8010290:	00e4      	lsls	r4, r4, #3
 8010292:	e7f6      	b.n	8010282 <__ieee754_atan2+0x92>
 8010294:	4f20      	ldr	r7, [pc, #128]	; (8010318 <__ieee754_atan2+0x128>)
 8010296:	42bb      	cmp	r3, r7
 8010298:	d0e3      	beq.n	8010262 <__ieee754_atan2+0x72>
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	151b      	asrs	r3, r3, #20
 801029e:	2b3c      	cmp	r3, #60	; 0x3c
 80102a0:	dc18      	bgt.n	80102d4 <__ieee754_atan2+0xe4>
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	da01      	bge.n	80102aa <__ieee754_atan2+0xba>
 80102a6:	333c      	adds	r3, #60	; 0x3c
 80102a8:	db17      	blt.n	80102da <__ieee754_atan2+0xea>
 80102aa:	0032      	movs	r2, r6
 80102ac:	002b      	movs	r3, r5
 80102ae:	f7f1 fb61 	bl	8001974 <__aeabi_ddiv>
 80102b2:	f7ff fc61 	bl	800fb78 <fabs>
 80102b6:	f7ff fa9d 	bl	800f7f4 <atan>
 80102ba:	2c01      	cmp	r4, #1
 80102bc:	d010      	beq.n	80102e0 <__ieee754_atan2+0xf0>
 80102be:	2c02      	cmp	r4, #2
 80102c0:	d013      	beq.n	80102ea <__ieee754_atan2+0xfa>
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	d0af      	beq.n	8010226 <__ieee754_atan2+0x36>
 80102c6:	4a1b      	ldr	r2, [pc, #108]	; (8010334 <__ieee754_atan2+0x144>)
 80102c8:	4b1b      	ldr	r3, [pc, #108]	; (8010338 <__ieee754_atan2+0x148>)
 80102ca:	f7f2 f9c5 	bl	8002658 <__aeabi_dsub>
 80102ce:	4a14      	ldr	r2, [pc, #80]	; (8010320 <__ieee754_atan2+0x130>)
 80102d0:	4b1a      	ldr	r3, [pc, #104]	; (801033c <__ieee754_atan2+0x14c>)
 80102d2:	e012      	b.n	80102fa <__ieee754_atan2+0x10a>
 80102d4:	4812      	ldr	r0, [pc, #72]	; (8010320 <__ieee754_atan2+0x130>)
 80102d6:	491a      	ldr	r1, [pc, #104]	; (8010340 <__ieee754_atan2+0x150>)
 80102d8:	e7ef      	b.n	80102ba <__ieee754_atan2+0xca>
 80102da:	2000      	movs	r0, #0
 80102dc:	2100      	movs	r1, #0
 80102de:	e7ec      	b.n	80102ba <__ieee754_atan2+0xca>
 80102e0:	2480      	movs	r4, #128	; 0x80
 80102e2:	0624      	lsls	r4, r4, #24
 80102e4:	190b      	adds	r3, r1, r4
 80102e6:	0019      	movs	r1, r3
 80102e8:	e79d      	b.n	8010226 <__ieee754_atan2+0x36>
 80102ea:	4a12      	ldr	r2, [pc, #72]	; (8010334 <__ieee754_atan2+0x144>)
 80102ec:	4b12      	ldr	r3, [pc, #72]	; (8010338 <__ieee754_atan2+0x148>)
 80102ee:	f7f2 f9b3 	bl	8002658 <__aeabi_dsub>
 80102f2:	0002      	movs	r2, r0
 80102f4:	000b      	movs	r3, r1
 80102f6:	480a      	ldr	r0, [pc, #40]	; (8010320 <__ieee754_atan2+0x130>)
 80102f8:	4910      	ldr	r1, [pc, #64]	; (801033c <__ieee754_atan2+0x14c>)
 80102fa:	f7f2 f9ad 	bl	8002658 <__aeabi_dsub>
 80102fe:	e792      	b.n	8010226 <__ieee754_atan2+0x36>
 8010300:	4807      	ldr	r0, [pc, #28]	; (8010320 <__ieee754_atan2+0x130>)
 8010302:	490e      	ldr	r1, [pc, #56]	; (801033c <__ieee754_atan2+0x14c>)
 8010304:	e78f      	b.n	8010226 <__ieee754_atan2+0x36>
 8010306:	4806      	ldr	r0, [pc, #24]	; (8010320 <__ieee754_atan2+0x130>)
 8010308:	490e      	ldr	r1, [pc, #56]	; (8010344 <__ieee754_atan2+0x154>)
 801030a:	e78c      	b.n	8010226 <__ieee754_atan2+0x36>
 801030c:	2000      	movs	r0, #0
 801030e:	2100      	movs	r1, #0
 8010310:	e789      	b.n	8010226 <__ieee754_atan2+0x36>
 8010312:	490b      	ldr	r1, [pc, #44]	; (8010340 <__ieee754_atan2+0x150>)
 8010314:	e787      	b.n	8010226 <__ieee754_atan2+0x36>
 8010316:	46c0      	nop			; (mov r8, r8)
 8010318:	7ff00000 	.word	0x7ff00000
 801031c:	c0100000 	.word	0xc0100000
 8010320:	54442d18 	.word	0x54442d18
 8010324:	c00921fb 	.word	0xc00921fb
 8010328:	bff921fb 	.word	0xbff921fb
 801032c:	08012890 	.word	0x08012890
 8010330:	080128a8 	.word	0x080128a8
 8010334:	33145c07 	.word	0x33145c07
 8010338:	3ca1a626 	.word	0x3ca1a626
 801033c:	400921fb 	.word	0x400921fb
 8010340:	3ff921fb 	.word	0x3ff921fb
 8010344:	3fe921fb 	.word	0x3fe921fb

08010348 <__ieee754_pow>:
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034a:	b095      	sub	sp, #84	; 0x54
 801034c:	9202      	str	r2, [sp, #8]
 801034e:	9303      	str	r3, [sp, #12]
 8010350:	9b03      	ldr	r3, [sp, #12]
 8010352:	9a03      	ldr	r2, [sp, #12]
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	9b02      	ldr	r3, [sp, #8]
 8010358:	0055      	lsls	r5, r2, #1
 801035a:	001a      	movs	r2, r3
 801035c:	086d      	lsrs	r5, r5, #1
 801035e:	0007      	movs	r7, r0
 8010360:	000e      	movs	r6, r1
 8010362:	432a      	orrs	r2, r5
 8010364:	d101      	bne.n	801036a <__ieee754_pow+0x22>
 8010366:	f000 fcb6 	bl	8010cd6 <__ieee754_pow+0x98e>
 801036a:	4a82      	ldr	r2, [pc, #520]	; (8010574 <__ieee754_pow+0x22c>)
 801036c:	004c      	lsls	r4, r1, #1
 801036e:	9108      	str	r1, [sp, #32]
 8010370:	9000      	str	r0, [sp, #0]
 8010372:	0864      	lsrs	r4, r4, #1
 8010374:	4294      	cmp	r4, r2
 8010376:	dc0d      	bgt.n	8010394 <__ieee754_pow+0x4c>
 8010378:	d104      	bne.n	8010384 <__ieee754_pow+0x3c>
 801037a:	2800      	cmp	r0, #0
 801037c:	d110      	bne.n	80103a0 <__ieee754_pow+0x58>
 801037e:	42a5      	cmp	r5, r4
 8010380:	dd03      	ble.n	801038a <__ieee754_pow+0x42>
 8010382:	e00d      	b.n	80103a0 <__ieee754_pow+0x58>
 8010384:	4a7b      	ldr	r2, [pc, #492]	; (8010574 <__ieee754_pow+0x22c>)
 8010386:	4295      	cmp	r5, r2
 8010388:	dc04      	bgt.n	8010394 <__ieee754_pow+0x4c>
 801038a:	4a7a      	ldr	r2, [pc, #488]	; (8010574 <__ieee754_pow+0x22c>)
 801038c:	4295      	cmp	r5, r2
 801038e:	d10d      	bne.n	80103ac <__ieee754_pow+0x64>
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00b      	beq.n	80103ac <__ieee754_pow+0x64>
 8010394:	4b78      	ldr	r3, [pc, #480]	; (8010578 <__ieee754_pow+0x230>)
 8010396:	18e4      	adds	r4, r4, r3
 8010398:	4327      	orrs	r7, r4
 801039a:	d101      	bne.n	80103a0 <__ieee754_pow+0x58>
 801039c:	f000 fc9b 	bl	8010cd6 <__ieee754_pow+0x98e>
 80103a0:	4876      	ldr	r0, [pc, #472]	; (801057c <__ieee754_pow+0x234>)
 80103a2:	f001 fce5 	bl	8011d70 <nan>
 80103a6:	9000      	str	r0, [sp, #0]
 80103a8:	9101      	str	r1, [sp, #4]
 80103aa:	e092      	b.n	80104d2 <__ieee754_pow+0x18a>
 80103ac:	2200      	movs	r2, #0
 80103ae:	9206      	str	r2, [sp, #24]
 80103b0:	2e00      	cmp	r6, #0
 80103b2:	da69      	bge.n	8010488 <__ieee754_pow+0x140>
 80103b4:	4a72      	ldr	r2, [pc, #456]	; (8010580 <__ieee754_pow+0x238>)
 80103b6:	4295      	cmp	r5, r2
 80103b8:	dc64      	bgt.n	8010484 <__ieee754_pow+0x13c>
 80103ba:	4a72      	ldr	r2, [pc, #456]	; (8010584 <__ieee754_pow+0x23c>)
 80103bc:	4295      	cmp	r5, r2
 80103be:	dd11      	ble.n	80103e4 <__ieee754_pow+0x9c>
 80103c0:	4971      	ldr	r1, [pc, #452]	; (8010588 <__ieee754_pow+0x240>)
 80103c2:	152a      	asrs	r2, r5, #20
 80103c4:	1852      	adds	r2, r2, r1
 80103c6:	2a14      	cmp	r2, #20
 80103c8:	dd3c      	ble.n	8010444 <__ieee754_pow+0xfc>
 80103ca:	2134      	movs	r1, #52	; 0x34
 80103cc:	1a8a      	subs	r2, r1, r2
 80103ce:	9902      	ldr	r1, [sp, #8]
 80103d0:	40d1      	lsrs	r1, r2
 80103d2:	0008      	movs	r0, r1
 80103d4:	4090      	lsls	r0, r2
 80103d6:	4298      	cmp	r0, r3
 80103d8:	d104      	bne.n	80103e4 <__ieee754_pow+0x9c>
 80103da:	2201      	movs	r2, #1
 80103dc:	4011      	ands	r1, r2
 80103de:	1892      	adds	r2, r2, r2
 80103e0:	1a52      	subs	r2, r2, r1
 80103e2:	9206      	str	r2, [sp, #24]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d03c      	beq.n	8010462 <__ieee754_pow+0x11a>
 80103e8:	0038      	movs	r0, r7
 80103ea:	0031      	movs	r1, r6
 80103ec:	f7ff fbc4 	bl	800fb78 <fabs>
 80103f0:	9000      	str	r0, [sp, #0]
 80103f2:	9101      	str	r1, [sp, #4]
 80103f4:	2f00      	cmp	r7, #0
 80103f6:	d000      	beq.n	80103fa <__ieee754_pow+0xb2>
 80103f8:	e094      	b.n	8010524 <__ieee754_pow+0x1dc>
 80103fa:	2c00      	cmp	r4, #0
 80103fc:	d005      	beq.n	801040a <__ieee754_pow+0xc2>
 80103fe:	4a63      	ldr	r2, [pc, #396]	; (801058c <__ieee754_pow+0x244>)
 8010400:	00b3      	lsls	r3, r6, #2
 8010402:	089b      	lsrs	r3, r3, #2
 8010404:	4293      	cmp	r3, r2
 8010406:	d000      	beq.n	801040a <__ieee754_pow+0xc2>
 8010408:	e08c      	b.n	8010524 <__ieee754_pow+0x1dc>
 801040a:	9b04      	ldr	r3, [sp, #16]
 801040c:	2b00      	cmp	r3, #0
 801040e:	da07      	bge.n	8010420 <__ieee754_pow+0xd8>
 8010410:	9a00      	ldr	r2, [sp, #0]
 8010412:	9b01      	ldr	r3, [sp, #4]
 8010414:	2000      	movs	r0, #0
 8010416:	495d      	ldr	r1, [pc, #372]	; (801058c <__ieee754_pow+0x244>)
 8010418:	f7f1 faac 	bl	8001974 <__aeabi_ddiv>
 801041c:	9000      	str	r0, [sp, #0]
 801041e:	9101      	str	r1, [sp, #4]
 8010420:	9b08      	ldr	r3, [sp, #32]
 8010422:	2b00      	cmp	r3, #0
 8010424:	da55      	bge.n	80104d2 <__ieee754_pow+0x18a>
 8010426:	4b54      	ldr	r3, [pc, #336]	; (8010578 <__ieee754_pow+0x230>)
 8010428:	18e4      	adds	r4, r4, r3
 801042a:	9b06      	ldr	r3, [sp, #24]
 801042c:	431c      	orrs	r4, r3
 801042e:	d000      	beq.n	8010432 <__ieee754_pow+0xea>
 8010430:	e06c      	b.n	801050c <__ieee754_pow+0x1c4>
 8010432:	9a00      	ldr	r2, [sp, #0]
 8010434:	9b01      	ldr	r3, [sp, #4]
 8010436:	0010      	movs	r0, r2
 8010438:	0019      	movs	r1, r3
 801043a:	f7f2 f90d 	bl	8002658 <__aeabi_dsub>
 801043e:	0002      	movs	r2, r0
 8010440:	000b      	movs	r3, r1
 8010442:	e01c      	b.n	801047e <__ieee754_pow+0x136>
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1cf      	bne.n	80103e8 <__ieee754_pow+0xa0>
 8010448:	3314      	adds	r3, #20
 801044a:	1a9a      	subs	r2, r3, r2
 801044c:	002b      	movs	r3, r5
 801044e:	4113      	asrs	r3, r2
 8010450:	0019      	movs	r1, r3
 8010452:	4091      	lsls	r1, r2
 8010454:	42a9      	cmp	r1, r5
 8010456:	d104      	bne.n	8010462 <__ieee754_pow+0x11a>
 8010458:	2201      	movs	r2, #1
 801045a:	4013      	ands	r3, r2
 801045c:	1892      	adds	r2, r2, r2
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	9306      	str	r3, [sp, #24]
 8010462:	4b4a      	ldr	r3, [pc, #296]	; (801058c <__ieee754_pow+0x244>)
 8010464:	429d      	cmp	r5, r3
 8010466:	d138      	bne.n	80104da <__ieee754_pow+0x192>
 8010468:	0038      	movs	r0, r7
 801046a:	0031      	movs	r1, r6
 801046c:	9b04      	ldr	r3, [sp, #16]
 801046e:	9000      	str	r0, [sp, #0]
 8010470:	9101      	str	r1, [sp, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	da2d      	bge.n	80104d2 <__ieee754_pow+0x18a>
 8010476:	003a      	movs	r2, r7
 8010478:	0033      	movs	r3, r6
 801047a:	2000      	movs	r0, #0
 801047c:	4943      	ldr	r1, [pc, #268]	; (801058c <__ieee754_pow+0x244>)
 801047e:	f7f1 fa79 	bl	8001974 <__aeabi_ddiv>
 8010482:	e790      	b.n	80103a6 <__ieee754_pow+0x5e>
 8010484:	2202      	movs	r2, #2
 8010486:	9206      	str	r2, [sp, #24]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d1ad      	bne.n	80103e8 <__ieee754_pow+0xa0>
 801048c:	4b39      	ldr	r3, [pc, #228]	; (8010574 <__ieee754_pow+0x22c>)
 801048e:	429d      	cmp	r5, r3
 8010490:	d1e7      	bne.n	8010462 <__ieee754_pow+0x11a>
 8010492:	4b39      	ldr	r3, [pc, #228]	; (8010578 <__ieee754_pow+0x230>)
 8010494:	18e3      	adds	r3, r4, r3
 8010496:	431f      	orrs	r7, r3
 8010498:	d101      	bne.n	801049e <__ieee754_pow+0x156>
 801049a:	f000 fc1c 	bl	8010cd6 <__ieee754_pow+0x98e>
 801049e:	4b39      	ldr	r3, [pc, #228]	; (8010584 <__ieee754_pow+0x23c>)
 80104a0:	429c      	cmp	r4, r3
 80104a2:	dd0b      	ble.n	80104bc <__ieee754_pow+0x174>
 80104a4:	9b02      	ldr	r3, [sp, #8]
 80104a6:	9c03      	ldr	r4, [sp, #12]
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	9401      	str	r4, [sp, #4]
 80104ac:	9b04      	ldr	r3, [sp, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	da0f      	bge.n	80104d2 <__ieee754_pow+0x18a>
 80104b2:	2300      	movs	r3, #0
 80104b4:	2400      	movs	r4, #0
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	9401      	str	r4, [sp, #4]
 80104ba:	e00a      	b.n	80104d2 <__ieee754_pow+0x18a>
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	daf7      	bge.n	80104b2 <__ieee754_pow+0x16a>
 80104c2:	2280      	movs	r2, #128	; 0x80
 80104c4:	0612      	lsls	r2, r2, #24
 80104c6:	4694      	mov	ip, r2
 80104c8:	9b02      	ldr	r3, [sp, #8]
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	9b03      	ldr	r3, [sp, #12]
 80104ce:	4463      	add	r3, ip
 80104d0:	9301      	str	r3, [sp, #4]
 80104d2:	9800      	ldr	r0, [sp, #0]
 80104d4:	9901      	ldr	r1, [sp, #4]
 80104d6:	b015      	add	sp, #84	; 0x54
 80104d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104da:	2380      	movs	r3, #128	; 0x80
 80104dc:	9a04      	ldr	r2, [sp, #16]
 80104de:	05db      	lsls	r3, r3, #23
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d106      	bne.n	80104f2 <__ieee754_pow+0x1aa>
 80104e4:	003a      	movs	r2, r7
 80104e6:	0033      	movs	r3, r6
 80104e8:	0038      	movs	r0, r7
 80104ea:	0031      	movs	r1, r6
 80104ec:	f7f1 fe48 	bl	8002180 <__aeabi_dmul>
 80104f0:	e759      	b.n	80103a6 <__ieee754_pow+0x5e>
 80104f2:	4b27      	ldr	r3, [pc, #156]	; (8010590 <__ieee754_pow+0x248>)
 80104f4:	9a04      	ldr	r2, [sp, #16]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d000      	beq.n	80104fc <__ieee754_pow+0x1b4>
 80104fa:	e775      	b.n	80103e8 <__ieee754_pow+0xa0>
 80104fc:	2e00      	cmp	r6, #0
 80104fe:	da00      	bge.n	8010502 <__ieee754_pow+0x1ba>
 8010500:	e772      	b.n	80103e8 <__ieee754_pow+0xa0>
 8010502:	0038      	movs	r0, r7
 8010504:	0031      	movs	r1, r6
 8010506:	f000 fe0b 	bl	8011120 <__ieee754_sqrt>
 801050a:	e74c      	b.n	80103a6 <__ieee754_pow+0x5e>
 801050c:	9b06      	ldr	r3, [sp, #24]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d1df      	bne.n	80104d2 <__ieee754_pow+0x18a>
 8010512:	9800      	ldr	r0, [sp, #0]
 8010514:	2180      	movs	r1, #128	; 0x80
 8010516:	0002      	movs	r2, r0
 8010518:	9801      	ldr	r0, [sp, #4]
 801051a:	0609      	lsls	r1, r1, #24
 801051c:	1843      	adds	r3, r0, r1
 801051e:	9200      	str	r2, [sp, #0]
 8010520:	9301      	str	r3, [sp, #4]
 8010522:	e7d6      	b.n	80104d2 <__ieee754_pow+0x18a>
 8010524:	0ff3      	lsrs	r3, r6, #31
 8010526:	3b01      	subs	r3, #1
 8010528:	9310      	str	r3, [sp, #64]	; 0x40
 801052a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801052c:	9b06      	ldr	r3, [sp, #24]
 801052e:	4313      	orrs	r3, r2
 8010530:	d104      	bne.n	801053c <__ieee754_pow+0x1f4>
 8010532:	003a      	movs	r2, r7
 8010534:	0033      	movs	r3, r6
 8010536:	0038      	movs	r0, r7
 8010538:	0031      	movs	r1, r6
 801053a:	e77e      	b.n	801043a <__ieee754_pow+0xf2>
 801053c:	4b15      	ldr	r3, [pc, #84]	; (8010594 <__ieee754_pow+0x24c>)
 801053e:	429d      	cmp	r5, r3
 8010540:	dc00      	bgt.n	8010544 <__ieee754_pow+0x1fc>
 8010542:	e0f5      	b.n	8010730 <__ieee754_pow+0x3e8>
 8010544:	4b14      	ldr	r3, [pc, #80]	; (8010598 <__ieee754_pow+0x250>)
 8010546:	429d      	cmp	r5, r3
 8010548:	dd0a      	ble.n	8010560 <__ieee754_pow+0x218>
 801054a:	4b0e      	ldr	r3, [pc, #56]	; (8010584 <__ieee754_pow+0x23c>)
 801054c:	429c      	cmp	r4, r3
 801054e:	dc0d      	bgt.n	801056c <__ieee754_pow+0x224>
 8010550:	9b04      	ldr	r3, [sp, #16]
 8010552:	2b00      	cmp	r3, #0
 8010554:	daad      	bge.n	80104b2 <__ieee754_pow+0x16a>
 8010556:	4a11      	ldr	r2, [pc, #68]	; (801059c <__ieee754_pow+0x254>)
 8010558:	4b11      	ldr	r3, [pc, #68]	; (80105a0 <__ieee754_pow+0x258>)
 801055a:	0010      	movs	r0, r2
 801055c:	0019      	movs	r1, r3
 801055e:	e7c5      	b.n	80104ec <__ieee754_pow+0x1a4>
 8010560:	4b10      	ldr	r3, [pc, #64]	; (80105a4 <__ieee754_pow+0x25c>)
 8010562:	429c      	cmp	r4, r3
 8010564:	ddf4      	ble.n	8010550 <__ieee754_pow+0x208>
 8010566:	4b09      	ldr	r3, [pc, #36]	; (801058c <__ieee754_pow+0x244>)
 8010568:	429c      	cmp	r4, r3
 801056a:	dd1d      	ble.n	80105a8 <__ieee754_pow+0x260>
 801056c:	9b04      	ldr	r3, [sp, #16]
 801056e:	2b00      	cmp	r3, #0
 8010570:	dcf1      	bgt.n	8010556 <__ieee754_pow+0x20e>
 8010572:	e79e      	b.n	80104b2 <__ieee754_pow+0x16a>
 8010574:	7ff00000 	.word	0x7ff00000
 8010578:	c0100000 	.word	0xc0100000
 801057c:	080126e0 	.word	0x080126e0
 8010580:	433fffff 	.word	0x433fffff
 8010584:	3fefffff 	.word	0x3fefffff
 8010588:	fffffc01 	.word	0xfffffc01
 801058c:	3ff00000 	.word	0x3ff00000
 8010590:	3fe00000 	.word	0x3fe00000
 8010594:	41e00000 	.word	0x41e00000
 8010598:	43f00000 	.word	0x43f00000
 801059c:	8800759c 	.word	0x8800759c
 80105a0:	7e37e43c 	.word	0x7e37e43c
 80105a4:	3feffffe 	.word	0x3feffffe
 80105a8:	2200      	movs	r2, #0
 80105aa:	9800      	ldr	r0, [sp, #0]
 80105ac:	9901      	ldr	r1, [sp, #4]
 80105ae:	4b52      	ldr	r3, [pc, #328]	; (80106f8 <__ieee754_pow+0x3b0>)
 80105b0:	f7f2 f852 	bl	8002658 <__aeabi_dsub>
 80105b4:	22c0      	movs	r2, #192	; 0xc0
 80105b6:	4b51      	ldr	r3, [pc, #324]	; (80106fc <__ieee754_pow+0x3b4>)
 80105b8:	05d2      	lsls	r2, r2, #23
 80105ba:	0004      	movs	r4, r0
 80105bc:	000d      	movs	r5, r1
 80105be:	f7f1 fddf 	bl	8002180 <__aeabi_dmul>
 80105c2:	4a4f      	ldr	r2, [pc, #316]	; (8010700 <__ieee754_pow+0x3b8>)
 80105c4:	9000      	str	r0, [sp, #0]
 80105c6:	9101      	str	r1, [sp, #4]
 80105c8:	4b4e      	ldr	r3, [pc, #312]	; (8010704 <__ieee754_pow+0x3bc>)
 80105ca:	0020      	movs	r0, r4
 80105cc:	0029      	movs	r1, r5
 80105ce:	f7f1 fdd7 	bl	8002180 <__aeabi_dmul>
 80105d2:	2200      	movs	r2, #0
 80105d4:	9004      	str	r0, [sp, #16]
 80105d6:	9105      	str	r1, [sp, #20]
 80105d8:	4b4b      	ldr	r3, [pc, #300]	; (8010708 <__ieee754_pow+0x3c0>)
 80105da:	0020      	movs	r0, r4
 80105dc:	0029      	movs	r1, r5
 80105de:	f7f1 fdcf 	bl	8002180 <__aeabi_dmul>
 80105e2:	0002      	movs	r2, r0
 80105e4:	000b      	movs	r3, r1
 80105e6:	4849      	ldr	r0, [pc, #292]	; (801070c <__ieee754_pow+0x3c4>)
 80105e8:	4949      	ldr	r1, [pc, #292]	; (8010710 <__ieee754_pow+0x3c8>)
 80105ea:	f7f2 f835 	bl	8002658 <__aeabi_dsub>
 80105ee:	0022      	movs	r2, r4
 80105f0:	002b      	movs	r3, r5
 80105f2:	f7f1 fdc5 	bl	8002180 <__aeabi_dmul>
 80105f6:	0002      	movs	r2, r0
 80105f8:	000b      	movs	r3, r1
 80105fa:	2000      	movs	r0, #0
 80105fc:	4945      	ldr	r1, [pc, #276]	; (8010714 <__ieee754_pow+0x3cc>)
 80105fe:	f7f2 f82b 	bl	8002658 <__aeabi_dsub>
 8010602:	0022      	movs	r2, r4
 8010604:	0006      	movs	r6, r0
 8010606:	000f      	movs	r7, r1
 8010608:	002b      	movs	r3, r5
 801060a:	0020      	movs	r0, r4
 801060c:	0029      	movs	r1, r5
 801060e:	f7f1 fdb7 	bl	8002180 <__aeabi_dmul>
 8010612:	0002      	movs	r2, r0
 8010614:	000b      	movs	r3, r1
 8010616:	0030      	movs	r0, r6
 8010618:	0039      	movs	r1, r7
 801061a:	f7f1 fdb1 	bl	8002180 <__aeabi_dmul>
 801061e:	4a3e      	ldr	r2, [pc, #248]	; (8010718 <__ieee754_pow+0x3d0>)
 8010620:	4b36      	ldr	r3, [pc, #216]	; (80106fc <__ieee754_pow+0x3b4>)
 8010622:	f7f1 fdad 	bl	8002180 <__aeabi_dmul>
 8010626:	0002      	movs	r2, r0
 8010628:	000b      	movs	r3, r1
 801062a:	9804      	ldr	r0, [sp, #16]
 801062c:	9905      	ldr	r1, [sp, #20]
 801062e:	f7f2 f813 	bl	8002658 <__aeabi_dsub>
 8010632:	0002      	movs	r2, r0
 8010634:	000b      	movs	r3, r1
 8010636:	0004      	movs	r4, r0
 8010638:	000d      	movs	r5, r1
 801063a:	9800      	ldr	r0, [sp, #0]
 801063c:	9901      	ldr	r1, [sp, #4]
 801063e:	f7f0 fe2f 	bl	80012a0 <__aeabi_dadd>
 8010642:	9a00      	ldr	r2, [sp, #0]
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	2000      	movs	r0, #0
 8010648:	000f      	movs	r7, r1
 801064a:	0006      	movs	r6, r0
 801064c:	f7f2 f804 	bl	8002658 <__aeabi_dsub>
 8010650:	0002      	movs	r2, r0
 8010652:	000b      	movs	r3, r1
 8010654:	0020      	movs	r0, r4
 8010656:	0029      	movs	r1, r5
 8010658:	f7f1 fffe 	bl	8002658 <__aeabi_dsub>
 801065c:	9b06      	ldr	r3, [sp, #24]
 801065e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010660:	3b01      	subs	r3, #1
 8010662:	9004      	str	r0, [sp, #16]
 8010664:	9105      	str	r1, [sp, #20]
 8010666:	4313      	orrs	r3, r2
 8010668:	d000      	beq.n	801066c <__ieee754_pow+0x324>
 801066a:	e1e0      	b.n	8010a2e <__ieee754_pow+0x6e6>
 801066c:	2300      	movs	r3, #0
 801066e:	4c2b      	ldr	r4, [pc, #172]	; (801071c <__ieee754_pow+0x3d4>)
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	9401      	str	r4, [sp, #4]
 8010674:	9c02      	ldr	r4, [sp, #8]
 8010676:	9d03      	ldr	r5, [sp, #12]
 8010678:	9802      	ldr	r0, [sp, #8]
 801067a:	9903      	ldr	r1, [sp, #12]
 801067c:	2400      	movs	r4, #0
 801067e:	002b      	movs	r3, r5
 8010680:	0022      	movs	r2, r4
 8010682:	f7f1 ffe9 	bl	8002658 <__aeabi_dsub>
 8010686:	0032      	movs	r2, r6
 8010688:	003b      	movs	r3, r7
 801068a:	f7f1 fd79 	bl	8002180 <__aeabi_dmul>
 801068e:	9a02      	ldr	r2, [sp, #8]
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	9006      	str	r0, [sp, #24]
 8010694:	9107      	str	r1, [sp, #28]
 8010696:	9804      	ldr	r0, [sp, #16]
 8010698:	9905      	ldr	r1, [sp, #20]
 801069a:	f7f1 fd71 	bl	8002180 <__aeabi_dmul>
 801069e:	0002      	movs	r2, r0
 80106a0:	000b      	movs	r3, r1
 80106a2:	9806      	ldr	r0, [sp, #24]
 80106a4:	9907      	ldr	r1, [sp, #28]
 80106a6:	f7f0 fdfb 	bl	80012a0 <__aeabi_dadd>
 80106aa:	0022      	movs	r2, r4
 80106ac:	002b      	movs	r3, r5
 80106ae:	9004      	str	r0, [sp, #16]
 80106b0:	9105      	str	r1, [sp, #20]
 80106b2:	0030      	movs	r0, r6
 80106b4:	0039      	movs	r1, r7
 80106b6:	f7f1 fd63 	bl	8002180 <__aeabi_dmul>
 80106ba:	0006      	movs	r6, r0
 80106bc:	000f      	movs	r7, r1
 80106be:	000b      	movs	r3, r1
 80106c0:	0002      	movs	r2, r0
 80106c2:	9804      	ldr	r0, [sp, #16]
 80106c4:	9905      	ldr	r1, [sp, #20]
 80106c6:	9606      	str	r6, [sp, #24]
 80106c8:	9707      	str	r7, [sp, #28]
 80106ca:	f7f0 fde9 	bl	80012a0 <__aeabi_dadd>
 80106ce:	4b14      	ldr	r3, [pc, #80]	; (8010720 <__ieee754_pow+0x3d8>)
 80106d0:	0005      	movs	r5, r0
 80106d2:	000c      	movs	r4, r1
 80106d4:	9108      	str	r1, [sp, #32]
 80106d6:	4299      	cmp	r1, r3
 80106d8:	dc00      	bgt.n	80106dc <__ieee754_pow+0x394>
 80106da:	e2da      	b.n	8010c92 <__ieee754_pow+0x94a>
 80106dc:	4b11      	ldr	r3, [pc, #68]	; (8010724 <__ieee754_pow+0x3dc>)
 80106de:	18cb      	adds	r3, r1, r3
 80106e0:	4303      	orrs	r3, r0
 80106e2:	d100      	bne.n	80106e6 <__ieee754_pow+0x39e>
 80106e4:	e1dc      	b.n	8010aa0 <__ieee754_pow+0x758>
 80106e6:	9800      	ldr	r0, [sp, #0]
 80106e8:	9901      	ldr	r1, [sp, #4]
 80106ea:	4a0f      	ldr	r2, [pc, #60]	; (8010728 <__ieee754_pow+0x3e0>)
 80106ec:	4b0f      	ldr	r3, [pc, #60]	; (801072c <__ieee754_pow+0x3e4>)
 80106ee:	f7f1 fd47 	bl	8002180 <__aeabi_dmul>
 80106f2:	4a0d      	ldr	r2, [pc, #52]	; (8010728 <__ieee754_pow+0x3e0>)
 80106f4:	4b0d      	ldr	r3, [pc, #52]	; (801072c <__ieee754_pow+0x3e4>)
 80106f6:	e6f9      	b.n	80104ec <__ieee754_pow+0x1a4>
 80106f8:	3ff00000 	.word	0x3ff00000
 80106fc:	3ff71547 	.word	0x3ff71547
 8010700:	f85ddf44 	.word	0xf85ddf44
 8010704:	3e54ae0b 	.word	0x3e54ae0b
 8010708:	3fd00000 	.word	0x3fd00000
 801070c:	55555555 	.word	0x55555555
 8010710:	3fd55555 	.word	0x3fd55555
 8010714:	3fe00000 	.word	0x3fe00000
 8010718:	652b82fe 	.word	0x652b82fe
 801071c:	bff00000 	.word	0xbff00000
 8010720:	408fffff 	.word	0x408fffff
 8010724:	bf700000 	.word	0xbf700000
 8010728:	8800759c 	.word	0x8800759c
 801072c:	7e37e43c 	.word	0x7e37e43c
 8010730:	4bc0      	ldr	r3, [pc, #768]	; (8010a34 <__ieee754_pow+0x6ec>)
 8010732:	2200      	movs	r2, #0
 8010734:	4233      	tst	r3, r6
 8010736:	d10a      	bne.n	801074e <__ieee754_pow+0x406>
 8010738:	9800      	ldr	r0, [sp, #0]
 801073a:	9901      	ldr	r1, [sp, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	4bbe      	ldr	r3, [pc, #760]	; (8010a38 <__ieee754_pow+0x6f0>)
 8010740:	f7f1 fd1e 	bl	8002180 <__aeabi_dmul>
 8010744:	2235      	movs	r2, #53	; 0x35
 8010746:	9000      	str	r0, [sp, #0]
 8010748:	9101      	str	r1, [sp, #4]
 801074a:	9c01      	ldr	r4, [sp, #4]
 801074c:	4252      	negs	r2, r2
 801074e:	49bb      	ldr	r1, [pc, #748]	; (8010a3c <__ieee754_pow+0x6f4>)
 8010750:	1523      	asrs	r3, r4, #20
 8010752:	185b      	adds	r3, r3, r1
 8010754:	189b      	adds	r3, r3, r2
 8010756:	0324      	lsls	r4, r4, #12
 8010758:	4db9      	ldr	r5, [pc, #740]	; (8010a40 <__ieee754_pow+0x6f8>)
 801075a:	930d      	str	r3, [sp, #52]	; 0x34
 801075c:	4bb9      	ldr	r3, [pc, #740]	; (8010a44 <__ieee754_pow+0x6fc>)
 801075e:	0b22      	lsrs	r2, r4, #12
 8010760:	4315      	orrs	r5, r2
 8010762:	2400      	movs	r4, #0
 8010764:	429a      	cmp	r2, r3
 8010766:	dd09      	ble.n	801077c <__ieee754_pow+0x434>
 8010768:	4bb7      	ldr	r3, [pc, #732]	; (8010a48 <__ieee754_pow+0x700>)
 801076a:	3401      	adds	r4, #1
 801076c:	429a      	cmp	r2, r3
 801076e:	dd05      	ble.n	801077c <__ieee754_pow+0x434>
 8010770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010772:	191b      	adds	r3, r3, r4
 8010774:	2400      	movs	r4, #0
 8010776:	930d      	str	r3, [sp, #52]	; 0x34
 8010778:	4bb4      	ldr	r3, [pc, #720]	; (8010a4c <__ieee754_pow+0x704>)
 801077a:	18ed      	adds	r5, r5, r3
 801077c:	9800      	ldr	r0, [sp, #0]
 801077e:	9901      	ldr	r1, [sp, #4]
 8010780:	0029      	movs	r1, r5
 8010782:	00e3      	lsls	r3, r4, #3
 8010784:	9311      	str	r3, [sp, #68]	; 0x44
 8010786:	4bb2      	ldr	r3, [pc, #712]	; (8010a50 <__ieee754_pow+0x708>)
 8010788:	00e2      	lsls	r2, r4, #3
 801078a:	189b      	adds	r3, r3, r2
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	900e      	str	r0, [sp, #56]	; 0x38
 8010792:	910f      	str	r1, [sp, #60]	; 0x3c
 8010794:	920a      	str	r2, [sp, #40]	; 0x28
 8010796:	930b      	str	r3, [sp, #44]	; 0x2c
 8010798:	f7f1 ff5e 	bl	8002658 <__aeabi_dsub>
 801079c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801079e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107a0:	0006      	movs	r6, r0
 80107a2:	000f      	movs	r7, r1
 80107a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80107a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80107a8:	f7f0 fd7a 	bl	80012a0 <__aeabi_dadd>
 80107ac:	0002      	movs	r2, r0
 80107ae:	000b      	movs	r3, r1
 80107b0:	2000      	movs	r0, #0
 80107b2:	49a3      	ldr	r1, [pc, #652]	; (8010a40 <__ieee754_pow+0x6f8>)
 80107b4:	f7f1 f8de 	bl	8001974 <__aeabi_ddiv>
 80107b8:	0002      	movs	r2, r0
 80107ba:	000b      	movs	r3, r1
 80107bc:	9012      	str	r0, [sp, #72]	; 0x48
 80107be:	9113      	str	r1, [sp, #76]	; 0x4c
 80107c0:	0030      	movs	r0, r6
 80107c2:	0039      	movs	r1, r7
 80107c4:	f7f1 fcdc 	bl	8002180 <__aeabi_dmul>
 80107c8:	9008      	str	r0, [sp, #32]
 80107ca:	9109      	str	r1, [sp, #36]	; 0x24
 80107cc:	9a08      	ldr	r2, [sp, #32]
 80107ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107d0:	2180      	movs	r1, #128	; 0x80
 80107d2:	9204      	str	r2, [sp, #16]
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	2300      	movs	r3, #0
 80107d8:	0589      	lsls	r1, r1, #22
 80107da:	106d      	asrs	r5, r5, #1
 80107dc:	430d      	orrs	r5, r1
 80107de:	2180      	movs	r1, #128	; 0x80
 80107e0:	9304      	str	r3, [sp, #16]
 80107e2:	9a04      	ldr	r2, [sp, #16]
 80107e4:	9b05      	ldr	r3, [sp, #20]
 80107e6:	9200      	str	r2, [sp, #0]
 80107e8:	9301      	str	r3, [sp, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	0309      	lsls	r1, r1, #12
 80107ee:	186d      	adds	r5, r5, r1
 80107f0:	04a1      	lsls	r1, r4, #18
 80107f2:	186b      	adds	r3, r5, r1
 80107f4:	9800      	ldr	r0, [sp, #0]
 80107f6:	9901      	ldr	r1, [sp, #4]
 80107f8:	0014      	movs	r4, r2
 80107fa:	001d      	movs	r5, r3
 80107fc:	f7f1 fcc0 	bl	8002180 <__aeabi_dmul>
 8010800:	0002      	movs	r2, r0
 8010802:	000b      	movs	r3, r1
 8010804:	0030      	movs	r0, r6
 8010806:	0039      	movs	r1, r7
 8010808:	f7f1 ff26 	bl	8002658 <__aeabi_dsub>
 801080c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801080e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010810:	0006      	movs	r6, r0
 8010812:	000f      	movs	r7, r1
 8010814:	0020      	movs	r0, r4
 8010816:	0029      	movs	r1, r5
 8010818:	f7f1 ff1e 	bl	8002658 <__aeabi_dsub>
 801081c:	0002      	movs	r2, r0
 801081e:	000b      	movs	r3, r1
 8010820:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010822:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010824:	f7f1 ff18 	bl	8002658 <__aeabi_dsub>
 8010828:	9a00      	ldr	r2, [sp, #0]
 801082a:	9b01      	ldr	r3, [sp, #4]
 801082c:	f7f1 fca8 	bl	8002180 <__aeabi_dmul>
 8010830:	0002      	movs	r2, r0
 8010832:	000b      	movs	r3, r1
 8010834:	0030      	movs	r0, r6
 8010836:	0039      	movs	r1, r7
 8010838:	f7f1 ff0e 	bl	8002658 <__aeabi_dsub>
 801083c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801083e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010840:	f7f1 fc9e 	bl	8002180 <__aeabi_dmul>
 8010844:	9a08      	ldr	r2, [sp, #32]
 8010846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010848:	900a      	str	r0, [sp, #40]	; 0x28
 801084a:	910b      	str	r1, [sp, #44]	; 0x2c
 801084c:	0010      	movs	r0, r2
 801084e:	0019      	movs	r1, r3
 8010850:	f7f1 fc96 	bl	8002180 <__aeabi_dmul>
 8010854:	0006      	movs	r6, r0
 8010856:	000f      	movs	r7, r1
 8010858:	4a7e      	ldr	r2, [pc, #504]	; (8010a54 <__ieee754_pow+0x70c>)
 801085a:	4b7f      	ldr	r3, [pc, #508]	; (8010a58 <__ieee754_pow+0x710>)
 801085c:	f7f1 fc90 	bl	8002180 <__aeabi_dmul>
 8010860:	4a7e      	ldr	r2, [pc, #504]	; (8010a5c <__ieee754_pow+0x714>)
 8010862:	4b7f      	ldr	r3, [pc, #508]	; (8010a60 <__ieee754_pow+0x718>)
 8010864:	f7f0 fd1c 	bl	80012a0 <__aeabi_dadd>
 8010868:	0032      	movs	r2, r6
 801086a:	003b      	movs	r3, r7
 801086c:	f7f1 fc88 	bl	8002180 <__aeabi_dmul>
 8010870:	4a7c      	ldr	r2, [pc, #496]	; (8010a64 <__ieee754_pow+0x71c>)
 8010872:	4b7d      	ldr	r3, [pc, #500]	; (8010a68 <__ieee754_pow+0x720>)
 8010874:	f7f0 fd14 	bl	80012a0 <__aeabi_dadd>
 8010878:	0032      	movs	r2, r6
 801087a:	003b      	movs	r3, r7
 801087c:	f7f1 fc80 	bl	8002180 <__aeabi_dmul>
 8010880:	4a7a      	ldr	r2, [pc, #488]	; (8010a6c <__ieee754_pow+0x724>)
 8010882:	4b7b      	ldr	r3, [pc, #492]	; (8010a70 <__ieee754_pow+0x728>)
 8010884:	f7f0 fd0c 	bl	80012a0 <__aeabi_dadd>
 8010888:	0032      	movs	r2, r6
 801088a:	003b      	movs	r3, r7
 801088c:	f7f1 fc78 	bl	8002180 <__aeabi_dmul>
 8010890:	4a78      	ldr	r2, [pc, #480]	; (8010a74 <__ieee754_pow+0x72c>)
 8010892:	4b79      	ldr	r3, [pc, #484]	; (8010a78 <__ieee754_pow+0x730>)
 8010894:	f7f0 fd04 	bl	80012a0 <__aeabi_dadd>
 8010898:	0032      	movs	r2, r6
 801089a:	003b      	movs	r3, r7
 801089c:	f7f1 fc70 	bl	8002180 <__aeabi_dmul>
 80108a0:	4a76      	ldr	r2, [pc, #472]	; (8010a7c <__ieee754_pow+0x734>)
 80108a2:	4b77      	ldr	r3, [pc, #476]	; (8010a80 <__ieee754_pow+0x738>)
 80108a4:	f7f0 fcfc 	bl	80012a0 <__aeabi_dadd>
 80108a8:	0032      	movs	r2, r6
 80108aa:	0004      	movs	r4, r0
 80108ac:	000d      	movs	r5, r1
 80108ae:	003b      	movs	r3, r7
 80108b0:	0030      	movs	r0, r6
 80108b2:	0039      	movs	r1, r7
 80108b4:	f7f1 fc64 	bl	8002180 <__aeabi_dmul>
 80108b8:	0002      	movs	r2, r0
 80108ba:	000b      	movs	r3, r1
 80108bc:	0020      	movs	r0, r4
 80108be:	0029      	movs	r1, r5
 80108c0:	f7f1 fc5e 	bl	8002180 <__aeabi_dmul>
 80108c4:	9a00      	ldr	r2, [sp, #0]
 80108c6:	9b01      	ldr	r3, [sp, #4]
 80108c8:	0004      	movs	r4, r0
 80108ca:	000d      	movs	r5, r1
 80108cc:	9808      	ldr	r0, [sp, #32]
 80108ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108d0:	f7f0 fce6 	bl	80012a0 <__aeabi_dadd>
 80108d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108d8:	f7f1 fc52 	bl	8002180 <__aeabi_dmul>
 80108dc:	0022      	movs	r2, r4
 80108de:	002b      	movs	r3, r5
 80108e0:	f7f0 fcde 	bl	80012a0 <__aeabi_dadd>
 80108e4:	9a00      	ldr	r2, [sp, #0]
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	900e      	str	r0, [sp, #56]	; 0x38
 80108ea:	910f      	str	r1, [sp, #60]	; 0x3c
 80108ec:	0010      	movs	r0, r2
 80108ee:	0019      	movs	r1, r3
 80108f0:	f7f1 fc46 	bl	8002180 <__aeabi_dmul>
 80108f4:	2200      	movs	r2, #0
 80108f6:	4b63      	ldr	r3, [pc, #396]	; (8010a84 <__ieee754_pow+0x73c>)
 80108f8:	0004      	movs	r4, r0
 80108fa:	000d      	movs	r5, r1
 80108fc:	f7f0 fcd0 	bl	80012a0 <__aeabi_dadd>
 8010900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010904:	f7f0 fccc 	bl	80012a0 <__aeabi_dadd>
 8010908:	9e04      	ldr	r6, [sp, #16]
 801090a:	000f      	movs	r7, r1
 801090c:	0032      	movs	r2, r6
 801090e:	000b      	movs	r3, r1
 8010910:	9800      	ldr	r0, [sp, #0]
 8010912:	9901      	ldr	r1, [sp, #4]
 8010914:	f7f1 fc34 	bl	8002180 <__aeabi_dmul>
 8010918:	2200      	movs	r2, #0
 801091a:	9000      	str	r0, [sp, #0]
 801091c:	9101      	str	r1, [sp, #4]
 801091e:	4b59      	ldr	r3, [pc, #356]	; (8010a84 <__ieee754_pow+0x73c>)
 8010920:	0030      	movs	r0, r6
 8010922:	0039      	movs	r1, r7
 8010924:	f7f1 fe98 	bl	8002658 <__aeabi_dsub>
 8010928:	0022      	movs	r2, r4
 801092a:	002b      	movs	r3, r5
 801092c:	f7f1 fe94 	bl	8002658 <__aeabi_dsub>
 8010930:	0002      	movs	r2, r0
 8010932:	000b      	movs	r3, r1
 8010934:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010936:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010938:	f7f1 fe8e 	bl	8002658 <__aeabi_dsub>
 801093c:	9a08      	ldr	r2, [sp, #32]
 801093e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010940:	f7f1 fc1e 	bl	8002180 <__aeabi_dmul>
 8010944:	0032      	movs	r2, r6
 8010946:	0004      	movs	r4, r0
 8010948:	000d      	movs	r5, r1
 801094a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801094c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801094e:	003b      	movs	r3, r7
 8010950:	f7f1 fc16 	bl	8002180 <__aeabi_dmul>
 8010954:	0002      	movs	r2, r0
 8010956:	000b      	movs	r3, r1
 8010958:	0020      	movs	r0, r4
 801095a:	0029      	movs	r1, r5
 801095c:	f7f0 fca0 	bl	80012a0 <__aeabi_dadd>
 8010960:	0004      	movs	r4, r0
 8010962:	000d      	movs	r5, r1
 8010964:	0002      	movs	r2, r0
 8010966:	000b      	movs	r3, r1
 8010968:	9800      	ldr	r0, [sp, #0]
 801096a:	9901      	ldr	r1, [sp, #4]
 801096c:	f7f0 fc98 	bl	80012a0 <__aeabi_dadd>
 8010970:	22e0      	movs	r2, #224	; 0xe0
 8010972:	9e04      	ldr	r6, [sp, #16]
 8010974:	4b44      	ldr	r3, [pc, #272]	; (8010a88 <__ieee754_pow+0x740>)
 8010976:	0030      	movs	r0, r6
 8010978:	0612      	lsls	r2, r2, #24
 801097a:	000f      	movs	r7, r1
 801097c:	f7f1 fc00 	bl	8002180 <__aeabi_dmul>
 8010980:	9008      	str	r0, [sp, #32]
 8010982:	9109      	str	r1, [sp, #36]	; 0x24
 8010984:	9a00      	ldr	r2, [sp, #0]
 8010986:	9b01      	ldr	r3, [sp, #4]
 8010988:	0030      	movs	r0, r6
 801098a:	0039      	movs	r1, r7
 801098c:	f7f1 fe64 	bl	8002658 <__aeabi_dsub>
 8010990:	0002      	movs	r2, r0
 8010992:	000b      	movs	r3, r1
 8010994:	0020      	movs	r0, r4
 8010996:	0029      	movs	r1, r5
 8010998:	f7f1 fe5e 	bl	8002658 <__aeabi_dsub>
 801099c:	4a3b      	ldr	r2, [pc, #236]	; (8010a8c <__ieee754_pow+0x744>)
 801099e:	4b3a      	ldr	r3, [pc, #232]	; (8010a88 <__ieee754_pow+0x740>)
 80109a0:	f7f1 fbee 	bl	8002180 <__aeabi_dmul>
 80109a4:	4a3a      	ldr	r2, [pc, #232]	; (8010a90 <__ieee754_pow+0x748>)
 80109a6:	0004      	movs	r4, r0
 80109a8:	000d      	movs	r5, r1
 80109aa:	0030      	movs	r0, r6
 80109ac:	0039      	movs	r1, r7
 80109ae:	4b39      	ldr	r3, [pc, #228]	; (8010a94 <__ieee754_pow+0x74c>)
 80109b0:	f7f1 fbe6 	bl	8002180 <__aeabi_dmul>
 80109b4:	0002      	movs	r2, r0
 80109b6:	000b      	movs	r3, r1
 80109b8:	0020      	movs	r0, r4
 80109ba:	0029      	movs	r1, r5
 80109bc:	f7f0 fc70 	bl	80012a0 <__aeabi_dadd>
 80109c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109c2:	4b35      	ldr	r3, [pc, #212]	; (8010a98 <__ieee754_pow+0x750>)
 80109c4:	189b      	adds	r3, r3, r2
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	f7f0 fc69 	bl	80012a0 <__aeabi_dadd>
 80109ce:	900a      	str	r0, [sp, #40]	; 0x28
 80109d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80109d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80109d4:	f7f2 fa26 	bl	8002e24 <__aeabi_i2d>
 80109d8:	0004      	movs	r4, r0
 80109da:	000d      	movs	r5, r1
 80109dc:	9808      	ldr	r0, [sp, #32]
 80109de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <__ieee754_pow+0x754>)
 80109e4:	189b      	adds	r3, r3, r2
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	9200      	str	r2, [sp, #0]
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f2:	f7f0 fc55 	bl	80012a0 <__aeabi_dadd>
 80109f6:	9a00      	ldr	r2, [sp, #0]
 80109f8:	9b01      	ldr	r3, [sp, #4]
 80109fa:	f7f0 fc51 	bl	80012a0 <__aeabi_dadd>
 80109fe:	0022      	movs	r2, r4
 8010a00:	002b      	movs	r3, r5
 8010a02:	f7f0 fc4d 	bl	80012a0 <__aeabi_dadd>
 8010a06:	9804      	ldr	r0, [sp, #16]
 8010a08:	0022      	movs	r2, r4
 8010a0a:	002b      	movs	r3, r5
 8010a0c:	0006      	movs	r6, r0
 8010a0e:	000f      	movs	r7, r1
 8010a10:	f7f1 fe22 	bl	8002658 <__aeabi_dsub>
 8010a14:	9a00      	ldr	r2, [sp, #0]
 8010a16:	9b01      	ldr	r3, [sp, #4]
 8010a18:	f7f1 fe1e 	bl	8002658 <__aeabi_dsub>
 8010a1c:	9a08      	ldr	r2, [sp, #32]
 8010a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a20:	f7f1 fe1a 	bl	8002658 <__aeabi_dsub>
 8010a24:	0002      	movs	r2, r0
 8010a26:	000b      	movs	r3, r1
 8010a28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a2c:	e614      	b.n	8010658 <__ieee754_pow+0x310>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	4c03      	ldr	r4, [pc, #12]	; (8010a40 <__ieee754_pow+0x6f8>)
 8010a32:	e61d      	b.n	8010670 <__ieee754_pow+0x328>
 8010a34:	7ff00000 	.word	0x7ff00000
 8010a38:	43400000 	.word	0x43400000
 8010a3c:	fffffc01 	.word	0xfffffc01
 8010a40:	3ff00000 	.word	0x3ff00000
 8010a44:	0003988e 	.word	0x0003988e
 8010a48:	000bb679 	.word	0x000bb679
 8010a4c:	fff00000 	.word	0xfff00000
 8010a50:	080128c0 	.word	0x080128c0
 8010a54:	4a454eef 	.word	0x4a454eef
 8010a58:	3fca7e28 	.word	0x3fca7e28
 8010a5c:	93c9db65 	.word	0x93c9db65
 8010a60:	3fcd864a 	.word	0x3fcd864a
 8010a64:	a91d4101 	.word	0xa91d4101
 8010a68:	3fd17460 	.word	0x3fd17460
 8010a6c:	518f264d 	.word	0x518f264d
 8010a70:	3fd55555 	.word	0x3fd55555
 8010a74:	db6fabff 	.word	0xdb6fabff
 8010a78:	3fdb6db6 	.word	0x3fdb6db6
 8010a7c:	33333303 	.word	0x33333303
 8010a80:	3fe33333 	.word	0x3fe33333
 8010a84:	40080000 	.word	0x40080000
 8010a88:	3feec709 	.word	0x3feec709
 8010a8c:	dc3a03fd 	.word	0xdc3a03fd
 8010a90:	145b01f5 	.word	0x145b01f5
 8010a94:	be3e2fe0 	.word	0xbe3e2fe0
 8010a98:	080128e0 	.word	0x080128e0
 8010a9c:	080128d0 	.word	0x080128d0
 8010aa0:	4a8f      	ldr	r2, [pc, #572]	; (8010ce0 <__ieee754_pow+0x998>)
 8010aa2:	4b90      	ldr	r3, [pc, #576]	; (8010ce4 <__ieee754_pow+0x99c>)
 8010aa4:	9804      	ldr	r0, [sp, #16]
 8010aa6:	9905      	ldr	r1, [sp, #20]
 8010aa8:	f7f0 fbfa 	bl	80012a0 <__aeabi_dadd>
 8010aac:	0032      	movs	r2, r6
 8010aae:	9002      	str	r0, [sp, #8]
 8010ab0:	9103      	str	r1, [sp, #12]
 8010ab2:	003b      	movs	r3, r7
 8010ab4:	0028      	movs	r0, r5
 8010ab6:	0021      	movs	r1, r4
 8010ab8:	f7f1 fdce 	bl	8002658 <__aeabi_dsub>
 8010abc:	0002      	movs	r2, r0
 8010abe:	000b      	movs	r3, r1
 8010ac0:	9802      	ldr	r0, [sp, #8]
 8010ac2:	9903      	ldr	r1, [sp, #12]
 8010ac4:	f7ef fcd8 	bl	8000478 <__aeabi_dcmpgt>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d000      	beq.n	8010ace <__ieee754_pow+0x786>
 8010acc:	e60b      	b.n	80106e6 <__ieee754_pow+0x39e>
 8010ace:	2100      	movs	r1, #0
 8010ad0:	4a85      	ldr	r2, [pc, #532]	; (8010ce8 <__ieee754_pow+0x9a0>)
 8010ad2:	0063      	lsls	r3, r4, #1
 8010ad4:	085b      	lsrs	r3, r3, #1
 8010ad6:	9102      	str	r1, [sp, #8]
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	dd25      	ble.n	8010b28 <__ieee754_pow+0x7e0>
 8010adc:	4a83      	ldr	r2, [pc, #524]	; (8010cec <__ieee754_pow+0x9a4>)
 8010ade:	151b      	asrs	r3, r3, #20
 8010ae0:	189b      	adds	r3, r3, r2
 8010ae2:	2280      	movs	r2, #128	; 0x80
 8010ae4:	0352      	lsls	r2, r2, #13
 8010ae6:	4694      	mov	ip, r2
 8010ae8:	411a      	asrs	r2, r3
 8010aea:	1914      	adds	r4, r2, r4
 8010aec:	4b80      	ldr	r3, [pc, #512]	; (8010cf0 <__ieee754_pow+0x9a8>)
 8010aee:	0060      	lsls	r0, r4, #1
 8010af0:	4d80      	ldr	r5, [pc, #512]	; (8010cf4 <__ieee754_pow+0x9ac>)
 8010af2:	0d40      	lsrs	r0, r0, #21
 8010af4:	18c0      	adds	r0, r0, r3
 8010af6:	4105      	asrs	r5, r0
 8010af8:	0021      	movs	r1, r4
 8010afa:	43a9      	bics	r1, r5
 8010afc:	000b      	movs	r3, r1
 8010afe:	4661      	mov	r1, ip
 8010b00:	0324      	lsls	r4, r4, #12
 8010b02:	0b24      	lsrs	r4, r4, #12
 8010b04:	4321      	orrs	r1, r4
 8010b06:	2414      	movs	r4, #20
 8010b08:	1a20      	subs	r0, r4, r0
 8010b0a:	4101      	asrs	r1, r0
 8010b0c:	9102      	str	r1, [sp, #8]
 8010b0e:	9908      	ldr	r1, [sp, #32]
 8010b10:	2200      	movs	r2, #0
 8010b12:	2900      	cmp	r1, #0
 8010b14:	da02      	bge.n	8010b1c <__ieee754_pow+0x7d4>
 8010b16:	9902      	ldr	r1, [sp, #8]
 8010b18:	4249      	negs	r1, r1
 8010b1a:	9102      	str	r1, [sp, #8]
 8010b1c:	0030      	movs	r0, r6
 8010b1e:	0039      	movs	r1, r7
 8010b20:	f7f1 fd9a 	bl	8002658 <__aeabi_dsub>
 8010b24:	9006      	str	r0, [sp, #24]
 8010b26:	9107      	str	r1, [sp, #28]
 8010b28:	9a04      	ldr	r2, [sp, #16]
 8010b2a:	9b05      	ldr	r3, [sp, #20]
 8010b2c:	9806      	ldr	r0, [sp, #24]
 8010b2e:	9907      	ldr	r1, [sp, #28]
 8010b30:	2600      	movs	r6, #0
 8010b32:	f7f0 fbb5 	bl	80012a0 <__aeabi_dadd>
 8010b36:	2200      	movs	r2, #0
 8010b38:	0030      	movs	r0, r6
 8010b3a:	4b6f      	ldr	r3, [pc, #444]	; (8010cf8 <__ieee754_pow+0x9b0>)
 8010b3c:	000f      	movs	r7, r1
 8010b3e:	f7f1 fb1f 	bl	8002180 <__aeabi_dmul>
 8010b42:	9a06      	ldr	r2, [sp, #24]
 8010b44:	9b07      	ldr	r3, [sp, #28]
 8010b46:	9008      	str	r0, [sp, #32]
 8010b48:	9109      	str	r1, [sp, #36]	; 0x24
 8010b4a:	0030      	movs	r0, r6
 8010b4c:	0039      	movs	r1, r7
 8010b4e:	f7f1 fd83 	bl	8002658 <__aeabi_dsub>
 8010b52:	0002      	movs	r2, r0
 8010b54:	000b      	movs	r3, r1
 8010b56:	9804      	ldr	r0, [sp, #16]
 8010b58:	9905      	ldr	r1, [sp, #20]
 8010b5a:	f7f1 fd7d 	bl	8002658 <__aeabi_dsub>
 8010b5e:	4a67      	ldr	r2, [pc, #412]	; (8010cfc <__ieee754_pow+0x9b4>)
 8010b60:	4b67      	ldr	r3, [pc, #412]	; (8010d00 <__ieee754_pow+0x9b8>)
 8010b62:	f7f1 fb0d 	bl	8002180 <__aeabi_dmul>
 8010b66:	4a67      	ldr	r2, [pc, #412]	; (8010d04 <__ieee754_pow+0x9bc>)
 8010b68:	0004      	movs	r4, r0
 8010b6a:	000d      	movs	r5, r1
 8010b6c:	0030      	movs	r0, r6
 8010b6e:	0039      	movs	r1, r7
 8010b70:	4b65      	ldr	r3, [pc, #404]	; (8010d08 <__ieee754_pow+0x9c0>)
 8010b72:	f7f1 fb05 	bl	8002180 <__aeabi_dmul>
 8010b76:	0002      	movs	r2, r0
 8010b78:	000b      	movs	r3, r1
 8010b7a:	0020      	movs	r0, r4
 8010b7c:	0029      	movs	r1, r5
 8010b7e:	f7f0 fb8f 	bl	80012a0 <__aeabi_dadd>
 8010b82:	0004      	movs	r4, r0
 8010b84:	000d      	movs	r5, r1
 8010b86:	0002      	movs	r2, r0
 8010b88:	000b      	movs	r3, r1
 8010b8a:	9808      	ldr	r0, [sp, #32]
 8010b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b8e:	f7f0 fb87 	bl	80012a0 <__aeabi_dadd>
 8010b92:	9a08      	ldr	r2, [sp, #32]
 8010b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b96:	0006      	movs	r6, r0
 8010b98:	000f      	movs	r7, r1
 8010b9a:	f7f1 fd5d 	bl	8002658 <__aeabi_dsub>
 8010b9e:	0002      	movs	r2, r0
 8010ba0:	000b      	movs	r3, r1
 8010ba2:	0020      	movs	r0, r4
 8010ba4:	0029      	movs	r1, r5
 8010ba6:	f7f1 fd57 	bl	8002658 <__aeabi_dsub>
 8010baa:	0032      	movs	r2, r6
 8010bac:	9004      	str	r0, [sp, #16]
 8010bae:	9105      	str	r1, [sp, #20]
 8010bb0:	003b      	movs	r3, r7
 8010bb2:	0030      	movs	r0, r6
 8010bb4:	0039      	movs	r1, r7
 8010bb6:	f7f1 fae3 	bl	8002180 <__aeabi_dmul>
 8010bba:	0004      	movs	r4, r0
 8010bbc:	000d      	movs	r5, r1
 8010bbe:	4a53      	ldr	r2, [pc, #332]	; (8010d0c <__ieee754_pow+0x9c4>)
 8010bc0:	4b53      	ldr	r3, [pc, #332]	; (8010d10 <__ieee754_pow+0x9c8>)
 8010bc2:	f7f1 fadd 	bl	8002180 <__aeabi_dmul>
 8010bc6:	4a53      	ldr	r2, [pc, #332]	; (8010d14 <__ieee754_pow+0x9cc>)
 8010bc8:	4b53      	ldr	r3, [pc, #332]	; (8010d18 <__ieee754_pow+0x9d0>)
 8010bca:	f7f1 fd45 	bl	8002658 <__aeabi_dsub>
 8010bce:	0022      	movs	r2, r4
 8010bd0:	002b      	movs	r3, r5
 8010bd2:	f7f1 fad5 	bl	8002180 <__aeabi_dmul>
 8010bd6:	4a51      	ldr	r2, [pc, #324]	; (8010d1c <__ieee754_pow+0x9d4>)
 8010bd8:	4b51      	ldr	r3, [pc, #324]	; (8010d20 <__ieee754_pow+0x9d8>)
 8010bda:	f7f0 fb61 	bl	80012a0 <__aeabi_dadd>
 8010bde:	0022      	movs	r2, r4
 8010be0:	002b      	movs	r3, r5
 8010be2:	f7f1 facd 	bl	8002180 <__aeabi_dmul>
 8010be6:	4a4f      	ldr	r2, [pc, #316]	; (8010d24 <__ieee754_pow+0x9dc>)
 8010be8:	4b4f      	ldr	r3, [pc, #316]	; (8010d28 <__ieee754_pow+0x9e0>)
 8010bea:	f7f1 fd35 	bl	8002658 <__aeabi_dsub>
 8010bee:	0022      	movs	r2, r4
 8010bf0:	002b      	movs	r3, r5
 8010bf2:	f7f1 fac5 	bl	8002180 <__aeabi_dmul>
 8010bf6:	4a4d      	ldr	r2, [pc, #308]	; (8010d2c <__ieee754_pow+0x9e4>)
 8010bf8:	4b4d      	ldr	r3, [pc, #308]	; (8010d30 <__ieee754_pow+0x9e8>)
 8010bfa:	f7f0 fb51 	bl	80012a0 <__aeabi_dadd>
 8010bfe:	0022      	movs	r2, r4
 8010c00:	002b      	movs	r3, r5
 8010c02:	f7f1 fabd 	bl	8002180 <__aeabi_dmul>
 8010c06:	0002      	movs	r2, r0
 8010c08:	000b      	movs	r3, r1
 8010c0a:	0030      	movs	r0, r6
 8010c0c:	0039      	movs	r1, r7
 8010c0e:	f7f1 fd23 	bl	8002658 <__aeabi_dsub>
 8010c12:	0004      	movs	r4, r0
 8010c14:	000d      	movs	r5, r1
 8010c16:	0002      	movs	r2, r0
 8010c18:	000b      	movs	r3, r1
 8010c1a:	0030      	movs	r0, r6
 8010c1c:	0039      	movs	r1, r7
 8010c1e:	f7f1 faaf 	bl	8002180 <__aeabi_dmul>
 8010c22:	2380      	movs	r3, #128	; 0x80
 8010c24:	9006      	str	r0, [sp, #24]
 8010c26:	9107      	str	r1, [sp, #28]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	0020      	movs	r0, r4
 8010c2c:	0029      	movs	r1, r5
 8010c2e:	05db      	lsls	r3, r3, #23
 8010c30:	f7f1 fd12 	bl	8002658 <__aeabi_dsub>
 8010c34:	0002      	movs	r2, r0
 8010c36:	000b      	movs	r3, r1
 8010c38:	9806      	ldr	r0, [sp, #24]
 8010c3a:	9907      	ldr	r1, [sp, #28]
 8010c3c:	f7f0 fe9a 	bl	8001974 <__aeabi_ddiv>
 8010c40:	9a04      	ldr	r2, [sp, #16]
 8010c42:	9b05      	ldr	r3, [sp, #20]
 8010c44:	0004      	movs	r4, r0
 8010c46:	000d      	movs	r5, r1
 8010c48:	0030      	movs	r0, r6
 8010c4a:	0039      	movs	r1, r7
 8010c4c:	f7f1 fa98 	bl	8002180 <__aeabi_dmul>
 8010c50:	9a04      	ldr	r2, [sp, #16]
 8010c52:	9b05      	ldr	r3, [sp, #20]
 8010c54:	f7f0 fb24 	bl	80012a0 <__aeabi_dadd>
 8010c58:	0002      	movs	r2, r0
 8010c5a:	000b      	movs	r3, r1
 8010c5c:	0020      	movs	r0, r4
 8010c5e:	0029      	movs	r1, r5
 8010c60:	f7f1 fcfa 	bl	8002658 <__aeabi_dsub>
 8010c64:	0032      	movs	r2, r6
 8010c66:	003b      	movs	r3, r7
 8010c68:	f7f1 fcf6 	bl	8002658 <__aeabi_dsub>
 8010c6c:	0002      	movs	r2, r0
 8010c6e:	000b      	movs	r3, r1
 8010c70:	2000      	movs	r0, #0
 8010c72:	4930      	ldr	r1, [pc, #192]	; (8010d34 <__ieee754_pow+0x9ec>)
 8010c74:	f7f1 fcf0 	bl	8002658 <__aeabi_dsub>
 8010c78:	9b02      	ldr	r3, [sp, #8]
 8010c7a:	051b      	lsls	r3, r3, #20
 8010c7c:	185b      	adds	r3, r3, r1
 8010c7e:	151a      	asrs	r2, r3, #20
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	dc26      	bgt.n	8010cd2 <__ieee754_pow+0x98a>
 8010c84:	9a02      	ldr	r2, [sp, #8]
 8010c86:	f001 f901 	bl	8011e8c <scalbn>
 8010c8a:	9a00      	ldr	r2, [sp, #0]
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	f7ff fc2d 	bl	80104ec <__ieee754_pow+0x1a4>
 8010c92:	4a29      	ldr	r2, [pc, #164]	; (8010d38 <__ieee754_pow+0x9f0>)
 8010c94:	004b      	lsls	r3, r1, #1
 8010c96:	085b      	lsrs	r3, r3, #1
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	dc00      	bgt.n	8010c9e <__ieee754_pow+0x956>
 8010c9c:	e717      	b.n	8010ace <__ieee754_pow+0x786>
 8010c9e:	4b27      	ldr	r3, [pc, #156]	; (8010d3c <__ieee754_pow+0x9f4>)
 8010ca0:	18cb      	adds	r3, r1, r3
 8010ca2:	4303      	orrs	r3, r0
 8010ca4:	d009      	beq.n	8010cba <__ieee754_pow+0x972>
 8010ca6:	9800      	ldr	r0, [sp, #0]
 8010ca8:	9901      	ldr	r1, [sp, #4]
 8010caa:	4a25      	ldr	r2, [pc, #148]	; (8010d40 <__ieee754_pow+0x9f8>)
 8010cac:	4b25      	ldr	r3, [pc, #148]	; (8010d44 <__ieee754_pow+0x9fc>)
 8010cae:	f7f1 fa67 	bl	8002180 <__aeabi_dmul>
 8010cb2:	4a23      	ldr	r2, [pc, #140]	; (8010d40 <__ieee754_pow+0x9f8>)
 8010cb4:	4b23      	ldr	r3, [pc, #140]	; (8010d44 <__ieee754_pow+0x9fc>)
 8010cb6:	f7ff fc19 	bl	80104ec <__ieee754_pow+0x1a4>
 8010cba:	0032      	movs	r2, r6
 8010cbc:	003b      	movs	r3, r7
 8010cbe:	f7f1 fccb 	bl	8002658 <__aeabi_dsub>
 8010cc2:	9a04      	ldr	r2, [sp, #16]
 8010cc4:	9b05      	ldr	r3, [sp, #20]
 8010cc6:	f7ef fbe1 	bl	800048c <__aeabi_dcmpge>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	d100      	bne.n	8010cd0 <__ieee754_pow+0x988>
 8010cce:	e6fe      	b.n	8010ace <__ieee754_pow+0x786>
 8010cd0:	e7e9      	b.n	8010ca6 <__ieee754_pow+0x95e>
 8010cd2:	0019      	movs	r1, r3
 8010cd4:	e7d9      	b.n	8010c8a <__ieee754_pow+0x942>
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	4c16      	ldr	r4, [pc, #88]	; (8010d34 <__ieee754_pow+0x9ec>)
 8010cda:	f7ff fbec 	bl	80104b6 <__ieee754_pow+0x16e>
 8010cde:	46c0      	nop			; (mov r8, r8)
 8010ce0:	652b82fe 	.word	0x652b82fe
 8010ce4:	3c971547 	.word	0x3c971547
 8010ce8:	3fe00000 	.word	0x3fe00000
 8010cec:	fffffc02 	.word	0xfffffc02
 8010cf0:	fffffc01 	.word	0xfffffc01
 8010cf4:	000fffff 	.word	0x000fffff
 8010cf8:	3fe62e43 	.word	0x3fe62e43
 8010cfc:	fefa39ef 	.word	0xfefa39ef
 8010d00:	3fe62e42 	.word	0x3fe62e42
 8010d04:	0ca86c39 	.word	0x0ca86c39
 8010d08:	be205c61 	.word	0xbe205c61
 8010d0c:	72bea4d0 	.word	0x72bea4d0
 8010d10:	3e663769 	.word	0x3e663769
 8010d14:	c5d26bf1 	.word	0xc5d26bf1
 8010d18:	3ebbbd41 	.word	0x3ebbbd41
 8010d1c:	af25de2c 	.word	0xaf25de2c
 8010d20:	3f11566a 	.word	0x3f11566a
 8010d24:	16bebd93 	.word	0x16bebd93
 8010d28:	3f66c16c 	.word	0x3f66c16c
 8010d2c:	5555553e 	.word	0x5555553e
 8010d30:	3fc55555 	.word	0x3fc55555
 8010d34:	3ff00000 	.word	0x3ff00000
 8010d38:	4090cbff 	.word	0x4090cbff
 8010d3c:	3f6f3400 	.word	0x3f6f3400
 8010d40:	c2f8f359 	.word	0xc2f8f359
 8010d44:	01a56e1f 	.word	0x01a56e1f

08010d48 <__ieee754_rem_pio2>:
 8010d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d4a:	004b      	lsls	r3, r1, #1
 8010d4c:	b091      	sub	sp, #68	; 0x44
 8010d4e:	085b      	lsrs	r3, r3, #1
 8010d50:	9302      	str	r3, [sp, #8]
 8010d52:	0017      	movs	r7, r2
 8010d54:	4bb6      	ldr	r3, [pc, #728]	; (8011030 <__ieee754_rem_pio2+0x2e8>)
 8010d56:	9a02      	ldr	r2, [sp, #8]
 8010d58:	0004      	movs	r4, r0
 8010d5a:	000d      	movs	r5, r1
 8010d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	dc09      	bgt.n	8010d76 <__ieee754_rem_pio2+0x2e>
 8010d62:	0002      	movs	r2, r0
 8010d64:	000b      	movs	r3, r1
 8010d66:	603a      	str	r2, [r7, #0]
 8010d68:	607b      	str	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	60ba      	str	r2, [r7, #8]
 8010d70:	60fb      	str	r3, [r7, #12]
 8010d72:	2600      	movs	r6, #0
 8010d74:	e025      	b.n	8010dc2 <__ieee754_rem_pio2+0x7a>
 8010d76:	4baf      	ldr	r3, [pc, #700]	; (8011034 <__ieee754_rem_pio2+0x2ec>)
 8010d78:	9a02      	ldr	r2, [sp, #8]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	dd00      	ble.n	8010d80 <__ieee754_rem_pio2+0x38>
 8010d7e:	e06e      	b.n	8010e5e <__ieee754_rem_pio2+0x116>
 8010d80:	4ead      	ldr	r6, [pc, #692]	; (8011038 <__ieee754_rem_pio2+0x2f0>)
 8010d82:	4aae      	ldr	r2, [pc, #696]	; (801103c <__ieee754_rem_pio2+0x2f4>)
 8010d84:	2d00      	cmp	r5, #0
 8010d86:	dd35      	ble.n	8010df4 <__ieee754_rem_pio2+0xac>
 8010d88:	0020      	movs	r0, r4
 8010d8a:	0029      	movs	r1, r5
 8010d8c:	4baa      	ldr	r3, [pc, #680]	; (8011038 <__ieee754_rem_pio2+0x2f0>)
 8010d8e:	f7f1 fc63 	bl	8002658 <__aeabi_dsub>
 8010d92:	9b02      	ldr	r3, [sp, #8]
 8010d94:	0004      	movs	r4, r0
 8010d96:	000d      	movs	r5, r1
 8010d98:	42b3      	cmp	r3, r6
 8010d9a:	d015      	beq.n	8010dc8 <__ieee754_rem_pio2+0x80>
 8010d9c:	4aa8      	ldr	r2, [pc, #672]	; (8011040 <__ieee754_rem_pio2+0x2f8>)
 8010d9e:	4ba9      	ldr	r3, [pc, #676]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010da0:	f7f1 fc5a 	bl	8002658 <__aeabi_dsub>
 8010da4:	0002      	movs	r2, r0
 8010da6:	000b      	movs	r3, r1
 8010da8:	0020      	movs	r0, r4
 8010daa:	603a      	str	r2, [r7, #0]
 8010dac:	607b      	str	r3, [r7, #4]
 8010dae:	0029      	movs	r1, r5
 8010db0:	f7f1 fc52 	bl	8002658 <__aeabi_dsub>
 8010db4:	4aa2      	ldr	r2, [pc, #648]	; (8011040 <__ieee754_rem_pio2+0x2f8>)
 8010db6:	4ba3      	ldr	r3, [pc, #652]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010db8:	f7f1 fc4e 	bl	8002658 <__aeabi_dsub>
 8010dbc:	2601      	movs	r6, #1
 8010dbe:	60b8      	str	r0, [r7, #8]
 8010dc0:	60f9      	str	r1, [r7, #12]
 8010dc2:	0030      	movs	r0, r6
 8010dc4:	b011      	add	sp, #68	; 0x44
 8010dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dc8:	22d3      	movs	r2, #211	; 0xd3
 8010dca:	4b9e      	ldr	r3, [pc, #632]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010dcc:	0552      	lsls	r2, r2, #21
 8010dce:	f7f1 fc43 	bl	8002658 <__aeabi_dsub>
 8010dd2:	4a9d      	ldr	r2, [pc, #628]	; (8011048 <__ieee754_rem_pio2+0x300>)
 8010dd4:	4b9d      	ldr	r3, [pc, #628]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010dd6:	0004      	movs	r4, r0
 8010dd8:	000d      	movs	r5, r1
 8010dda:	f7f1 fc3d 	bl	8002658 <__aeabi_dsub>
 8010dde:	0002      	movs	r2, r0
 8010de0:	000b      	movs	r3, r1
 8010de2:	0020      	movs	r0, r4
 8010de4:	603a      	str	r2, [r7, #0]
 8010de6:	607b      	str	r3, [r7, #4]
 8010de8:	0029      	movs	r1, r5
 8010dea:	f7f1 fc35 	bl	8002658 <__aeabi_dsub>
 8010dee:	4a96      	ldr	r2, [pc, #600]	; (8011048 <__ieee754_rem_pio2+0x300>)
 8010df0:	4b96      	ldr	r3, [pc, #600]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010df2:	e7e1      	b.n	8010db8 <__ieee754_rem_pio2+0x70>
 8010df4:	0020      	movs	r0, r4
 8010df6:	0029      	movs	r1, r5
 8010df8:	4b8f      	ldr	r3, [pc, #572]	; (8011038 <__ieee754_rem_pio2+0x2f0>)
 8010dfa:	f7f0 fa51 	bl	80012a0 <__aeabi_dadd>
 8010dfe:	9b02      	ldr	r3, [sp, #8]
 8010e00:	0004      	movs	r4, r0
 8010e02:	000d      	movs	r5, r1
 8010e04:	42b3      	cmp	r3, r6
 8010e06:	d014      	beq.n	8010e32 <__ieee754_rem_pio2+0xea>
 8010e08:	4a8d      	ldr	r2, [pc, #564]	; (8011040 <__ieee754_rem_pio2+0x2f8>)
 8010e0a:	4b8e      	ldr	r3, [pc, #568]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010e0c:	f7f0 fa48 	bl	80012a0 <__aeabi_dadd>
 8010e10:	0002      	movs	r2, r0
 8010e12:	000b      	movs	r3, r1
 8010e14:	0020      	movs	r0, r4
 8010e16:	603a      	str	r2, [r7, #0]
 8010e18:	607b      	str	r3, [r7, #4]
 8010e1a:	0029      	movs	r1, r5
 8010e1c:	f7f1 fc1c 	bl	8002658 <__aeabi_dsub>
 8010e20:	4a87      	ldr	r2, [pc, #540]	; (8011040 <__ieee754_rem_pio2+0x2f8>)
 8010e22:	4b88      	ldr	r3, [pc, #544]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010e24:	f7f0 fa3c 	bl	80012a0 <__aeabi_dadd>
 8010e28:	2601      	movs	r6, #1
 8010e2a:	60b8      	str	r0, [r7, #8]
 8010e2c:	60f9      	str	r1, [r7, #12]
 8010e2e:	4276      	negs	r6, r6
 8010e30:	e7c7      	b.n	8010dc2 <__ieee754_rem_pio2+0x7a>
 8010e32:	22d3      	movs	r2, #211	; 0xd3
 8010e34:	4b83      	ldr	r3, [pc, #524]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010e36:	0552      	lsls	r2, r2, #21
 8010e38:	f7f0 fa32 	bl	80012a0 <__aeabi_dadd>
 8010e3c:	4a82      	ldr	r2, [pc, #520]	; (8011048 <__ieee754_rem_pio2+0x300>)
 8010e3e:	4b83      	ldr	r3, [pc, #524]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010e40:	0004      	movs	r4, r0
 8010e42:	000d      	movs	r5, r1
 8010e44:	f7f0 fa2c 	bl	80012a0 <__aeabi_dadd>
 8010e48:	0002      	movs	r2, r0
 8010e4a:	000b      	movs	r3, r1
 8010e4c:	0020      	movs	r0, r4
 8010e4e:	603a      	str	r2, [r7, #0]
 8010e50:	607b      	str	r3, [r7, #4]
 8010e52:	0029      	movs	r1, r5
 8010e54:	f7f1 fc00 	bl	8002658 <__aeabi_dsub>
 8010e58:	4a7b      	ldr	r2, [pc, #492]	; (8011048 <__ieee754_rem_pio2+0x300>)
 8010e5a:	4b7c      	ldr	r3, [pc, #496]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010e5c:	e7e2      	b.n	8010e24 <__ieee754_rem_pio2+0xdc>
 8010e5e:	4b7c      	ldr	r3, [pc, #496]	; (8011050 <__ieee754_rem_pio2+0x308>)
 8010e60:	9a02      	ldr	r2, [sp, #8]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	dd00      	ble.n	8010e68 <__ieee754_rem_pio2+0x120>
 8010e66:	e0d3      	b.n	8011010 <__ieee754_rem_pio2+0x2c8>
 8010e68:	0020      	movs	r0, r4
 8010e6a:	0029      	movs	r1, r5
 8010e6c:	f7fe fe84 	bl	800fb78 <fabs>
 8010e70:	4a78      	ldr	r2, [pc, #480]	; (8011054 <__ieee754_rem_pio2+0x30c>)
 8010e72:	4b79      	ldr	r3, [pc, #484]	; (8011058 <__ieee754_rem_pio2+0x310>)
 8010e74:	0004      	movs	r4, r0
 8010e76:	000d      	movs	r5, r1
 8010e78:	f7f1 f982 	bl	8002180 <__aeabi_dmul>
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	4b77      	ldr	r3, [pc, #476]	; (801105c <__ieee754_rem_pio2+0x314>)
 8010e80:	f7f0 fa0e 	bl	80012a0 <__aeabi_dadd>
 8010e84:	f7f1 ff98 	bl	8002db8 <__aeabi_d2iz>
 8010e88:	0006      	movs	r6, r0
 8010e8a:	f7f1 ffcb 	bl	8002e24 <__aeabi_i2d>
 8010e8e:	4a6b      	ldr	r2, [pc, #428]	; (801103c <__ieee754_rem_pio2+0x2f4>)
 8010e90:	4b69      	ldr	r3, [pc, #420]	; (8011038 <__ieee754_rem_pio2+0x2f0>)
 8010e92:	9006      	str	r0, [sp, #24]
 8010e94:	9107      	str	r1, [sp, #28]
 8010e96:	f7f1 f973 	bl	8002180 <__aeabi_dmul>
 8010e9a:	0002      	movs	r2, r0
 8010e9c:	000b      	movs	r3, r1
 8010e9e:	0020      	movs	r0, r4
 8010ea0:	0029      	movs	r1, r5
 8010ea2:	f7f1 fbd9 	bl	8002658 <__aeabi_dsub>
 8010ea6:	4a66      	ldr	r2, [pc, #408]	; (8011040 <__ieee754_rem_pio2+0x2f8>)
 8010ea8:	9004      	str	r0, [sp, #16]
 8010eaa:	9105      	str	r1, [sp, #20]
 8010eac:	9806      	ldr	r0, [sp, #24]
 8010eae:	9907      	ldr	r1, [sp, #28]
 8010eb0:	4b64      	ldr	r3, [pc, #400]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010eb2:	f7f1 f965 	bl	8002180 <__aeabi_dmul>
 8010eb6:	0004      	movs	r4, r0
 8010eb8:	000d      	movs	r5, r1
 8010eba:	2e1f      	cmp	r6, #31
 8010ebc:	dc0f      	bgt.n	8010ede <__ieee754_rem_pio2+0x196>
 8010ebe:	4a68      	ldr	r2, [pc, #416]	; (8011060 <__ieee754_rem_pio2+0x318>)
 8010ec0:	1e73      	subs	r3, r6, #1
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	589b      	ldr	r3, [r3, r2]
 8010ec6:	9a02      	ldr	r2, [sp, #8]
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d008      	beq.n	8010ede <__ieee754_rem_pio2+0x196>
 8010ecc:	9804      	ldr	r0, [sp, #16]
 8010ece:	9905      	ldr	r1, [sp, #20]
 8010ed0:	0022      	movs	r2, r4
 8010ed2:	002b      	movs	r3, r5
 8010ed4:	f7f1 fbc0 	bl	8002658 <__aeabi_dsub>
 8010ed8:	6038      	str	r0, [r7, #0]
 8010eda:	6079      	str	r1, [r7, #4]
 8010edc:	e012      	b.n	8010f04 <__ieee754_rem_pio2+0x1bc>
 8010ede:	0022      	movs	r2, r4
 8010ee0:	9804      	ldr	r0, [sp, #16]
 8010ee2:	9905      	ldr	r1, [sp, #20]
 8010ee4:	002b      	movs	r3, r5
 8010ee6:	f7f1 fbb7 	bl	8002658 <__aeabi_dsub>
 8010eea:	9b02      	ldr	r3, [sp, #8]
 8010eec:	151b      	asrs	r3, r3, #20
 8010eee:	9308      	str	r3, [sp, #32]
 8010ef0:	9a08      	ldr	r2, [sp, #32]
 8010ef2:	004b      	lsls	r3, r1, #1
 8010ef4:	0d5b      	lsrs	r3, r3, #21
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	2b10      	cmp	r3, #16
 8010efa:	dc21      	bgt.n	8010f40 <__ieee754_rem_pio2+0x1f8>
 8010efc:	0002      	movs	r2, r0
 8010efe:	000b      	movs	r3, r1
 8010f00:	603a      	str	r2, [r7, #0]
 8010f02:	607b      	str	r3, [r7, #4]
 8010f04:	9804      	ldr	r0, [sp, #16]
 8010f06:	9905      	ldr	r1, [sp, #20]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	683a      	ldr	r2, [r7, #0]
 8010f0c:	9302      	str	r3, [sp, #8]
 8010f0e:	9b02      	ldr	r3, [sp, #8]
 8010f10:	f7f1 fba2 	bl	8002658 <__aeabi_dsub>
 8010f14:	0022      	movs	r2, r4
 8010f16:	002b      	movs	r3, r5
 8010f18:	f7f1 fb9e 	bl	8002658 <__aeabi_dsub>
 8010f1c:	000b      	movs	r3, r1
 8010f1e:	0002      	movs	r2, r0
 8010f20:	60ba      	str	r2, [r7, #8]
 8010f22:	60fb      	str	r3, [r7, #12]
 8010f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	db00      	blt.n	8010f2c <__ieee754_rem_pio2+0x1e4>
 8010f2a:	e74a      	b.n	8010dc2 <__ieee754_rem_pio2+0x7a>
 8010f2c:	2280      	movs	r2, #128	; 0x80
 8010f2e:	0612      	lsls	r2, r2, #24
 8010f30:	4694      	mov	ip, r2
 8010f32:	9b02      	ldr	r3, [sp, #8]
 8010f34:	1889      	adds	r1, r1, r2
 8010f36:	4463      	add	r3, ip
 8010f38:	607b      	str	r3, [r7, #4]
 8010f3a:	60b8      	str	r0, [r7, #8]
 8010f3c:	60f9      	str	r1, [r7, #12]
 8010f3e:	e776      	b.n	8010e2e <__ieee754_rem_pio2+0xe6>
 8010f40:	22d3      	movs	r2, #211	; 0xd3
 8010f42:	9806      	ldr	r0, [sp, #24]
 8010f44:	9907      	ldr	r1, [sp, #28]
 8010f46:	4b3f      	ldr	r3, [pc, #252]	; (8011044 <__ieee754_rem_pio2+0x2fc>)
 8010f48:	0552      	lsls	r2, r2, #21
 8010f4a:	f7f1 f919 	bl	8002180 <__aeabi_dmul>
 8010f4e:	0004      	movs	r4, r0
 8010f50:	000d      	movs	r5, r1
 8010f52:	0002      	movs	r2, r0
 8010f54:	000b      	movs	r3, r1
 8010f56:	9804      	ldr	r0, [sp, #16]
 8010f58:	9905      	ldr	r1, [sp, #20]
 8010f5a:	f7f1 fb7d 	bl	8002658 <__aeabi_dsub>
 8010f5e:	0002      	movs	r2, r0
 8010f60:	000b      	movs	r3, r1
 8010f62:	9002      	str	r0, [sp, #8]
 8010f64:	9103      	str	r1, [sp, #12]
 8010f66:	9804      	ldr	r0, [sp, #16]
 8010f68:	9905      	ldr	r1, [sp, #20]
 8010f6a:	f7f1 fb75 	bl	8002658 <__aeabi_dsub>
 8010f6e:	0022      	movs	r2, r4
 8010f70:	002b      	movs	r3, r5
 8010f72:	f7f1 fb71 	bl	8002658 <__aeabi_dsub>
 8010f76:	0004      	movs	r4, r0
 8010f78:	000d      	movs	r5, r1
 8010f7a:	9806      	ldr	r0, [sp, #24]
 8010f7c:	9907      	ldr	r1, [sp, #28]
 8010f7e:	4a32      	ldr	r2, [pc, #200]	; (8011048 <__ieee754_rem_pio2+0x300>)
 8010f80:	4b32      	ldr	r3, [pc, #200]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010f82:	f7f1 f8fd 	bl	8002180 <__aeabi_dmul>
 8010f86:	0022      	movs	r2, r4
 8010f88:	002b      	movs	r3, r5
 8010f8a:	f7f1 fb65 	bl	8002658 <__aeabi_dsub>
 8010f8e:	0002      	movs	r2, r0
 8010f90:	000b      	movs	r3, r1
 8010f92:	0004      	movs	r4, r0
 8010f94:	000d      	movs	r5, r1
 8010f96:	9802      	ldr	r0, [sp, #8]
 8010f98:	9903      	ldr	r1, [sp, #12]
 8010f9a:	f7f1 fb5d 	bl	8002658 <__aeabi_dsub>
 8010f9e:	9a08      	ldr	r2, [sp, #32]
 8010fa0:	004b      	lsls	r3, r1, #1
 8010fa2:	0d5b      	lsrs	r3, r3, #21
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	2b31      	cmp	r3, #49	; 0x31
 8010fa8:	dc08      	bgt.n	8010fbc <__ieee754_rem_pio2+0x274>
 8010faa:	0002      	movs	r2, r0
 8010fac:	000b      	movs	r3, r1
 8010fae:	603a      	str	r2, [r7, #0]
 8010fb0:	607b      	str	r3, [r7, #4]
 8010fb2:	9a02      	ldr	r2, [sp, #8]
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	9204      	str	r2, [sp, #16]
 8010fb8:	9305      	str	r3, [sp, #20]
 8010fba:	e7a3      	b.n	8010f04 <__ieee754_rem_pio2+0x1bc>
 8010fbc:	22b8      	movs	r2, #184	; 0xb8
 8010fbe:	9806      	ldr	r0, [sp, #24]
 8010fc0:	9907      	ldr	r1, [sp, #28]
 8010fc2:	4b22      	ldr	r3, [pc, #136]	; (801104c <__ieee754_rem_pio2+0x304>)
 8010fc4:	0592      	lsls	r2, r2, #22
 8010fc6:	f7f1 f8db 	bl	8002180 <__aeabi_dmul>
 8010fca:	0004      	movs	r4, r0
 8010fcc:	000d      	movs	r5, r1
 8010fce:	0002      	movs	r2, r0
 8010fd0:	000b      	movs	r3, r1
 8010fd2:	9802      	ldr	r0, [sp, #8]
 8010fd4:	9903      	ldr	r1, [sp, #12]
 8010fd6:	f7f1 fb3f 	bl	8002658 <__aeabi_dsub>
 8010fda:	0002      	movs	r2, r0
 8010fdc:	000b      	movs	r3, r1
 8010fde:	9004      	str	r0, [sp, #16]
 8010fe0:	9105      	str	r1, [sp, #20]
 8010fe2:	9802      	ldr	r0, [sp, #8]
 8010fe4:	9903      	ldr	r1, [sp, #12]
 8010fe6:	f7f1 fb37 	bl	8002658 <__aeabi_dsub>
 8010fea:	0022      	movs	r2, r4
 8010fec:	002b      	movs	r3, r5
 8010fee:	f7f1 fb33 	bl	8002658 <__aeabi_dsub>
 8010ff2:	0004      	movs	r4, r0
 8010ff4:	000d      	movs	r5, r1
 8010ff6:	9806      	ldr	r0, [sp, #24]
 8010ff8:	9907      	ldr	r1, [sp, #28]
 8010ffa:	4a1a      	ldr	r2, [pc, #104]	; (8011064 <__ieee754_rem_pio2+0x31c>)
 8010ffc:	4b1a      	ldr	r3, [pc, #104]	; (8011068 <__ieee754_rem_pio2+0x320>)
 8010ffe:	f7f1 f8bf 	bl	8002180 <__aeabi_dmul>
 8011002:	0022      	movs	r2, r4
 8011004:	002b      	movs	r3, r5
 8011006:	f7f1 fb27 	bl	8002658 <__aeabi_dsub>
 801100a:	0004      	movs	r4, r0
 801100c:	000d      	movs	r5, r1
 801100e:	e75d      	b.n	8010ecc <__ieee754_rem_pio2+0x184>
 8011010:	4b16      	ldr	r3, [pc, #88]	; (801106c <__ieee754_rem_pio2+0x324>)
 8011012:	9a02      	ldr	r2, [sp, #8]
 8011014:	429a      	cmp	r2, r3
 8011016:	dd2b      	ble.n	8011070 <__ieee754_rem_pio2+0x328>
 8011018:	0022      	movs	r2, r4
 801101a:	002b      	movs	r3, r5
 801101c:	0020      	movs	r0, r4
 801101e:	0029      	movs	r1, r5
 8011020:	f7f1 fb1a 	bl	8002658 <__aeabi_dsub>
 8011024:	60b8      	str	r0, [r7, #8]
 8011026:	60f9      	str	r1, [r7, #12]
 8011028:	6038      	str	r0, [r7, #0]
 801102a:	6079      	str	r1, [r7, #4]
 801102c:	e6a1      	b.n	8010d72 <__ieee754_rem_pio2+0x2a>
 801102e:	46c0      	nop			; (mov r8, r8)
 8011030:	3fe921fb 	.word	0x3fe921fb
 8011034:	4002d97b 	.word	0x4002d97b
 8011038:	3ff921fb 	.word	0x3ff921fb
 801103c:	54400000 	.word	0x54400000
 8011040:	1a626331 	.word	0x1a626331
 8011044:	3dd0b461 	.word	0x3dd0b461
 8011048:	2e037073 	.word	0x2e037073
 801104c:	3ba3198a 	.word	0x3ba3198a
 8011050:	413921fb 	.word	0x413921fb
 8011054:	6dc9c883 	.word	0x6dc9c883
 8011058:	3fe45f30 	.word	0x3fe45f30
 801105c:	3fe00000 	.word	0x3fe00000
 8011060:	080128f0 	.word	0x080128f0
 8011064:	252049c1 	.word	0x252049c1
 8011068:	397b839a 	.word	0x397b839a
 801106c:	7fefffff 	.word	0x7fefffff
 8011070:	9a02      	ldr	r2, [sp, #8]
 8011072:	0020      	movs	r0, r4
 8011074:	1516      	asrs	r6, r2, #20
 8011076:	4a27      	ldr	r2, [pc, #156]	; (8011114 <__ieee754_rem_pio2+0x3cc>)
 8011078:	18b6      	adds	r6, r6, r2
 801107a:	9a02      	ldr	r2, [sp, #8]
 801107c:	0533      	lsls	r3, r6, #20
 801107e:	1ad5      	subs	r5, r2, r3
 8011080:	0029      	movs	r1, r5
 8011082:	f7f1 fe99 	bl	8002db8 <__aeabi_d2iz>
 8011086:	f7f1 fecd 	bl	8002e24 <__aeabi_i2d>
 801108a:	0002      	movs	r2, r0
 801108c:	000b      	movs	r3, r1
 801108e:	0020      	movs	r0, r4
 8011090:	0029      	movs	r1, r5
 8011092:	920a      	str	r2, [sp, #40]	; 0x28
 8011094:	930b      	str	r3, [sp, #44]	; 0x2c
 8011096:	f7f1 fadf 	bl	8002658 <__aeabi_dsub>
 801109a:	2200      	movs	r2, #0
 801109c:	4b1e      	ldr	r3, [pc, #120]	; (8011118 <__ieee754_rem_pio2+0x3d0>)
 801109e:	f7f1 f86f 	bl	8002180 <__aeabi_dmul>
 80110a2:	000d      	movs	r5, r1
 80110a4:	0004      	movs	r4, r0
 80110a6:	f7f1 fe87 	bl	8002db8 <__aeabi_d2iz>
 80110aa:	f7f1 febb 	bl	8002e24 <__aeabi_i2d>
 80110ae:	0002      	movs	r2, r0
 80110b0:	000b      	movs	r3, r1
 80110b2:	0020      	movs	r0, r4
 80110b4:	0029      	movs	r1, r5
 80110b6:	920c      	str	r2, [sp, #48]	; 0x30
 80110b8:	930d      	str	r3, [sp, #52]	; 0x34
 80110ba:	f7f1 facd 	bl	8002658 <__aeabi_dsub>
 80110be:	2200      	movs	r2, #0
 80110c0:	4b15      	ldr	r3, [pc, #84]	; (8011118 <__ieee754_rem_pio2+0x3d0>)
 80110c2:	f7f1 f85d 	bl	8002180 <__aeabi_dmul>
 80110c6:	2503      	movs	r5, #3
 80110c8:	900e      	str	r0, [sp, #56]	; 0x38
 80110ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80110cc:	ac0a      	add	r4, sp, #40	; 0x28
 80110ce:	2200      	movs	r2, #0
 80110d0:	6920      	ldr	r0, [r4, #16]
 80110d2:	6961      	ldr	r1, [r4, #20]
 80110d4:	2300      	movs	r3, #0
 80110d6:	9502      	str	r5, [sp, #8]
 80110d8:	3c08      	subs	r4, #8
 80110da:	3d01      	subs	r5, #1
 80110dc:	f7ef f9b2 	bl	8000444 <__aeabi_dcmpeq>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d1f4      	bne.n	80110ce <__ieee754_rem_pio2+0x386>
 80110e4:	4b0d      	ldr	r3, [pc, #52]	; (801111c <__ieee754_rem_pio2+0x3d4>)
 80110e6:	0032      	movs	r2, r6
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	2302      	movs	r3, #2
 80110ec:	0039      	movs	r1, r7
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	a80a      	add	r0, sp, #40	; 0x28
 80110f2:	9b02      	ldr	r3, [sp, #8]
 80110f4:	f000 f988 	bl	8011408 <__kernel_rem_pio2>
 80110f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110fa:	0006      	movs	r6, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	db00      	blt.n	8011102 <__ieee754_rem_pio2+0x3ba>
 8011100:	e65f      	b.n	8010dc2 <__ieee754_rem_pio2+0x7a>
 8011102:	2280      	movs	r2, #128	; 0x80
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	0612      	lsls	r2, r2, #24
 8011108:	189b      	adds	r3, r3, r2
 801110a:	607b      	str	r3, [r7, #4]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	189b      	adds	r3, r3, r2
 8011110:	60fb      	str	r3, [r7, #12]
 8011112:	e68c      	b.n	8010e2e <__ieee754_rem_pio2+0xe6>
 8011114:	fffffbea 	.word	0xfffffbea
 8011118:	41700000 	.word	0x41700000
 801111c:	08012970 	.word	0x08012970

08011120 <__ieee754_sqrt>:
 8011120:	4b56      	ldr	r3, [pc, #344]	; (801127c <__ieee754_sqrt+0x15c>)
 8011122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011124:	0002      	movs	r2, r0
 8011126:	0005      	movs	r5, r0
 8011128:	0018      	movs	r0, r3
 801112a:	000c      	movs	r4, r1
 801112c:	b085      	sub	sp, #20
 801112e:	4008      	ands	r0, r1
 8011130:	4298      	cmp	r0, r3
 8011132:	d10f      	bne.n	8011154 <__ieee754_sqrt+0x34>
 8011134:	000b      	movs	r3, r1
 8011136:	0028      	movs	r0, r5
 8011138:	f7f1 f822 	bl	8002180 <__aeabi_dmul>
 801113c:	0002      	movs	r2, r0
 801113e:	000b      	movs	r3, r1
 8011140:	0028      	movs	r0, r5
 8011142:	0021      	movs	r1, r4
 8011144:	f7f0 f8ac 	bl	80012a0 <__aeabi_dadd>
 8011148:	0005      	movs	r5, r0
 801114a:	000c      	movs	r4, r1
 801114c:	0028      	movs	r0, r5
 801114e:	0021      	movs	r1, r4
 8011150:	b005      	add	sp, #20
 8011152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011154:	2900      	cmp	r1, #0
 8011156:	dc10      	bgt.n	801117a <__ieee754_sqrt+0x5a>
 8011158:	004b      	lsls	r3, r1, #1
 801115a:	085b      	lsrs	r3, r3, #1
 801115c:	432b      	orrs	r3, r5
 801115e:	d0f5      	beq.n	801114c <__ieee754_sqrt+0x2c>
 8011160:	2000      	movs	r0, #0
 8011162:	4281      	cmp	r1, r0
 8011164:	d100      	bne.n	8011168 <__ieee754_sqrt+0x48>
 8011166:	e080      	b.n	801126a <__ieee754_sqrt+0x14a>
 8011168:	000b      	movs	r3, r1
 801116a:	0028      	movs	r0, r5
 801116c:	f7f1 fa74 	bl	8002658 <__aeabi_dsub>
 8011170:	0002      	movs	r2, r0
 8011172:	000b      	movs	r3, r1
 8011174:	f7f0 fbfe 	bl	8001974 <__aeabi_ddiv>
 8011178:	e7e6      	b.n	8011148 <__ieee754_sqrt+0x28>
 801117a:	1508      	asrs	r0, r1, #20
 801117c:	d075      	beq.n	801126a <__ieee754_sqrt+0x14a>
 801117e:	4b40      	ldr	r3, [pc, #256]	; (8011280 <__ieee754_sqrt+0x160>)
 8011180:	0309      	lsls	r1, r1, #12
 8011182:	18c4      	adds	r4, r0, r3
 8011184:	2380      	movs	r3, #128	; 0x80
 8011186:	0b09      	lsrs	r1, r1, #12
 8011188:	035b      	lsls	r3, r3, #13
 801118a:	4319      	orrs	r1, r3
 801118c:	07c3      	lsls	r3, r0, #31
 801118e:	d403      	bmi.n	8011198 <__ieee754_sqrt+0x78>
 8011190:	0fd3      	lsrs	r3, r2, #31
 8011192:	0049      	lsls	r1, r1, #1
 8011194:	18c9      	adds	r1, r1, r3
 8011196:	0052      	lsls	r2, r2, #1
 8011198:	1063      	asrs	r3, r4, #1
 801119a:	2400      	movs	r4, #0
 801119c:	0049      	lsls	r1, r1, #1
 801119e:	9303      	str	r3, [sp, #12]
 80111a0:	0fd3      	lsrs	r3, r2, #31
 80111a2:	18cb      	adds	r3, r1, r3
 80111a4:	2180      	movs	r1, #128	; 0x80
 80111a6:	2516      	movs	r5, #22
 80111a8:	0020      	movs	r0, r4
 80111aa:	0052      	lsls	r2, r2, #1
 80111ac:	0389      	lsls	r1, r1, #14
 80111ae:	1846      	adds	r6, r0, r1
 80111b0:	429e      	cmp	r6, r3
 80111b2:	dc02      	bgt.n	80111ba <__ieee754_sqrt+0x9a>
 80111b4:	1870      	adds	r0, r6, r1
 80111b6:	1b9b      	subs	r3, r3, r6
 80111b8:	1864      	adds	r4, r4, r1
 80111ba:	0fd6      	lsrs	r6, r2, #31
 80111bc:	005b      	lsls	r3, r3, #1
 80111be:	3d01      	subs	r5, #1
 80111c0:	18f3      	adds	r3, r6, r3
 80111c2:	0052      	lsls	r2, r2, #1
 80111c4:	0849      	lsrs	r1, r1, #1
 80111c6:	2d00      	cmp	r5, #0
 80111c8:	d1f1      	bne.n	80111ae <__ieee754_sqrt+0x8e>
 80111ca:	2620      	movs	r6, #32
 80111cc:	2780      	movs	r7, #128	; 0x80
 80111ce:	0029      	movs	r1, r5
 80111d0:	9601      	str	r6, [sp, #4]
 80111d2:	063f      	lsls	r7, r7, #24
 80111d4:	197e      	adds	r6, r7, r5
 80111d6:	46b4      	mov	ip, r6
 80111d8:	4283      	cmp	r3, r0
 80111da:	dc02      	bgt.n	80111e2 <__ieee754_sqrt+0xc2>
 80111dc:	d114      	bne.n	8011208 <__ieee754_sqrt+0xe8>
 80111de:	4296      	cmp	r6, r2
 80111e0:	d812      	bhi.n	8011208 <__ieee754_sqrt+0xe8>
 80111e2:	4665      	mov	r5, ip
 80111e4:	4666      	mov	r6, ip
 80111e6:	19ed      	adds	r5, r5, r7
 80111e8:	9002      	str	r0, [sp, #8]
 80111ea:	2e00      	cmp	r6, #0
 80111ec:	da03      	bge.n	80111f6 <__ieee754_sqrt+0xd6>
 80111ee:	43ee      	mvns	r6, r5
 80111f0:	0ff6      	lsrs	r6, r6, #31
 80111f2:	1986      	adds	r6, r0, r6
 80111f4:	9602      	str	r6, [sp, #8]
 80111f6:	1a1b      	subs	r3, r3, r0
 80111f8:	4562      	cmp	r2, ip
 80111fa:	4180      	sbcs	r0, r0
 80111fc:	4240      	negs	r0, r0
 80111fe:	1a1b      	subs	r3, r3, r0
 8011200:	4660      	mov	r0, ip
 8011202:	1a12      	subs	r2, r2, r0
 8011204:	9802      	ldr	r0, [sp, #8]
 8011206:	19c9      	adds	r1, r1, r7
 8011208:	0fd6      	lsrs	r6, r2, #31
 801120a:	005b      	lsls	r3, r3, #1
 801120c:	18f3      	adds	r3, r6, r3
 801120e:	9e01      	ldr	r6, [sp, #4]
 8011210:	0052      	lsls	r2, r2, #1
 8011212:	3e01      	subs	r6, #1
 8011214:	087f      	lsrs	r7, r7, #1
 8011216:	9601      	str	r6, [sp, #4]
 8011218:	2e00      	cmp	r6, #0
 801121a:	d1db      	bne.n	80111d4 <__ieee754_sqrt+0xb4>
 801121c:	4313      	orrs	r3, r2
 801121e:	d003      	beq.n	8011228 <__ieee754_sqrt+0x108>
 8011220:	1c4b      	adds	r3, r1, #1
 8011222:	d127      	bne.n	8011274 <__ieee754_sqrt+0x154>
 8011224:	0031      	movs	r1, r6
 8011226:	3401      	adds	r4, #1
 8011228:	4b16      	ldr	r3, [pc, #88]	; (8011284 <__ieee754_sqrt+0x164>)
 801122a:	1060      	asrs	r0, r4, #1
 801122c:	18c0      	adds	r0, r0, r3
 801122e:	0849      	lsrs	r1, r1, #1
 8011230:	07e3      	lsls	r3, r4, #31
 8011232:	d502      	bpl.n	801123a <__ieee754_sqrt+0x11a>
 8011234:	2380      	movs	r3, #128	; 0x80
 8011236:	061b      	lsls	r3, r3, #24
 8011238:	4319      	orrs	r1, r3
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	000d      	movs	r5, r1
 801123e:	051c      	lsls	r4, r3, #20
 8011240:	1823      	adds	r3, r4, r0
 8011242:	001c      	movs	r4, r3
 8011244:	e782      	b.n	801114c <__ieee754_sqrt+0x2c>
 8011246:	0ad1      	lsrs	r1, r2, #11
 8011248:	3b15      	subs	r3, #21
 801124a:	0552      	lsls	r2, r2, #21
 801124c:	2900      	cmp	r1, #0
 801124e:	d0fa      	beq.n	8011246 <__ieee754_sqrt+0x126>
 8011250:	2480      	movs	r4, #128	; 0x80
 8011252:	0364      	lsls	r4, r4, #13
 8011254:	4221      	tst	r1, r4
 8011256:	d00a      	beq.n	801126e <__ieee754_sqrt+0x14e>
 8011258:	2420      	movs	r4, #32
 801125a:	0016      	movs	r6, r2
 801125c:	1a24      	subs	r4, r4, r0
 801125e:	40e6      	lsrs	r6, r4
 8011260:	1e45      	subs	r5, r0, #1
 8011262:	4082      	lsls	r2, r0
 8011264:	4331      	orrs	r1, r6
 8011266:	1b58      	subs	r0, r3, r5
 8011268:	e789      	b.n	801117e <__ieee754_sqrt+0x5e>
 801126a:	2300      	movs	r3, #0
 801126c:	e7ee      	b.n	801124c <__ieee754_sqrt+0x12c>
 801126e:	0049      	lsls	r1, r1, #1
 8011270:	3001      	adds	r0, #1
 8011272:	e7ef      	b.n	8011254 <__ieee754_sqrt+0x134>
 8011274:	2301      	movs	r3, #1
 8011276:	3101      	adds	r1, #1
 8011278:	4399      	bics	r1, r3
 801127a:	e7d5      	b.n	8011228 <__ieee754_sqrt+0x108>
 801127c:	7ff00000 	.word	0x7ff00000
 8011280:	fffffc01 	.word	0xfffffc01
 8011284:	3fe00000 	.word	0x3fe00000

08011288 <__kernel_cos>:
 8011288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801128a:	b087      	sub	sp, #28
 801128c:	9204      	str	r2, [sp, #16]
 801128e:	9305      	str	r3, [sp, #20]
 8011290:	004b      	lsls	r3, r1, #1
 8011292:	085b      	lsrs	r3, r3, #1
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	23f9      	movs	r3, #249	; 0xf9
 8011298:	9a00      	ldr	r2, [sp, #0]
 801129a:	0007      	movs	r7, r0
 801129c:	000e      	movs	r6, r1
 801129e:	059b      	lsls	r3, r3, #22
 80112a0:	429a      	cmp	r2, r3
 80112a2:	da04      	bge.n	80112ae <__kernel_cos+0x26>
 80112a4:	f7f1 fd88 	bl	8002db8 <__aeabi_d2iz>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d100      	bne.n	80112ae <__kernel_cos+0x26>
 80112ac:	e084      	b.n	80113b8 <__kernel_cos+0x130>
 80112ae:	003a      	movs	r2, r7
 80112b0:	0033      	movs	r3, r6
 80112b2:	0038      	movs	r0, r7
 80112b4:	0031      	movs	r1, r6
 80112b6:	f7f0 ff63 	bl	8002180 <__aeabi_dmul>
 80112ba:	2200      	movs	r2, #0
 80112bc:	4b40      	ldr	r3, [pc, #256]	; (80113c0 <__kernel_cos+0x138>)
 80112be:	0004      	movs	r4, r0
 80112c0:	000d      	movs	r5, r1
 80112c2:	f7f0 ff5d 	bl	8002180 <__aeabi_dmul>
 80112c6:	4a3f      	ldr	r2, [pc, #252]	; (80113c4 <__kernel_cos+0x13c>)
 80112c8:	9002      	str	r0, [sp, #8]
 80112ca:	9103      	str	r1, [sp, #12]
 80112cc:	4b3e      	ldr	r3, [pc, #248]	; (80113c8 <__kernel_cos+0x140>)
 80112ce:	0020      	movs	r0, r4
 80112d0:	0029      	movs	r1, r5
 80112d2:	f7f0 ff55 	bl	8002180 <__aeabi_dmul>
 80112d6:	4a3d      	ldr	r2, [pc, #244]	; (80113cc <__kernel_cos+0x144>)
 80112d8:	4b3d      	ldr	r3, [pc, #244]	; (80113d0 <__kernel_cos+0x148>)
 80112da:	f7ef ffe1 	bl	80012a0 <__aeabi_dadd>
 80112de:	0022      	movs	r2, r4
 80112e0:	002b      	movs	r3, r5
 80112e2:	f7f0 ff4d 	bl	8002180 <__aeabi_dmul>
 80112e6:	4a3b      	ldr	r2, [pc, #236]	; (80113d4 <__kernel_cos+0x14c>)
 80112e8:	4b3b      	ldr	r3, [pc, #236]	; (80113d8 <__kernel_cos+0x150>)
 80112ea:	f7f1 f9b5 	bl	8002658 <__aeabi_dsub>
 80112ee:	0022      	movs	r2, r4
 80112f0:	002b      	movs	r3, r5
 80112f2:	f7f0 ff45 	bl	8002180 <__aeabi_dmul>
 80112f6:	4a39      	ldr	r2, [pc, #228]	; (80113dc <__kernel_cos+0x154>)
 80112f8:	4b39      	ldr	r3, [pc, #228]	; (80113e0 <__kernel_cos+0x158>)
 80112fa:	f7ef ffd1 	bl	80012a0 <__aeabi_dadd>
 80112fe:	0022      	movs	r2, r4
 8011300:	002b      	movs	r3, r5
 8011302:	f7f0 ff3d 	bl	8002180 <__aeabi_dmul>
 8011306:	4a37      	ldr	r2, [pc, #220]	; (80113e4 <__kernel_cos+0x15c>)
 8011308:	4b37      	ldr	r3, [pc, #220]	; (80113e8 <__kernel_cos+0x160>)
 801130a:	f7f1 f9a5 	bl	8002658 <__aeabi_dsub>
 801130e:	0022      	movs	r2, r4
 8011310:	002b      	movs	r3, r5
 8011312:	f7f0 ff35 	bl	8002180 <__aeabi_dmul>
 8011316:	4a35      	ldr	r2, [pc, #212]	; (80113ec <__kernel_cos+0x164>)
 8011318:	4b35      	ldr	r3, [pc, #212]	; (80113f0 <__kernel_cos+0x168>)
 801131a:	f7ef ffc1 	bl	80012a0 <__aeabi_dadd>
 801131e:	0022      	movs	r2, r4
 8011320:	002b      	movs	r3, r5
 8011322:	f7f0 ff2d 	bl	8002180 <__aeabi_dmul>
 8011326:	0022      	movs	r2, r4
 8011328:	002b      	movs	r3, r5
 801132a:	f7f0 ff29 	bl	8002180 <__aeabi_dmul>
 801132e:	9a04      	ldr	r2, [sp, #16]
 8011330:	9b05      	ldr	r3, [sp, #20]
 8011332:	0004      	movs	r4, r0
 8011334:	000d      	movs	r5, r1
 8011336:	0038      	movs	r0, r7
 8011338:	0031      	movs	r1, r6
 801133a:	f7f0 ff21 	bl	8002180 <__aeabi_dmul>
 801133e:	0002      	movs	r2, r0
 8011340:	000b      	movs	r3, r1
 8011342:	0020      	movs	r0, r4
 8011344:	0029      	movs	r1, r5
 8011346:	f7f1 f987 	bl	8002658 <__aeabi_dsub>
 801134a:	4b2a      	ldr	r3, [pc, #168]	; (80113f4 <__kernel_cos+0x16c>)
 801134c:	9a00      	ldr	r2, [sp, #0]
 801134e:	0004      	movs	r4, r0
 8011350:	000d      	movs	r5, r1
 8011352:	429a      	cmp	r2, r3
 8011354:	dc0d      	bgt.n	8011372 <__kernel_cos+0xea>
 8011356:	0002      	movs	r2, r0
 8011358:	000b      	movs	r3, r1
 801135a:	9802      	ldr	r0, [sp, #8]
 801135c:	9903      	ldr	r1, [sp, #12]
 801135e:	f7f1 f97b 	bl	8002658 <__aeabi_dsub>
 8011362:	0002      	movs	r2, r0
 8011364:	2000      	movs	r0, #0
 8011366:	000b      	movs	r3, r1
 8011368:	4923      	ldr	r1, [pc, #140]	; (80113f8 <__kernel_cos+0x170>)
 801136a:	f7f1 f975 	bl	8002658 <__aeabi_dsub>
 801136e:	b007      	add	sp, #28
 8011370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011372:	4b22      	ldr	r3, [pc, #136]	; (80113fc <__kernel_cos+0x174>)
 8011374:	9a00      	ldr	r2, [sp, #0]
 8011376:	2600      	movs	r6, #0
 8011378:	429a      	cmp	r2, r3
 801137a:	dc1b      	bgt.n	80113b4 <__kernel_cos+0x12c>
 801137c:	0013      	movs	r3, r2
 801137e:	4a20      	ldr	r2, [pc, #128]	; (8011400 <__kernel_cos+0x178>)
 8011380:	4694      	mov	ip, r2
 8011382:	4463      	add	r3, ip
 8011384:	001f      	movs	r7, r3
 8011386:	0032      	movs	r2, r6
 8011388:	003b      	movs	r3, r7
 801138a:	2000      	movs	r0, #0
 801138c:	491a      	ldr	r1, [pc, #104]	; (80113f8 <__kernel_cos+0x170>)
 801138e:	f7f1 f963 	bl	8002658 <__aeabi_dsub>
 8011392:	0032      	movs	r2, r6
 8011394:	003b      	movs	r3, r7
 8011396:	9000      	str	r0, [sp, #0]
 8011398:	9101      	str	r1, [sp, #4]
 801139a:	9802      	ldr	r0, [sp, #8]
 801139c:	9903      	ldr	r1, [sp, #12]
 801139e:	f7f1 f95b 	bl	8002658 <__aeabi_dsub>
 80113a2:	0022      	movs	r2, r4
 80113a4:	002b      	movs	r3, r5
 80113a6:	f7f1 f957 	bl	8002658 <__aeabi_dsub>
 80113aa:	0002      	movs	r2, r0
 80113ac:	000b      	movs	r3, r1
 80113ae:	9800      	ldr	r0, [sp, #0]
 80113b0:	9901      	ldr	r1, [sp, #4]
 80113b2:	e7da      	b.n	801136a <__kernel_cos+0xe2>
 80113b4:	4f13      	ldr	r7, [pc, #76]	; (8011404 <__kernel_cos+0x17c>)
 80113b6:	e7e6      	b.n	8011386 <__kernel_cos+0xfe>
 80113b8:	2000      	movs	r0, #0
 80113ba:	490f      	ldr	r1, [pc, #60]	; (80113f8 <__kernel_cos+0x170>)
 80113bc:	e7d7      	b.n	801136e <__kernel_cos+0xe6>
 80113be:	46c0      	nop			; (mov r8, r8)
 80113c0:	3fe00000 	.word	0x3fe00000
 80113c4:	be8838d4 	.word	0xbe8838d4
 80113c8:	bda8fae9 	.word	0xbda8fae9
 80113cc:	bdb4b1c4 	.word	0xbdb4b1c4
 80113d0:	3e21ee9e 	.word	0x3e21ee9e
 80113d4:	809c52ad 	.word	0x809c52ad
 80113d8:	3e927e4f 	.word	0x3e927e4f
 80113dc:	19cb1590 	.word	0x19cb1590
 80113e0:	3efa01a0 	.word	0x3efa01a0
 80113e4:	16c15177 	.word	0x16c15177
 80113e8:	3f56c16c 	.word	0x3f56c16c
 80113ec:	5555554c 	.word	0x5555554c
 80113f0:	3fa55555 	.word	0x3fa55555
 80113f4:	3fd33332 	.word	0x3fd33332
 80113f8:	3ff00000 	.word	0x3ff00000
 80113fc:	3fe90000 	.word	0x3fe90000
 8011400:	ffe00000 	.word	0xffe00000
 8011404:	3fd20000 	.word	0x3fd20000

08011408 <__kernel_rem_pio2>:
 8011408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801140a:	4cd0      	ldr	r4, [pc, #832]	; (801174c <__kernel_rem_pio2+0x344>)
 801140c:	44a5      	add	sp, r4
 801140e:	930d      	str	r3, [sp, #52]	; 0x34
 8011410:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011412:	0014      	movs	r4, r2
 8011414:	009a      	lsls	r2, r3, #2
 8011416:	4bce      	ldr	r3, [pc, #824]	; (8011750 <__kernel_rem_pio2+0x348>)
 8011418:	900e      	str	r0, [sp, #56]	; 0x38
 801141a:	58d3      	ldr	r3, [r2, r3]
 801141c:	9107      	str	r1, [sp, #28]
 801141e:	9308      	str	r3, [sp, #32]
 8011420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011422:	3b01      	subs	r3, #1
 8011424:	930c      	str	r3, [sp, #48]	; 0x30
 8011426:	2300      	movs	r3, #0
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	0023      	movs	r3, r4
 801142c:	3314      	adds	r3, #20
 801142e:	db04      	blt.n	801143a <__kernel_rem_pio2+0x32>
 8011430:	2118      	movs	r1, #24
 8011432:	1ee0      	subs	r0, r4, #3
 8011434:	f7ee ff0a 	bl	800024c <__divsi3>
 8011438:	9000      	str	r0, [sp, #0]
 801143a:	2218      	movs	r2, #24
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	4252      	negs	r2, r2
 8011440:	3301      	adds	r3, #1
 8011442:	435a      	muls	r2, r3
 8011444:	1913      	adds	r3, r2, r4
 8011446:	9302      	str	r3, [sp, #8]
 8011448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	ae26      	add	r6, sp, #152	; 0x98
 801144e:	1a9d      	subs	r5, r3, r2
 8011450:	002c      	movs	r4, r5
 8011452:	9b08      	ldr	r3, [sp, #32]
 8011454:	189f      	adds	r7, r3, r2
 8011456:	1b63      	subs	r3, r4, r5
 8011458:	429f      	cmp	r7, r3
 801145a:	da17      	bge.n	801148c <__kernel_rem_pio2+0x84>
 801145c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801145e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011460:	9304      	str	r3, [sp, #16]
 8011462:	ab76      	add	r3, sp, #472	; 0x1d8
 8011464:	930a      	str	r3, [sp, #40]	; 0x28
 8011466:	2301      	movs	r3, #1
 8011468:	1a9b      	subs	r3, r3, r2
 801146a:	930b      	str	r3, [sp, #44]	; 0x2c
 801146c:	ab28      	add	r3, sp, #160	; 0xa0
 801146e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011470:	9a04      	ldr	r2, [sp, #16]
 8011472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011474:	189b      	adds	r3, r3, r2
 8011476:	9a08      	ldr	r2, [sp, #32]
 8011478:	429a      	cmp	r2, r3
 801147a:	db31      	blt.n	80114e0 <__kernel_rem_pio2+0xd8>
 801147c:	9b04      	ldr	r3, [sp, #16]
 801147e:	2400      	movs	r4, #0
 8011480:	00de      	lsls	r6, r3, #3
 8011482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011484:	2500      	movs	r5, #0
 8011486:	2700      	movs	r7, #0
 8011488:	199e      	adds	r6, r3, r6
 801148a:	e01e      	b.n	80114ca <__kernel_rem_pio2+0xc2>
 801148c:	2c00      	cmp	r4, #0
 801148e:	db07      	blt.n	80114a0 <__kernel_rem_pio2+0x98>
 8011490:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8011492:	00a3      	lsls	r3, r4, #2
 8011494:	58d0      	ldr	r0, [r2, r3]
 8011496:	f7f1 fcc5 	bl	8002e24 <__aeabi_i2d>
 801149a:	c603      	stmia	r6!, {r0, r1}
 801149c:	3401      	adds	r4, #1
 801149e:	e7da      	b.n	8011456 <__kernel_rem_pio2+0x4e>
 80114a0:	2000      	movs	r0, #0
 80114a2:	2100      	movs	r1, #0
 80114a4:	e7f9      	b.n	801149a <__kernel_rem_pio2+0x92>
 80114a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114a8:	00f9      	lsls	r1, r7, #3
 80114aa:	1859      	adds	r1, r3, r1
 80114ac:	6808      	ldr	r0, [r1, #0]
 80114ae:	6849      	ldr	r1, [r1, #4]
 80114b0:	6832      	ldr	r2, [r6, #0]
 80114b2:	6873      	ldr	r3, [r6, #4]
 80114b4:	f7f0 fe64 	bl	8002180 <__aeabi_dmul>
 80114b8:	0002      	movs	r2, r0
 80114ba:	000b      	movs	r3, r1
 80114bc:	0020      	movs	r0, r4
 80114be:	0029      	movs	r1, r5
 80114c0:	f7ef feee 	bl	80012a0 <__aeabi_dadd>
 80114c4:	0004      	movs	r4, r0
 80114c6:	000d      	movs	r5, r1
 80114c8:	3701      	adds	r7, #1
 80114ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114cc:	3e08      	subs	r6, #8
 80114ce:	429f      	cmp	r7, r3
 80114d0:	dde9      	ble.n	80114a6 <__kernel_rem_pio2+0x9e>
 80114d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114d4:	c330      	stmia	r3!, {r4, r5}
 80114d6:	930a      	str	r3, [sp, #40]	; 0x28
 80114d8:	9b04      	ldr	r3, [sp, #16]
 80114da:	3301      	adds	r3, #1
 80114dc:	9304      	str	r3, [sp, #16]
 80114de:	e7c7      	b.n	8011470 <__kernel_rem_pio2+0x68>
 80114e0:	9b08      	ldr	r3, [sp, #32]
 80114e2:	aa12      	add	r2, sp, #72	; 0x48
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	189b      	adds	r3, r3, r2
 80114e8:	9310      	str	r3, [sp, #64]	; 0x40
 80114ea:	9b00      	ldr	r3, [sp, #0]
 80114ec:	0098      	lsls	r0, r3, #2
 80114ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80114f0:	181b      	adds	r3, r3, r0
 80114f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80114f4:	9b08      	ldr	r3, [sp, #32]
 80114f6:	9304      	str	r3, [sp, #16]
 80114f8:	9b04      	ldr	r3, [sp, #16]
 80114fa:	aa76      	add	r2, sp, #472	; 0x1d8
 80114fc:	00db      	lsls	r3, r3, #3
 80114fe:	18d3      	adds	r3, r2, r3
 8011500:	681c      	ldr	r4, [r3, #0]
 8011502:	685d      	ldr	r5, [r3, #4]
 8011504:	ab12      	add	r3, sp, #72	; 0x48
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	930b      	str	r3, [sp, #44]	; 0x2c
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	9211      	str	r2, [sp, #68]	; 0x44
 801150e:	930a      	str	r3, [sp, #40]	; 0x28
 8011510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011512:	2b00      	cmp	r3, #0
 8011514:	dc74      	bgt.n	8011600 <__kernel_rem_pio2+0x1f8>
 8011516:	0020      	movs	r0, r4
 8011518:	0029      	movs	r1, r5
 801151a:	9a02      	ldr	r2, [sp, #8]
 801151c:	f000 fcb6 	bl	8011e8c <scalbn>
 8011520:	23ff      	movs	r3, #255	; 0xff
 8011522:	2200      	movs	r2, #0
 8011524:	059b      	lsls	r3, r3, #22
 8011526:	0004      	movs	r4, r0
 8011528:	000d      	movs	r5, r1
 801152a:	f7f0 fe29 	bl	8002180 <__aeabi_dmul>
 801152e:	f000 fb95 	bl	8011c5c <floor>
 8011532:	2200      	movs	r2, #0
 8011534:	4b87      	ldr	r3, [pc, #540]	; (8011754 <__kernel_rem_pio2+0x34c>)
 8011536:	f7f0 fe23 	bl	8002180 <__aeabi_dmul>
 801153a:	0002      	movs	r2, r0
 801153c:	000b      	movs	r3, r1
 801153e:	0020      	movs	r0, r4
 8011540:	0029      	movs	r1, r5
 8011542:	f7f1 f889 	bl	8002658 <__aeabi_dsub>
 8011546:	000d      	movs	r5, r1
 8011548:	0004      	movs	r4, r0
 801154a:	f7f1 fc35 	bl	8002db8 <__aeabi_d2iz>
 801154e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011550:	f7f1 fc68 	bl	8002e24 <__aeabi_i2d>
 8011554:	000b      	movs	r3, r1
 8011556:	0002      	movs	r2, r0
 8011558:	0029      	movs	r1, r5
 801155a:	0020      	movs	r0, r4
 801155c:	f7f1 f87c 	bl	8002658 <__aeabi_dsub>
 8011560:	9b02      	ldr	r3, [sp, #8]
 8011562:	0006      	movs	r6, r0
 8011564:	000f      	movs	r7, r1
 8011566:	2b00      	cmp	r3, #0
 8011568:	dd74      	ble.n	8011654 <__kernel_rem_pio2+0x24c>
 801156a:	2118      	movs	r1, #24
 801156c:	9b04      	ldr	r3, [sp, #16]
 801156e:	aa12      	add	r2, sp, #72	; 0x48
 8011570:	3b01      	subs	r3, #1
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	589a      	ldr	r2, [r3, r2]
 8011576:	9802      	ldr	r0, [sp, #8]
 8011578:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801157a:	1a09      	subs	r1, r1, r0
 801157c:	0010      	movs	r0, r2
 801157e:	4108      	asrs	r0, r1
 8011580:	1824      	adds	r4, r4, r0
 8011582:	4088      	lsls	r0, r1
 8011584:	a912      	add	r1, sp, #72	; 0x48
 8011586:	1a12      	subs	r2, r2, r0
 8011588:	505a      	str	r2, [r3, r1]
 801158a:	2317      	movs	r3, #23
 801158c:	9902      	ldr	r1, [sp, #8]
 801158e:	940b      	str	r4, [sp, #44]	; 0x2c
 8011590:	1a5b      	subs	r3, r3, r1
 8011592:	411a      	asrs	r2, r3
 8011594:	920a      	str	r2, [sp, #40]	; 0x28
 8011596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011598:	2b00      	cmp	r3, #0
 801159a:	dd6d      	ble.n	8011678 <__kernel_rem_pio2+0x270>
 801159c:	2200      	movs	r2, #0
 801159e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115a0:	2080      	movs	r0, #128	; 0x80
 80115a2:	3301      	adds	r3, #1
 80115a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80115a6:	4b6c      	ldr	r3, [pc, #432]	; (8011758 <__kernel_rem_pio2+0x350>)
 80115a8:	0014      	movs	r4, r2
 80115aa:	469c      	mov	ip, r3
 80115ac:	2501      	movs	r5, #1
 80115ae:	0440      	lsls	r0, r0, #17
 80115b0:	9b04      	ldr	r3, [sp, #16]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	dd00      	ble.n	80115b8 <__kernel_rem_pio2+0x1b0>
 80115b6:	e098      	b.n	80116ea <__kernel_rem_pio2+0x2e2>
 80115b8:	9b02      	ldr	r3, [sp, #8]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	dd05      	ble.n	80115ca <__kernel_rem_pio2+0x1c2>
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d100      	bne.n	80115c4 <__kernel_rem_pio2+0x1bc>
 80115c2:	e0a8      	b.n	8011716 <__kernel_rem_pio2+0x30e>
 80115c4:	2b02      	cmp	r3, #2
 80115c6:	d100      	bne.n	80115ca <__kernel_rem_pio2+0x1c2>
 80115c8:	e0b0      	b.n	801172c <__kernel_rem_pio2+0x324>
 80115ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d153      	bne.n	8011678 <__kernel_rem_pio2+0x270>
 80115d0:	0032      	movs	r2, r6
 80115d2:	003b      	movs	r3, r7
 80115d4:	2000      	movs	r0, #0
 80115d6:	4961      	ldr	r1, [pc, #388]	; (801175c <__kernel_rem_pio2+0x354>)
 80115d8:	f7f1 f83e 	bl	8002658 <__aeabi_dsub>
 80115dc:	0006      	movs	r6, r0
 80115de:	000f      	movs	r7, r1
 80115e0:	2c00      	cmp	r4, #0
 80115e2:	d049      	beq.n	8011678 <__kernel_rem_pio2+0x270>
 80115e4:	9a02      	ldr	r2, [sp, #8]
 80115e6:	2000      	movs	r0, #0
 80115e8:	495c      	ldr	r1, [pc, #368]	; (801175c <__kernel_rem_pio2+0x354>)
 80115ea:	f000 fc4f 	bl	8011e8c <scalbn>
 80115ee:	0002      	movs	r2, r0
 80115f0:	000b      	movs	r3, r1
 80115f2:	0030      	movs	r0, r6
 80115f4:	0039      	movs	r1, r7
 80115f6:	f7f1 f82f 	bl	8002658 <__aeabi_dsub>
 80115fa:	0006      	movs	r6, r0
 80115fc:	000f      	movs	r7, r1
 80115fe:	e03b      	b.n	8011678 <__kernel_rem_pio2+0x270>
 8011600:	2200      	movs	r2, #0
 8011602:	4b57      	ldr	r3, [pc, #348]	; (8011760 <__kernel_rem_pio2+0x358>)
 8011604:	0020      	movs	r0, r4
 8011606:	0029      	movs	r1, r5
 8011608:	f7f0 fdba 	bl	8002180 <__aeabi_dmul>
 801160c:	f7f1 fbd4 	bl	8002db8 <__aeabi_d2iz>
 8011610:	f7f1 fc08 	bl	8002e24 <__aeabi_i2d>
 8011614:	2200      	movs	r2, #0
 8011616:	4b53      	ldr	r3, [pc, #332]	; (8011764 <__kernel_rem_pio2+0x35c>)
 8011618:	0006      	movs	r6, r0
 801161a:	000f      	movs	r7, r1
 801161c:	f7f0 fdb0 	bl	8002180 <__aeabi_dmul>
 8011620:	0002      	movs	r2, r0
 8011622:	000b      	movs	r3, r1
 8011624:	0020      	movs	r0, r4
 8011626:	0029      	movs	r1, r5
 8011628:	f7f1 f816 	bl	8002658 <__aeabi_dsub>
 801162c:	f7f1 fbc4 	bl	8002db8 <__aeabi_d2iz>
 8011630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011632:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011634:	c301      	stmia	r3!, {r0}
 8011636:	930b      	str	r3, [sp, #44]	; 0x2c
 8011638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801163a:	0030      	movs	r0, r6
 801163c:	3b01      	subs	r3, #1
 801163e:	930a      	str	r3, [sp, #40]	; 0x28
 8011640:	00db      	lsls	r3, r3, #3
 8011642:	18d3      	adds	r3, r2, r3
 8011644:	0039      	movs	r1, r7
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	f7ef fe29 	bl	80012a0 <__aeabi_dadd>
 801164e:	0004      	movs	r4, r0
 8011650:	000d      	movs	r5, r1
 8011652:	e75d      	b.n	8011510 <__kernel_rem_pio2+0x108>
 8011654:	9b02      	ldr	r3, [sp, #8]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d107      	bne.n	801166a <__kernel_rem_pio2+0x262>
 801165a:	9b04      	ldr	r3, [sp, #16]
 801165c:	aa12      	add	r2, sp, #72	; 0x48
 801165e:	3b01      	subs	r3, #1
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	5898      	ldr	r0, [r3, r2]
 8011664:	15c3      	asrs	r3, r0, #23
 8011666:	930a      	str	r3, [sp, #40]	; 0x28
 8011668:	e795      	b.n	8011596 <__kernel_rem_pio2+0x18e>
 801166a:	2200      	movs	r2, #0
 801166c:	4b3e      	ldr	r3, [pc, #248]	; (8011768 <__kernel_rem_pio2+0x360>)
 801166e:	f7ee ff0d 	bl	800048c <__aeabi_dcmpge>
 8011672:	2800      	cmp	r0, #0
 8011674:	d136      	bne.n	80116e4 <__kernel_rem_pio2+0x2dc>
 8011676:	900a      	str	r0, [sp, #40]	; 0x28
 8011678:	2200      	movs	r2, #0
 801167a:	2300      	movs	r3, #0
 801167c:	0030      	movs	r0, r6
 801167e:	0039      	movs	r1, r7
 8011680:	f7ee fee0 	bl	8000444 <__aeabi_dcmpeq>
 8011684:	2800      	cmp	r0, #0
 8011686:	d100      	bne.n	801168a <__kernel_rem_pio2+0x282>
 8011688:	e0b9      	b.n	80117fe <__kernel_rem_pio2+0x3f6>
 801168a:	2200      	movs	r2, #0
 801168c:	9b04      	ldr	r3, [sp, #16]
 801168e:	3b01      	subs	r3, #1
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	9908      	ldr	r1, [sp, #32]
 8011694:	428b      	cmp	r3, r1
 8011696:	da52      	bge.n	801173e <__kernel_rem_pio2+0x336>
 8011698:	2a00      	cmp	r2, #0
 801169a:	d100      	bne.n	801169e <__kernel_rem_pio2+0x296>
 801169c:	e095      	b.n	80117ca <__kernel_rem_pio2+0x3c2>
 801169e:	9b02      	ldr	r3, [sp, #8]
 80116a0:	aa12      	add	r2, sp, #72	; 0x48
 80116a2:	3b18      	subs	r3, #24
 80116a4:	9302      	str	r3, [sp, #8]
 80116a6:	9b00      	ldr	r3, [sp, #0]
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	589b      	ldr	r3, [r3, r2]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d100      	bne.n	80116b2 <__kernel_rem_pio2+0x2aa>
 80116b0:	e0a1      	b.n	80117f6 <__kernel_rem_pio2+0x3ee>
 80116b2:	2000      	movs	r0, #0
 80116b4:	9a02      	ldr	r2, [sp, #8]
 80116b6:	4929      	ldr	r1, [pc, #164]	; (801175c <__kernel_rem_pio2+0x354>)
 80116b8:	f000 fbe8 	bl	8011e8c <scalbn>
 80116bc:	0006      	movs	r6, r0
 80116be:	000f      	movs	r7, r1
 80116c0:	9c00      	ldr	r4, [sp, #0]
 80116c2:	2c00      	cmp	r4, #0
 80116c4:	db00      	blt.n	80116c8 <__kernel_rem_pio2+0x2c0>
 80116c6:	e0d9      	b.n	801187c <__kernel_rem_pio2+0x474>
 80116c8:	2600      	movs	r6, #0
 80116ca:	9d00      	ldr	r5, [sp, #0]
 80116cc:	2d00      	cmp	r5, #0
 80116ce:	da00      	bge.n	80116d2 <__kernel_rem_pio2+0x2ca>
 80116d0:	e10c      	b.n	80118ec <__kernel_rem_pio2+0x4e4>
 80116d2:	ab76      	add	r3, sp, #472	; 0x1d8
 80116d4:	00ef      	lsls	r7, r5, #3
 80116d6:	2400      	movs	r4, #0
 80116d8:	18ff      	adds	r7, r7, r3
 80116da:	2300      	movs	r3, #0
 80116dc:	9302      	str	r3, [sp, #8]
 80116de:	9403      	str	r4, [sp, #12]
 80116e0:	2400      	movs	r4, #0
 80116e2:	e0f4      	b.n	80118ce <__kernel_rem_pio2+0x4c6>
 80116e4:	2302      	movs	r3, #2
 80116e6:	930a      	str	r3, [sp, #40]	; 0x28
 80116e8:	e758      	b.n	801159c <__kernel_rem_pio2+0x194>
 80116ea:	9b00      	ldr	r3, [sp, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2c00      	cmp	r4, #0
 80116f0:	d10b      	bne.n	801170a <__kernel_rem_pio2+0x302>
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d003      	beq.n	80116fe <__kernel_rem_pio2+0x2f6>
 80116f6:	9c00      	ldr	r4, [sp, #0]
 80116f8:	1ac3      	subs	r3, r0, r3
 80116fa:	6023      	str	r3, [r4, #0]
 80116fc:	002b      	movs	r3, r5
 80116fe:	9c00      	ldr	r4, [sp, #0]
 8011700:	3201      	adds	r2, #1
 8011702:	3404      	adds	r4, #4
 8011704:	9400      	str	r4, [sp, #0]
 8011706:	001c      	movs	r4, r3
 8011708:	e752      	b.n	80115b0 <__kernel_rem_pio2+0x1a8>
 801170a:	4661      	mov	r1, ip
 801170c:	1acb      	subs	r3, r1, r3
 801170e:	9900      	ldr	r1, [sp, #0]
 8011710:	600b      	str	r3, [r1, #0]
 8011712:	0023      	movs	r3, r4
 8011714:	e7f3      	b.n	80116fe <__kernel_rem_pio2+0x2f6>
 8011716:	9b04      	ldr	r3, [sp, #16]
 8011718:	aa12      	add	r2, sp, #72	; 0x48
 801171a:	3b01      	subs	r3, #1
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	589a      	ldr	r2, [r3, r2]
 8011720:	9200      	str	r2, [sp, #0]
 8011722:	0252      	lsls	r2, r2, #9
 8011724:	0a52      	lsrs	r2, r2, #9
 8011726:	a912      	add	r1, sp, #72	; 0x48
 8011728:	505a      	str	r2, [r3, r1]
 801172a:	e74e      	b.n	80115ca <__kernel_rem_pio2+0x1c2>
 801172c:	9b04      	ldr	r3, [sp, #16]
 801172e:	aa12      	add	r2, sp, #72	; 0x48
 8011730:	3b01      	subs	r3, #1
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	589a      	ldr	r2, [r3, r2]
 8011736:	9200      	str	r2, [sp, #0]
 8011738:	0292      	lsls	r2, r2, #10
 801173a:	0a92      	lsrs	r2, r2, #10
 801173c:	e7f3      	b.n	8011726 <__kernel_rem_pio2+0x31e>
 801173e:	0099      	lsls	r1, r3, #2
 8011740:	a812      	add	r0, sp, #72	; 0x48
 8011742:	5809      	ldr	r1, [r1, r0]
 8011744:	3b01      	subs	r3, #1
 8011746:	430a      	orrs	r2, r1
 8011748:	e7a3      	b.n	8011692 <__kernel_rem_pio2+0x28a>
 801174a:	46c0      	nop			; (mov r8, r8)
 801174c:	fffffd84 	.word	0xfffffd84
 8011750:	08012ab8 	.word	0x08012ab8
 8011754:	40200000 	.word	0x40200000
 8011758:	00ffffff 	.word	0x00ffffff
 801175c:	3ff00000 	.word	0x3ff00000
 8011760:	3e700000 	.word	0x3e700000
 8011764:	41700000 	.word	0x41700000
 8011768:	3fe00000 	.word	0x3fe00000
 801176c:	3301      	adds	r3, #1
 801176e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011770:	009a      	lsls	r2, r3, #2
 8011772:	4252      	negs	r2, r2
 8011774:	588a      	ldr	r2, [r1, r2]
 8011776:	2a00      	cmp	r2, #0
 8011778:	d0f8      	beq.n	801176c <__kernel_rem_pio2+0x364>
 801177a:	9a04      	ldr	r2, [sp, #16]
 801177c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801177e:	1c57      	adds	r7, r2, #1
 8011780:	1854      	adds	r4, r2, r1
 8011782:	00e4      	lsls	r4, r4, #3
 8011784:	aa26      	add	r2, sp, #152	; 0x98
 8011786:	1914      	adds	r4, r2, r4
 8011788:	9a04      	ldr	r2, [sp, #16]
 801178a:	18d3      	adds	r3, r2, r3
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	9b04      	ldr	r3, [sp, #16]
 8011790:	42bb      	cmp	r3, r7
 8011792:	da00      	bge.n	8011796 <__kernel_rem_pio2+0x38e>
 8011794:	e6b0      	b.n	80114f8 <__kernel_rem_pio2+0xf0>
 8011796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011798:	00bb      	lsls	r3, r7, #2
 801179a:	58d0      	ldr	r0, [r2, r3]
 801179c:	f7f1 fb42 	bl	8002e24 <__aeabi_i2d>
 80117a0:	2200      	movs	r2, #0
 80117a2:	2300      	movs	r3, #0
 80117a4:	0026      	movs	r6, r4
 80117a6:	2500      	movs	r5, #0
 80117a8:	6020      	str	r0, [r4, #0]
 80117aa:	6061      	str	r1, [r4, #4]
 80117ac:	9200      	str	r2, [sp, #0]
 80117ae:	9301      	str	r3, [sp, #4]
 80117b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117b2:	429d      	cmp	r5, r3
 80117b4:	dd0b      	ble.n	80117ce <__kernel_rem_pio2+0x3c6>
 80117b6:	00fb      	lsls	r3, r7, #3
 80117b8:	aa76      	add	r2, sp, #472	; 0x1d8
 80117ba:	18d3      	adds	r3, r2, r3
 80117bc:	3701      	adds	r7, #1
 80117be:	9900      	ldr	r1, [sp, #0]
 80117c0:	9a01      	ldr	r2, [sp, #4]
 80117c2:	3408      	adds	r4, #8
 80117c4:	6019      	str	r1, [r3, #0]
 80117c6:	605a      	str	r2, [r3, #4]
 80117c8:	e7e1      	b.n	801178e <__kernel_rem_pio2+0x386>
 80117ca:	2301      	movs	r3, #1
 80117cc:	e7cf      	b.n	801176e <__kernel_rem_pio2+0x366>
 80117ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117d0:	00e9      	lsls	r1, r5, #3
 80117d2:	1859      	adds	r1, r3, r1
 80117d4:	6808      	ldr	r0, [r1, #0]
 80117d6:	6849      	ldr	r1, [r1, #4]
 80117d8:	6832      	ldr	r2, [r6, #0]
 80117da:	6873      	ldr	r3, [r6, #4]
 80117dc:	f7f0 fcd0 	bl	8002180 <__aeabi_dmul>
 80117e0:	0002      	movs	r2, r0
 80117e2:	000b      	movs	r3, r1
 80117e4:	9800      	ldr	r0, [sp, #0]
 80117e6:	9901      	ldr	r1, [sp, #4]
 80117e8:	f7ef fd5a 	bl	80012a0 <__aeabi_dadd>
 80117ec:	3501      	adds	r5, #1
 80117ee:	9000      	str	r0, [sp, #0]
 80117f0:	9101      	str	r1, [sp, #4]
 80117f2:	3e08      	subs	r6, #8
 80117f4:	e7dc      	b.n	80117b0 <__kernel_rem_pio2+0x3a8>
 80117f6:	9b00      	ldr	r3, [sp, #0]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	e74f      	b.n	801169e <__kernel_rem_pio2+0x296>
 80117fe:	9b02      	ldr	r3, [sp, #8]
 8011800:	0030      	movs	r0, r6
 8011802:	425a      	negs	r2, r3
 8011804:	0039      	movs	r1, r7
 8011806:	f000 fb41 	bl	8011e8c <scalbn>
 801180a:	2200      	movs	r2, #0
 801180c:	4bb6      	ldr	r3, [pc, #728]	; (8011ae8 <__kernel_rem_pio2+0x6e0>)
 801180e:	0004      	movs	r4, r0
 8011810:	000d      	movs	r5, r1
 8011812:	f7ee fe3b 	bl	800048c <__aeabi_dcmpge>
 8011816:	2800      	cmp	r0, #0
 8011818:	d025      	beq.n	8011866 <__kernel_rem_pio2+0x45e>
 801181a:	2200      	movs	r2, #0
 801181c:	4bb3      	ldr	r3, [pc, #716]	; (8011aec <__kernel_rem_pio2+0x6e4>)
 801181e:	0020      	movs	r0, r4
 8011820:	0029      	movs	r1, r5
 8011822:	f7f0 fcad 	bl	8002180 <__aeabi_dmul>
 8011826:	f7f1 fac7 	bl	8002db8 <__aeabi_d2iz>
 801182a:	9b04      	ldr	r3, [sp, #16]
 801182c:	0006      	movs	r6, r0
 801182e:	009f      	lsls	r7, r3, #2
 8011830:	f7f1 faf8 	bl	8002e24 <__aeabi_i2d>
 8011834:	2200      	movs	r2, #0
 8011836:	4bac      	ldr	r3, [pc, #688]	; (8011ae8 <__kernel_rem_pio2+0x6e0>)
 8011838:	f7f0 fca2 	bl	8002180 <__aeabi_dmul>
 801183c:	0002      	movs	r2, r0
 801183e:	000b      	movs	r3, r1
 8011840:	0020      	movs	r0, r4
 8011842:	0029      	movs	r1, r5
 8011844:	f7f0 ff08 	bl	8002658 <__aeabi_dsub>
 8011848:	f7f1 fab6 	bl	8002db8 <__aeabi_d2iz>
 801184c:	ab12      	add	r3, sp, #72	; 0x48
 801184e:	51d8      	str	r0, [r3, r7]
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	aa12      	add	r2, sp, #72	; 0x48
 8011854:	3301      	adds	r3, #1
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	9b02      	ldr	r3, [sp, #8]
 801185a:	3318      	adds	r3, #24
 801185c:	9302      	str	r3, [sp, #8]
 801185e:	9b00      	ldr	r3, [sp, #0]
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	509e      	str	r6, [r3, r2]
 8011864:	e725      	b.n	80116b2 <__kernel_rem_pio2+0x2aa>
 8011866:	9b04      	ldr	r3, [sp, #16]
 8011868:	0020      	movs	r0, r4
 801186a:	0029      	movs	r1, r5
 801186c:	009e      	lsls	r6, r3, #2
 801186e:	f7f1 faa3 	bl	8002db8 <__aeabi_d2iz>
 8011872:	ab12      	add	r3, sp, #72	; 0x48
 8011874:	5198      	str	r0, [r3, r6]
 8011876:	9b04      	ldr	r3, [sp, #16]
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	e71a      	b.n	80116b2 <__kernel_rem_pio2+0x2aa>
 801187c:	00e5      	lsls	r5, r4, #3
 801187e:	ab76      	add	r3, sp, #472	; 0x1d8
 8011880:	aa12      	add	r2, sp, #72	; 0x48
 8011882:	195d      	adds	r5, r3, r5
 8011884:	00a3      	lsls	r3, r4, #2
 8011886:	5898      	ldr	r0, [r3, r2]
 8011888:	f7f1 facc 	bl	8002e24 <__aeabi_i2d>
 801188c:	0032      	movs	r2, r6
 801188e:	003b      	movs	r3, r7
 8011890:	f7f0 fc76 	bl	8002180 <__aeabi_dmul>
 8011894:	2200      	movs	r2, #0
 8011896:	6028      	str	r0, [r5, #0]
 8011898:	6069      	str	r1, [r5, #4]
 801189a:	4b94      	ldr	r3, [pc, #592]	; (8011aec <__kernel_rem_pio2+0x6e4>)
 801189c:	0030      	movs	r0, r6
 801189e:	0039      	movs	r1, r7
 80118a0:	f7f0 fc6e 	bl	8002180 <__aeabi_dmul>
 80118a4:	3c01      	subs	r4, #1
 80118a6:	0006      	movs	r6, r0
 80118a8:	000f      	movs	r7, r1
 80118aa:	e70a      	b.n	80116c2 <__kernel_rem_pio2+0x2ba>
 80118ac:	4b90      	ldr	r3, [pc, #576]	; (8011af0 <__kernel_rem_pio2+0x6e8>)
 80118ae:	00e1      	lsls	r1, r4, #3
 80118b0:	1859      	adds	r1, r3, r1
 80118b2:	6808      	ldr	r0, [r1, #0]
 80118b4:	6849      	ldr	r1, [r1, #4]
 80118b6:	cf0c      	ldmia	r7!, {r2, r3}
 80118b8:	f7f0 fc62 	bl	8002180 <__aeabi_dmul>
 80118bc:	0002      	movs	r2, r0
 80118be:	000b      	movs	r3, r1
 80118c0:	9802      	ldr	r0, [sp, #8]
 80118c2:	9903      	ldr	r1, [sp, #12]
 80118c4:	f7ef fcec 	bl	80012a0 <__aeabi_dadd>
 80118c8:	9002      	str	r0, [sp, #8]
 80118ca:	9103      	str	r1, [sp, #12]
 80118cc:	3401      	adds	r4, #1
 80118ce:	9b08      	ldr	r3, [sp, #32]
 80118d0:	429c      	cmp	r4, r3
 80118d2:	dc01      	bgt.n	80118d8 <__kernel_rem_pio2+0x4d0>
 80118d4:	42a6      	cmp	r6, r4
 80118d6:	dae9      	bge.n	80118ac <__kernel_rem_pio2+0x4a4>
 80118d8:	00f3      	lsls	r3, r6, #3
 80118da:	aa4e      	add	r2, sp, #312	; 0x138
 80118dc:	18d3      	adds	r3, r2, r3
 80118de:	3d01      	subs	r5, #1
 80118e0:	9902      	ldr	r1, [sp, #8]
 80118e2:	9a03      	ldr	r2, [sp, #12]
 80118e4:	3601      	adds	r6, #1
 80118e6:	6019      	str	r1, [r3, #0]
 80118e8:	605a      	str	r2, [r3, #4]
 80118ea:	e6ef      	b.n	80116cc <__kernel_rem_pio2+0x2c4>
 80118ec:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80118ee:	2b02      	cmp	r3, #2
 80118f0:	dc0b      	bgt.n	801190a <__kernel_rem_pio2+0x502>
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dd00      	ble.n	80118f8 <__kernel_rem_pio2+0x4f0>
 80118f6:	e08a      	b.n	8011a0e <__kernel_rem_pio2+0x606>
 80118f8:	d055      	beq.n	80119a6 <__kernel_rem_pio2+0x59e>
 80118fa:	2007      	movs	r0, #7
 80118fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118fe:	4003      	ands	r3, r0
 8011900:	0018      	movs	r0, r3
 8011902:	239f      	movs	r3, #159	; 0x9f
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	449d      	add	sp, r3
 8011908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801190a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801190c:	2b03      	cmp	r3, #3
 801190e:	d1f4      	bne.n	80118fa <__kernel_rem_pio2+0x4f2>
 8011910:	9b00      	ldr	r3, [sp, #0]
 8011912:	00dc      	lsls	r4, r3, #3
 8011914:	ab4e      	add	r3, sp, #312	; 0x138
 8011916:	191c      	adds	r4, r3, r4
 8011918:	0025      	movs	r5, r4
 801191a:	9b00      	ldr	r3, [sp, #0]
 801191c:	9302      	str	r3, [sp, #8]
 801191e:	9b02      	ldr	r3, [sp, #8]
 8011920:	3d08      	subs	r5, #8
 8011922:	2b00      	cmp	r3, #0
 8011924:	dd00      	ble.n	8011928 <__kernel_rem_pio2+0x520>
 8011926:	e083      	b.n	8011a30 <__kernel_rem_pio2+0x628>
 8011928:	9d00      	ldr	r5, [sp, #0]
 801192a:	3c08      	subs	r4, #8
 801192c:	2d01      	cmp	r5, #1
 801192e:	dd00      	ble.n	8011932 <__kernel_rem_pio2+0x52a>
 8011930:	e0a0      	b.n	8011a74 <__kernel_rem_pio2+0x66c>
 8011932:	2400      	movs	r4, #0
 8011934:	0021      	movs	r1, r4
 8011936:	9b00      	ldr	r3, [sp, #0]
 8011938:	2b01      	cmp	r3, #1
 801193a:	dd00      	ble.n	801193e <__kernel_rem_pio2+0x536>
 801193c:	e0b8      	b.n	8011ab0 <__kernel_rem_pio2+0x6a8>
 801193e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011940:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8011942:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8011944:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8011946:	9851      	ldr	r0, [sp, #324]	; 0x144
 8011948:	2b00      	cmp	r3, #0
 801194a:	d000      	beq.n	801194e <__kernel_rem_pio2+0x546>
 801194c:	e0be      	b.n	8011acc <__kernel_rem_pio2+0x6c4>
 801194e:	0033      	movs	r3, r6
 8011950:	003a      	movs	r2, r7
 8011952:	9e07      	ldr	r6, [sp, #28]
 8011954:	6032      	str	r2, [r6, #0]
 8011956:	6073      	str	r3, [r6, #4]
 8011958:	002a      	movs	r2, r5
 801195a:	0003      	movs	r3, r0
 801195c:	60b2      	str	r2, [r6, #8]
 801195e:	60f3      	str	r3, [r6, #12]
 8011960:	0022      	movs	r2, r4
 8011962:	000b      	movs	r3, r1
 8011964:	6132      	str	r2, [r6, #16]
 8011966:	6173      	str	r3, [r6, #20]
 8011968:	e7c7      	b.n	80118fa <__kernel_rem_pio2+0x4f2>
 801196a:	9b00      	ldr	r3, [sp, #0]
 801196c:	aa4e      	add	r2, sp, #312	; 0x138
 801196e:	00db      	lsls	r3, r3, #3
 8011970:	18d3      	adds	r3, r2, r3
 8011972:	0028      	movs	r0, r5
 8011974:	681a      	ldr	r2, [r3, #0]
 8011976:	685b      	ldr	r3, [r3, #4]
 8011978:	0021      	movs	r1, r4
 801197a:	f7ef fc91 	bl	80012a0 <__aeabi_dadd>
 801197e:	0005      	movs	r5, r0
 8011980:	000c      	movs	r4, r1
 8011982:	9b00      	ldr	r3, [sp, #0]
 8011984:	3b01      	subs	r3, #1
 8011986:	9300      	str	r3, [sp, #0]
 8011988:	9b00      	ldr	r3, [sp, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	daed      	bge.n	801196a <__kernel_rem_pio2+0x562>
 801198e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <__kernel_rem_pio2+0x592>
 8011994:	2380      	movs	r3, #128	; 0x80
 8011996:	061b      	lsls	r3, r3, #24
 8011998:	18e4      	adds	r4, r4, r3
 801199a:	002a      	movs	r2, r5
 801199c:	0023      	movs	r3, r4
 801199e:	9907      	ldr	r1, [sp, #28]
 80119a0:	600a      	str	r2, [r1, #0]
 80119a2:	604b      	str	r3, [r1, #4]
 80119a4:	e7a9      	b.n	80118fa <__kernel_rem_pio2+0x4f2>
 80119a6:	9da4      	ldr	r5, [sp, #656]	; 0x290
 80119a8:	002c      	movs	r4, r5
 80119aa:	e7ed      	b.n	8011988 <__kernel_rem_pio2+0x580>
 80119ac:	00e3      	lsls	r3, r4, #3
 80119ae:	aa4e      	add	r2, sp, #312	; 0x138
 80119b0:	18d3      	adds	r3, r2, r3
 80119b2:	0030      	movs	r0, r6
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	0029      	movs	r1, r5
 80119ba:	f7ef fc71 	bl	80012a0 <__aeabi_dadd>
 80119be:	0006      	movs	r6, r0
 80119c0:	000d      	movs	r5, r1
 80119c2:	3c01      	subs	r4, #1
 80119c4:	2c00      	cmp	r4, #0
 80119c6:	daf1      	bge.n	80119ac <__kernel_rem_pio2+0x5a4>
 80119c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ca:	0029      	movs	r1, r5
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d002      	beq.n	80119d6 <__kernel_rem_pio2+0x5ce>
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	061b      	lsls	r3, r3, #24
 80119d4:	18e9      	adds	r1, r5, r3
 80119d6:	0032      	movs	r2, r6
 80119d8:	000b      	movs	r3, r1
 80119da:	9907      	ldr	r1, [sp, #28]
 80119dc:	2401      	movs	r4, #1
 80119de:	600a      	str	r2, [r1, #0]
 80119e0:	604b      	str	r3, [r1, #4]
 80119e2:	984e      	ldr	r0, [sp, #312]	; 0x138
 80119e4:	994f      	ldr	r1, [sp, #316]	; 0x13c
 80119e6:	002b      	movs	r3, r5
 80119e8:	f7f0 fe36 	bl	8002658 <__aeabi_dsub>
 80119ec:	0006      	movs	r6, r0
 80119ee:	000d      	movs	r5, r1
 80119f0:	9b00      	ldr	r3, [sp, #0]
 80119f2:	42a3      	cmp	r3, r4
 80119f4:	da0f      	bge.n	8011a16 <__kernel_rem_pio2+0x60e>
 80119f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <__kernel_rem_pio2+0x5fa>
 80119fc:	2380      	movs	r3, #128	; 0x80
 80119fe:	061b      	lsls	r3, r3, #24
 8011a00:	18ed      	adds	r5, r5, r3
 8011a02:	0032      	movs	r2, r6
 8011a04:	002b      	movs	r3, r5
 8011a06:	9907      	ldr	r1, [sp, #28]
 8011a08:	608a      	str	r2, [r1, #8]
 8011a0a:	60cb      	str	r3, [r1, #12]
 8011a0c:	e775      	b.n	80118fa <__kernel_rem_pio2+0x4f2>
 8011a0e:	2600      	movs	r6, #0
 8011a10:	9c00      	ldr	r4, [sp, #0]
 8011a12:	0035      	movs	r5, r6
 8011a14:	e7d6      	b.n	80119c4 <__kernel_rem_pio2+0x5bc>
 8011a16:	00e3      	lsls	r3, r4, #3
 8011a18:	aa4e      	add	r2, sp, #312	; 0x138
 8011a1a:	18d3      	adds	r3, r2, r3
 8011a1c:	0030      	movs	r0, r6
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	0029      	movs	r1, r5
 8011a24:	f7ef fc3c 	bl	80012a0 <__aeabi_dadd>
 8011a28:	3401      	adds	r4, #1
 8011a2a:	0006      	movs	r6, r0
 8011a2c:	000d      	movs	r5, r1
 8011a2e:	e7df      	b.n	80119f0 <__kernel_rem_pio2+0x5e8>
 8011a30:	9b02      	ldr	r3, [sp, #8]
 8011a32:	68ae      	ldr	r6, [r5, #8]
 8011a34:	68ef      	ldr	r7, [r5, #12]
 8011a36:	3b01      	subs	r3, #1
 8011a38:	9302      	str	r3, [sp, #8]
 8011a3a:	682a      	ldr	r2, [r5, #0]
 8011a3c:	686b      	ldr	r3, [r5, #4]
 8011a3e:	9204      	str	r2, [sp, #16]
 8011a40:	9305      	str	r3, [sp, #20]
 8011a42:	9804      	ldr	r0, [sp, #16]
 8011a44:	9905      	ldr	r1, [sp, #20]
 8011a46:	0032      	movs	r2, r6
 8011a48:	003b      	movs	r3, r7
 8011a4a:	f7ef fc29 	bl	80012a0 <__aeabi_dadd>
 8011a4e:	0002      	movs	r2, r0
 8011a50:	000b      	movs	r3, r1
 8011a52:	9008      	str	r0, [sp, #32]
 8011a54:	9109      	str	r1, [sp, #36]	; 0x24
 8011a56:	9804      	ldr	r0, [sp, #16]
 8011a58:	9905      	ldr	r1, [sp, #20]
 8011a5a:	f7f0 fdfd 	bl	8002658 <__aeabi_dsub>
 8011a5e:	0032      	movs	r2, r6
 8011a60:	003b      	movs	r3, r7
 8011a62:	f7ef fc1d 	bl	80012a0 <__aeabi_dadd>
 8011a66:	9a08      	ldr	r2, [sp, #32]
 8011a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a6a:	60a8      	str	r0, [r5, #8]
 8011a6c:	60e9      	str	r1, [r5, #12]
 8011a6e:	602a      	str	r2, [r5, #0]
 8011a70:	606b      	str	r3, [r5, #4]
 8011a72:	e754      	b.n	801191e <__kernel_rem_pio2+0x516>
 8011a74:	6826      	ldr	r6, [r4, #0]
 8011a76:	6867      	ldr	r7, [r4, #4]
 8011a78:	68a2      	ldr	r2, [r4, #8]
 8011a7a:	68e3      	ldr	r3, [r4, #12]
 8011a7c:	0030      	movs	r0, r6
 8011a7e:	0039      	movs	r1, r7
 8011a80:	9202      	str	r2, [sp, #8]
 8011a82:	9303      	str	r3, [sp, #12]
 8011a84:	f7ef fc0c 	bl	80012a0 <__aeabi_dadd>
 8011a88:	0002      	movs	r2, r0
 8011a8a:	000b      	movs	r3, r1
 8011a8c:	9004      	str	r0, [sp, #16]
 8011a8e:	9105      	str	r1, [sp, #20]
 8011a90:	0030      	movs	r0, r6
 8011a92:	0039      	movs	r1, r7
 8011a94:	f7f0 fde0 	bl	8002658 <__aeabi_dsub>
 8011a98:	9a02      	ldr	r2, [sp, #8]
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	f7ef fc00 	bl	80012a0 <__aeabi_dadd>
 8011aa0:	9a04      	ldr	r2, [sp, #16]
 8011aa2:	9b05      	ldr	r3, [sp, #20]
 8011aa4:	60a0      	str	r0, [r4, #8]
 8011aa6:	60e1      	str	r1, [r4, #12]
 8011aa8:	6022      	str	r2, [r4, #0]
 8011aaa:	6063      	str	r3, [r4, #4]
 8011aac:	3d01      	subs	r5, #1
 8011aae:	e73c      	b.n	801192a <__kernel_rem_pio2+0x522>
 8011ab0:	9b00      	ldr	r3, [sp, #0]
 8011ab2:	aa4e      	add	r2, sp, #312	; 0x138
 8011ab4:	00db      	lsls	r3, r3, #3
 8011ab6:	18d3      	adds	r3, r2, r3
 8011ab8:	0020      	movs	r0, r4
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	f7ef fbef 	bl	80012a0 <__aeabi_dadd>
 8011ac2:	9b00      	ldr	r3, [sp, #0]
 8011ac4:	0004      	movs	r4, r0
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	e734      	b.n	8011936 <__kernel_rem_pio2+0x52e>
 8011acc:	9b07      	ldr	r3, [sp, #28]
 8011ace:	9a07      	ldr	r2, [sp, #28]
 8011ad0:	601f      	str	r7, [r3, #0]
 8011ad2:	2380      	movs	r3, #128	; 0x80
 8011ad4:	061b      	lsls	r3, r3, #24
 8011ad6:	18f6      	adds	r6, r6, r3
 8011ad8:	18c0      	adds	r0, r0, r3
 8011ada:	18c9      	adds	r1, r1, r3
 8011adc:	6056      	str	r6, [r2, #4]
 8011ade:	6095      	str	r5, [r2, #8]
 8011ae0:	60d0      	str	r0, [r2, #12]
 8011ae2:	6114      	str	r4, [r2, #16]
 8011ae4:	6151      	str	r1, [r2, #20]
 8011ae6:	e708      	b.n	80118fa <__kernel_rem_pio2+0x4f2>
 8011ae8:	41700000 	.word	0x41700000
 8011aec:	3e700000 	.word	0x3e700000
 8011af0:	08012a78 	.word	0x08012a78

08011af4 <__kernel_sin>:
 8011af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af6:	b089      	sub	sp, #36	; 0x24
 8011af8:	9202      	str	r2, [sp, #8]
 8011afa:	9303      	str	r3, [sp, #12]
 8011afc:	22f9      	movs	r2, #249	; 0xf9
 8011afe:	004b      	lsls	r3, r1, #1
 8011b00:	0007      	movs	r7, r0
 8011b02:	000e      	movs	r6, r1
 8011b04:	085b      	lsrs	r3, r3, #1
 8011b06:	0592      	lsls	r2, r2, #22
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	da03      	bge.n	8011b14 <__kernel_sin+0x20>
 8011b0c:	f7f1 f954 	bl	8002db8 <__aeabi_d2iz>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d04c      	beq.n	8011bae <__kernel_sin+0xba>
 8011b14:	003a      	movs	r2, r7
 8011b16:	0033      	movs	r3, r6
 8011b18:	0038      	movs	r0, r7
 8011b1a:	0031      	movs	r1, r6
 8011b1c:	f7f0 fb30 	bl	8002180 <__aeabi_dmul>
 8011b20:	0004      	movs	r4, r0
 8011b22:	000d      	movs	r5, r1
 8011b24:	0002      	movs	r2, r0
 8011b26:	000b      	movs	r3, r1
 8011b28:	0038      	movs	r0, r7
 8011b2a:	0031      	movs	r1, r6
 8011b2c:	f7f0 fb28 	bl	8002180 <__aeabi_dmul>
 8011b30:	4a39      	ldr	r2, [pc, #228]	; (8011c18 <__kernel_sin+0x124>)
 8011b32:	9000      	str	r0, [sp, #0]
 8011b34:	9101      	str	r1, [sp, #4]
 8011b36:	4b39      	ldr	r3, [pc, #228]	; (8011c1c <__kernel_sin+0x128>)
 8011b38:	0020      	movs	r0, r4
 8011b3a:	0029      	movs	r1, r5
 8011b3c:	f7f0 fb20 	bl	8002180 <__aeabi_dmul>
 8011b40:	4a37      	ldr	r2, [pc, #220]	; (8011c20 <__kernel_sin+0x12c>)
 8011b42:	4b38      	ldr	r3, [pc, #224]	; (8011c24 <__kernel_sin+0x130>)
 8011b44:	f7f0 fd88 	bl	8002658 <__aeabi_dsub>
 8011b48:	0022      	movs	r2, r4
 8011b4a:	002b      	movs	r3, r5
 8011b4c:	f7f0 fb18 	bl	8002180 <__aeabi_dmul>
 8011b50:	4a35      	ldr	r2, [pc, #212]	; (8011c28 <__kernel_sin+0x134>)
 8011b52:	4b36      	ldr	r3, [pc, #216]	; (8011c2c <__kernel_sin+0x138>)
 8011b54:	f7ef fba4 	bl	80012a0 <__aeabi_dadd>
 8011b58:	0022      	movs	r2, r4
 8011b5a:	002b      	movs	r3, r5
 8011b5c:	f7f0 fb10 	bl	8002180 <__aeabi_dmul>
 8011b60:	4a33      	ldr	r2, [pc, #204]	; (8011c30 <__kernel_sin+0x13c>)
 8011b62:	4b34      	ldr	r3, [pc, #208]	; (8011c34 <__kernel_sin+0x140>)
 8011b64:	f7f0 fd78 	bl	8002658 <__aeabi_dsub>
 8011b68:	0022      	movs	r2, r4
 8011b6a:	002b      	movs	r3, r5
 8011b6c:	f7f0 fb08 	bl	8002180 <__aeabi_dmul>
 8011b70:	4b31      	ldr	r3, [pc, #196]	; (8011c38 <__kernel_sin+0x144>)
 8011b72:	4a32      	ldr	r2, [pc, #200]	; (8011c3c <__kernel_sin+0x148>)
 8011b74:	f7ef fb94 	bl	80012a0 <__aeabi_dadd>
 8011b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b7a:	9004      	str	r0, [sp, #16]
 8011b7c:	9105      	str	r1, [sp, #20]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d119      	bne.n	8011bb6 <__kernel_sin+0xc2>
 8011b82:	0002      	movs	r2, r0
 8011b84:	000b      	movs	r3, r1
 8011b86:	0020      	movs	r0, r4
 8011b88:	0029      	movs	r1, r5
 8011b8a:	f7f0 faf9 	bl	8002180 <__aeabi_dmul>
 8011b8e:	4a2c      	ldr	r2, [pc, #176]	; (8011c40 <__kernel_sin+0x14c>)
 8011b90:	4b2c      	ldr	r3, [pc, #176]	; (8011c44 <__kernel_sin+0x150>)
 8011b92:	f7f0 fd61 	bl	8002658 <__aeabi_dsub>
 8011b96:	9a00      	ldr	r2, [sp, #0]
 8011b98:	9b01      	ldr	r3, [sp, #4]
 8011b9a:	f7f0 faf1 	bl	8002180 <__aeabi_dmul>
 8011b9e:	0002      	movs	r2, r0
 8011ba0:	000b      	movs	r3, r1
 8011ba2:	0038      	movs	r0, r7
 8011ba4:	0031      	movs	r1, r6
 8011ba6:	f7ef fb7b 	bl	80012a0 <__aeabi_dadd>
 8011baa:	0007      	movs	r7, r0
 8011bac:	000e      	movs	r6, r1
 8011bae:	0038      	movs	r0, r7
 8011bb0:	0031      	movs	r1, r6
 8011bb2:	b009      	add	sp, #36	; 0x24
 8011bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	9802      	ldr	r0, [sp, #8]
 8011bba:	9903      	ldr	r1, [sp, #12]
 8011bbc:	4b22      	ldr	r3, [pc, #136]	; (8011c48 <__kernel_sin+0x154>)
 8011bbe:	f7f0 fadf 	bl	8002180 <__aeabi_dmul>
 8011bc2:	9a04      	ldr	r2, [sp, #16]
 8011bc4:	9b05      	ldr	r3, [sp, #20]
 8011bc6:	9006      	str	r0, [sp, #24]
 8011bc8:	9107      	str	r1, [sp, #28]
 8011bca:	9800      	ldr	r0, [sp, #0]
 8011bcc:	9901      	ldr	r1, [sp, #4]
 8011bce:	f7f0 fad7 	bl	8002180 <__aeabi_dmul>
 8011bd2:	0002      	movs	r2, r0
 8011bd4:	000b      	movs	r3, r1
 8011bd6:	9806      	ldr	r0, [sp, #24]
 8011bd8:	9907      	ldr	r1, [sp, #28]
 8011bda:	f7f0 fd3d 	bl	8002658 <__aeabi_dsub>
 8011bde:	0022      	movs	r2, r4
 8011be0:	002b      	movs	r3, r5
 8011be2:	f7f0 facd 	bl	8002180 <__aeabi_dmul>
 8011be6:	9a02      	ldr	r2, [sp, #8]
 8011be8:	9b03      	ldr	r3, [sp, #12]
 8011bea:	f7f0 fd35 	bl	8002658 <__aeabi_dsub>
 8011bee:	4a14      	ldr	r2, [pc, #80]	; (8011c40 <__kernel_sin+0x14c>)
 8011bf0:	0004      	movs	r4, r0
 8011bf2:	000d      	movs	r5, r1
 8011bf4:	9800      	ldr	r0, [sp, #0]
 8011bf6:	9901      	ldr	r1, [sp, #4]
 8011bf8:	4b12      	ldr	r3, [pc, #72]	; (8011c44 <__kernel_sin+0x150>)
 8011bfa:	f7f0 fac1 	bl	8002180 <__aeabi_dmul>
 8011bfe:	0002      	movs	r2, r0
 8011c00:	000b      	movs	r3, r1
 8011c02:	0020      	movs	r0, r4
 8011c04:	0029      	movs	r1, r5
 8011c06:	f7ef fb4b 	bl	80012a0 <__aeabi_dadd>
 8011c0a:	0002      	movs	r2, r0
 8011c0c:	000b      	movs	r3, r1
 8011c0e:	0038      	movs	r0, r7
 8011c10:	0031      	movs	r1, r6
 8011c12:	f7f0 fd21 	bl	8002658 <__aeabi_dsub>
 8011c16:	e7c8      	b.n	8011baa <__kernel_sin+0xb6>
 8011c18:	5acfd57c 	.word	0x5acfd57c
 8011c1c:	3de5d93a 	.word	0x3de5d93a
 8011c20:	8a2b9ceb 	.word	0x8a2b9ceb
 8011c24:	3e5ae5e6 	.word	0x3e5ae5e6
 8011c28:	57b1fe7d 	.word	0x57b1fe7d
 8011c2c:	3ec71de3 	.word	0x3ec71de3
 8011c30:	19c161d5 	.word	0x19c161d5
 8011c34:	3f2a01a0 	.word	0x3f2a01a0
 8011c38:	3f811111 	.word	0x3f811111
 8011c3c:	1110f8a6 	.word	0x1110f8a6
 8011c40:	55555549 	.word	0x55555549
 8011c44:	3fc55555 	.word	0x3fc55555
 8011c48:	3fe00000 	.word	0x3fe00000

08011c4c <finite>:
 8011c4c:	4b02      	ldr	r3, [pc, #8]	; (8011c58 <finite+0xc>)
 8011c4e:	0048      	lsls	r0, r1, #1
 8011c50:	0840      	lsrs	r0, r0, #1
 8011c52:	18c0      	adds	r0, r0, r3
 8011c54:	0fc0      	lsrs	r0, r0, #31
 8011c56:	4770      	bx	lr
 8011c58:	80100000 	.word	0x80100000

08011c5c <floor>:
 8011c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c5e:	004b      	lsls	r3, r1, #1
 8011c60:	4a3d      	ldr	r2, [pc, #244]	; (8011d58 <floor+0xfc>)
 8011c62:	0d5b      	lsrs	r3, r3, #21
 8011c64:	189f      	adds	r7, r3, r2
 8011c66:	4684      	mov	ip, r0
 8011c68:	000e      	movs	r6, r1
 8011c6a:	000d      	movs	r5, r1
 8011c6c:	0004      	movs	r4, r0
 8011c6e:	9001      	str	r0, [sp, #4]
 8011c70:	2f13      	cmp	r7, #19
 8011c72:	dc34      	bgt.n	8011cde <floor+0x82>
 8011c74:	2f00      	cmp	r7, #0
 8011c76:	da16      	bge.n	8011ca6 <floor+0x4a>
 8011c78:	4a38      	ldr	r2, [pc, #224]	; (8011d5c <floor+0x100>)
 8011c7a:	4b39      	ldr	r3, [pc, #228]	; (8011d60 <floor+0x104>)
 8011c7c:	4660      	mov	r0, ip
 8011c7e:	0031      	movs	r1, r6
 8011c80:	f7ef fb0e 	bl	80012a0 <__aeabi_dadd>
 8011c84:	2200      	movs	r2, #0
 8011c86:	2300      	movs	r3, #0
 8011c88:	f7ee fbf6 	bl	8000478 <__aeabi_dcmpgt>
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d007      	beq.n	8011ca0 <floor+0x44>
 8011c90:	2e00      	cmp	r6, #0
 8011c92:	da5d      	bge.n	8011d50 <floor+0xf4>
 8011c94:	0073      	lsls	r3, r6, #1
 8011c96:	085b      	lsrs	r3, r3, #1
 8011c98:	431c      	orrs	r4, r3
 8011c9a:	d001      	beq.n	8011ca0 <floor+0x44>
 8011c9c:	2400      	movs	r4, #0
 8011c9e:	4d31      	ldr	r5, [pc, #196]	; (8011d64 <floor+0x108>)
 8011ca0:	46a4      	mov	ip, r4
 8011ca2:	002e      	movs	r6, r5
 8011ca4:	e029      	b.n	8011cfa <floor+0x9e>
 8011ca6:	4b30      	ldr	r3, [pc, #192]	; (8011d68 <floor+0x10c>)
 8011ca8:	413b      	asrs	r3, r7
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	400b      	ands	r3, r1
 8011cae:	4303      	orrs	r3, r0
 8011cb0:	d023      	beq.n	8011cfa <floor+0x9e>
 8011cb2:	4a2a      	ldr	r2, [pc, #168]	; (8011d5c <floor+0x100>)
 8011cb4:	4b2a      	ldr	r3, [pc, #168]	; (8011d60 <floor+0x104>)
 8011cb6:	4660      	mov	r0, ip
 8011cb8:	0031      	movs	r1, r6
 8011cba:	f7ef faf1 	bl	80012a0 <__aeabi_dadd>
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f7ee fbd9 	bl	8000478 <__aeabi_dcmpgt>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d0ea      	beq.n	8011ca0 <floor+0x44>
 8011cca:	2e00      	cmp	r6, #0
 8011ccc:	da03      	bge.n	8011cd6 <floor+0x7a>
 8011cce:	2380      	movs	r3, #128	; 0x80
 8011cd0:	035b      	lsls	r3, r3, #13
 8011cd2:	413b      	asrs	r3, r7
 8011cd4:	18f5      	adds	r5, r6, r3
 8011cd6:	9b00      	ldr	r3, [sp, #0]
 8011cd8:	2400      	movs	r4, #0
 8011cda:	439d      	bics	r5, r3
 8011cdc:	e7e0      	b.n	8011ca0 <floor+0x44>
 8011cde:	2f33      	cmp	r7, #51	; 0x33
 8011ce0:	dd0f      	ble.n	8011d02 <floor+0xa6>
 8011ce2:	2380      	movs	r3, #128	; 0x80
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	429f      	cmp	r7, r3
 8011ce8:	d107      	bne.n	8011cfa <floor+0x9e>
 8011cea:	0002      	movs	r2, r0
 8011cec:	000b      	movs	r3, r1
 8011cee:	4660      	mov	r0, ip
 8011cf0:	0031      	movs	r1, r6
 8011cf2:	f7ef fad5 	bl	80012a0 <__aeabi_dadd>
 8011cf6:	4684      	mov	ip, r0
 8011cf8:	000e      	movs	r6, r1
 8011cfa:	4660      	mov	r0, ip
 8011cfc:	0031      	movs	r1, r6
 8011cfe:	b003      	add	sp, #12
 8011d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d02:	4a1a      	ldr	r2, [pc, #104]	; (8011d6c <floor+0x110>)
 8011d04:	189b      	adds	r3, r3, r2
 8011d06:	2201      	movs	r2, #1
 8011d08:	4252      	negs	r2, r2
 8011d0a:	40da      	lsrs	r2, r3
 8011d0c:	9200      	str	r2, [sp, #0]
 8011d0e:	4210      	tst	r0, r2
 8011d10:	d0f3      	beq.n	8011cfa <floor+0x9e>
 8011d12:	4a12      	ldr	r2, [pc, #72]	; (8011d5c <floor+0x100>)
 8011d14:	4b12      	ldr	r3, [pc, #72]	; (8011d60 <floor+0x104>)
 8011d16:	4660      	mov	r0, ip
 8011d18:	0031      	movs	r1, r6
 8011d1a:	f7ef fac1 	bl	80012a0 <__aeabi_dadd>
 8011d1e:	2200      	movs	r2, #0
 8011d20:	2300      	movs	r3, #0
 8011d22:	f7ee fba9 	bl	8000478 <__aeabi_dcmpgt>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d0ba      	beq.n	8011ca0 <floor+0x44>
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	da02      	bge.n	8011d34 <floor+0xd8>
 8011d2e:	2f14      	cmp	r7, #20
 8011d30:	d103      	bne.n	8011d3a <floor+0xde>
 8011d32:	3501      	adds	r5, #1
 8011d34:	9b00      	ldr	r3, [sp, #0]
 8011d36:	439c      	bics	r4, r3
 8011d38:	e7b2      	b.n	8011ca0 <floor+0x44>
 8011d3a:	2334      	movs	r3, #52	; 0x34
 8011d3c:	1bdf      	subs	r7, r3, r7
 8011d3e:	3b33      	subs	r3, #51	; 0x33
 8011d40:	40bb      	lsls	r3, r7
 8011d42:	18e4      	adds	r4, r4, r3
 8011d44:	9b01      	ldr	r3, [sp, #4]
 8011d46:	429c      	cmp	r4, r3
 8011d48:	419b      	sbcs	r3, r3
 8011d4a:	425b      	negs	r3, r3
 8011d4c:	18f5      	adds	r5, r6, r3
 8011d4e:	e7f1      	b.n	8011d34 <floor+0xd8>
 8011d50:	2400      	movs	r4, #0
 8011d52:	0025      	movs	r5, r4
 8011d54:	e7a4      	b.n	8011ca0 <floor+0x44>
 8011d56:	46c0      	nop			; (mov r8, r8)
 8011d58:	fffffc01 	.word	0xfffffc01
 8011d5c:	8800759c 	.word	0x8800759c
 8011d60:	7e37e43c 	.word	0x7e37e43c
 8011d64:	bff00000 	.word	0xbff00000
 8011d68:	000fffff 	.word	0x000fffff
 8011d6c:	fffffbed 	.word	0xfffffbed

08011d70 <nan>:
 8011d70:	2000      	movs	r0, #0
 8011d72:	4901      	ldr	r1, [pc, #4]	; (8011d78 <nan+0x8>)
 8011d74:	4770      	bx	lr
 8011d76:	46c0      	nop			; (mov r8, r8)
 8011d78:	7ff80000 	.word	0x7ff80000

08011d7c <rint>:
 8011d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d7e:	004a      	lsls	r2, r1, #1
 8011d80:	4e3e      	ldr	r6, [pc, #248]	; (8011e7c <rint+0x100>)
 8011d82:	0d52      	lsrs	r2, r2, #21
 8011d84:	b085      	sub	sp, #20
 8011d86:	1996      	adds	r6, r2, r6
 8011d88:	000d      	movs	r5, r1
 8011d8a:	0003      	movs	r3, r0
 8011d8c:	9101      	str	r1, [sp, #4]
 8011d8e:	0fcc      	lsrs	r4, r1, #31
 8011d90:	2e13      	cmp	r6, #19
 8011d92:	dc57      	bgt.n	8011e44 <rint+0xc8>
 8011d94:	2e00      	cmp	r6, #0
 8011d96:	da2a      	bge.n	8011dee <rint+0x72>
 8011d98:	004a      	lsls	r2, r1, #1
 8011d9a:	0852      	lsrs	r2, r2, #1
 8011d9c:	4302      	orrs	r2, r0
 8011d9e:	d024      	beq.n	8011dea <rint+0x6e>
 8011da0:	030a      	lsls	r2, r1, #12
 8011da2:	0b12      	lsrs	r2, r2, #12
 8011da4:	4302      	orrs	r2, r0
 8011da6:	4253      	negs	r3, r2
 8011da8:	4313      	orrs	r3, r2
 8011daa:	2280      	movs	r2, #128	; 0x80
 8011dac:	0c4d      	lsrs	r5, r1, #17
 8011dae:	0312      	lsls	r2, r2, #12
 8011db0:	0b1b      	lsrs	r3, r3, #12
 8011db2:	4013      	ands	r3, r2
 8011db4:	046d      	lsls	r5, r5, #17
 8011db6:	432b      	orrs	r3, r5
 8011db8:	0019      	movs	r1, r3
 8011dba:	4b31      	ldr	r3, [pc, #196]	; (8011e80 <rint+0x104>)
 8011dbc:	00e2      	lsls	r2, r4, #3
 8011dbe:	189b      	adds	r3, r3, r2
 8011dc0:	681e      	ldr	r6, [r3, #0]
 8011dc2:	685f      	ldr	r7, [r3, #4]
 8011dc4:	0002      	movs	r2, r0
 8011dc6:	000b      	movs	r3, r1
 8011dc8:	0030      	movs	r0, r6
 8011dca:	0039      	movs	r1, r7
 8011dcc:	f7ef fa68 	bl	80012a0 <__aeabi_dadd>
 8011dd0:	9002      	str	r0, [sp, #8]
 8011dd2:	9103      	str	r1, [sp, #12]
 8011dd4:	9802      	ldr	r0, [sp, #8]
 8011dd6:	9903      	ldr	r1, [sp, #12]
 8011dd8:	003b      	movs	r3, r7
 8011dda:	0032      	movs	r2, r6
 8011ddc:	f7f0 fc3c 	bl	8002658 <__aeabi_dsub>
 8011de0:	004b      	lsls	r3, r1, #1
 8011de2:	085b      	lsrs	r3, r3, #1
 8011de4:	07e4      	lsls	r4, r4, #31
 8011de6:	4323      	orrs	r3, r4
 8011de8:	0019      	movs	r1, r3
 8011dea:	b005      	add	sp, #20
 8011dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dee:	4a25      	ldr	r2, [pc, #148]	; (8011e84 <rint+0x108>)
 8011df0:	4132      	asrs	r2, r6
 8011df2:	0017      	movs	r7, r2
 8011df4:	400f      	ands	r7, r1
 8011df6:	4307      	orrs	r7, r0
 8011df8:	d0f7      	beq.n	8011dea <rint+0x6e>
 8011dfa:	0852      	lsrs	r2, r2, #1
 8011dfc:	0011      	movs	r1, r2
 8011dfe:	4029      	ands	r1, r5
 8011e00:	430b      	orrs	r3, r1
 8011e02:	d00a      	beq.n	8011e1a <rint+0x9e>
 8011e04:	2300      	movs	r3, #0
 8011e06:	2e13      	cmp	r6, #19
 8011e08:	d101      	bne.n	8011e0e <rint+0x92>
 8011e0a:	2380      	movs	r3, #128	; 0x80
 8011e0c:	061b      	lsls	r3, r3, #24
 8011e0e:	2780      	movs	r7, #128	; 0x80
 8011e10:	02ff      	lsls	r7, r7, #11
 8011e12:	4137      	asrs	r7, r6
 8011e14:	4395      	bics	r5, r2
 8011e16:	432f      	orrs	r7, r5
 8011e18:	9701      	str	r7, [sp, #4]
 8011e1a:	9901      	ldr	r1, [sp, #4]
 8011e1c:	001a      	movs	r2, r3
 8011e1e:	000b      	movs	r3, r1
 8011e20:	4917      	ldr	r1, [pc, #92]	; (8011e80 <rint+0x104>)
 8011e22:	00e4      	lsls	r4, r4, #3
 8011e24:	190c      	adds	r4, r1, r4
 8011e26:	6865      	ldr	r5, [r4, #4]
 8011e28:	6824      	ldr	r4, [r4, #0]
 8011e2a:	0020      	movs	r0, r4
 8011e2c:	0029      	movs	r1, r5
 8011e2e:	f7ef fa37 	bl	80012a0 <__aeabi_dadd>
 8011e32:	9002      	str	r0, [sp, #8]
 8011e34:	9103      	str	r1, [sp, #12]
 8011e36:	9802      	ldr	r0, [sp, #8]
 8011e38:	9903      	ldr	r1, [sp, #12]
 8011e3a:	0022      	movs	r2, r4
 8011e3c:	002b      	movs	r3, r5
 8011e3e:	f7f0 fc0b 	bl	8002658 <__aeabi_dsub>
 8011e42:	e7d2      	b.n	8011dea <rint+0x6e>
 8011e44:	2e33      	cmp	r6, #51	; 0x33
 8011e46:	dd08      	ble.n	8011e5a <rint+0xde>
 8011e48:	2380      	movs	r3, #128	; 0x80
 8011e4a:	00db      	lsls	r3, r3, #3
 8011e4c:	429e      	cmp	r6, r3
 8011e4e:	d1cc      	bne.n	8011dea <rint+0x6e>
 8011e50:	0002      	movs	r2, r0
 8011e52:	000b      	movs	r3, r1
 8011e54:	f7ef fa24 	bl	80012a0 <__aeabi_dadd>
 8011e58:	e7c7      	b.n	8011dea <rint+0x6e>
 8011e5a:	2601      	movs	r6, #1
 8011e5c:	4d0a      	ldr	r5, [pc, #40]	; (8011e88 <rint+0x10c>)
 8011e5e:	4276      	negs	r6, r6
 8011e60:	1952      	adds	r2, r2, r5
 8011e62:	40d6      	lsrs	r6, r2
 8011e64:	4206      	tst	r6, r0
 8011e66:	d0c0      	beq.n	8011dea <rint+0x6e>
 8011e68:	0876      	lsrs	r6, r6, #1
 8011e6a:	4206      	tst	r6, r0
 8011e6c:	d0d5      	beq.n	8011e1a <rint+0x9e>
 8011e6e:	2180      	movs	r1, #128	; 0x80
 8011e70:	05c9      	lsls	r1, r1, #23
 8011e72:	4111      	asrs	r1, r2
 8011e74:	43b3      	bics	r3, r6
 8011e76:	430b      	orrs	r3, r1
 8011e78:	e7cf      	b.n	8011e1a <rint+0x9e>
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	fffffc01 	.word	0xfffffc01
 8011e80:	08012ac8 	.word	0x08012ac8
 8011e84:	000fffff 	.word	0x000fffff
 8011e88:	fffffbed 	.word	0xfffffbed

08011e8c <scalbn>:
 8011e8c:	004b      	lsls	r3, r1, #1
 8011e8e:	b570      	push	{r4, r5, r6, lr}
 8011e90:	0d5b      	lsrs	r3, r3, #21
 8011e92:	0014      	movs	r4, r2
 8011e94:	000a      	movs	r2, r1
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10d      	bne.n	8011eb6 <scalbn+0x2a>
 8011e9a:	004b      	lsls	r3, r1, #1
 8011e9c:	085b      	lsrs	r3, r3, #1
 8011e9e:	4303      	orrs	r3, r0
 8011ea0:	d010      	beq.n	8011ec4 <scalbn+0x38>
 8011ea2:	4b27      	ldr	r3, [pc, #156]	; (8011f40 <scalbn+0xb4>)
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f7f0 f96b 	bl	8002180 <__aeabi_dmul>
 8011eaa:	4b26      	ldr	r3, [pc, #152]	; (8011f44 <scalbn+0xb8>)
 8011eac:	429c      	cmp	r4, r3
 8011eae:	da0a      	bge.n	8011ec6 <scalbn+0x3a>
 8011eb0:	4a25      	ldr	r2, [pc, #148]	; (8011f48 <scalbn+0xbc>)
 8011eb2:	4b26      	ldr	r3, [pc, #152]	; (8011f4c <scalbn+0xc0>)
 8011eb4:	e019      	b.n	8011eea <scalbn+0x5e>
 8011eb6:	4d26      	ldr	r5, [pc, #152]	; (8011f50 <scalbn+0xc4>)
 8011eb8:	42ab      	cmp	r3, r5
 8011eba:	d108      	bne.n	8011ece <scalbn+0x42>
 8011ebc:	0002      	movs	r2, r0
 8011ebe:	000b      	movs	r3, r1
 8011ec0:	f7ef f9ee 	bl	80012a0 <__aeabi_dadd>
 8011ec4:	bd70      	pop	{r4, r5, r6, pc}
 8011ec6:	000a      	movs	r2, r1
 8011ec8:	004b      	lsls	r3, r1, #1
 8011eca:	0d5b      	lsrs	r3, r3, #21
 8011ecc:	3b36      	subs	r3, #54	; 0x36
 8011ece:	4d21      	ldr	r5, [pc, #132]	; (8011f54 <scalbn+0xc8>)
 8011ed0:	18e3      	adds	r3, r4, r3
 8011ed2:	42ab      	cmp	r3, r5
 8011ed4:	dd0c      	ble.n	8011ef0 <scalbn+0x64>
 8011ed6:	4c20      	ldr	r4, [pc, #128]	; (8011f58 <scalbn+0xcc>)
 8011ed8:	4d20      	ldr	r5, [pc, #128]	; (8011f5c <scalbn+0xd0>)
 8011eda:	2900      	cmp	r1, #0
 8011edc:	da01      	bge.n	8011ee2 <scalbn+0x56>
 8011ede:	4c1e      	ldr	r4, [pc, #120]	; (8011f58 <scalbn+0xcc>)
 8011ee0:	4d1f      	ldr	r5, [pc, #124]	; (8011f60 <scalbn+0xd4>)
 8011ee2:	0020      	movs	r0, r4
 8011ee4:	0029      	movs	r1, r5
 8011ee6:	4a1c      	ldr	r2, [pc, #112]	; (8011f58 <scalbn+0xcc>)
 8011ee8:	4b1c      	ldr	r3, [pc, #112]	; (8011f5c <scalbn+0xd0>)
 8011eea:	f7f0 f949 	bl	8002180 <__aeabi_dmul>
 8011eee:	e7e9      	b.n	8011ec4 <scalbn+0x38>
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	dd05      	ble.n	8011f00 <scalbn+0x74>
 8011ef4:	4c1b      	ldr	r4, [pc, #108]	; (8011f64 <scalbn+0xd8>)
 8011ef6:	051b      	lsls	r3, r3, #20
 8011ef8:	4022      	ands	r2, r4
 8011efa:	431a      	orrs	r2, r3
 8011efc:	0011      	movs	r1, r2
 8011efe:	e7e1      	b.n	8011ec4 <scalbn+0x38>
 8011f00:	001d      	movs	r5, r3
 8011f02:	3535      	adds	r5, #53	; 0x35
 8011f04:	da13      	bge.n	8011f2e <scalbn+0xa2>
 8011f06:	4a18      	ldr	r2, [pc, #96]	; (8011f68 <scalbn+0xdc>)
 8011f08:	0fcb      	lsrs	r3, r1, #31
 8011f0a:	4294      	cmp	r4, r2
 8011f0c:	dd08      	ble.n	8011f20 <scalbn+0x94>
 8011f0e:	4812      	ldr	r0, [pc, #72]	; (8011f58 <scalbn+0xcc>)
 8011f10:	4912      	ldr	r1, [pc, #72]	; (8011f5c <scalbn+0xd0>)
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <scalbn+0x8e>
 8011f16:	4810      	ldr	r0, [pc, #64]	; (8011f58 <scalbn+0xcc>)
 8011f18:	4911      	ldr	r1, [pc, #68]	; (8011f60 <scalbn+0xd4>)
 8011f1a:	4a0f      	ldr	r2, [pc, #60]	; (8011f58 <scalbn+0xcc>)
 8011f1c:	4b0f      	ldr	r3, [pc, #60]	; (8011f5c <scalbn+0xd0>)
 8011f1e:	e7e4      	b.n	8011eea <scalbn+0x5e>
 8011f20:	4809      	ldr	r0, [pc, #36]	; (8011f48 <scalbn+0xbc>)
 8011f22:	490a      	ldr	r1, [pc, #40]	; (8011f4c <scalbn+0xc0>)
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d0c3      	beq.n	8011eb0 <scalbn+0x24>
 8011f28:	4807      	ldr	r0, [pc, #28]	; (8011f48 <scalbn+0xbc>)
 8011f2a:	4910      	ldr	r1, [pc, #64]	; (8011f6c <scalbn+0xe0>)
 8011f2c:	e7c0      	b.n	8011eb0 <scalbn+0x24>
 8011f2e:	4c0d      	ldr	r4, [pc, #52]	; (8011f64 <scalbn+0xd8>)
 8011f30:	3336      	adds	r3, #54	; 0x36
 8011f32:	4022      	ands	r2, r4
 8011f34:	051b      	lsls	r3, r3, #20
 8011f36:	4313      	orrs	r3, r2
 8011f38:	0019      	movs	r1, r3
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	4b0c      	ldr	r3, [pc, #48]	; (8011f70 <scalbn+0xe4>)
 8011f3e:	e7d4      	b.n	8011eea <scalbn+0x5e>
 8011f40:	43500000 	.word	0x43500000
 8011f44:	ffff3cb0 	.word	0xffff3cb0
 8011f48:	c2f8f359 	.word	0xc2f8f359
 8011f4c:	01a56e1f 	.word	0x01a56e1f
 8011f50:	000007ff 	.word	0x000007ff
 8011f54:	000007fe 	.word	0x000007fe
 8011f58:	8800759c 	.word	0x8800759c
 8011f5c:	7e37e43c 	.word	0x7e37e43c
 8011f60:	fe37e43c 	.word	0xfe37e43c
 8011f64:	800fffff 	.word	0x800fffff
 8011f68:	0000c350 	.word	0x0000c350
 8011f6c:	81a56e1f 	.word	0x81a56e1f
 8011f70:	3c900000 	.word	0x3c900000

08011f74 <_init>:
 8011f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f76:	46c0      	nop			; (mov r8, r8)
 8011f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f7a:	bc08      	pop	{r3}
 8011f7c:	469e      	mov	lr, r3
 8011f7e:	4770      	bx	lr

08011f80 <_fini>:
 8011f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f82:	46c0      	nop			; (mov r8, r8)
 8011f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f86:	bc08      	pop	{r3}
 8011f88:	469e      	mov	lr, r3
 8011f8a:	4770      	bx	lr
